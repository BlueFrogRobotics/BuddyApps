<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OS</name>
    </assembly>
    <members>
        <member name="T:Buddy.Mood">
            <summary>
            Mood element of the robot. It is an helper component combining Face, LED and moving commands.
            </summary>
        </member>
        <member name="M:Buddy.Mood.Set(Buddy.MoodType,System.Boolean,System.Boolean)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iMove">Specify if the robot must move according to the wanted mood</param>
            <param name="iSound">Does the robot must make a sound with its mood ?</param>
        </member>
        <member name="M:Buddy.Mood.Set(Buddy.MoodType,System.Collections.Generic.List{Buddy.Command.ACommand},System.Boolean)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iScheduledMoveCommands">Moving commands to execute</param>
            <param name="iSound">Does the robot must make a sound with its mood ?</param>
        </member>
        <member name="M:Buddy.Mood.Set(Buddy.MoodType,System.Collections.Generic.List{Buddy.Command.ACommand},Buddy.VoiceSound)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iScheduledMoveCommands">Moving commands to execute</param>
            <param name="iSound">Does the robot must make a sound with its mood ?</param>
        </member>
        <member name="T:Buddy.ITrackable">
            <summary>
            Make the component Error-trackable
            </summary>
        </member>
        <member name="P:Buddy.ITrackable.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.Battery">
            <summary>
            Battery component of the robot. Its autonomy is about 6-8 hours.
            Its voltage never should be under 9.5 volts
            </summary>
        </member>
        <member name="P:Buddy.Battery.MaxVoltage">
            <summary>
            Maximum value of the battery in volts.
            </summary>
        </member>
        <member name="P:Buddy.Battery.MinVoltage">
            <summary>
            Minimum value of the battery in volts.
            </summary>
        </member>
        <member name="P:Buddy.Battery.Volts">
            <summary>
            Battery's value in volts.
            </summary>
            <returns>Instant battery's voltage, in volts</returns>
        </member>
        <member name="P:Buddy.Battery.EnergyLevel">
            <summary>
            The purcentage of the battery's recharge.
            </summary>
        </member>
        <member name="P:Buddy.Battery.SuppliesPower">
            <summary>
            Let the battery provide power to the robot or not.
            </summary>
            <remarks> You have to put the value to true tu use Buddy's functionnalities.</remarks>
        </member>
        <member name="P:Buddy.Battery.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.CliffSensor">
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            The final robot will have 4 of those sensors.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensor.Distance">
            <summary>
            The distance detected by the sensor, in meters. 
            </summary>
        </member>
        <member name="P:Buddy.CliffSensor.IsCliff">
            <summary>
            True if a cliff is detected by the sensor.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensor.MaxDistance">
            <summary>
            The maximum distance for detection of the cliff sensor, in meters.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensor.MinDistance">
            <summary>
            The minimum distance for detection of the cliff sensor, in meters.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.CliffSensors">
            <summary>
            Set of 4 cliff sensor components.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensors.FrontLeft">
            <summary>
            The front left cliff sensor.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensors.FrontRight">
            <summary>
            The front right cliff sensor.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensors.BackLeft">
            <summary>
            The back left cliff sensor.
            </summary>
        </member>
        <member name="P:Buddy.CliffSensors.BackRight">
            <summary>
            The back right cliff sensor.
            </summary>
        </member>
        <member name="T:Buddy.DepthCam">
            <summary>
            Depth camera component of the robot. The real depth camera will has multiple modes (varing FPS and view distance).
            The simulated depth is computed with a shader. The point cloud is created from this compute.
            </summary>
        </member>
        <member name="M:Buddy.DepthCam.Open(Buddy.DepthMode)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:Buddy.DepthCam.Open(System.Int32)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:Buddy.DepthCam.Close">
            <summary>
            Closes the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="P:Buddy.DepthCam.FieldOfView">
            <summary>
            Field of view of the camera
            </summary>
        </member>
        <member name="P:Buddy.DepthCam.FrameMat">
            <summary>
            Current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.FrameTexture2D">
            <summary>
            Current frame as a Texture2D format.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.DepthMat">
            <summary>
            Current frame as a Mat OpenCVUnity format in grayscale.
            </summary>
            <returns>Mat format of the current frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.DepthTexture2D">
            <summary>
            Current frame as a Texture2D format in grayscale.
            </summary>
            <returns>Texture2D format of the current frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.Width">
            <summary>
            Width of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the width of the frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.Height">
            <summary>
            Height of the camera output.
            </summary>
            <returns>Number of pixels corresponding to the height of the frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.FrameID">
            <summary>
            Id of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:Buddy.DepthCam.IsOpen">
            <summary>
            Checks if the camera is open.
            </summary>
            <remarks>
            An opened camera will update its frame depending to the input view
            </remarks>
            <returns>Return true if the camera is open</returns>
        </member>
        <member name="P:Buddy.DepthCam.PointCloud">
            <summary>
            Point cloud of the depth cam view.
            </summary>
            <returns>Set of data points in the robot coordinate system</returns>
        </member>
        <member name="P:Buddy.DepthCam.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.Face">
            <summary>
            Face of the robot. You can use this component to make Buddy smiling or crying, depending on your needs.
            Some events are also available like blinking, swallowing, yawning...
            If you use the Text to speech component, the robot face will automaticaly "talk".
            </summary>
        </member>
        <member name="P:Buddy.Face.OnClickMouth">
            <summary>
            Set of callback called when mouth is clicked by the user
            </summary>
        </member>
        <member name="P:Buddy.Face.OnClickLeftEye">
            <summary>
            Set of callback called when left eye is clicked by the user
            </summary>
        </member>
        <member name="P:Buddy.Face.OnClickRightEye">
            <summary>
            Set of callback called when right eye is clicked by the user
            </summary>
        </member>
        <member name="P:Buddy.Face.IsStable">
            <summary>
            True if the face is not processing any expression swap / transition / interaction
            </summary>
        </member>
        <member name="M:Buddy.Face.SetExpression(Buddy.MoodType)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
        </member>
        <member name="M:Buddy.Face.SetEvent(Buddy.FaceEvent)">
            <summary>
            Buddy will make a mouth event. Last until MouthEvent.NONE or speak
            </summary>
            <param name="iEvent">The mouth event</param>
        </member>
        <member name="M:Buddy.Face.LookAt(System.Int32,System.Int32)">
            <summary>
            Look at the specified location (bottom left => 0, 0)
            </summary>
            <param name="iX">X coordinate, max val = Screen.width</param>
            <param name="iY">Y coordinate, max val = Screen.height</param>
        </member>
        <member name="M:Buddy.Face.LookAt(Buddy.FaceLookAt)">
            <summary>
            Facility to LookAt(X, Y) method
            </summary>
            <param name="iLookAt">The location to look at</param>
        </member>
        <member name="T:Buddy.IRSensor">
            <summary>
            Infra red sensor component of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
        </member>
        <member name="P:Buddy.IRSensor.Value">
            <summary>
            The value (0 to 255) sent by the infrared sensor.
            </summary>
            <remarks>
            The value means the lightning measured by the infrared sensor.
            </remarks>
        </member>
        <member name="P:Buddy.IRSensor.Distance">
            <summary>
            The distance in meters calculated by the sensor.
            </summary>
            <remarks>
            The distance is calculated using the lightning value sent by the sensor.
            See "Value" to get this value.
            </remarks>
        </member>
        <member name="P:Buddy.IRSensor.MaxDistance">
            <summary>
            The maximum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:Buddy.IRSensor.MinDistance">
            <summary>
            The minimum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:Buddy.IRSensor.Angle">
            <summary>
            The angle in degrees of the sensor.
            </summary>
        </member>
        <member name="P:Buddy.IRSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.IRSensors">
            <summary>
            Set of 3 infra red sensor components.
            </summary>
        </member>
        <member name="P:Buddy.IRSensors.Left">
            <summary>
            The left infrared sensor.
            </summary>
        </member>
        <member name="P:Buddy.IRSensors.Middle">
            <summary>
            The middle infrared sensor.
            </summary>
        </member>
        <member name="P:Buddy.IRSensors.Right">
            <summary>
            The right infrared sensor.
            </summary>
        </member>
        <member name="T:Buddy.LED">
            <summary>
            Light-Emitting Diode component of the robot. Corresponding to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
        </member>
        <member name="M:Buddy.LED.SetBodyLight(Buddy.LEDColor)">
            <summary>
            Set the body light based on the mood.
            </summary>
            <param name="iMoodColor">Color corresponding to the mood</param>
        </member>
        <member name="M:Buddy.LED.SetBodyLight(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with UnityEngine Color.
            </summary>
            <param name="iColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:Buddy.LED.SetBodyLight(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with HSV Color.
            </summary>
            <param name="iH">Hue value in degrees (0 to 360)</param>
            <param name="iS">Saturation purcentage (0 to 100)</param>
            <param name="iV">Brightness of the color  (0 to 100)</param>
            <param name="iVariation">>Amplitude of the oscillation in purcentage (0 to 1 with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0 to 5.10 with step of 0.02)</param>
        </member>
        <member name="P:Buddy.LED.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.Micro">
            <summary>
            Micro of the robot. Currently not use. Will be used later when the robot will has many directional micros.
            </summary>
        </member>
        <member name="M:Buddy.Micro.StartMicro(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Starts Recording. 
            Returns an AudioClip, or NULL if recording fails to start.
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:Buddy.Micro.StopMicro(System.String)">
            <summary>
            Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:Buddy.Micro.IsRecordingMicro(System.String)">
            <summary>
            Asks if a device is currently recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:Buddy.Micro.GetPositionMicro(System.String)">
            <summary>
            Get the position in samples of the recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>        
        </member>
        <member name="M:Buddy.Micro.GetDeviceCapsMicro(System.String)">
            <summary>
            Get the frequency capabilities of a device.
            Returns min and max frequency that the device supports.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="P:Buddy.Micro.Record">
            <summary>
            The current recording
            </summary>
        </member>
        <member name="T:Buddy.Hinge">
            <summary>
            Hinge component of the robot neck. 
            </summary>
        </member>
        <member name="P:Buddy.Hinge.DestinationAnglePosition">
            <summary>
            The setted angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:Buddy.Hinge.CurrentAnglePosition">
            <summary>
            The current angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:Buddy.Hinge.TargetSpeed">
            <summary>
            Current target velocity in degrees per second
            </summary>
        </member>
        <member name="P:Buddy.Hinge.MaximumAngle">
            <summary>
            Maximum possible angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:Buddy.Hinge.MinimumAngle">
            <summary>
            Minimum possible angular position of the motor in degrees
            </summary>
        </member>
        <member name="P:Buddy.Hinge.MaximumSpeed">
            <summary>
            Maximum possible velocity of the motor in degrees per second
            </summary>
        </member>
        <member name="P:Buddy.Hinge.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="P:Buddy.Hinge.Locked">
            <summary>
            Lock set for hinges
            </summary>
        </member>
        <member name="M:Buddy.Hinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the angular position in degrees of the motor at a specific speed in degrees per second
            </summary>
            <param name="iAngleDeg">Angle in degrees of the angular</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:Buddy.Hinge.SetPosition(System.Single)">
            <summary>
            Set the angular position in degrees of the motor
            </summary>
            <param name="iAngleDeg">Angle in degrees of the angular position</param>
        </member>
        <member name="T:Buddy.YesHinge">
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe)
            </summary>
        </member>
        <member name="M:Buddy.YesHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
            <param name="iSpeed">The speed in degrees per second</param>
        </member>
        <member name="M:Buddy.YesHinge.SetPosition(System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
        </member>
        <member name="P:Buddy.YesHinge.Locked">
            <summary>
            Lock set for hinge
            </summary>
        </member>
        <member name="T:Buddy.NoHinge">
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe)
            </summary>
        </member>
        <member name="M:Buddy.NoHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
            <param name="iSpeed">The speed in degrees per second</param>
        </member>
        <member name="M:Buddy.NoHinge.SetPosition(System.Single)">
            <summary>
            Set the hinge at the specified position in degrees
            </summary>
            <param name="iAngleDeg">The angle in degrees</param>
        </member>
        <member name="P:Buddy.NoHinge.Locked">
            <summary>
            Lock set for hinge
            </summary>
        </member>
        <member name="T:Buddy.Wheels">
            <summary>
            Wheels (right and left) of the robot.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.LeftWheelAngle">
            <summary>
            Actual angle of left wheel, in degrees.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.RightWheelAngle">
            <summary>
            Actual angle of right wheel, in degrees.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.LeftWheelDeltaAngle">
            <summary>
            Rotation of left wheel since the last frame, in degrees.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.RightWheelDeltaAngle">
            <summary>
            Rotation of right wheel since the last frame, in degrees.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.LeftWheelAngularVelocity">
            <summary>
            Angular velocity of the left wheel, in degrees per seconds.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.RightWheelAngularVelocity">
            <summary>
            Angular velocity of the right wheel, in degrees per seconds.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Radius">
            <summary>
            Radius of Buddy's wheels in meters.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Entrax">
            <summary>
            Buddy's mobile base's entrax : The distance between the center of the left wheel and the center of the right wheel, in meters.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.MaxSpeed">
            <summary>
            The maximum speed, in degrees per seconds, possible for Buddy's wheels.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Speed">
            <summary>
            Current Speed in meter per second.
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Status">
            <summary>
            Enumeration corresponding to the current wheel's status
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Locked">
            <summary>
            Set for robot wheels locking
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="P:Buddy.Wheels.Odometry">
            <summary>
            Current estimated robot's pose using odometry.
            </summary>
            <returns>Robot's pose (X, Y, Tetha), the position (X,Y) in meters and the orientation Theta in degrees</returns>
            <remarks>Motors is the use of data from motion sensors to estimate change in position over time</remarks>
            <remarks>The robot's pose is a 3D vector that contains (X, Y, Theta). (X, Y) being the robot's position in horizontal plane and Theta the orientation of the robot.</remarks>
        </member>
        <member name="M:Buddy.Wheels.SetWheelsSpeed(System.Single,System.Single,System.Int32)">
            <summary>
            Controls the speed of the wheels, stops after the timeout in milliseconds.
            </summary>
            <param name="iLeft">Desired left wheel speed, in degrees per seconds</param>
            <param name="iRight">Desired right wheel speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Buddy.Wheels.SetWheelsSpeed(System.Single,System.Int32)">
            <summary>
            Controls the speed of the wheels, stops after the timeout in milliseconds.
            </summary>
            <param name="iBoth">Desired wheels speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Buddy.Wheels.SetWheelsSpeedAtLow(System.Int32)">
            <summary>
            Apply wheels speed to low value (observation, human interaction, precision, docking...).
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:Buddy.Wheels.SetWheelsSpeedAtMedium(System.Int32)">
            <summary>
            Apply wheels speed to medium value (roaming, navigation...).
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:Buddy.Wheels.SetWheelsSpeedAtHigh(System.Int32)">
            <summary>
            Apply wheels speed to high value (games, alert...).
            </summary>
            <param name="iTimeout">Optional timeout (in milliseconds)</param>
        </member>
        <member name="M:Buddy.Wheels.TurnAbsoluteAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The absolute target angle defines the robot orientation in world space (relative to the first position when the robot woke up)</remarks>
            <remarks>The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:Buddy.Wheels.TurnAngle(System.Single,System.Single,System.Single)">
            <summary>
            Turns with a target angle (in degrees) from the current orientation.
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The target angle defines the robot orientation in local space (relative to its actual orientation)</remarks>
        </member>
        <member name="M:Buddy.Wheels.MoveToAbsolutePosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes the robot go to a target position in world space (relative to the first position when the robot woke up).
            </summary>
            <param name="iPosition">x and y coordinate in meters</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
            <remarks>The absolute target position defines the robot position in world space (relative to the first position when the robot woke up)</remarks>
            <remarks>The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:Buddy.Wheels.MoveToPosition(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Makes the robot go to a desired position relative to the actual position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Desired whees speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
            <remarks>The target position defines the robot position in local space (relative to its actual orientation)</remarks>
            <remarks>The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:Buddy.Wheels.MoveDistance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the speeds of the wheels for a desired distance.
            </summary>
            <param name="iLeft">Left wheel speed in degrees per seconds</param>
            <param name="iRight">Right wheel speed in degrees per seconds</param>
            <param name="iDistance">Distance to reach until the robot stops</param>
            <param name="iTolerance">Tolerance, in meters, around the final position where the robot would stop</param>
        </member>
        <member name="M:Buddy.Wheels.StopWheels">
            <summary>
            Stops the wheels by setting their speed values to 0f.
            </summary>
        </member>
        <member name="T:Buddy.Motors">
            <summary>
            Global class to access head axes and wheels
            </summary>
        </member>
        <member name="P:Buddy.Motors.Wheels">
            <summary>
            Accessor to control wheels
            </summary>
        </member>
        <member name="P:Buddy.Motors.NoHinge">
            <summary>
            Accessor to control the Head Hinge
            </summary>
        </member>
        <member name="P:Buddy.Motors.YesHinge">
            <summary>
            Accessor to control the Neck Hinge
            </summary>
        </member>
        <member name="T:Buddy.RGBCam">
            <summary>
            The robot Red-Green-Blue camera. You can easily open it with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCamResolution enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="M:Buddy.RGBCam.Open(Buddy.RGBCamResolution)">
            <summary>
            Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:Buddy.RGBCam.Close">
            <summary>
            Closes the current opened video stream. 
            </summary>
            <remarks>
            Must be called when you will not use the camera anymore. 
            </remarks>
        </member>
        <member name="P:Buddy.RGBCam.FieldOfView">
            <summary>
            Field of view of the webcam
            </summary>
        </member>
        <member name="P:Buddy.RGBCam.Orientation">
            <summary>
            Get the current angle of the camera around its normal axis in degrees.
            </summary>
            <returns>Angle in degrees</returns>
        </member>
        <member name="P:Buddy.RGBCam.FrameTexture2D">
            <summary>
            Returns the current frame.
            </summary>
            <returns>The current frame in a Texture2D format</returns>
        </member>
        <member name="P:Buddy.RGBCam.FrameMat">
            <summary>
            Returns the current frame as a Mat OpenCVUnity format.
            </summary>
            <returns>The current frame in a Mat OpenCVUnity format</returns>
        </member>
        <member name="P:Buddy.RGBCam.Width">
            <summary>
            Returns the width of the video stream output.
            </summary>
            <returns>The width of the video stream output in pixels</returns>
        </member>
        <member name="P:Buddy.RGBCam.Height">
            <summary>
            Returns the height of the video stream output.
            </summary>
            <returns>The height of the video stream output in pixels</returns>
        </member>
        <member name="P:Buddy.RGBCam.FrameID">
            <summary>
            Returns the ID of the current frame.
            </summary>
            <returns>ID of the frame</returns>
        </member>
        <member name="P:Buddy.RGBCam.IsOpen">
            <summary>
            Checks if the camera is opened.
            An opened video stream will update its frame depending to the input view.
            </summary>
            <returns>Return true if the video stream  is opened, and false if not.</returns>
        </member>
        <member name="P:Buddy.RGBCam.Resolution">
            <summary>
            The resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="P:Buddy.RGBCam.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.VoiceSound">
            <summary>
            Kind of sound that Buddy can natively handle for voice acting
            </summary>
        </member>
        <member name="T:Buddy.FXSound">
            <summary>
            Kind of sound that Buddy can natively handle for sound effect
            </summary>
        </member>
        <member name="T:Buddy.MediaSound">
            <summary>
            Kind of sound that Buddy can natively handle for media purpurses
            </summary>
        </member>
        <member name="T:Buddy.SoundChannel`1">
            <summary>
            Sound channel for the robot speaker component.
            </summary>
        </member>
        <member name="P:Buddy.SoundChannel`1.Loop">
            <summary>
            Loop state of the audiosource
            </summary>
        </member>
        <member name="P:Buddy.SoundChannel`1.Volume">
            <summary>
            Volume of the audiosource
            </summary>
        </member>
        <member name="P:Buddy.SoundChannel`1.Mute">
            <summary>
            Mute state of the audiosource
            </summary>
        </member>
        <member name="P:Buddy.SoundChannel`1.Status">
            <summary>
            Status of the channel
            </summary>
        </member>
        <member name="M:Buddy.SoundChannel`1.Play(UnityEngine.AudioClip)">
            <summary>
            Play the current Audio Clip, or the selected AudioClip
            </summary>
            <param name="iAudioClip">Selected audio clip to play.</param>
        </member>
        <member name="M:Buddy.SoundChannel`1.Play(System.Int32)">
            <summary>
            Play the wanted clip
            </summary>
            <param name="iClipIndx">The index sound to play</param>
        </member>
        <member name="M:Buddy.SoundChannel`1.Play(System.String)">
            <summary>
            Play the wanted sound. Must be added by AddSound(string)
            </summary>
            <param name="iSound">The sound to play</param>
        </member>
        <member name="M:Buddy.SoundChannel`1.Play(`0)">
            <summary>
            Play the wanted sound
            </summary>
            <param name="iSound">The sound to play</param>
        </member>
        <member name="M:Buddy.SoundChannel`1.Pause">
            <summary>
            Pause the audio clip.
            </summary>
        </member>
        <member name="M:Buddy.SoundChannel`1.Resume">
            <summary>
            If paused, replay the audio clip
            </summary>
        </member>
        <member name="M:Buddy.SoundChannel`1.Stop">
            <summary>
            Stop the current Audio Clip
            </summary>
        </member>
        <member name="M:Buddy.SoundChannel`1.Kill">
            <summary>
            Kill the Audio clip (stop + audio source = null)
            </summary>
        </member>
        <member name="M:Buddy.SoundChannel`1.Load(System.String)">
            <summary>
            Add a sound to the base, can be play with Play(string)
            </summary>
            <param name="iPath">Name of the clip, does not need to precise the extension. Must be in Resources/Sounds</param>
        </member>
        <member name="M:Buddy.SoundChannel`1.Load(System.String,System.Int32)">
            <summary>
            Add a sound to the base, can be play with Play(int)
            </summary>
            <param name="iPath">Name of the clip, does not need to precise the extension. Must be in Resources/Sounds</param>
            <param name="iIndex">Index of the sound to access</param>>
        </member>
        <member name="M:Buddy.SoundChannel`1.Load(UnityEngine.AudioClip,System.Int32)">
            <summary>
            Add a sound to the base, can be play with Play(int)
            </summary>
            <param name="iClip">Clip to store</param>
            <param name="iIndex">Index to the clip</param>
        </member>
        <member name="M:Buddy.SoundChannel`1.Load(UnityEngine.AudioClip,System.String)">
            <summary>
            Add a sound to the base, can be play with Play(int)
            </summary>
            <param name="iClip">Clip to store</param>
            <param name="iName">Clip name for further access</param>
        </member>
        <member name="T:Buddy.VoiceChannel">
            <summary>
            Channel for voice purposes
            </summary>
        </member>
        <member name="M:Buddy.VoiceChannel.Play(Buddy.VoiceSound)">
            <summary>
            Play the wanted sound
            </summary>
            <param name="iSound">The sound to play</param>
        </member>
        <member name="T:Buddy.MediaChannel">
            <summary>
            Sound channel for media purposes
            </summary>
        </member>
        <member name="T:Buddy.FXChannel">
            <summary>
            Sound effect channel
            </summary>
        </member>
        <member name="T:Buddy.Speaker">
            <summary>
            Speaker component of the robot. Allow you to handle multiple channels. Not currently used.
            </summary>
        </member>
        <member name="P:Buddy.Speaker.Voice">
            <summary>
            Sound Channel to manage the voice
            </summary>
        </member>
        <member name="P:Buddy.Speaker.Media">
            <summary>
            Sound Channel to manage the media sounds
            </summary>
        </member>
        <member name="P:Buddy.Speaker.FX">
            <summary>
            Sound Channel to manage the FX sounds
            </summary>
        </member>
        <member name="M:Buddy.Speaker.GetVolume">
            <summary>
            The volume of the speaker. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buddy.Speaker.VolumeUp(System.Boolean)">
            <summary>
            Increases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changing volume</param>
        </member>
        <member name="M:Buddy.Speaker.VolumeDown(System.Boolean)">
            <summary>
            Decreases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changing volume</param>
        </member>
        <member name="M:Buddy.Speaker.ChangeVolume(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Changes the volume accordingly
            </summary>
            <param name="iVolume">Volume (1-100)</param>
            <param name="iSound">Whether to play sound when changin volume</param>
            <param name="iShowUI">Whether to show the Volume UI or not</param>
        </member>
        <member name="M:Buddy.Speaker.KillAllSounds">
            <summary>
            Kills the sound to all Sound Chanel
            </summary>
        </member>
        <member name="T:Buddy.SpeechToText">
            <summary>
            Speech to text layer that allows you to translate an input signal to a basic System.String.
            Only works on Android builds.
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnBestRecognition">
            <summary>
            Called after a voice recognition with the best recognized sentence
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnVolumeChange">
            <summary>
            Called after a volume modification
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnBeginning">
            <summary>
            Called when a recognition started
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnError">
            <summary>
            Called after any error
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnErrorEnum">
            <summary>
            Called after any error
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnEnd">
            <summary>
            Called at the end of the recogntion
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.OnPartial">
            <summary>
            Called when the recognizer has recognized a word, but the complete recognition is not finished
            </summary>
        </member>
        <member name="M:Buddy.SpeechToText.Request">
            <summary>
            Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:Buddy.SpeechToText.Stop">
            <summary>
            Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="P:Buddy.SpeechToText.LastAnswer">
            <summary>
            Best answer heard by the Speech To Text
            </summary>
            <returns>String of the text recognized</returns>
        </member>
        <member name="P:Buddy.SpeechToText.LastRecoText">
            <summary>
            The answers list heard by the Speech To Text
            </summary>
            <returns>String of the text recognized. All the suggestions of what seemed to be heard are listed</returns>
        </member>
        <member name="P:Buddy.SpeechToText.LastRecoConfidence">
            <summary>
            Confidence of the best answer recognized by the Speech To Text 
            </summary>
            <returns>float from 0.0f to 1.0f specifying the amount of confidence in the suggested answer</returns>
        </member>
        <member name="P:Buddy.SpeechToText.HasFinished">
            <summary>
            Is the listening finished?
            </summary>
            <returns>Is the listening finished?</returns>
        </member>
        <member name="P:Buddy.SpeechToText.LastRMS">
            <summary>
            Get the last decibel listened
            </summary>
            <returns>DB in float</returns>
        </member>
        <member name="P:Buddy.SpeechToText.LastError">
            <summary>
            Retrieve the last error sent by the Speech To Text
            </summary>
            <returns>Returns the error in string</returns>
        </member>
        <member name="M:Buddy.SpeechToText.SetLanguage(Buddy.Language)">
            <summary>
            Set the language of the Speech To Text
            </summary>
            <param name="iLanguage">The language to set in Locale Codes (e.g. "en-US" for english from United-States, "fr-FR" for french from France)</param>
        </member>
        <member name="M:Buddy.SpeechToText.SetText(System.String)">
            <summary>
            Call the callback recognition method with the input text
            </summary>
            <param name="iInputText">The input text</param>
        </member>
        <member name="T:Buddy.SphinxTrigger">
            <summary>
            Sphinx is use as a trigger in voice recognition. You will need to use Sphinx before starting STT.Request() for example.
            </summary>
        </member>
        <member name="P:Buddy.SphinxTrigger.HasTriggered">
            <summary>
            Detects if the trigger has been activated.
            </summary>
            <returns>True if the trigger triggered</returns>
        </member>
        <member name="P:Buddy.SphinxTrigger.GetProba">
            <summary>
            Returns the probability of the last trigger
            </summary>
            <returns>Probability in int where 0 is 1.0</returns>
        </member>
        <member name="P:Buddy.SphinxTrigger.FinishedSetup">
            <summary>
            Update all new setup.
            </summary>
            <returns>True if the trigger has been correctly setup</returns>
        </member>
        <member name="M:Buddy.SphinxTrigger.LaunchRecognition">
            <summary>
            Launches the voice recognition.
            </summary>
        </member>
        <member name="M:Buddy.SphinxTrigger.StopRecognition">
            <summary>
            Ends the voice recognition.
            </summary>
        </member>
        <member name="M:Buddy.SphinxTrigger.SetKeyphrase(System.String)">
            <summary>
            Set the trigger key phrase.
            </summary>
            <param name="iKeyphrase">The key phrase</param>
        </member>
        <member name="M:Buddy.SphinxTrigger.SetThreshold(System.Single)">
            <summary>
            Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
            <param name="iThreshold">Threshold of the trigger, default is 1e-30f</param>
        </member>
        <member name="M:Buddy.SphinxTrigger.SetLanguage(Buddy.Language)">
            <summary>
            Update the current detected language.
            </summary>
            <param name="iLanguage"></param>
        </member>
        <member name="T:Buddy.TabletParameters">
            <summary>
            Allows you to access to tablet parameters and settings (WiFi, Bluetooth, accelerometers...).
            </summary>
        </member>
        <member name="M:Buddy.TabletParameters.ConnectToNetwork(System.String,System.String)">
            <summary>
            Connects to wanted Access Point
            </summary>
            <param name="iSSID">Name of the Access Point</param>
            <param name="iPassword">Password to this Access Point</param>
        </member>
        <member name="M:Buddy.TabletParameters.GetWifiAPNames">
            <summary>
            WiFi Access Point Names
            </summary>
            <returns>Name of the Access Point</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetCurrentWifiAPName">
            <summary>
            The current acces point name 
            </summary>
            <returns>The current ap name</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetWifiLevel">
            <summary>
            The Force list of the Wifi Access Point at index iPosition
            </summary>
            <returns>Integer of the force</returns>
        </member>
        <member name="M:Buddy.TabletParameters.EnableBluetooth">
            <summary>
            Enables Bluetooth connection
            </summary>
        </member>
        <member name="M:Buddy.TabletParameters.DisableBluetooth">
            <summary>
            Disables Bluetooth connection
            </summary>
        </member>
        <member name="M:Buddy.TabletParameters.StartWifiScan">
            <summary>
            Starts a Wifi Scan
            </summary>
        </member>
        <member name="M:Buddy.TabletParameters.HasScannedWifi">
            <summary>
            Has the Wifi finish scanning
            </summary>
            <returns>True if the wifi was scanned</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetAvailableInternalStorage">
            <summary>
            The available internal storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetAvailableExternalStorage">
            <summary>
            The available external storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetTotalInternalStorage">
            <summary>
            The total internal storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetTotalExternalStorage">
            <summary>
            The total external storage
            </summary>
            <returns>Value in bytes</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetXAccelerometer">
            <summary>
            The X axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetYAccelerometer">
            <summary>
            The Y axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetZAccelerometer">
            <summary>
            The Z axis force of the accelerometer, including gravity force
            </summary>
            <returns>Value in float</returns>
        </member>
        <member name="M:Buddy.TabletParameters.GetTabletBatteryPercentage">
            <summary>
            Tablet battery value
            </summary>
        </member>
        <member name="P:Buddy.TabletParameters.GetSerialNumber">
            <summary>
            Get the Hardware Serial Number.
            </summary>
            <remarks>
             SN is a unique identification number.
            </remarks>
        </member>
        <member name="P:Buddy.TabletParameters.GetHardwareVersion">
            <summary>
            Get the Hardware software version.
            </summary>
            <remarks>
             It can be used for SDK compatibilities.
            </remarks>
        </member>
        <member name="T:Buddy.TextToSpeech">
            <summary>
            Text to speech allows you to make Buddy talks an input System.String.
            The Windows version uses SAPI, the Android version uses Google API.
            So, available methods have not the same behaviour on difference devices.
            </summary>
        </member>
        <member name="P:Buddy.TextToSpeech.IsSpeaking">
            <summary>
            Checks if the TTS is currently speaking
            </summary>
            <returns>True if a sentence is spoken</returns>
        </member>
        <member name="P:Buddy.TextToSpeech.HasFinishedTalking">
            <summary>
            Checks if the TTS has stoped speaking and has finished queue
            </summary>
            <returns>True if a sentence is finished</returns>
        </member>
        <member name="M:Buddy.TextToSpeech.Say(System.String)">
            <summary>
            Makes the robot speak the input string. Can also be added to the queue
            </summary>
            <param name="iText"></param>
        </member>
        <member name="M:Buddy.TextToSpeech.Say(System.String,System.Boolean)">
            <summary>
            Makes the robot speak the input string. Can also be added to the queue
            </summary>
            <param name="iText"></param>
            <param name="iQueue"></param>
        </member>
        <member name="M:Buddy.TextToSpeech.SayKey(System.String,System.Boolean,Buddy.LoadContext)">
            <summary>
            Makes the robot speak the value corresponding to the input key. Can also be added to the queue
            </summary>
            <param name="iKey">Key of the word to say</param>
            <param name="iQueue"></param>
            <param name="iContext"></param>
        </member>
        <member name="M:Buddy.TextToSpeech.SynthesizeToFile(System.String,System.String)">
            <summary>
            Synthesize the text to a wav file
            </summary>
            <param name="iText">Text to record</param>
            <param name="iFilename">Sound file to record</param>
        </member>
        <member name="M:Buddy.TextToSpeech.Silence(System.Int32,System.Boolean)">
            <summary>
            Launch silence and can add to queue
            </summary>
        </member>
        <member name="M:Buddy.TextToSpeech.SetPitch(System.Single)">
            <summary>
            Sets the pitch
            </summary>
            <param name="iPitch">The pitch</param>
        </member>
        <member name="M:Buddy.TextToSpeech.SetSpeechRate(System.Single)">
            <summary>
            Sets the speech rate
            </summary>
            <param name="iSpeechRate">The rate</param>
        </member>
        <member name="M:Buddy.TextToSpeech.Stop">
            <summary>
            Stop the current speech
            </summary>
        </member>
        <member name="M:Buddy.TextToSpeech.SetLanguage(Buddy.Language)">
            <summary>
            Sets the speak language
            </summary>
            <param name="iLanguage">The language</param>
        </member>
        <member name="T:Buddy.ThermalSensor">
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
        </member>
        <member name="P:Buddy.ThermalSensor.Matrix">
            <summary>
            The matrix of the thermal sensor. Currently 4x4 resolution.
            Each value represents the estimated temperature.
            </summary>
        </member>
        <member name="P:Buddy.ThermalSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.USSensor">
            <summary>
            Ultrasound component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an IR sensor.
            </summary>
        </member>
        <member name="P:Buddy.USSensor.Value">
            <summary>
            The value (0 to 255) sent by the ultrasound sensor.
            </summary>
            <remarks>
            The value means the lightning measured by the ultrasound sensor.
            </remarks>
        </member>
        <member name="P:Buddy.USSensor.Distance">
            <summary>
            Distance calculated by the sensor.
            </summary>
            <remarks>
            The distance is calculated using the lightning value sent by the sensor.
            See "Value" to get this value.
            </remarks>
        </member>
        <member name="P:Buddy.USSensor.MaxDistance">
            <summary>
            Access to the maximum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:Buddy.USSensor.MinDistance">
            <summary>
            Access to the minimum distance which can be measured by the sensor.
            </summary>
        </member>
        <member name="P:Buddy.USSensor.Angle">
            <summary>
            Access to the angle in degrees of the sensor.
            </summary>
        </member>
        <member name="P:Buddy.USSensor.Error">
            <summary>
            Error code if there is any error on the component
            </summary>
        </member>
        <member name="T:Buddy.USSensors">
            <summary>
            Set of 3 ultra sound sensor components
            </summary>
        </member>
        <member name="P:Buddy.USSensors.Left">
            <summary>
            Access to structure data for the left ultrasound sensor.
            </summary>
        </member>
        <member name="P:Buddy.USSensors.Right">
            <summary>
            Access to structure data for the right ultrasound sensor.
            </summary>
        </member>
        <member name="P:Buddy.USSensors.Back">
            <summary>
            Access to structure data for the back ultrasound sensor.
            </summary>
        </member>
        <member name="T:Buddy.Command.InstallAppCmd">
            <summary>
            When executed : Install the specified app
            </summary>
        </member>
        <member name="M:Buddy.Command.InstallAppCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.InstallAppCmd.#ctor(System.String,System.String)">
            <summary>
            When executed : Install the specified app
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Buddy.Command.InstallAppCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.UninstallAppCmd">
            <summary>
            When executed : Uninstall the specified app
            </summary>
        </member>
        <member name="M:Buddy.Command.UninstallAppCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.UninstallAppCmd.#ctor(System.String)">
            <summary>
            When executed : Uninstall the specified app
            </summary>
            <param name="iID"></param>
        </member>
        <member name="M:Buddy.Command.UninstallAppCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.RestartBRECmd">
            <summary>
            When executed : Restart the Buddy Runtime Environment
            </summary>
        </member>
        <member name="M:Buddy.Command.RestartBRECmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Buddy.Command.ACommand">
            <summary>
            Atomic behaviour from the Command pattern. You can define your own commands by inherit from ACommand.
            Parameters can be setted with the Parameters attributes.
            </summary>
        </member>
        <member name="P:Buddy.Command.ACommand.Parameters">
            <summary>
            Parameters of the command
            </summary>
        </member>
        <member name="P:Buddy.Command.ACommand.IsExecuted">
            <summary>
            Check if the command has been executed
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommand.#ctor">
            <summary>
            Base constructor for deserialization
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommand.Execute">
            <summary>
            Execute the command behaviour defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommand.ExecuteWhenAvailable">
            <summary>
            Add the command on the scheduler queue to be executed
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommand.UpdateParams(System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.UpdateParams(System.Single[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.UpdateParams(System.String[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.UpdateParams(System.Object[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iObjects">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.Serialize">
            <summary>
            Create a custom byte array representing the command.
            </summary>
            <returns>The command serialization</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.Deserialize(System.String,System.Char,System.String)">
            <summary>
            Create a command from a string containing successive bytes, separate by ","
            </summary>
            <param name="iBytes">The byte string</param>
            <param name="iSeparator">Separator character between each byte</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.Deserialize(System.Byte[],System.String)">
            <summary>
            Create a command from a byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:Buddy.Command.ACommand.ToString">
            <summary>
            String basic serialization of the command
            </summary>
            <returns>Command string value for debug</returns>
        </member>
        <member name="P:Buddy.Command.ACommand.IsExecutedImpl">
            <summary>
            Own implementation to check if the current command was executed
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommand.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.ACommandExtention">
            <summary>
            Static command extention for IEnumerable of ACommand
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{Buddy.Command.ACommand})">
            <summary>
            Execute all command behaviours defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.ExecuteWhenAvailable(System.Collections.Generic.IEnumerable{Buddy.Command.ACommand})">
            <summary>
            Add all commands on the scheduler queue in order to be executed
            </summary>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{Buddy.Command.ACommand},System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{Buddy.Command.ACommand},System.String[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{Buddy.Command.ACommand},System.Single[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{Buddy.Command.ACommand},System.Object[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iObjects">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.Int32}},System.Int32)">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iInteger">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.String}},System.String)">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iString">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.Single}},System.Single)">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingle">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:Buddy.Command.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.Object}},System.Object)">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iObject">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="T:Buddy.Command.ClsDepthCamCmd">
            <summary>
            When executed : Closes the current opened camera. Must be call when you don't use the camera anymore. 
            </summary>
        </member>
        <member name="M:Buddy.Command.ClsDepthCamCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.ClsDepthCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.ClsMicroCmd">
            <summary>
            When executed : Stops Recording.
            </summary>
        </member>
        <member name="M:Buddy.Command.ClsMicroCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.ClsMicroCmd.#ctor(System.String)">
            <summary>
            When executed : Stops Recording.
            </summary>
            <param name="iDeviceName">Name of the device</param>
        </member>
        <member name="M:Buddy.Command.ClsMicroCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.ClsRGBCamCmd">
            <summary>
            When executed : Closes the current opened video stream. 
            </summary>
            <remarks>
            Must be called when you will not use the camera anymore. 
            </remarks>
        </member>
        <member name="M:Buddy.Command.ClsRGBCamCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.ClsRGBCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.DownVolCmd">
            <summary>
            When executed : Decreases the volume by 1
            </summary>
        </member>
        <member name="M:Buddy.Command.DownVolCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.DownVolCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Decreases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changin volume</param>
        </member>
        <member name="M:Buddy.Command.DownVolCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.KillSndsCmd">
            <summary>
            When executed : Kill the sound to all Sound Channels
            </summary>
        </member>
        <member name="M:Buddy.Command.KillSndsCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.KillSndsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.LockYesHingeCmd">
            <summary>
            When executed : Lock yes hinge
            </summary>
        </member>
        <member name="M:Buddy.Command.LockYesHingeCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.LockYesHingeCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Lock yes hinge
            </summary>
            <param name="iLock">Must hinges be locked ?</param>
        </member>
        <member name="M:Buddy.Command.LockYesHingeCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.LockNoHingeCmd">
            <summary>
            When executed : Lock no hinge
            </summary>
        </member>
        <member name="M:Buddy.Command.LockNoHingeCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.LockNoHingeCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Lock no hinge
            </summary>
            <param name="iLock">Must hinges be locked ?</param>
        </member>
        <member name="M:Buddy.Command.LockNoHingeCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.MvAbsPosCmd">
            <summary>
            When executed : Make the robot go to a desired global position.
            </summary>
        </member>
        <member name="M:Buddy.Command.MvAbsPosCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.MvAbsPosCmd.#ctor(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            When executed : Make the robot go to a desired global position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Speed desired in degrees per second</param>
            <param name="iTolerance">The distance tolerance to reach to stop command in meters</param>
        </member>
        <member name="M:Buddy.Command.MvAbsPosCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.MvDistCmd">
            <summary>
            When executed : Indicate speeds of wheels during a desired distance.
            </summary>
        </member>
        <member name="M:Buddy.Command.MvDistCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.MvDistCmd.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            When executed : Indicate speeds of wheels during a desired distance.
            </summary>
            <param name="iLeft">Left speed in degrees per second</param>
            <param name="iRight">right speed in degrees per second</param>
            <param name="iDistance">distance to reach until the command is done in meter</param>
            <param name="iTolerance">distance tolerance in meter to stop the command</param>
        </member>
        <member name="M:Buddy.Command.MvDistCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.MvPosCmd">
            <summary>
            When executed : Make the robot go to a desired position.
            </summary>
        </member>
        <member name="P:Buddy.Command.MvPosCmd.IsExecutedImpl">
            <summary>
            Check if the command has been executed
            </summary>
        </member>
        <member name="M:Buddy.Command.MvPosCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.MvPosCmd.#ctor(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            When executed : Make the robot go to a desired position.
            </summary>
            <param name="iPosition">x and y coordinate in meter</param>
            <param name="iSpeed">Speed desired in degrees per second</param>
            <param name="iTolerance">The distance tolerance to reach to stop command in meters</param>
        </member>
        <member name="M:Buddy.Command.MvPosCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.OpDepthCamCmd">
            <summary>
            When executed : Opens the camera device. Should be called once by session.
            </summary>
        </member>
        <member name="M:Buddy.Command.OpDepthCamCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.OpDepthCamCmd.#ctor(System.Int32)">
            <summary>
            When executed : Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:Buddy.Command.OpDepthCamCmd.#ctor(Buddy.DepthMode)">
            <summary>
            Opens the camera device. Should be called once by session.
            </summary>
            <param name="iMode">Mode of the camera</param>
        </member>
        <member name="M:Buddy.Command.OpDepthCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.OpMicroCmd">
            <summary>
            When executed : Starts Recording.
            </summary>
        </member>
        <member name="M:Buddy.Command.OpMicroCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.OpMicroCmd.#ctor(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            When executed : Starts Recording. 
            </summary>
            <param name="iDeviceName">Name of the device</param>
            <param name="iLoop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="iLenghtSec">Time record in seconds</param>
            <param name="iFrequency">The sample rate of the AudioClip produced by the recording.</param>
        </member>
        <member name="M:Buddy.Command.OpMicroCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.OpRGBCamCmd">
            <summary>
            When executed : Open the camera device. 
            </summary>
            <remarks>
            Should be called only when the camera is closed.
            See "IsOpen" accessor to know this.
            </remarks>
        </member>
        <member name="M:Buddy.Command.OpRGBCamCmd.#ctor(Buddy.RGBCamResolution)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.OpRGBCamCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SayTTSCmd">
            <summary>
            When executed : Makes the robot speaking the input string in the set language
            </summary>
        </member>
        <member name="M:Buddy.Command.SayTTSCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SayTTSCmd.#ctor(System.String,System.Boolean)">
            <summary>
            When executed : Makes the robot speaking the input string in the set language
            </summary>
        </member>
        <member name="M:Buddy.Command.SayTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.LookAtCmd">
            <summary>
            When executed : The robot changes its mood
            </summary>
        </member>
        <member name="M:Buddy.Command.LookAtCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.LookAtCmd.#ctor(Buddy.FaceLookAt)">
            <summary>
            When executed : The robot changes its mood
            </summary>
            <param name="iMode">The mood to switch to</param>
        </member>
        <member name="M:Buddy.Command.LookAtCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetTextSTTCmd">
            <summary>
            When executed : Call the callback recognition method with the input text
            </summary>
        </member>
        <member name="M:Buddy.Command.SetTextSTTCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetTextSTTCmd.#ctor(System.String)">
            <summary>
            When executed : Call the callback recognition method with the input text
            </summary>
            <param name="iText">The input text</param>
        </member>
        <member name="M:Buddy.Command.SetTextSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetMoodCmd">
            <summary>
            When executed : The robot changes its mood (face + led) and moves according to the mood
            </summary>
        </member>
        <member name="M:Buddy.Command.SetMoodCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetMoodCmd.#ctor(Buddy.MoodType,System.Boolean,System.Boolean)">
            <summary>
            When executed : Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iMove">Specify if the robot must move according to the wanted mood</param>
            <param name="iSound">Does the robot must make a sound with its mood ?</param>
        </member>
        <member name="M:Buddy.Command.SetMoodCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetFaceEvntCmd">
            <summary>
            When executed : The robot executes a mouth  / eye event
            </summary>
        </member>
        <member name="M:Buddy.Command.SetFaceEvntCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetFaceEvntCmd.#ctor(Buddy.FaceEvent)">
            <summary>
            When executed : The robot executes an mouth / eye event
            </summary>
            <param name="iMode">The mouth to trigger</param>
        </member>
        <member name="M:Buddy.Command.SetFaceEvntCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetHSVLEDCmd">
            <summary>
            When executed : Set the body light value and oscillation with HSV Color.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetHSVLEDCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetHSVLEDCmd.#ctor(System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Set the body light value and oscillation with HSV Color.
            </summary>
            <param name="iH">Hue value in degrees (0.0f to 360.0f)</param>
            <param name="iS">Saturation purcentage (0.0f to 100f)</param>
            <param name="iV">Brightness of the color  (0.0f to 100f)</param>
            <param name="iVariation">>Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:Buddy.Command.SetHSVLEDCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetKeyPhrSphinxCmd">
            <summary>
            When executed : Set the trigger key phrase.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetKeyPhrSphinxCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetKeyPhrSphinxCmd.#ctor(System.String)">
            <summary>
            When executed : Set the trigger key phrase.
            </summary>
            <param name="iKeyPhrase">The key phrase</param>
        </member>
        <member name="M:Buddy.Command.SetKeyPhrSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetLangSphinxCmd">
            <summary>
            When executed : Sets the recognized language
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangSphinxCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangSphinxCmd.#ctor(Buddy.Language)">
            <summary>
            When executed : Sets the recognized language
            </summary>
            <param name="iLang">The language</param>
        </member>
        <member name="M:Buddy.Command.SetLangSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetLangSTTCmd">
            <summary>
            When executed : Sets the recognized language
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangSTTCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangSTTCmd.#ctor(Buddy.Language)">
            <summary>
            When executed : Sets the recognized language
            </summary>
            <param name="iLang">The language</param>
        </member>
        <member name="M:Buddy.Command.SetLangSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetLangTTSCmd">
            <summary>
            When executed : Sets the speak language
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangTTSCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangTTSCmd.#ctor(Buddy.Language)">
            <summary>
            When executed : Sets the speak language
            </summary>
            <param name="iLang">The language</param>
        </member>
        <member name="M:Buddy.Command.SetLangTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetExpressionCmd">
            <summary>
            When executed : The robot changes its face mood
            </summary>
        </member>
        <member name="M:Buddy.Command.SetExpressionCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetExpressionCmd.#ctor(Buddy.MoodType)">
            <summary>
            When executed : The robot changes its face mood
            </summary>
            <param name="iMode">The mood to switch to</param>
        </member>
        <member name="M:Buddy.Command.SetExpressionCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetColorLEDCmd">
            <summary>
            When executed : Set the body light based on the mood.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetColorLEDCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetColorLEDCmd.#ctor(Buddy.LEDColor)">
            <summary>
            When executed : Set the body light based on the mood.
            </summary>
            <param name="iColor">Color coresponding to the mood</param>
        </member>
        <member name="M:Buddy.Command.SetColorLEDCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetPitchTTSCmd">
            <summary>
            When executed : Sets the pitch
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPitchTTSCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPitchTTSCmd.#ctor(System.Single)">
            <summary>
            When executed : Sets the pitch
            </summary>
            <param name="iPitch">The pitch</param>
        </member>
        <member name="M:Buddy.Command.SetPitchTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetPosNoCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPosNoCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPosNoCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:Buddy.Command.SetPosNoCmd.#ctor(System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
        </member>
        <member name="M:Buddy.Command.SetPosNoCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetPosYesCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPosYesCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPosYesCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:Buddy.Command.SetPosYesCmd.#ctor(System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
        </member>
        <member name="M:Buddy.Command.SetPosYesCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetPowerCmd">
            <summary>
            When executed : Let the battery provide power to the robot or not.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPowerCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetPowerCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Let the battery provide power to the robot or not.
            </summary>
            <remarks> You have to put the value to true tu use Buddy's functionnalities.</remarks>
        </member>
        <member name="M:Buddy.Command.SetPowerCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetRateTTSCmd">
            <summary>
            When executed : Sets the speech rate
            </summary>
        </member>
        <member name="M:Buddy.Command.SetRateTTSCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetRateTTSCmd.#ctor(System.Single)">
            <summary>
            When executed : Sets the speech rate
            </summary>
            <param name="iRate">The rate</param>
        </member>
        <member name="M:Buddy.Command.SetRateTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetResCmd">
            <summary>
            When executed : Set the resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetResCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetResCmd.#ctor(Buddy.RGBCamResolution)">
            <summary>
            When executed : Set the resolution of the webcam 640x480, 320x240 or 176x144
            When setted, close and re-open automaticaly the camera.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetResCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetRGBLEDCmd">
            <summary>
            When executed : Set the body light value and oscillation with UnityEngine Color.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetRGBLEDCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetRGBLEDCmd.#ctor(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            When executed : Set the body light value and oscillation with UnityEngine Color.
            </summary>
            <param name="iColor">Color of the lights in RGB</param>
            <param name="iVariation">Amplitude of the oscillation in purcentage (0.0f to 1f with step of 0.01f)</param>
            <param name="iFrequency">Frequency of oscillation in Hertz (0.0f to 5.10f with step of 0.02f)</param>
        </member>
        <member name="M:Buddy.Command.SetRGBLEDCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetThreshSphinxCmd">
            <summary>
            When executed : Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
        </member>
        <member name="M:Buddy.Command.SetThreshSphinxCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetThreshSphinxCmd.#ctor(System.Single)">
            <summary>
            When executed : Set the threshold of the sphinx trigger
            Shouldn't be called continously
            </summary>
            <param name="iThreshold">Threshold of the trigger, default is 1e-30f</param>
        </member>
        <member name="M:Buddy.Command.SetThreshSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetVolCmd">
            <summary>
            When executed : Changes the volume accordingly
            </summary>
        </member>
        <member name="M:Buddy.Command.SetVolCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetVolCmd.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            When executed : Changes the volume accordingly
            </summary>
            <param name="iVolume">Volume (1-100)</param>
            <param name="iSound">Whether to play sound when changin volume</param>
            <param name="iShowUI">Whether to show the Volume UI or not</param>
        </member>
        <member name="M:Buddy.Command.SetVolCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SetWheelsSpeedCmd">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
        </member>
        <member name="M:Buddy.Command.SetWheelsSpeedCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SetWheelsSpeedCmd.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
            <param name="iLeft">Desired left wheel speed, in degrees per seconds</param>
            <param name="iRight">Desired right wheel speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Buddy.Command.SetWheelsSpeedCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SilenceTTSCmd">
            <summary>
            When executed : Makes the robot stop speaking
            </summary>
        </member>
        <member name="M:Buddy.Command.SilenceTTSCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SilenceTTSCmd.#ctor(System.Int32,System.Boolean)">
            <summary>
            When executed : Makes the robot stop speaking
            </summary>
        </member>
        <member name="M:Buddy.Command.SilenceTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.SpeakFaceCmd">
            <summary>
            When executed : Make the face speaking or not
            </summary>
        </member>
        <member name="M:Buddy.Command.SpeakFaceCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SpeakFaceCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Make the face speaking or not
            </summary>
            <param name="iSpeak">Should speak ?</param>
        </member>
        <member name="M:Buddy.Command.SpeakFaceCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StartBluetoothCmd">
            <summary>
            When executed : Enables Bluetooth connection
            </summary>
        </member>
        <member name="M:Buddy.Command.StartBluetoothCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StartBluetoothCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StartNetworkCmd">
            <summary>
            When executed : Connects to wanted Access Point
            </summary>
        </member>
        <member name="M:Buddy.Command.StartNetworkCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StartNetworkCmd.#ctor(System.String,System.String)">
            <summary>
            When executed : Connects to wanted Access Point
            </summary>
            <param name="iSSID">Name of the Access Point</param>
            <param name="iPassword">Password to this Access Point</param>
        </member>
        <member name="M:Buddy.Command.StartNetworkCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StartRecoSphinxCmd">
            <summary>
            When executed : Launches the voice recognition.
            </summary>
        </member>
        <member name="M:Buddy.Command.StartRecoSphinxCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StartRecoSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StartRecoSTTCmd">
            <summary>
            When executed : Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:Buddy.Command.StartRecoSTTCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StartRecoSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StartWifiScanCmd">
            <summary>
            When executed : Starts a Wifi Scan
            </summary>
        </member>
        <member name="M:Buddy.Command.StartWifiScanCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StartWifiScanCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StpBluetoothCmd">
            <summary>
            When executed : Disables Bluetooth connection
            </summary>
        </member>
        <member name="M:Buddy.Command.StpBluetoothCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StpBluetoothCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StpRecoSphinxCmd">
            <summary>
            When executed : Ends the voice recognition.
            </summary>
        </member>
        <member name="M:Buddy.Command.StpRecoSphinxCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StpRecoSphinxCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StpTTSCmd">
            <summary>
            When executed : Stop the current speech of the TTS
            </summary>
        </member>
        <member name="M:Buddy.Command.StpTTSCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StpTTSCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StpSTTCmd">
            <summary>
            When executed : Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:Buddy.Command.StpSTTCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StpSTTCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StpWheelsCmd">
            <summary>
            When executed : Stop wheels by setting their speed values to 0F.
            </summary>
        </member>
        <member name="M:Buddy.Command.StpWheelsCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StpWheelsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="M:Buddy.Command.SynthesizeToFileCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.SynthesizeToFileCmd.#ctor(System.String,System.String)">
            <summary>
            When executed : Makes the robot speaking the input string in the set language
            </summary>
        </member>
        <member name="T:Buddy.Command.TurnAbsCmd">
            <summary>
            When executed : Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
        </member>
        <member name="M:Buddy.Command.TurnAbsCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.TurnAbsCmd.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            When executed : Turns until the desired angle is reached in world space (based Buddy's odometry).
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The absolute target angle defines the robot orientation in world space (relative to the first position when the robot woke up)
            The robot's pose in world space at time = 0 is (x = 0, z = 0, theta = 0).</remarks>
        </member>
        <member name="M:Buddy.Command.TurnAbsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.TurnRelaCmd">
            <summary>
            When executed : Turns with a target angle (in degrees) from the current orientation.
            </summary>
        </member>
        <member name="M:Buddy.Command.TurnRelaCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.TurnRelaCmd.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            When executed : Turns with a target angle (in degrees) from the current orientation.
            </summary>
            <param name="iAngle">Desired angle in degrees</param>
            <param name="iSpeed">Desired wheels speed in degrees per seconds</param>
            <param name="iTolerance">Tolerance, in degrees, around the final angle where the robot would stop</param>
            <remarks>The target angle defines the robot orientation in local space (relative to its actual orientation)</remarks>
        </member>
        <member name="M:Buddy.Command.TurnRelaCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.LockWheelsCmd">
            <summary>
            When executed : Lock wheels
            </summary>
        </member>
        <member name="M:Buddy.Command.LockWheelsCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.LockWheelsCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Lock wheels
            </summary>
            <param name="iLock">Must the wheels be locked ?</param>
        </member>
        <member name="M:Buddy.Command.LockWheelsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.UpVolCmd">
            <summary>
            When executed : Increases the volume by 1
            </summary>
        </member>
        <member name="M:Buddy.Command.UpVolCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.UpVolCmd.#ctor(System.Boolean)">
            <summary>
            When executed : Increases the volume by 1
            </summary>
            <param name="iSound">Whether to play sound when changin volume</param>
        </member>
        <member name="M:Buddy.Command.UpVolCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.HomeCmd">
            <summary>
            When executed : Quit the app and launch the DEFAULT_APP
            </summary>
        </member>
        <member name="M:Buddy.Command.HomeCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.HomeCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StartAppCmd">
            <summary>
            When executed : Launch the app defined by the scene name.
            </summary>
        </member>
        <member name="M:Buddy.Command.StartAppCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StartAppCmd.#ctor(System.String,System.Int32[],System.Single[],System.String[])">
            <summary>
            When executed : Launch the app defined by the scene name.
            </summary>
            <param name="iIdentifier">Can be the app scene/id/vocalkey/shortname/commercialname </param>
            <param name="iIntegers">Integer arguments, can be null if not needed</param>
            <param name="iSingles">Float arguments, can be null if not needed</param>
            <param name="iStrings">String arguments, can be null if not needed</param>
        </member>
        <member name="M:Buddy.Command.StartAppCmd.#ctor(System.String)">
            <summary>
            When executed : Launch the app defined by the scene name.
            </summary>
        </member>
        <member name="M:Buddy.Command.StartAppCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.StpAppCmd">
            <summary>
            When executed : Unload the current app
            </summary>
        </member>
        <member name="M:Buddy.Command.StpAppCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.StpAppCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Command.CommandScheduler">
            <summary>
            As soon as commands are added to scheduler, these commands will be executed one after the other. 
            Commands have no particular priority.
            </summary>
        </member>
        <member name="F:Buddy.Command.CommandScheduler.MAX_COMMANDS_IN_QUEUE">
            <summary>
            Max nb commands in the scheduled queue
            </summary>
        </member>
        <member name="M:Buddy.Command.CommandScheduler.Add(Buddy.Command.ACommand[])">
            <summary>
            Add commands to be executed, any command indexed more than MAX_COMMANDS_IN_QUEUE will be ignored
            </summary>
            <param name="iCommands">Commands to executed</param>
        </member>
        <member name="T:Buddy.Command.CommandTime">
            <summary>
            Represents the executed command timestamp
            </summary>
        </member>
        <member name="T:Buddy.Command.CommandParam">
            <summary>
            Represents parameters for command. Contains it own serialization implementation
            </summary>
        </member>
        <member name="P:Buddy.Command.CommandParam.Integers">
            <summary>
            Integer storage.
            </summary>
        </member>
        <member name="P:Buddy.Command.CommandParam.Singles">
            <summary>
            Float storage.
            </summary>
        </member>
        <member name="P:Buddy.Command.CommandParam.Strings">
            <summary>
            Unicode string storage.
            </summary>
        </member>
        <member name="P:Buddy.Command.CommandParam.Objects">
            <summary>
            Miscellaneous object storage. Won't be serialized.
            </summary>
        </member>
        <member name="M:Buddy.Command.CommandParam.Serialize">
            <summary>
            Serialization to byte array of the current param
            </summary>
            <returns>Parameter byte array equivalent</returns>
        </member>
        <member name="M:Buddy.Command.CommandParam.Deserialize(System.Byte[],System.Int32@)">
            <summary>
            Create a new CommandParam object from the input byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="ioIndex">The index at the end of the parameter area</param>
            <returns>The new CommandParam</returns>
        </member>
        <member name="M:Buddy.Command.CommandParam.ToString">
            <summary>
            String basic serialization of the commandparam
            </summary>
            <returns>CommandParam string value for debug</returns>
        </member>
        <member name="T:Buddy.Command.SetLangCmd">
            <summary>
            When executed : Change the language of all app / byos / stt / tts
            </summary>
        </member>
        <member name="M:Buddy.Command.SetLangCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Buddy.Command.ExitBRECmd">
            <summary>
            When executed : Kill the Buddy Runtime Environment
            </summary>
        </member>
        <member name="M:Buddy.Command.ExitBRECmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Buddy.Command.OpWinCmd">
            <summary>
            When executed : Open an UI window 
            </summary>
        </member>
        <member name="M:Buddy.Command.OpWinCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Buddy.Command.OpWinCmd.#ctor(System.Int32)">
            <summary>
            When executed : Open an UI window 
            </summary>
        </member>
        <member name="M:Buddy.Command.OpWinCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:Buddy.Internal.Net.BroadcastListener">
            <summary>
            This is to create a Broadcast client to let
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.BroadcastListener.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Own method to configure what to do when receiving a Broadcast
            </summary>
            <param name="iFromAddress">The address that send the broadcast</param>
            <param name="iData">Data contained in the broadcast</param>
        </member>
        <member name="T:Buddy.Internal.Net.LocalListener">
            <summary>
            This class handles the Local Broadcast Listener and messages with the Smartphone app to launch local remote control
            </summary>
        </member>
        <member name="T:Buddy.Internal.Net.NetworkBroadcastResult">
            <summary>
            Structure for broadcast messages
            </summary>
        </member>
        <member name="F:Buddy.Internal.Net.NetworkBroadcastResult.serverAddress">
            <summary>
            The address of the server that sent the broadcast
            </summary>
        </member>
        <member name="F:Buddy.Internal.Net.NetworkBroadcastResult.broadcastData">
            <summary>
            Content of the broadcast
            </summary>
        </member>
        <member name="T:Buddy.Internal.Net.NetDiscovery">
            <summary>
            Unity Networking NetworkDiscovery added in this dll for namespace separation in dll reasons
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.NetDiscovery.StartAsClient">
            <summary>
            Starts the service as client and listens for broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:Buddy.Internal.Net.NetDiscovery.StartAsServer">
            <summary>
            Starts the service as server and emits a broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:Buddy.Internal.Net.NetDiscovery.StopBroadcast">
            <summary>
            Stops the broadcast service
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.NetDiscovery.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Callback called when a broadcast is received
            </summary>
            <param name="iFromAddress">Address that sent the broadcast</param>
            <param name="iData">Body data of the broadcast</param>
        </member>
        <member name="T:Buddy.Internal.Net.WebRTCListener">
            <summary>
            This part listens on the Crossbar server to know if there is any incoming call
            </summary>
        </member>
        <member name="P:Buddy.Internal.Net.WebRTCListener.RemoteID">
            <summary>
            Used to know the Remote ID for RTC communication
            </summary>
        </member>
        <member name="P:Buddy.Internal.Net.WebRTCListener.MessageFromChat">
            <summary>
            Use this to know if answer from STT comes from a Chat question
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.PublishConnectionRequest(System.String)">
            <summary>
            Use this to make a call towards another Buddy
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.OnConnectionRequest(System.String)">
            <summary>
            Called by Android plugin when message is received from the PubSub of Crossbar
            </summary>
            <param name="iMessage"></param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.OnAndroidLog(System.String)">
            <summary>
            Called by Android plugin for Debug purposes
            </summary>
            <param name="iLogText"></param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.SendNotification(System.String,System.String)">
            <summary>
            Send notification as Crossbar published event
            </summary>
            <param name="iTitle">Title of the notification</param>
            <param name="iMessage">Body message of the notification</param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.ProcessAnswer(System.String)">
            <summary>
            Use this to send back the answer to the user.
            </summary>
            <param name="iAnwser"></param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.OnMessageReceived(System.String)">
            <summary>
            Used by Android plugin when chat message is received through WebRTC and send it back to user
            </summary>
            <param name="iChatMessage">Chat message received through WebRTC</param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.PublishNotification(System.String)">
            <summary>
            Format of the notification is the following : BuddyID / Title @ Message
            </summary>
            <param name="iMessage">Notification message to send</param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.StartListener(System.String,System.String)">
            <summary>
            Initialize the Java Android Object that handles PubSub messages from Crossbar
            </summary>
            <param name="iUri">Crossbar uri</param>
            <param name="iRealm">Name of the realm</param>
        </member>
        <member name="M:Buddy.Internal.Net.WebRTCListener.WaitSTTFinished(System.String)">
            <summary>
            Wait until STT has finished listening and is free to use
            </summary>
            <param name="iChatMessage">The Chat message received to process</param>
            <returns></returns>
        </member>
        <member name="T:Buddy.Internal.Net.SharedAccessSignature">
            <summary>
            Inner class for asking a shared access signature to Microsoft Azure cloud. Signature are used by loggers.
            </summary>
        </member>
        <member name="T:Buddy.Internal.Net.AEventHubLogger">
            <summary>
            Abstract class that must be derived by a specific logger in order to log inside the BFR eventhub. 
            </summary>
        </member>
        <member name="F:Buddy.Internal.Net.AEventHubLogger.URL">
            <summary>
            URL of the BFR eventhub
            </summary>
        </member>
        <member name="F:Buddy.Internal.Net.AEventHubLogger.TIME_OUT">
            <summary>
            Time out count for request
            </summary>
        </member>
        <member name="F:Buddy.Internal.Net.AEventHubLogger.mHeaders">
            <summary>
            Header dictionnary for requests
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.AEventHubLogger.SendToEventHub">
            <summary>
            Must be implemented using the URL inside a WWW Unity request
            </summary>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:Buddy.Internal.Net.AnomalyLogger">
            <summary>
            Auto log to the BFR event hub hardware anomalies
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.AnomalyLogger.SendToEventHub">
            <summary>
            Must be implemented using the URL inside a WWW Unity request
            </summary>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:Buddy.Internal.Net.CommandLogger">
            <summary>
            Auto log to the BFR event hub logged command from the CommandManager
            </summary>
        </member>
        <member name="M:Buddy.Internal.Net.CommandLogger.SendToEventHub">
            <summary>
            Must be implemented using the URL inside a WWW Unity request
            </summary>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:Buddy.Internal.Net.LaunchTelepresence">
            <summary>
            Behaviour for starting RemoteControlApp
            </summary>
        </member>
        <member name="T:Buddy.Internal.System.GarbageManager">
            <summary>
            Unloads unused assets, detects zombie scene and close them
            </summary>
        </member>
        <member name="T:Buddy.Internal.System.ScreenLocker">
            <summary>
            Unloads unused assets, detects zombie scene and close them
            </summary>
        </member>
        <member name="T:Buddy.Internal.System.AnomalySearcher">
            <summary>
            Search for hardware error. Those anomalies will be logged by the AnomalyLogger class.
            </summary>
        </member>
        <member name="T:Buddy.Internal.AppManagement.Sandbox">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="M:Buddy.Internal.AppManagement.AppUpdater.CompareVersions(System.String,System.String)">
            <summary>
            Returns 1 if First greater than Second.
            Returns 0 if equals.
            Returns -1 if First lower than Second
            </summary>
            <param name="iFirstVersion">First version string</param>
            <param name="iSecondVersion">Second version string</param>
            <returns>Compared value</returns>
        </member>
        <member name="T:Buddy.Internal.AppManagement.AppInfo">
            <summary>
            Meta data of an application. External dev should never explicitly use this class.
            It's an internal class for app managing.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.ID">
            <summary>
            Unique application identifier
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.ShortName">
            <summary>
            The string that will be used as directory / class name.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.CommercialName">
            <summary>
            The string that will be displayed in the menu / loading.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.MainScene">
            <summary>
            Application main scene (entrypoint). Error if NULL.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.Authors">
            <summary>
            The app authors.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.Version">
            <summary>
            Current installed app version
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.VersionName">
            <summary>
            Current installed app version name
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.Category">
            <summary>
            The app category
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.Permissions">
            <summary>
            The app permissions
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.LangVocalKeys">
            <summary>
            Strings for speech to text activation.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.OptionsLayoutClassName">
            <summary>
            Application layout fullname. You should never use this. EmptyAppLayout will be setted if NULL.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.ActivityClassName">
            <summary>
            Application Activity fullname.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.OptionsLayout">
            <summary>
            The application menu layout that was created from OptionsLayoutStr.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.AppData">
            <summary>
            Application data. Automaticaly serialized after unload app, and deserialized after app loading.
            </summary>
        </member>
        <member name="P:Buddy.Internal.AppManagement.AppInfo.AppActivity">
            <summary>
            Application Activity entrypoint for callback
            </summary>
        </member>
        <member name="M:Buddy.Internal.AppManagement.AppInfo.#ctor">
            <summary>
            AppInfo are build by deserialization inside the AppManager.
            </summary>
        </member>
        <member name="M:Buddy.Internal.AppManagement.AppInfo.LoadLayout">
            <summary>
            Create the layout of the appinfo from the assembly where the class should be.
            </summary>
        </member>
        <member name="M:Buddy.Internal.AppManagement.AppInfo.LoadActivity">
            <summary>
            Create the behaviour of the appinfo
            </summary>
        </member>
        <member name="M:Buddy.Internal.AppManagement.AppInfo.SetLanguage(Buddy.Language)">
            <summary>
            Update vocal activation key in the input language
            </summary>
            <param name="iLanguage">The new requested language</param>
        </member>
        <member name="T:Buddy.Internal.AppManagement.AppManager">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="M:Buddy.Internal.AppManagement.AppManager.Quit">
            <summary>
            Quit the current app and load the default app (if load default is enabled)
            </summary>
        </member>
        <member name="T:Buddy.AAppActivity">
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mFace">
            <summary>
            Simple access to the face robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mRGBCam">
            <summary>
            Simple access to the RGB camera robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mDepthCam">
            <summary>
            Simple access to the depth camera robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mIRSensors">
            <summary>
            Simple access to all infrared sensor robot components
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mUSSensors">
            <summary>
            Simple access to all ultrasound sensor robot components
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mCliffSensors">
            <summary>
            Simple access to all cliff sensor robot components
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mYesHinge">
            <summary>
            Simple access to the yes hinge robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mNoHinge">
            <summary>
            Simple access to the no hinge robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mWheels">
            <summary>
            Simple access to wheels robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mTTS">
            <summary>
            Simple access to the text to speech
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mSTT">
            <summary>
            Simple access to the speech to text
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mSphinx">
            <summary>
            Simple access to the sphinx trigger
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mBattery">
            <summary>
            Simple access to the battery robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mMicro">
            <summary>
            Simple access to the micro robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mSpeaker">
            <summary>
            Simple access to the speaker robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mLED">
            <summary>
            Simple access to the LED robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mThermalSensor">
            <summary>
            Simple access to the thermal sensor robot component
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mTabletParameters">
            <summary>
            Simple access to tablet parameters
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mVocalManager">
            <summary>
            Vocal activation wrapper for Sphinx/STT facilities
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mDictionary">
            <summary>
            The current language dictionnary
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mNotifier">
            <summary>
            Notification will be printed at the screen top
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mToaster">
            <summary>
            Toast will be printed at the screen center
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mMood">
            <summary>
            Helper in order to easily change the robot mood (LED and Face [and moving behaviour])
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mLayout">
            <summary>
            Your app layout. You will need to cast it to {APP_NAME}Layout.
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mAnimator">
            <summary>
            Your optional Animator. You must init it by using {APP_NAME}Activity.Init(animator) static method
            </summary>
        </member>
        <member name="F:Buddy.AAppActivity.mObjects">
            <summary>
            Stored objects from {APP_NAME}Activity.Init(animator, obj1, obj2...) static method
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.OnLoading(System.String[],System.Int32[],System.Single[])">
            <summary>
            Called when the app loading occur. You can proceed here your high pre-computes or data loading
            </summary>
            <param name="iStrArgs">Optional str args</param>
            <param name="iIntArgs">Optional int args</param>
            <param name="iSingleArgs">Optional float args</param>
        </member>
        <member name="M:Buddy.AAppActivity.OnStart(System.String[],System.Int32[],System.Single[])">
            <summary>
            Called when the app is fully loaded
            </summary>
            <param name="iStrArgs">Optional str args</param>
            <param name="iIntArgs">Optional int args</param>
            <param name="iSingleArgs">Optional float args</param>
        </member>
        <member name="M:Buddy.AAppActivity.OnSuccessUnlockScreen">
            <summary>
            Called when the user succeed to unlock the screen. It will be called only if your app has the ability to lock the screen
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.OnFailureUnlockScreen">
            <summary>
            Called when the user failed to unlock the screen. It will be called only if your app has the ability to lock the screen
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.OnClickLockedScreen">
            <summary>
            Called when the user clicked on the locked screen. It will be called only if your app has the ability to lock the screen
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.OnChangeLang(Buddy.Language)">
            <summary>
            Called when the OS main language changed
            </summary>
            <param name="iLang">The new setted language</param>
        </member>
        <member name="M:Buddy.AAppActivity.OnAlertReminder(System.Collections.Generic.List{Buddy.Reminder})">
            <summary>
            Called when a reminder alert rised
            </summary>
            <param name="iIncomingEvents">The array of rised reminders</param>
        </member>
        <member name="M:Buddy.AAppActivity.OnQuit">
            <summary>
            Called when the application is currently unloading. It will be your last call
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.Init(UnityEngine.Animator,System.Object[])">
            <summary>
            This static method allow you to set basic param to your Activity. It must be done at the beginning of your app.
            </summary>
            <param name="iAnimator"></param>
            <param name="iParams"></param>
        </member>
        <member name="M:Buddy.AAppActivity.QuitApp">
            <summary>
            Quit the running app
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.LockScreen">
            <summary>
            By using this method, the robot would be locked (e.g. the UI) until the user set the robot password.
            This mode can only be disabled by quiting the app
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.UnlockScreen">
            <summary>
            Unlock the screen, careful, the Buddy will be vunerable
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.LoadScene(System.Int32)">
            <summary>
            Load the scene {AppID}-{SceneIndex}
            </summary>
            <param name="iSceneIndex">Index of the scene (0, 1, 2...), where 0 is the main scene</param>
        </member>
        <member name="M:Buddy.AAppActivity.Trigger(System.String)">
            <summary>
            Trigger the named trigger in the presetted animator
            </summary>
            <param name="iTriggerName">Trigger name</param>
        </member>
        <member name="M:Buddy.AAppActivity.ResetTrigger(System.String)">
            <summary>
            Reset the named trigger in the presetted animator
            </summary>
            <param name="iTriggerName"></param>
        </member>
        <member name="M:Buddy.AAppActivity.SetBool(System.String,System.Boolean)">
            <summary>
            Set the bool value of the named boolean in the presetted animator
            </summary>
            <param name="iBoolName">The bool name to set</param>
            <param name="iVal">Value of the boolean</param>
        </member>
        <member name="M:Buddy.AAppActivity.GetBool(System.String)">
            <summary>
            Retrieve the value of the named boolean in the presetted animator
            </summary>
            <param name="iBoolName">Boolean name</param>
            <returns>The value of the named boolean</returns>
        </member>
        <member name="M:Buddy.AAppActivity.SetInteger(System.String,System.Int32)">
            <summary>
            Set the bool value of the named integer in the presetted animator
            </summary>
            <param name="iIntName">The integer name to set</param>
            <param name="iVal">Value of the integer</param>
        </member>
        <member name="M:Buddy.AAppActivity.GetInteger(System.String)">
            <summary>
            Retrieve the value of the named integer in the presetted animator
            </summary>
            <param name="iIntName">Integer name</param>
            <returns>The value of the named integer</returns>
        </member>
        <member name="M:Buddy.AAppActivity.SetFloat(System.String,System.Single)">
            <summary>
            Set the bool value of the named float in the presetted animator
            </summary>
            <param name="iFloatName">The float name to set</param>
            <param name="iVal">Value of the float</param>
        </member>
        <member name="M:Buddy.AAppActivity.GetFloat(System.String)">
            <summary>
            Retrieve the value of the named foat in the presetted animator
            </summary>
            <param name="iFloatName">Foat name</param>
            <returns>The value of the named foat</returns>
        </member>
        <member name="M:Buddy.AAppActivity.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Begin a coroutine.
            </summary>
            <param name="iFunc">Your coroutine to start</param>
        </member>
        <member name="M:Buddy.AAppActivity.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stop the coroutine
            </summary>
            <param name="iFunc">Your coroutine to stop</param>
        </member>
        <member name="M:Buddy.AAppActivity.StopAllCoroutines">
            <summary>
            Stop all started coroutines
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.CancelInvoke">
            <summary>
            Cancels all Invoke calls on this MonoBehaviour.
            </summary>
        </member>
        <member name="M:Buddy.AAppActivity.CancelInvoke(System.String)">
            <summary>
            Cancels all Invoke calls with name methodName on this behaviour.
            </summary>
            <param name="iMethodName"></param>
        </member>
        <member name="M:Buddy.AAppActivity.Invoke(System.String,System.Single)">
            <summary>
            Invokes the method methodName in time seconds.
            </summary>
            <param name="iMethodName"></param>
            <param name="iTime"></param>
        </member>
        <member name="M:Buddy.AAppActivity.InvokeRepeating(System.String,System.Single,System.Single)">
            <summary>
            Invokes the method methodName in time seconds, then repeatedly every repeatRate
            </summary>
            <param name="iMethodName"></param>
            <param name="iTime"></param>
            <param name="iRepeatRate"></param>
        </member>
        <member name="M:Buddy.AAppActivity.IsInvoking">
            <summary>
            Is any invoke pending on this MonoBehaviour?
            </summary>
            <returns>True if invoking</returns>
        </member>
        <member name="T:Buddy.AAppData">
            <summary>
            Your app data class must inherit from this class. Your app data will be store here.
            The data object will be serialized when the application is quited and unserialized the first that that GetInstance()
            will be called. Do never change the name of your {APP_NAME}Data class.
            </summary>
        </member>
        <member name="F:Buddy.AAppData.sInstance">
            <summary>
            Instance of your data (singleton).
            </summary>
        </member>
        <member name="M:Buddy.AAppData.GetInstance``1">
            <summary>
            Retrieve your last save version of your data.
            </summary>
            <typeparam name="T">Type of your data class</typeparam>
            <returns>Your data object</returns>
        </member>
        <member name="T:Buddy.BYOS">
            <summary>
            Core of the BuddY Operating System (BYOS).
            Gave access to robot control and tools like UI, external API, cloud access, resources and misc managers.
            A Unique instance of the BYOS must be present in the whole application.
            </summary>
        </member>
        <member name="P:Buddy.BYOS.VocalManager">
            <summary>
            Layer using SpeechToText and SphinxTrigger
            </summary>
        </member>
        <member name="P:Buddy.BYOS.DialogManager">
            <summary>
            Layer using VocalManager and TextToSpeech
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Geolocation">
            <summary>
            Geolocation allows you to know the robot current position
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Notifier">
            <summary>
            Notifications are displayed on the screen top for misc info
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Toaster">
            <summary>
            Allow you to toast UI elements like buttons, text, grid, picture... on the Buddy's screen
            </summary>
        </member>
        <member name="P:Buddy.BYOS.WiFiManager">
            <summary>
            Tools for retrieve WiFi networks, updated every minutes
            </summary>
        </member>
        <member name="P:Buddy.BYOS.ResourceManager">
            <summary>
            Resource loader to retrieve Unity object. Check both Resources/ and downloaded Assetbundles. Allow you to retrieve the full path from the name of the raw file
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Dictionary">
            <summary>
            Hosts all key -> currentlanguage_word matchings
            </summary>
        </member>
        <member name="P:Buddy.BYOS.DataBase">
            <summary>
            Database access (User / media / memory)
            </summary>
        </member>
        <member name="P:Buddy.BYOS.LanguageManager">
            <summary>
            Language handler. The language can only by updated by a user input in Parameters
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Mood">
            <summary>
            Helper in order to easily change the robot mood (LED and Face [and moving behaviour])
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Face">
            <summary>
            Want to make Buddy crying ? Here the access
            </summary>
        </member>
        <member name="P:Buddy.BYOS.TextToSpeech">
            <summary>
            Want to make Buddy speaking ? Here the access
            </summary>
        </member>
        <member name="P:Buddy.BYOS.SphinxTrigger">
            <summary>
            Want to know if Buddy say "Hello Buddy" or "Salut Buddy" ? Here the access
            </summary>
        </member>
        <member name="P:Buddy.BYOS.SpeechToText">
            <summary>
            Convert an input signal to a basic System.String
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Speaker">
            <summary>
            Speaker component. Not used
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Micro">
            <summary>
            Micro component. Not used
            </summary>
        </member>
        <member name="P:Buddy.BYOS.TabletParameters">
            <summary>
            Access to accelerometers, BlueTooth, WiFi ...
            </summary>
        </member>
        <member name="P:Buddy.BYOS.RGBCam">
            <summary>
            Basic webcam of the robot
            </summary>
        </member>
        <member name="P:Buddy.BYOS.USSensors">
            <summary>
            Set of robot ultrasounds sensors
            </summary>
        </member>
        <member name="P:Buddy.BYOS.ThermalSensor">
            <summary>
            Robot thermal sensor
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Motors">
            <summary>
            Set of motors. Including wheels and hinges
            </summary>
        </member>
        <member name="P:Buddy.BYOS.LED">
            <summary>
            LED accessor to update body lights
            </summary>
        </member>
        <member name="P:Buddy.BYOS.IRSensors">
            <summary>
            Set of robot infrareds sensors
            </summary>
        </member>
        <member name="P:Buddy.BYOS.CliffSensors">
            <summary>
            Set of robot cliff sensors
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Battery">
            <summary>
            Battery component of the robot, neve below 9.5V !
            </summary>
        </member>
        <member name="P:Buddy.BYOS.DepthCam">
            <summary>
            Depth camera of the robot
            </summary>
        </member>
        <member name="P:Buddy.BYOS.Instance">
            <summary>
            The unique instance of the BuddY Operating System
            </summary>
        </member>
        <member name="T:Buddy.APIBridge">
            <summary>
            Core access to the API. Must never be used explicitly for robot application.
            </summary>
        </member>
        <member name="T:Buddy.DataBase">
            <summary>
            Class access for users data, not used
            </summary>
        </member>
        <member name="M:Buddy.DataBase.GetUsers">
            <summary>
            Buddy's user list. It's a copy, so any modification won't be keeped
            </summary>
            <returns>Copy of Buddy's users</returns>
        </member>
        <member name="T:Buddy.Gender">
            <summary>
            Gender of the user
            </summary>
        </member>
        <member name="F:Buddy.Gender.UNKNOWN">
            <summary>
            Unspecified gender.
            </summary>
        </member>
        <member name="F:Buddy.Gender.MALE">
            <summary>
            Male gender
            </summary>
        </member>
        <member name="F:Buddy.Gender.FEMALE">
            <summary>
            Female gender
            </summary>
        </member>
        <member name="T:Buddy.UserAccount">
            <summary>
            User info, not used
            </summary>
        </member>
        <member name="T:Buddy.Geolocation">
            <summary>
            Geolocation tool, should be called from BYOS. The geolocation authorization must be enabled by the user.
            Will be auto-updated at each 10800 seconds
            </summary>
        </member>
        <member name="P:Buddy.Geolocation.Latitude">
            <summary>
            Angular value in degrees in the North-South orientation. Latitude at Equator is 0°
            </summary>
        </member>
        <member name="P:Buddy.Geolocation.Longitude">
            <summary>
            Angular value in degrees in the East-West orientation. Longitude at the Greenwish meridian is 0°
            </summary>
        </member>
        <member name="P:Buddy.Geolocation.Altitude">
            <summary>
            Value in meters
            </summary>
        </member>
        <member name="P:Buddy.Geolocation.HorizontalAccuracy">
            <summary>
            Horizontal accuracy of the location
            </summary>
        </member>
        <member name="P:Buddy.Geolocation.VerticalAccuracy">
            <summary>
            Vertical accuracy of the location
            </summary>
        </member>
        <member name="P:Buddy.Geolocation.TimeStamp">
            <summary>
            Time when the geolocation was taken in seconds from 1970
            </summary>
        </member>
        <member name="T:Buddy.Features.Detection.ADetector">
            <summary>
            Abstract call which define a detector
            </summary>
        </member>
        <member name="E:Buddy.Features.Detection.ADetector.OnDetection">
            <summary>
            Event triggered when a detection has occured
            called by OnSendDetection
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.ADetector.MinThreshold">
            <summary>
            The minimal value for the threshold of the detector
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.ADetector.MaxThreshold">
            <summary>
            The maximal value for the threshold of the detector
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.ADetector.Threshold">
            <summary>
            The value of the threshold
            When the value is exceeded a detection will occur
            </summary>
        </member>
        <member name="M:Buddy.Features.Detection.ADetector.OnSendDetection">
            <summary>
            Function which must be called when the detection must occur
            Will call the OnDetection event
            </summary>
        </member>
        <member name="M:Buddy.Features.Detection.ADetector.SetSensibilityThreshold(System.Single)">
            <summary>
            Set the threshold by choosing the ratio of sensibility
            A value of 1 will set the threshold to its max value and a value of 0 will set it to its min value
            </summary>
            <param name="iSensibility">sensibility ratio between 0 and 1</param>
        </member>
        <member name="M:Buddy.Features.Detection.ADetector.Init">
            <summary>
            Called at the start
            </summary>
        </member>
        <member name="T:Buddy.Features.Detection.FireDetector">
            <summary>
            Class used to detect a fire
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.FireDetector.IsFireDetected">
            <summary>
            Is true if a fire has been detected
            </summary>
        </member>
        <member name="T:Buddy.Features.Detection.KidnappingDetector">
            <summary>
            Class used to know if buddy has been taken off
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.KidnappingDetector.IsBeingKidnapped">
            <summary>
            Is true if buddy is taken off
            </summary>
        </member>
        <member name="T:Buddy.Features.Detection.MovementDetector">
            <summary>
            Class used to detect movements
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.MovementDetector.IsMovementDetected">
            <summary>
            Is true if a movement has been detected
            </summary>
        </member>
        <member name="T:Buddy.Features.Detection.MovementTracker">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.MovementTracker.Threshold">
            <summary>
            Threshold value for the binary image got from the difference between the actual and previous picture
            Its value is between 0 and 255
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.MovementTracker.BinaryImage">
            <summary>
            Mat picture of the binary image got from the difference between the actual and previous picture
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.MovementTracker.PositionMoment">
            <summary>
            The position of the center of the moment of the picture
            </summary>
        </member>
        <member name="T:Buddy.Features.Detection.SoundDetector">
            <summary>
            Class used to detect sound if it exceeds the threshold
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.SoundDetector.HasStarted">
            <summary>
            Is true if the detection has been started using the StartMic function
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.SoundDetector.Value">
            <summary>
            Returns the absolute difference between the current audio level and the average audio level
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.SoundDetector.IsASoundDetected">
            <summary>
            Is true if a sound has been detected
            </summary>
        </member>
        <member name="P:Buddy.Features.Detection.SoundDetector.Clip">
            <summary>
            Returns the audioclip used in the sound detection
            </summary>
        </member>
        <member name="M:Buddy.Features.Detection.SoundDetector.StartMic">
            <summary>
            Initialize and start the detection
            </summary>
        </member>
        <member name="M:Buddy.Features.Detection.SoundDetector.Stop">
            <summary>
            Stop the detection
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.AMetricalMapping">
            <summary>
            Abstract class helper for metrical mapping
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.DETECT_STEP">
            <summary>
            Progression value when an obstacle is detected at a specific point.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.REFRESH_PERIOD">
            <summary>
            Time before refresh mapping.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mMotion">
            <summary>
            Motion control of the robot.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mMapMat">
            <summary>
            Map of the generated mapping.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mFlippedMat">
            <summary>
            Mat used for vertical-flip of the map.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mMapTexture">
            <summary>
            Texture used for display purpose.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mMapRobotPosition">
            <summary>
            Global position of the robot in the map.
            Format : (x, y, th)
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mOldMapRobotPosition">
            <summary>
            Old global position of the robot in the map.
            Format : (x, y, th)
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mRealRobotPosition">
            <summary>
            Relative position of the robot.
            The first position of the robot will be (x = 0, y = 0, theta = 0).
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mMapHeight">
            <summary>
            Height of the map.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mMapWidth">
            <summary>
            Width of the map.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mInitXRobotPositionOnMap">
            <summary>
            Base x position of the robot in the global map.
            Arbitrary setting.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mInitYRobotPositionOnMap">
            <summary>
            Base y position of the robot in the global map.
            Arbitrary setting.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mScale">
            <summary>
            Multiplicative coefficient for local values to global values.
            Arbitrary setting.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.AMetricalMapping.mUpdateTimer">
            <summary>
            Timer of update.
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.AMetricalMapping.MapMat">
            <summary>
            Gets the map in mat format.
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.AMetricalMapping.MapTexture">
            <summary>
            Gets the map in texture2D format.
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.Awake">
            <summary>
            Called once at the start
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.Start">
            <summary>
            Called once at the start after the Awake method
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.Update">
            <summary>
            Called at each frame
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.IncrementObstacleAt(UnityEngine.Vector2)">
            <summary>
            Increases the detection value of the position (x, y)
            </summary>
            <param name="iPosition">The position to increase by a DetectStep value</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.IncrementObstacleAt(UnityEngine.Vector3)">
            <summary>
            Increases the detection value of the position (x, 0, y)
            </summary>
            <param name="iPosition">The position to increase by a DetectStep value</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.IncrementObstacleAt(OpenCVUnity.Point)">
            <summary>
            Increases the detection value of the position (x, y)
            </summary>
            <param name="iPoint">The position to increase by a DetectStep value</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.DrawRobotPosition">
            <summary>
            Removes considered obstacles on the robot path.
            Display robot position on the map in red.
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.Init">
            <summary>
            Initialization, called at the start
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.AMetricalMapping.ProcessMapping">
            <summary>
            Update function
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.BasicSensorMapping">
            <summary>Create a basic mapping of the environment.</summary>
            <remarks>
            This mapping is based on the Unity transform and sensor values of the robot.
            You can easly use this mapping for path finding or segmentation purposes by
            using the mMapMat matrix output. In this 1-channel output, a low value means an obstacle.
            </remarks>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.BasicSensorMapping.mUltraSoundSensors">
            <summary>
            Ultra sound sensors.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Metrical.BasicSensorMapping.mInfraRedSensors">
            <summary>
            Infrared sensors.
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.BasicSensorMapping.Init">
            <summary>
            Called once at the beginning.
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.BasicSensorMapping.ProcessMapping">
            <summary>
            Called at each frame.
            </summary>
            <remarks>
            Gets all current odometric and sensor value in order
            to apply a basic mapping of the environment.
            The resulting mapping is stocked in mMapMat, then converted to mMapTexture for Unity display.
            </remarks>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.BasicSensorMapping.UpdatePosition(System.Single,System.Single,System.Single)">
            <summary>
            Updates the absolute position of the robot in the map.
            </summary>
            <param name="iX"></param>
            <param name="iY"></param>
            <param name="iTheta"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.BasicSensorMapping.UpdateObstacles(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Process a basic mapping based on input datas.
            </summary>
            <param name="iUSLeft">Value of the left ultrasound sensor</param>
            <param name="iUSRight">Value of the right ultrasound sensor</param>
            <param name="iIRLeft">Value of the left infrared sensor</param>
            <param name="iIRMiddle">Value of the middle infrared sensor</param>
            <param name="iIRRight">Value of the right infrared sensor</param>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.FakeLaserScanMapping">
            <summary>
            Mapping generated from depth camera used as a LIDAR laser
            The fake LIDAR is limited to the field of view of the camera
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.FakeLaserScanMapping.Init">
            <summary>
            Called once at the beginning.
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.FakeLaserScanMapping.ProcessMapping">
            <summary>
            Called at each frame.
            </summary>
            <remarks>
            Gets all current odometric and sensor value in order
            to apply a basic mapping of the environment.
            The resulting mapping is stocked in mMapMat, then converted to mMapTexture for Unity display.
            </remarks>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.FakeLaserScanMapping.UpdatePosition(System.Single,System.Single,System.Single)">
            <summary>
            Updates the absolute position of the robot in the map.
            </summary>
            <param name="iX"></param>
            <param name="iY"></param>
            <param name="iTheta"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.FakeLaserScanMapping.UpdateObstacles(System.Byte[])">
            <summary>
            Process a basic mapping based on input datas.
            </summary>
            <param name="iLaserScan">Fake laser scan array from depth camera</param>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.Impl.Distribution">
            <summary>
            Represents a uniform distribution by its min, max and marge
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.Distribution.Min">
            <summary>
            Min val of the distribution
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.Distribution.Max">
            <summary>
            Max val of the distribution
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.Distribution.Marge">
            <summary>
            The tolerate marge (for stockastic purposes)
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization">
            <summary>
            Particle Swarm Optimization algorithm described as https://en.wikipedia.org/wiki/Particle_swarm_optimization
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization.Particles">
            <summary>
            Swarm particles
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization.BestSwarmParticle">
            <summary>
            The best Swarm particle
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization.ObjectiveFunction">
            <summary>
            The objective function. The swarm will search to find the lowest value
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization.#ctor(System.Collections.Generic.IList{Buddy.Features.Mapping.Metrical.Impl.Distribution},System.Int32,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Base constructor, see https://en.wikipedia.org/wiki/Particle_swarm_optimization
            </summary>
            <param name="iSearchSpace">Search space</param>
            <param name="iNbParticles">Number of particles</param>
            <param name="iO">The Omega factor</param>
            <param name="iNf">The neighbor factor</param>
            <param name="iBf">The best find factor</param>
            <param name="iRf">The random factor</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization.Resample">
            <summary>
            Resample all particles
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.Impl.ParticleSwarmOptimization.Update">
            <summary>
            Update the swarm
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle">
            <summary>
            Swarm particle unit element
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle.SearchSpaceValues">
            <summary>
            Position of the particle in the search space
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle.SearchSpaceVelocity">
            <summary>
            Velocity of the particle in the search space
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle.Value">
            <summary>
            The value of the partcile depending on the ObjectiveFunction
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle.BestNeighborhood">
            <summary>
            Best known neighbor of the particle
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle.#ctor(System.Int32)">
            <summary>
            Base constructor
            </summary>
            <param name="iNbDimension"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.Impl.SwarmParticle.ToString">
            <summary>
            Serialization tool
            </summary>
            <returns>The string with search space values and the obj value</returns>
        </member>
        <member name="T:Buddy.Features.Mapping.Metrical.PuzzleSLAM">
            <summary>
            The Puzzle SLAM uses a partcile swarm optimization in order to find the 
            best area match in an existing 2D map.
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.PuzzleSLAM.Init">
            <summary>
            Initialization, called at the start
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.PuzzleSLAM.ProcessMapping">
            <summary>
            Update function
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.PuzzleSLAM.ExtractROIFromBuildingMap">
            <summary>
            Extracts the ROI of the current map to simplify further computes
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Metrical.PuzzleSLAM.Cost(Buddy.Features.Mapping.Metrical.Impl.SwarmParticle)">
            <summary>
            Estimates the value of the particle (x, y, th).
            </summary>
            <param name="iParticle">The particle to evaluate</param>
            <returns>Cost of the particle. Lower is better</returns>
        </member>
        <member name="T:Buddy.Features.Mapping.FakeLaserScanDevice">
            <summary>
            Create a fake laser scan "LIDAR" like from the depth cam
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.FakeLaserScanDevice.mDepthCamera">
            <summary>
            3D depth camera.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.FakeLaserScanDevice.mScanMat">
            <summary>
            Mat used for fake laser scan display
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.FakeLaserScanDevice.mScanTexture">
            <summary>
            Texture2D used for fake laser scan display
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.FakeLaserScanDevice.SCAN_HEIGH_DISPLAY">
            <summary>
            Default height of the scan display for debug
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.FakeLaserScanDevice.mScan">
            <summary>
            Scan of the fake LIDAR
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.FakeLaserScanDevice.ScanTexture">
            <summary>
            Get the scan texture
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.FakeLaserScanDevice.FieldOfView">
            <summary>
            External getter of field of view
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.FakeLaserScanDevice.Scan">
            <summary>
            Gets the scan of the fake LIDAR
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.FakeLaserScanDevice.Start">
            <summary>
            Called once at the start
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.FakeLaserScanDevice.Update">
            <summary>
            Called once per frame
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.FakeLaserScanDevice.CreateLaserScanFromDepthCamView(OpenCVUnity.Mat)">
            <summary>
            Create a fake laser scan from the depth camera input
            </summary>
            <param name="iDepthCamView">Frame of the depth camera</param>
            <returns>Array of value range from 0 to 255</returns>
        </member>
        <member name="M:Buddy.Features.Mapping.FakeLaserScanDevice.DrawScan(System.Byte[])">
            <summary>
            Display fake laser scan into mScanMat
            </summary>
            <param name="iLaserScan">The fake laser scan</param>
        </member>
        <member name="T:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM">
            <summary>
            Extendend Kalman Filter that is made for SLAM applciation
            It estimates robot pose.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.MAX_LANDMARKS">
            <summary>
            Maximum landmarks number.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mStateVector">
            <summary>
            The system state X 
            [1, 3+2n] (with n number of observed landmarks)
            {x_robot, y_robot, theta_robot, x1_landmark, y1_landmark, ..., xn_landmark, yn_landmark}
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mStateRobot">
            <summary>
            Robot state, this corresponds to the three first coordinates of X.
            [x_robot, y_robot, theta_robot]
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mStateLandmarks">
            <summary>
            Landmarks position.
            [x1_landmark, , y1_landmark, ..., xn_landmark, yn_landmark]
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mCovarianceMat">
            <summary>
            The covariance matrix P, it contains :
            - the covariance on the robot position A : [3,3]
            - the covariance on the landmarks B(1st one), C(last one) : [2,2] 
            - the covariance between robot position and landmarks D : [2,3], E = Dt
            - the covariance between the landmarks G : [2,2]
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mPrr">
            <summary>
            The covariance of the robot, it corresponds to P(0,0,3,3)
            Prr = [3x3]
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mKalmanGain">
            <summary>
            Kalman gain K :  How much we trust on the observed landmarks ?
            [2,3+2n] [columns,rows](with n number of observed landmarks)
            {x_range, y_range, tetha_range, x1range, y1range, xnrange, ynrange; 
             x_bearing, y_bearing, tetha_bearing, x1bearing, y1bearing, xnbearing, ynbearing}
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mJacobianPredictionModel_A">
            <summary>
            Jacobian of the measurement model H
            [2x3] [(x_robot-lamda_x)/r, (y_robot-lamda_y)/r, 0 ; (lamda_y-y_robot)/r^2, (lamda_x-x_robot)/r^2, -1] 
            with r = sqrt((lamda_x-x_robot)^2+(lamda_y-y_robot)^2)
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mJxr">
            <summary>
            Jacobian Jxr
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mJz">
            <summary>
            Jacobian Jz
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mProcessNoise_Q">
            <summary>
            Process noise Q 
            Q = WCWt, with W = [deltaT*cos(theta), deltaT*sin(theta), deltaThta]t, and C a gaussian noise
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mMeasurementNoise_R">
            <summary>
            Measurement noise R 
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mIdentity2x2">
            <summary>
            2 X 2 identity matrix [1 0; 0 1]
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.mDiffState">
            <summary>
            The predicted displacement of the robot : (deltaX, deltaY, deltaT)
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.Init">
            <summary>
            Initialize all EKF matrixes and other variables
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.Predict(UnityEngine.Vector3)">
            <summary>
            Here, we update the current state using the odometry data, and the commands.
            </summary>
            <param name="iRobotPose">This is the robot pose estimated form odometry data and command.</param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.Correct(System.Collections.Generic.List{OpenCVUnity.Point})">
            <summary>
            Corrects robot pose estimation using kalman gain.
            </summary>
            <param name="iObservedLandmarks">The list of the position of the observed landmarks</param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.AddNewLandmarks(System.Collections.Generic.List{OpenCVUnity.Point})">
            <summary>
            Add new landmarks to the list of observed landmarks.
            </summary>
            <param name="iNewLandmarks"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.AddNewLandmark(OpenCVUnity.Point)">
            <summary>
            Add a new landmark to the covariance matrix and set the other matrixes.
            </summary>
            <param name="iNewLandmark"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.ComputeRange(UnityEngine.Vector3,OpenCVUnity.Point)">
            <summary>
            Computes the range value : range = sqrt((iLamdaY - iYRobot)^2+(iLamdaX - iLamdaX)^2).
            </summary>
            <param name="iRobot">The robot pose (x,y,theta)</param>
            <param name="iLandmark">The landmark position</param>
            <returns></returns>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.EKFSLAM.ComputeBearing(UnityEngine.Vector3,OpenCVUnity.Point)">
            <summary>
            Computes the bearing value : bearing = atan((LamdaY - YRobot)/(LamdaX - LamdaX)) - ThetaRobot.
            </summary>
            <param name="iRobot">The robot pose (x,y,theta)</param>
            <param name="iLandmark">The landmark position</param>
            <returns></returns>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.INITIALDISTANCE">
            <summary>
            99999m is least initial distance.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.CONV">
            <summary>
            Constant to convert degrees to radians 
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MAXLANDMARKS">
            <summary>
            Maximum landmarks that could be observed 
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MAXERROR">
            <summary>
            If a landmark is within MAXERROR meter of another landmark its the same landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MINOBSERVATIONS">
            <summary>
            Number of times a landmark must be observed to be recognized as a landmark 
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MAXRANGE">
            <summary>
            Maximum range value, in meters.
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.LIFE">
            <summary>
            Landmark's lifetime 
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.mDegreesPerScan">
            <summary>
            Degrees per laser scan
            </summary>                  
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MAXTRIALS">
            <summary>
            RANSAC : max times to run the algorithm
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MAXSAMPLE">
            <summary>
            RANSAC: randomly select X points
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.MINLINEPOINTS">
            <summary>
            RANSAC: if less than MINLINEPOINTS points left don't bother trying to find consensus (stop algorithm)
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.RANSAC_TOLERANCE">
            <summary>
            RANSAC: if a point is within x distance of line its part of line
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.RANSAC_CONSENSUS">
            <summary>
            RANSAC: at least RANSAC_CONSENSUS votes required to determine if a line
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark">
            <summary>
            landmark class 
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mPos">
            <summary>
            landmarks (x,y) position (in meters) relative to map
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mId">
            <summary>
            The landmarks unique ID
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mLife">
            <summary>
            A life counter used to determine whether to discard a landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mTotalTimesObserved">
            <summary>
            The number of times we have seen landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mRange">
            <summary>
            Last observed range to landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mBearing">
            <summary>
            Last observed bearing to landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mA">
            <summary>
            RANSAC: equation of a line y = mA.X + mB
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mB">
            <summary>
            RANSAC: equation of a line y = mA.X + mB
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mRangeError">
            <summary>
            Distance, in meters, from robot position to the wall we are using as a landmark (to calculate error)
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark.mBearingError">
            <summary>
            Bearing from robot position to the wall we are using as a landmark (to calculate error)
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.mLandmarkDB">
            <summary>
            DataBase of landmarks, list of landmarks
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.mDataBaseSize">
            <summary>
            DataBase size
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.mEKFLandmarks">
            <summary>
            Number of landmark used for EKF
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Landmarks.mIDtoID">
            <summary>
            List of Corresponding IDtoID from Landmark to SLAM
            mIDtoID[mEKFLandmarks, 0] = Landmark ID
            mIDtoID[mEKFLandmarks, 1] = SLAM ID
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.ExtractLineLandmarks(System.Single[],System.Single[])">
            <summary>
            Extract Lines from Laser Scan data.
            </summary>
            <param name="iLaserData">Laser Scan data, List of ranges expressed in meters</param>
            <param name="iRobotPosition">Robot pose from odometry (x, y, theta)</param>
            <returns>The List in the extracted Lines that will be added to Landmarks DataBase</returns>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.LeastSquaresLineEstimate(System.Single[],System.Single[],System.Int32[],System.Int32,System.Single@,System.Single@)">
            <summary>
            Least Square Estimate function 
            Extract Detected Lines parametres A and B with Y = AX + B.
            </summary>
            <param name="iLaserdata">Laser Scan [range_0, range_1, ... range_n]</param>
            <param name="iRobotPosition">Robot pose [x, y, theta] </param>
            <param name="iRndSelectedPoints">Random selected points</param>
            <param name="iCount">Size of the Sample seleced randomly</param>
            <param name="oA">Detected line parameter y = Ax + B</param>
            <param name="oB">Detected line parameter y = Ax + B</param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.GetLineLandmark(System.Single,System.Single,System.Single[])">
            <summary>
            The goal here is to calculate point on line closest to origin (0,0)
            calculate line perpendicular to input line. a*a' = -1
            </summary>
            <param name="iA">A line parameter y = Ax + B</param>
            <param name="iB">B line parameter y = Ax + B</param>
            <param name="iRobotPosition">Robot pose [x, y, theta]</param>
            <returns></returns>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.GetClosestAssociation(Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark,System.Int32@,System.Int32@)">
            <summary>
            Given a landmark we find the closest landmark in DataBase
            </summary>
            <param name="iLandmark"></param>
            <param name="iId">Landmark iD</param>
            <param name="iTotalTimesObserved"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.DistanceToLine(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            The goal here is to calculate point on line closest to (x,y)
            then use this to calculate distance between them.
            </summary>
            <param name="iX">X coordinate for the selected point</param>
            <param name="iY">Y coordinate for the selected point</param>
            <param name="iA">Ceff (a), y = a.x + b </param>
            <param name="iB">Ceff (b), y = a.x + b </param>
            <returns>Distance, in meters, between P(x,y) and the line Delta : y = a.x + b.</returns>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.Distance(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes enclidien distance between two points.
            </summary>
            <param name="iX1">x coordinate of the first point, in meters</param>
            <param name="iY1">y coordinate of the first point, in meters</param>
            <param name="iX2">x coordinate of the second point, in meters</param>
            <param name="iY2">y coordinate of the second point, in meters</param>
            <returns>Distance between tow points, in meters.</returns>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Landmarks.Distance(Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark,Buddy.Features.Mapping.SLAM.Impl.Landmarks.landmark)">
            <summary>
            Computes euclidien distance between two given Landmarks
            </summary>
            <param name="iLandmark1">First Landmark</param>
            <param name="iLandmark2">Second Landmark</param>
            <returns>Distance between landmarks, in meters.</returns>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mMaxRange">
            <summary>
            Maximum distance detected by the scan, in meters
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mMinRange">
            <summary>
            Minimum distance detected by the scan, in meters
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mMaxAngle">
            <summary>
            Maximum angle detected by the scan, in radian
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mMinAngle">
            <summary>
            Minimum angle detected by the scan, in radian
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mFieldOfView">
            <summary>
            Field of view of the scan, in degrees
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mIncrementAngle">
            <summary>
            Angle step between successif points, in radian
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mMaxHeight">
            <summary>
            Maximum distance detected by the scan, in meters
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mMinHeight">
            <summary>
            Minimum height of laser dectection
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.SLAM.Impl.Laser.mScan">
            <summary>
            Laser scan in polar coordinates (range, bearing). 
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Laser.PointCloudToLaserScan(DepthPoint[])">
            <summary>
            Transforms Point Cloud (of the 3D camera) to Laser Scan
            </summary>
            <param name="iPointCloud">3D cam Point Cloud</param>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Laser.Range(System.Single,System.Single)">
            <summary>
            Computes euclidien distance 
            </summary>
            <param name="iX"></param>
            <param name="iY"></param>
            <returns></returns>
        </member>
        <member name="M:Buddy.Features.Mapping.SLAM.Impl.Laser.Bearing(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="iX"></param>
            <param name="iY"></param>
            <returns></returns>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.Impl.Localization">
            <summary>
            Represents a localization in the map.
            An accuracy (probability to be the current localization of the robot) is attached to the localization.
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.Impl.MapGraph">
            <summary>
            Graph representing the topological map
            A graph can be build from a serialized file with DeSerialize(str).
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapGraph.Nodes">
            <summary>
            Node of the graph
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapGraph.Count">
            <summary>
            Number of node in the graph
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapGraph.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapGraph.#ctor(System.String)">
            <summary>
            Constructor, create a graph from the input file
            </summary>
            <param name="iFilename"></param>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapGraph.Serialize(System.String)">
            <summary>
            Save the current graph in the specified file
            </summary>
            <param name="iFilename">Path to file</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapGraph.DeSerialize(System.String)">
            <summary>
            Fill the current graph with the graph contained in the specified file
            </summary>
            <param name="iFilename">Path to file</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapGraph.ToString">
            <summary>
            Serialization tool
            </summary>
            <returns>The corresponding string</returns>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.Impl.MapNode">
            <summary>
            Node for topological mapping.
            Each node represents a place in a global graph. 
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapNode.ID">
            <summary>
            ID of the node
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapNode.Position">
            <summary>
            Position of the node
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapNode.AdjacentNodes">
            <summary>
            Adjacent nodes
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapNode.Observations">
            <summary>
            Observations of the node
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.MapNode.Weight">
            <summary>
            Weight of the node ==> Weight of the observation
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MapNode.ToString">
            <summary>
            Serialization tool
            </summary>
            <returns>The corresponding string</returns>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.Impl.MinTriLocalizationStrategy">
            <summary>
            Best localization strategy by searching for the minimal area triangle
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.MinTriLocalizationStrategy.Execute(System.Collections.Generic.List{Buddy.Features.Mapping.Topological.Impl.Localization})">
            <summary>
            Best localization strategy by searching for the minimal area triangle
            </summary>
            <param name="iConjecturalLocalizations">Best find position of the robot</param>
            <returns>Hypothetical position of the robot</returns>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.Impl.Observation">
            <summary>
            Observations of the robot at a given orientation
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.Observation.Orientation">
            <summary>
            Orientation of the observation
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.Observation.Weight">
            <summary>
            Weight (rate) of the observation
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.Observation.Descriptors">
            <summary>
            Descriptor of the observation
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.Impl.Observation.Landmarks">
            <summary>
            Landmarks of the observation
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.Observation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.Impl.Observation.ToString">
            <summary>
            Serialization tool
            </summary>
            <returns>The corresponding string</returns>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkMapping.Mode">
            <summary>
            The current mode
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkMapping.Last60View">
            <summary>
            The last 60° capture from the robot 
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkMapping.Graph">
            <summary>
            The graph of the mapping 
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkMapping.CurrentNode">
            <summary>
            The current node where the robot belongs
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkMapping.WithGCV">
            <summary>
            Does the mapping use GoogleCloudVision
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkMapping.Make360Analysis">
            <summary>
            The robot processed a 360 analysis at the current position
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkMapping.MakeGCVAnalysis(System.Int32)">
            <summary>
            Call GoogleCloudVision API for labelization
            </summary>
            <param name="iMaxResult">Max asked results</param>
            <returns>Response of the GCV API</returns>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkMapping.Make60Analysis">
            <summary>
            Make a 60 analysis, finding ORB descriptors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkMapping.ApplyBlackListLandmarks(Buddy.Features.Vision.Impl.AnnotateImageResponses)">
            <summary>
            Remove blacklisted elements in ioResponse
            </summary>
            <param name="ioResponse">The annotateImageResponses to check</param>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.LandmarkSLAMMode">
            <summary>
            Mode of the topological SLAM.
            <para>NONE : Do nothing. You can simply disable the script otherwise.</para>
            <para>SLAM : Load an existing map, build an other map and processed to a localization at each LOCALIZATION_PERIOD and try to find match with existing node 
            for building a bigger map. Only use this mode if Buddy has an incomplete map.</para>
            <para>MAPPING : Only the Landmark mapping will be called.</para>
            <para>AUTO_LOC : Load the map and processed to a localization at each LOCALIZATION_PERIOD.</para>
            <para>MANUAL_LOC : Load the map and processed to localization only when Localization() is called.</para>
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Topological.LandmarkSLAMMode.NONE">
            <summary>
            Do nothing. You can simply disable the script otherwise
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Topological.LandmarkSLAMMode.SLAM">
            <summary>
            Load an existing map, build an other map and processed to a localization at each LOCALIZATION_PERIOD and try to find match with existing node 
            for building a bigger map. Only use this mode if Buddy has an incomplete map
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Topological.LandmarkSLAMMode.MAPPING">
            <summary>
            Only the Landmark mapping will be called
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Topological.LandmarkSLAMMode.AUTO_LOC">
            <summary>
            Load the map and processed to a localization at each LOCALIZATION_PERIOD
            </summary>
        </member>
        <member name="F:Buddy.Features.Mapping.Topological.LandmarkSLAMMode.MANUAL_LOC">
            <summary>
            Load the map and processed to localization only when Localization() is called
            </summary>
        </member>
        <member name="T:Buddy.Features.Mapping.Topological.LandmarkSLAM">
            <summary>
            Topological SLAM based on a landmark mapping and a landmark localization through an existing map.
            Use SetMode(mode) to switch mode 
            A basic localization can be processed by calling Localization()
            For localization and find overlapping map (existing map + building map from unknown area), use LocalizationAndMapping()
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkSLAM.LocalizationStrategy">
            <summary>
            The estimate localization strategy from a set of localization
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkSLAM.ConjecturalLocalizations">
            <summary>
            Assumption of localization
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkSLAM.EstimatedLocalization">
            <summary>
            Estimated position of the robot. The localization is weighted with accuracy of conjectural localizations
            </summary>
        </member>
        <member name="P:Buddy.Features.Mapping.Topological.LandmarkSLAM.EstimatedOrientation">
            <summary>
            Estimated orientation of the robot. The orientation is weighted with accuracy of each observation's orientation 
            </summary>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkSLAM.SetMode(Buddy.Features.Mapping.Topological.LandmarkSLAMMode,System.Boolean)">
            <summary>
            Switch to the specified mode
            </summary>
            <param name="iMode">Wanted mode</param>
            <param name="iSaveCurrentMap">Check for end record the current building map</param>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkSLAM.LocalizationAndMapping">
            <summary>
            Checks if the current (building) localization is similare to an existing node.
            If so for two differents localizations, the method will makes a remapping of the whole building graph to 
            to the coordinate system of the existing map.
            Use it only if a map was already created previously and is uncompleted.
            Estimated localization and orientation are updated as processed in Localization().
            </summary>
            <returns>Enumerator waiting gcv response</returns>
        </member>
        <member name="M:Buddy.Features.Mapping.Topological.LandmarkSLAM.Localization">
            <summary>
            Update estimated localization and orientation based on current point of view of the robot. 
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:Buddy.Features.Media.AudioRecorder">
            <summary>
            Static class used to save audio file and to manage audioclip
            </summary>
        </member>
        <member name="M:Buddy.Features.Media.AudioRecorder.Save(System.String,UnityEngine.AudioClip)">
            <summary>
            Save the audio clip into a wav file in the data directory
            </summary>
            <param name="iFilename">name which will be used to save tha audio file</param>
            <param name="iClip">audioclip that will be saved</param>
            <returns>true if file saved</returns>
        </member>
        <member name="M:Buddy.Features.Media.AudioRecorder.TrimSilence(UnityEngine.AudioClip,System.Single)">
            <summary>
            Trim the beginning and end of an audioclip that can be considered as a silence 
            </summary>
            <param name="iClip">the audioclip to be trimmed</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence</param>
            <returns>the audioclip trimmed</returns>
        </member>
        <member name="M:Buddy.Features.Media.AudioRecorder.TrimSilence(System.Collections.Generic.List{System.Single},System.Single,System.Int32,System.Int32)">
            <summary>
            Trim the beginning and end of an audioclip that can be considered as a silence 
            </summary>
            <param name="iSamples">samples of an audioclip</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence</param>
            <param name="iChannels">number of channels per frame</param>
            <param name="iFrequency">sample frequency of clip</param>
            <returns>the audioclip trimmed</returns>
        </member>
        <member name="M:Buddy.Features.Media.AudioRecorder.TrimSilence(System.Collections.Generic.List{System.Single},System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trim the beginning and end of an audioclip that can be considered as a silence 
            </summary>
            <param name="iSamples">samples of an audioclip</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence</param>
            <param name="iChannels">number of channels per frame</param>
            <param name="iFrequency">sample frequency of clip</param>
            <param name="stream">true if clip is streamed</param>
            <returns>the audioclip trimmed</returns>
        </member>
        <member name="M:Buddy.Features.Media.AudioRecorder.Combine(UnityEngine.AudioClip[])">
            <summary>
            Combine several audioclip into one
            </summary>
            <param name="iClips">the array of audioclips</param>
            <returns>the audioclip obtained from the comination of several audioclips</returns>
        </member>
        <member name="T:Buddy.Features.Media.VideoRecorder">
            <summary>
            Class used to save video with the mjpg codec
            </summary>
        </member>
        <member name="M:Buddy.Features.Media.VideoRecorder.Save(System.String,OpenCVUnity.Mat[],System.Single)">
            <summary>
            Save the video in the Data folder
            </summary>
            <param name="iFilename">name of the video file to save to</param>
            <param name="iListMat">list of mat that will be stored in the video file</param>
            <param name="iFps">framerate of the video file</param>
        </member>
        <member name="T:Buddy.Features.Navigation.Impl.Dijkstra">
            <summary>
            Diskstra algorithm implementation in C#. Polynomial complexity : 2^(log(n))
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.Impl.Dijkstra.ShortestPath(Buddy.Features.Navigation.Impl.Node,Buddy.Features.Navigation.Impl.Node,System.Collections.Generic.List{Buddy.Features.Navigation.Impl.Node},System.Boolean)">
            <summary>
            Gets the shortest path between the sourcenode and the destination node with Dijkstra algorithm.
            It has a polynomial complexity.
            </summary>
            <param name="iSourceNode">The source node of the path</param>
            <param name="iDestinationNode">The destination node of the path</param>
            <param name="iGraph">The graph with all nodes and weight between them</param>
            <param name="iReset">Can be false the first time, must be true (default) otherwise</param>
            <returns></returns>
        </member>
        <member name="M:Buddy.Features.Navigation.Impl.Dijkstra.ComputePaths(Buddy.Features.Navigation.Impl.Node)">
            <summary>
            Computes paths from the source node.
            </summary>
            <param name="iSourceNode">The source node</param>
        </member>
        <member name="M:Buddy.Features.Navigation.Impl.Dijkstra.ShortestPathTo(Buddy.Features.Navigation.Impl.Node,Buddy.Features.Navigation.Impl.Node)">
            <summary>
            Gets the shorstest path between iSource and iDestination
            </summary>
            <param name="iSourceNode">The source node</param>
            <param name="iDestinationNode">the destination node</param>
            <returns>The list including the shorstest path between iSource and iDestination</returns>
        </member>
        <member name="M:Buddy.Features.Navigation.Impl.Dijkstra.ResetGraph(System.Collections.Generic.List{Buddy.Features.Navigation.Impl.Node})">
            <summary>
            Reset the graph for compute.
            </summary>
            <param name="iGraph">The graph</param>
        </member>
        <member name="T:Buddy.Features.Navigation.Impl.Node">
            <summary>
            Unit node for graph algorithms.
            </summary>
        </member>
        <member name="F:Buddy.Features.Navigation.Impl.Node.Comparer">
            <summary>
            Comparer pour node comparaison
            </summary>
        </member>
        <member name="P:Buddy.Features.Navigation.Impl.Node.Index">
            <summary>
            Index of the node
            </summary>
        </member>
        <member name="P:Buddy.Features.Navigation.Impl.Node.MinDistance">
            <summary>
            Min known distance
            </summary>
        </member>
        <member name="P:Buddy.Features.Navigation.Impl.Node.PrievousNode">
            <summary>
            Previous node (Dijkstra algo)
            </summary>
        </member>
        <member name="P:Buddy.Features.Navigation.Impl.Node.AdjacentNodes">
            <summary>
            AdjacentNodes
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.Impl.Node.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.Impl.Node.Compare(Buddy.Features.Navigation.Impl.Node,Buddy.Features.Navigation.Impl.Node)">
            <summary>
            Comparaison function
            </summary>
            <param name="iFirstNode"></param>
            <param name="iSecondNode"></param>
            <returns></returns>
        </member>
        <member name="T:Buddy.Features.Navigation.RoombaNavigation">
            <summary>
            Ultra basic random navigation for navigation tests
            </summary>
        </member>
        <member name="F:Buddy.Features.Navigation.RoombaNavigation.mMotors">
            <summary>
            Motion control of the robot.
            </summary>
        </member>
        <member name="F:Buddy.Features.Navigation.RoombaNavigation.mInfraredSensors">
            <summary>
            Infrared sensors.
            </summary>
        </member>
        <member name="F:Buddy.Features.Navigation.RoombaNavigation.mUltrasoundSensors">
            <summary>
            Ultra sound sensors.
            </summary>
        </member>
        <member name="F:Buddy.Features.Navigation.RoombaNavigation.mVelocity">
            <summary>
            The current setted velocity of the robot
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.Start">
            <summary>
            Called once at the start
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.Update">
            <summary>
            Called at each freame
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.PreventCollision">
            <summary>
            Stops the robot and change the direction
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.RandomDirection">
            <summary>
            Return a random direction
            </summary>
            <returns>A random direction in degrees</returns>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.AnyObstructions">
            <summary>
            Checks for any obstruction
            </summary>
            <returns>True for any obstruction</returns>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.AnyObstructionsInfrared">
            <summary>
            Checks if infrared sensors detect obstructions
            </summary>
            <returns>True for any obstruction</returns>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.AnyObstructionsUltrasound">
            <summary>
            Checks if ultrasound sensors detect obstructions
            </summary>
            <returns>True for any obstruction</returns>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.IsCollisionEminent(System.Single)">
            <summary>
            Detect if the collision is eminent
            </summary>
            <param name="iCollisionDistance">Distance detected by the sensor</param>
            <returns></returns>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.MoveBuddy">
            <summary>
            Makes Buddy goes forward at mVelocity
            </summary>
        </member>
        <member name="M:Buddy.Features.Navigation.RoombaNavigation.FaceDirection(System.Single)">
            <summary>
            Change the orientation of the robot
            </summary>
            <param name="iDirection">The orientation in degrees</param>
        </member>
        <member name="T:Buddy.Features.Vision.AVisionAlgorithm">
            <summary>
            Base class for computer vision algorithms.
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.AVisionAlgorithm.ProcessedFrameMat">
            <summary>
            Gets the frame proceed after the ProcessFrameImpl method.
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.AVisionAlgorithm.ProcessedFrameTexture2D">
            <summary>
            Gets the frame. Will be automaticaly created from FrameMat.
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.AVisionAlgorithm.Start">
            <summary>
            Called once at the beginning.
            Init with basic values.
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.AVisionAlgorithm.Update">
            <summary>
            Called at each frame.
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.AVisionAlgorithm.RetrieveFrame">
            <summary>
            Ensures that mFrameMat and mFrameTexture will always be at the same size.
            </summary>
            <remarks>
            When called at each frame, the UpdateFrame() allows to get the current 
            frame from the (simulate or real) RGB camera of the robot.
            </remarks>
            <returns>The current frame in OpenCVUnity format</returns>
        </member>
        <member name="M:Buddy.Features.Vision.AVisionAlgorithm.Init(System.Int32@,System.Single@,System.Boolean@)">
            <summary>
            Called one time after the start method.
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.AVisionAlgorithm.ProcessFrameImpl(OpenCVUnity.Mat,UnityEngine.Texture2D,OpenCVUnity.Mat@,OpenCVUnity.Size)">
            <summary>
            Called at each valuable frame.
            Write your computer vision algorithm inside this method.
            </summary>
            <param name="iInputFrameMat">The current frame (in CV_8UC3) to process</param>
            <param name="iInputFrameTexture">The current frame (in 2D texture format) to process</param>
            <param name="ioOutputFrameMat">The output frame mat. Has the same dimension of iInputFrameMat</param>
            <param name="iSize">Frame size</param>
        </member>
        <member name="T:Buddy.Features.Vision.DetectionType">
            <summary>
            Kind of detection request for Google Cloud Vision API
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.TYPE_UNSPECIFIED">
            <summary>
            Misc
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.FACE_DETECTION">
            <summary>
            Face information
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.LANDMARK_DETECTION">
            <summary>
            Landmark (Eiffel tower, Golden Bridge, left eye, right hand...)
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.LOGO_DETECTION">
            <summary>
            Logo detection (Coca cola ...)
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.LABEL_DETECTION">
            <summary>
            Labelization (desk, floor, robot, window, hand ...)
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.TEXT_DETECTION">
            <summary>
            Optical Character Recognition
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.SAFE_SEARCH_DETECTION">
            <summary>
            Does this content is safe for children ? (blood, violence, explicit scene ...)
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.DetectionType.IMAGE_PROPERTIES">
            <summary>
            Image properties (main color, )
            </summary>
        </member>
        <member name="T:Buddy.Features.Vision.LandmarkType">
            <summary>
            Kind of landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.UNKNOWN_LANDMARK">
            <summary>
            Unknown landmark
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYE">
            <summary>
            Left eye
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYE">
            <summary>
            Right eye
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_OF_LEFT_EYEBROW">
            <summary>
            Left of left eyebrow
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_OF_LEFT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_OF_RIGHT_EYEBROW">
            <summary>
            Left of right eyebrow
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_OF_RIGHT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.MIDPOINT_BETWEEN_EYES">
            <summary>
            Space between eyes
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.NOSE_TIP">
            <summary>
            Nose tip
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.UPPER_LIP">
            <summary>
            Upper lip
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LOWER_LIP">
            <summary>
            Lower lip
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.MOUTH_LEFT">
            <summary>
            Mouse left side
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.MOUTH_RIGHT">
            <summary>
            Mouse right side
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.MOUTH_CENTER">
            <summary>
            Center of the mouse
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.NOSE_BOTTOM_RIGHT">
            <summary>
            Bottom right side of the nose
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.NOSE_BOTTOM_LEFT">
            <summary>
            Bottom left side of the nose
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.NOSE_BOTTOM_CENTER">
            <summary>
            Bottom center side of the nose
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYE_TOP_BOUNDARY">
            <summary>
            Left eye top boundary
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYE_RIGHT_CORNER">
            <summary>
            Left eye right corner
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Left eye bottom boundary
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYE_LEFT_CORNER">
            <summary>
            Left eye left corner
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYE_TOP_BOUNDARY">
            <summary>
            Right eye top boundary
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYE_RIGHT_CORNER">
            <summary>
            RIght eye right corner
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Right eye bottom boundary
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYE_LEFT_CORNER">
            <summary>
            Right eye left corner 
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Left eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Right eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EAR_TRAGION">
            <summary>
            Left ear tragion
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EAR_TRAGION">
            <summary>
            Right eear tragion
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.LEFT_EYE_PUPIL">
            <summary>
            Left eye pupil
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.RIGHT_EYE_PUPIL">
            <summary>
            Right eye pupil
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.FOREHEAD_GLABELLA">
            <summary>
            Glabella
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.CHIN_GNATHION">
            <summary>
            Chin gnathion
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.CHIN_LEFT_GONION">
            <summary>
            Chin left gonion
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.LandmarkType.CHIN_RIGHT_GONION">
            <summary>
            Chin right gonion
            </summary>
        </member>
        <member name="T:Buddy.Features.Vision.Likelihood">
            <summary>
            Rate likelihood
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.Likelihood.UNKNOWN">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.Likelihood.VERY_UNLIKELY">
            <summary>
            Very low rate
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.Likelihood.UNLIKELY">
            <summary>
            Low rate
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.Likelihood.POSSIBLE">
            <summary>
            Medium rate 
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.Likelihood.LIKELY">
            <summary>
            Correct rate
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.Likelihood.VERY_LIKELY">
            <summary>
            Very credible
            </summary>
        </member>
        <member name="T:Buddy.Features.Vision.GoogleCloudVision">
            <summary>
            To use this feature, you must assign GOOGLE_API_KEY with your own Google vision API key.
            Available at https://console.cloud.google.com/projectselector/apis/credentials
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.GoogleCloudVision.Detect(OpenCVUnity.Mat,Buddy.Features.Vision.DetectionType,Buddy.Features.Vision.Impl.AnnotateImageResponses,System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="ioResponses">The output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:Buddy.Features.Vision.GoogleCloudVision.Detect(UnityEngine.Texture2D,Buddy.Features.Vision.DetectionType,Buddy.Features.Vision.Impl.AnnotateImageResponses,System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="ioResponses">The output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:Buddy.Features.Vision.GoogleCloudVision.Detect(System.Byte[],Buddy.Features.Vision.DetectionType,Buddy.Features.Vision.Impl.AnnotateImageResponses,System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="ioResponses">The output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:Buddy.Features.Vision.GoogleCloudVision.DetectImpl(OpenCVUnity.Mat,Buddy.Features.Vision.DetectionType,Buddy.Features.Vision.Impl.AnnotateImageResponses,System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="ioResponses">The output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:Buddy.Features.Vision.GoogleCloudVision.DetectImpl(UnityEngine.Texture2D,Buddy.Features.Vision.DetectionType,Buddy.Features.Vision.Impl.AnnotateImageResponses,System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="ioResponses">The output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:Buddy.Features.Vision.GoogleCloudVision.DetectImpl(System.Byte[],Buddy.Features.Vision.DetectionType,Buddy.Features.Vision.Impl.AnnotateImageResponses,System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="ioResponses">The output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:Buddy.Features.Vision.Impl.DQrCode">
            <summary>
            Define Class of a QRCode
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.Impl.DQrCode.#ctor(System.String,Buddy.Tuple{OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point})">
            <summary>
            Constucteur
            </summary>
            <param name="iName">Name is the string value of Qrcode</param>
            <param name="iCoordinates">Three point of coordiante tuple</param>
        </member>
        <member name="M:Buddy.Features.Vision.Impl.DQrCode.#ctor(Buddy.Features.Vision.Impl.DQrCode)">
            <summary>
            Constucteur QrCode from an other Qrcode
            </summary>
            <param name="iQrCode">QRCode to translate</param>
        </member>
        <member name="P:Buddy.Features.Vision.Impl.DQrCode.Name">
            <summary>
            Get the QrCode name
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.Impl.DQrCode.Coordinates">
            <summary>
            Accessore for the coordinates of QrCode
            </summary>
        </member>
        <member name="T:Buddy.Features.Vision.OpticalCharacterRecognizer">
            <summary>
            WORK IN PROGRESS : OCR works only on Windows editor and Windows build.
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.OpticalCharacterRecognizer.ProcessFrameImpl(OpenCVUnity.Mat,UnityEngine.Texture2D,OpenCVUnity.Mat@,OpenCVUnity.Size)">
            <summary>
            Apply an optical character recognition over the preprocessed input frame.
            </summary>
            <param name="iInputFrameMat">Mat format of the frame</param>
            <param name="iInputFrameTexture">Texture2D format of the frame</param>
        </member>
        <member name="M:Buddy.Features.Vision.OpticalCharacterRecognizer.Apply">
            <summary>
            Apply all changes over the OCR
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.OpticalCharacterRecognizer.ReplaceUnWantedCharacters(System.String)">
            <summary>
            Replace bad characters inside the input string
            </summary>
            <param name="iString">The string to correct</param>
            <returns>The corrected string</returns>
        </member>
        <member name="M:Buddy.Features.Vision.OpticalCharacterRecognizer.IsCorrectWord(System.String)">
            <summary>
            Check if the word is correct after the recognition
            </summary>
            <param name="iString">The word to check</param>
            <returns>Correctness of the word</returns>
        </member>
        <member name="T:Buddy.Features.Vision.ARecognizer">
            <summary>
            Abstract class for recognition behaviour model
            </summary>
        </member>
        <member name="F:Buddy.Features.Vision.ARecognizer.mIsTrained">
            <summary>
            Is the model is trained ?
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.ARecognizer.IsTrained">
            <summary>
            Is the model is trained ?
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.Predict(System.Collections.Generic.List{OpenCVUnity.Mat})">
            <summary>
            Predict the class of the input data
            </summary>
            <param name="iImages">Input data</param>
            <returns>Class of each input data</returns>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.Predict(OpenCVUnity.Mat[])">
            <summary>
            Predict the class of the input data
            </summary>
            <param name="iImages">Input data</param>
            <returns>Class of each input data</returns>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.Load(System.String)">
            <summary>
            Asynchronous model loading
            </summary>
            <param name="iPathToModel">Path to the xml model</param>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.Predict(OpenCVUnity.Mat)">
            <summary>
            Predict the class of the input frame
            </summary>
            <param name="iImage">Input data</param>
            <returns>Class of the data</returns>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.Train(System.Collections.Generic.List{OpenCVUnity.Mat},System.Collections.Generic.List{System.Int32})">
            <summary>
            Train the classifier
            </summary>
            <param name="iTrainingSet">Set of data</param>
            <param name="iLabelSet">Label corresponding to each data</param>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.Train(System.String)">
            <summary>
            Train data with LBPH algorithm from the input directory of data. 
            Directory must contains sub directories with face images.
            </summary>
            <param name="iPathToDirectory">Path to the root directory containing profil directories</param>
        </member>
        <member name="M:Buddy.Features.Vision.ARecognizer.LoadModel(System.String)">
            <summary>
            Load the existing model in a xml file
            </summary>
            <param name="iPathToModel">Path to file model</param>
        </member>
        <member name="T:Buddy.Features.Vision.FaceCascadeTracker">
            <summary>
            Face tracker using continuous Haar cascade feature and local CascadeClassifier algorithm
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.FaceCascadeTracker.TrackedObjects">
            <summary>
            Current tracked objects on the current frame
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.FaceCascadeTracker.Init(System.Int32@,System.Single@,System.Boolean@)">
            <summary>
            Called one time at the start.
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.FaceCascadeTracker.ProcessFrameImpl(OpenCVUnity.Mat,UnityEngine.Texture2D,OpenCVUnity.Mat@,OpenCVUnity.Size)">
            <summary>
            Called at each valuable frame.
            </summary>
        </member>
        <member name="T:Buddy.Features.Vision.QrCodeReader">
            <summary>
            Class use to Decode a QRCode with a list of pre-set QRCode
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.QrCodeReader.QrcodesDetectedList">
            <summary>
            Get the list of all Qrcodes detected
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.QrCodeReader.LastQrCodeDetected">
            <summary>
            Get the last QrCode detected
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.QrCodeReader.NumberQrCodeDetected">
            <summary>
            Get number of QrCode detected at this moment
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.QrCodeReader.NameLastQrCode">
            <summary>
            Get the name of the last Qrcode detected
            </summary>
        </member>
        <member name="P:Buddy.Features.Vision.QrCodeReader.ThreadSleepTime">
            <summary>
            Get/Set sleep time for thread for decoding
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.Init(System.Int32@,System.Single@,System.Boolean@)">
            <summary>
            Init members and start a thread for decoding
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.OnEnable">
            <summary>
            Init members and start a thread for decoding
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.OnDisable">
            <summary>
            Abort thread for decoding
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.OnDestroy">
            <summary>
            Abort thread for decoding if is not already aborted
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.OnApplicationQuit">
            <summary>
            Stop the thread for decoding
            </summary>
            <remarks>
            It's better to stop the thread by itself rather than abort it.
            </remarks>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.ProcessFrameImpl(OpenCVUnity.Mat,UnityEngine.Texture2D,OpenCVUnity.Mat@,OpenCVUnity.Size)">
            <summary>
            Compute called every frame.
            </summary>
            <remarks>
            Cannot be multithreaded.
            </remarks>
            <param name="iInputFrameMat">Get a matrix from cam and convert it in Array color32 for decoding</param>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.DecodeQR">
            <summary>
            Is called in thread for detect QRcode
            </summary>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.ConvertResultPointToPoint(ZXing.ResultPoint)">
            <summary>
            Convert a ResultPoint to a point
            </summary>
            <param name="iResultPoint">ResultPoint for conversion</param>
            <returns>Point</returns>
        </member>
        <member name="M:Buddy.Features.Vision.QrCodeReader.AddQrCodeInQrCodeList(System.String,System.Collections.Generic.List{OpenCVUnity.Point})">
            <summary>
            Add a new QrCode in a list of QrCode detected 
            </summary>
            <param name="iName">Name of QrCode</param>
            <param name="iCoordinates">Coordinates of QrCode</param>
            <returns>New QrCode</returns>
        </member>
        <member name="T:Buddy.Features.Vocal.QuestionAnalysed">
            <summary>
            Use this function in order to get the Type of question found
            </summary>
            <remarks>
            The value is a string and can be a lot of different things like Babyphone, VolumeUp
            </remarks>
            <param name="iType"></param>
        </member>
        <member name="T:Buddy.Features.Vocal.VocalChat">
            <summary>
            This provides a standard vocal feature for basic question answering through pre-answered questions
            wolfram alpha queries and/or cleverbot answering
            </summary>
        </member>
        <member name="P:Buddy.Features.Vocal.VocalChat.WithNotification">
            <summary>
             Authorizes automatic notification display after STT recognition or error. True as default
            </summary>
        </member>
        <member name="P:Buddy.Features.Vocal.VocalChat.BuildingAnswer">
            <summary>
             Authorizes to know if an answer is pending
            </summary>
        </member>
        <member name="P:Buddy.Features.Vocal.VocalChat.AnswerGiven">
            <summary>
             Answer given
            </summary>
        </member>
        <member name="P:Buddy.Features.Vocal.VocalChat.OnQuestionTypeFound">
            <summary>
            Use this callback to know the Question type found (as string) 
            </summary>
        </member>
        <member name="T:Buddy.Features.Web.JSON">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes ArrayList and Hashtable.
            All numbers are parsed to floats, ints, or longs.
            </summary>
            
        </member>
        <member name="M:Buddy.Features.Web.JSON.JsonDecode(System.Byte[])">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON byte array.</param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Buddy.Features.Web.JSON.JsonDecode(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Buddy.Features.Web.JSON.JsonDecode(System.String,System.Boolean@)">
            <summary>
            Parses the string json into a value; and fills 'success' with the successfullness of the parse.
            </summary>
            <param name="json">A JSON string.</param>
            <param name="success">Successful parse?</param>
            <returns>An ArrayList, a Hashtable, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:Buddy.Features.Web.JSON.JsonEncode(System.Object)">
            <summary>
            Converts a Hashtable / ArrayList object into a JSON string
            </summary>
            <param name="json">A Hashtable / ArrayList</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:Buddy.Features.Web.JSON.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc). 
            
            Thanks to mtighe for pointing out Double.TryParse to me.
            </summary>
        </member>
        <member name="T:Buddy.Features.Web.Mail">
            <summary>
            Class which contains the message, the subject and the list of attachements that will be sent by using MailSender
            </summary>
        </member>
        <member name="P:Buddy.Features.Web.Mail.FilePaths">
            <summary>
            List of file path attached to the mail
            </summary>
        </member>
        <member name="P:Buddy.Features.Web.Mail.Addresses">
            <summary>
            List of adresses to send the mail
            </summary>
        </member>
        <member name="P:Buddy.Features.Web.Mail.Subject">
            <summary>
            Subject of the mail
            </summary>
        </member>
        <member name="P:Buddy.Features.Web.Mail.Body">
            <summary>
            Body of the mail
            </summary>
        </member>
        <member name="M:Buddy.Features.Web.Mail.#ctor(System.String,System.String)">
            <summary>
            create a mail with provided parameters
            </summary>
            <param name="iSubject">subject of the mail</param>
            <param name="iBody">body of the mail</param>
        </member>
        <member name="M:Buddy.Features.Web.Mail.#ctor">
            <summary>
            Create a mail with default parameters
            </summary>
        </member>
        <member name="M:Buddy.Features.Web.Mail.AddTexture2D(UnityEngine.Texture2D,System.String)">
            <summary>
            Save a texture 2d as a png in the streaming asset folder then add it to the mail
            </summary>
            <param name="iTexture">texture to add to save and add to the mail</param>
            <param name="iFileName"></param>
        </member>
        <member name="M:Buddy.Features.Web.Mail.AddFile(System.String)">
            <summary>
            Add file in the streaming asset folder
            </summary>
            <param name="iFileName">name of the file to add</param>
        </member>
        <member name="M:Buddy.Features.Web.Mail.AddTo(System.String)">
            <summary>
            Add a receiver af the mail
            </summary>
            <param name="iAddress">adress to send to</param>
        </member>
        <member name="M:Buddy.Features.Web.Mail.ClearTo">
            <summary>
            Clear the list of adress to send to
            </summary>
        </member>
        <member name="M:Buddy.Features.Web.Mail.ClearFileAttachement">
            <summary>
            Clear the list of file attached to the mail
            </summary>
        </member>
        <member name="T:Buddy.Features.Web.SMTP">
            <summary>
            Enum of the different smtp that can be used to send mail
            </summary>
        </member>
        <member name="F:Buddy.Features.Web.SMTP.GMAIL">
            <summary>
            GMail serv
            </summary>
        </member>
        <member name="F:Buddy.Features.Web.SMTP.YAHOO">
            <summary>
            Yahoo serv
            </summary>
        </member>
        <member name="F:Buddy.Features.Web.SMTP.HOTMAIL">
            <summary>
            Hotmail serv
            </summary>
        </member>
        <member name="F:Buddy.Features.Web.SMTP.BFR">
            <summary>
            BlueFrog serv
            </summary>
        </member>
        <member name="T:Buddy.Features.Web.MailSender">
            <summary>
            Class that connect to an smtp server to send a mail
            </summary>
        </member>
        <member name="T:Buddy.Features.Web.MailSender.MailSent">
            <summary>
            Callback after mail sending
            </summary>
        </member>
        <member name="P:Buddy.Features.Web.MailSender.CanSend">
            <summary>
            Return true if it can send a mail
            </summary>
        </member>
        <member name="E:Buddy.Features.Web.MailSender.OnMailSent">
            <summary>
            Event called when the mail has been sent
            </summary>
        </member>
        <member name="M:Buddy.Features.Web.MailSender.#ctor(System.String,System.String,Buddy.Features.Web.SMTP)">
            <summary>
            Create an smtp client with the user adress
            </summary>
            <param name="iAddress">mail adress of the user</param>
            <param name="iPassword">password of the mail adress</param>
            <param name="iSMTP">smtp server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp</param>
        </member>
        <member name="M:Buddy.Features.Web.MailSender.Send(Buddy.Features.Web.Mail)">
            <summary>
            Send the mail. This method will do nothing if the previous mail has not yet been sent
            </summary>
            <param name="iMail">mail that will be send</param>
        </member>
        <member name="M:Buddy.Features.Web.MailSender.SmtpClientOnCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Callback called when the mail has been sent
            </summary>
            <param name="iSender"></param>
            <param name="iEvent"></param>
        </member>
        <member name="T:Buddy.Features.Stimuli.AStimulus">
            <summary>
            This class is an abstract class to define a StimuliController.
            You can register or remove callbacks to be called when the event linked to the stimuli
            is detected
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.AStimulus.mIsListening">
            <summary>
            Tells if the stimuli is activated and if we are waiting for an event
            </summary>
        </member>
        <member name="P:Buddy.Features.Stimuli.AStimulus.IsListening">
            <summary>
            Tells if the stimuli is activated and if we are waiting for an event
            </summary>
        </member>
        <member name="M:Buddy.Features.Stimuli.AStimulus.Start">
            <summary>
            Constructor of the abstract class
            </summary>
        </member>
        <member name="M:Buddy.Features.Stimuli.AStimulus.RegisterCallback(Buddy.Features.Stimuli.StimulusEvent,Buddy.FunctionCallback)">
            <summary>
            Register a callback to be called when stimuli event is detected
            </summary>
        </member>
        <member name="M:Buddy.Features.Stimuli.AStimulus.ClearAllCallbacks(Buddy.Features.Stimuli.StimulusEvent)">
            <summary>
            remove all Registered callback to this stimuli
            </summary>
        </member>
        <member name="M:Buddy.Features.Stimuli.AStimulus.RemoveCallback(Buddy.Features.Stimuli.StimulusEvent,Buddy.FunctionCallback)">
            <summary>
            Remove a given callback
            </summary>
            <param name="iCallback"> The id of the callback to remove </param>
        </member>
        <member name="M:Buddy.Features.Stimuli.AStimulus.StartListenning">
            <summary>
            Start to check for the event linked to this stimuli
            </summary>
        </member>
        <member name="M:Buddy.Features.Stimuli.AStimulus.StopListenning">
            <summary>
            Stop to check for the event linked to this stimuli
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.SPHINX_TRIGGERED">
            <summary>
            The Sphinx Trigger, callback activated when trigger "hello buddy" is heard
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.FACE_DETECTED">
            <summary>
            Facetracker, callback activated if at least a fact is detected
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.HUMAN_DETECTED">
            <summary>
            Thermal sensor, callback is called if a human temperature is detected
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.FIRE_DETECTED">
            <summary>
            Thermal sensor, callback is called if temperature is very high
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.KIDNAPPING">
            <summary>
            IMU is used to tell if buddy is lift up
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.LOW_BRIGHTNESS">
            <summary>
            Camera detects a low brightness
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.HIGH_BRIGHTNESS">
            <summary>
            Camera detects a high brightness
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.START_MOVING_WHEELS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.STOP_MOVING_WHEELS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.HIGH_SPEED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.POSITION_UPDATE">
            <summary>
            Buddy position has changed
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.NOISE_LOUD">
            <summary>
            Buddy hears a very loud noise
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.NOISE_MEDIUM_LOUD">
            <summary>
            Buddy  hears a quite loud noise
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.RANDOM_ACTIVATION_MINUTE">
            <summary>
            Random action which occurs one time per minute in average
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.RANDOM_ACTIVATION_HOUR">
            <summary>
            Random action which occurs one time per hour in average
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.RANDOM_ACTIVATION_DAY">
            <summary>
            Random action which occurs one time per day in average
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.REGULAR_ACTIVATION_MINUTE">
            <summary>
            Regular action which occurs every minutes
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.REGULAR_ACTIVATION_HOUR">
            <summary>
            Regular action which occurs every hours
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.REGULAR_ACTIVATION_DAY">
            <summary>
            Regular action which occurs every days
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.REGULAR_ACTIVATION_WEEK">
            <summary>
            Regular action which occurs every weeks
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.LOW_BATTERY">
            <summary>
            Battery level is low
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.VERY_LOW_BATTERY">
            <summary>
            Battery level is very low, buddy need to charge the battery 
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.OBSTACLE_NEAR">
            <summary>
            Buddy detected an obstacle near
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.OBSTACLE_FAR">
            <summary>
            Buddy detected an obstacle but it is still far from him
            </summary>
        </member>
        <member name="F:Buddy.Features.Stimuli.StimulusEvent.NO_OBSTACLE">
            <summary>
            buddy doesn't detect any obstacle 
            </summary>
        </member>
        <member name="T:Buddy.Features.Stimuli.StimuliManager">
            <summary>
            This class is used to manage the diverse sensors and
            to subscribe to some stimuli events (by registering callbacks)
            </summary>
        </member>
        <member name="M:Buddy.Features.Stimuli.StimuliManager.RegisterStimuliCallback(Buddy.Features.Stimuli.StimulusEvent,Buddy.FunctionCallback)">
            <summary>
            This function is used to add a callback to a stimuli controller
            </summary>
            <param name="iStimuliEvent"> Define on which stimuli we add the callback </param>
            <param name="iCallback"> The actual callback you want to add </param>
        </member>
        <member name="M:Buddy.Features.Stimuli.StimuliManager.RemoveStimuliCallback(Buddy.Features.Stimuli.StimulusEvent,Buddy.FunctionCallback)">
            <summary>
            Use this function to remove a callback from a StimuliController
            </summary>
            <param name="iStimuliEvent"> This is used to define which stimuli has the callback to remove</param>
            <param name="iCallback"> This is used to know which callback to remove</param>
        </member>
        <member name="T:Buddy.Features.Stimuli.NoiseStimulus">
            <summary>
            Stimuli for vocal trigger using Sphinx
            </summary>
        </member>
        <member name="T:Buddy.Features.Stimuli.SpeedStimulus">
            <summary>
            Stimuli for vocal trigger using Sphinx
            </summary>
        </member>
        <member name="T:Buddy.Features.Stimuli.SphinxStimulus">
            <summary>
            Stimuli for vocal trigger using Sphinx
            </summary>
        </member>
        <member name="T:Buddy.EntryType">
            <summary>
            Stocked entry type inside the dictionary
            </summary>
        </member>
        <member name="F:Buddy.EntryType.BASE">
            <summary>
            Unique value for UI display purpose
            </summary>
        </member>
        <member name="F:Buddy.EntryType.CLOSE_PHONETIC">
            <summary>
            Dictionary entry for STT purpose mainly
            </summary>
        </member>
        <member name="F:Buddy.EntryType.RANDOM">
            <summary>
            Dictionary entry for TTS purpose mainly
            </summary>
        </member>
        <member name="T:Buddy.DictionaryEntry">
            <summary>
            Key-value dictionary base entry
            </summary>
        </member>
        <member name="P:Buddy.DictionaryEntry.Key">
            <summary>
            Key of the value
            </summary>
        </member>
        <member name="P:Buddy.DictionaryEntry.BaseValue">
            <summary>
            Display value
            </summary>
        </member>
        <member name="P:Buddy.DictionaryEntry.ClosePhoneticValues">
            <summary>
            Listen list for STT input processing
            </summary>
        </member>
        <member name="P:Buddy.DictionaryEntry.RandomValues">
            <summary>
            Say list containing value that will be choosen randomly 
            </summary>
        </member>
        <member name="T:Buddy.LanguageThesaurus">
            <summary>
            Language dictionary storage. Contains key-value entries for one language
            </summary>
        </member>
        <member name="P:Buddy.LanguageThesaurus.Entries">
            <summary>
            All key-value entries of the thesaurus
            </summary>
        </member>
        <member name="M:Buddy.LanguageThesaurus.ContainsKey(System.String)">
            <summary>
            Check existing key in existing entries
            </summary>
            <param name="iKey">Key to check</param>
            <returns>True if the key already exists in Entries</returns>
        </member>
        <member name="T:Buddy.Dictionary">
            <summary>
            Hosts all global_keyword -> currentlanguage_word / word list matchings
            </summary>
        </member>
        <member name="F:Buddy.Dictionary.KEY_NOT_FOUND">
            <summary>
            Value returned if key not found
            </summary>
        </member>
        <member name="F:Buddy.Dictionary.EMPTY_VALUE">
            <summary>
            Value returned if the value of the requested key is empty
            </summary>
        </member>
        <member name="M:Buddy.Dictionary.GetString(System.String,Buddy.LoadContext)">
            <summary>
            Retrieve the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length)
            </summary>
            <param name="iKey">The key word corresponding to the wished word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, default value if not found</returns>
        </member>
        <member name="M:Buddy.Dictionary.GetRandomString(System.String,Buddy.LoadContext)">
            <summary>
            Retrieve a random word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length)
            </summary>
            <param name="iKey">The key word corresponding to the wished random word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, default value if not found</returns>
        </member>
        <member name="M:Buddy.Dictionary.GetPhoneticStrings(System.String,Buddy.LoadContext)">
            <summary>
            Retrieve the corresponding list to the input iKey. Useful for multiple response handling with the SpeechToText
            </summary>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>List of strings that must sound similar</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Buddy.Dictionary.ContainsPhonetic(System.String,System.String,Buddy.LoadContext)" -->
        <member name="T:Buddy.WiFiManager">
            <summary>
            WiFi helper class. Use mainly TabletParameter wifi methods
            </summary>
        </member>
        <member name="P:Buddy.WiFiManager.AvailableNetworks">
            <summary>
            Available network. List updated every minutes
            </summary>
        </member>
        <member name="T:Buddy.ResourceManager">
            <summary>
            Allow you to retrieve the full path from the name of the raw file
            </summary>
        </member>
        <member name="M:Buddy.ResourceManager.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:Buddy.ResourceManager.PathTo(System.String,Buddy.LoadContext)">
            <summary>
            Allow you to retrieve the full path from the name of the raw file in a StreamingAsset folder
            </summary>
            <param name="iFilename">Name of the file</param>
            <param name="iContext">Loading context. Are you requiering this resource from an app or from the OS ?</param>
            <returns>Fullpath to the file (including the file name with it extension), empty if not found or if APP context is setted without loaded app</returns>
        </member>
        <member name="M:Buddy.ResourceManager.Load``1(System.String,Buddy.LoadContext)">
            <summary>
            Load the resource from Resource/ or from downloaded bundles.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iName">Name (without path/extension) of the resource</param>
            <param name="iContext">Loading context. Are you requiering this resource from an app or from the OS ? Only handle APP or OS</param>
            <returns>The loaded resource. Null if not found</returns>
        </member>
        <member name="M:Buddy.ResourceManager.LoadAtlas(System.String,Buddy.LoadContext)">
            <summary>
            Load the atlas from Resource/ or from downloaded bundles.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iName">Name (without path/extension) of the resource</param>
            <param name="iContext">Loading context. Are you requiering this resource from an app or from the OS ? Only handle APP or OS</param>
            <returns>The loaded resource. Null if not found</returns>
        </member>
        <member name="M:Buddy.ResourceManager.ExistSpriteInAtlas(System.String,System.String)">
            <summary>
            Check if a sprite exist inside an atlas
            </summary>
            <param name="iAtlas">The atlas name</param>
            <param name="iSprite">The sprite name</param>
            <returns>True if the sprite exist within the atlas</returns>
        </member>
        <member name="M:Buddy.ResourceManager.GetSprite(System.String,System.String)">
            <summary>
            Retrieve a sprite from the specified atlas
            </summary>
            <param name="iAtlas">The atlas name</param>
            <param name="iSprite">The sprite name</param>
            <returns>The sprite in the specified atlas</returns>
        </member>
        <member name="M:Buddy.ResourceManager.AssetIsLoaded(System.String)">
            <summary>
            Checks if has been correctly loaded. Always returns true in Editor mode
            </summary>
            <param name="iAssetName">The asset name</param>
            <returns>True if the asset has been correctly loaded, false otherwise</returns>
        </member>
        <member name="M:Buddy.ResourceManager.DefaultStreamingAssetFilePath(System.String)">
            <summary>
            Gets the absolute path of the file contained in the native StreamingAssets folder of the base APK.
            </summary>
            <param name="iFilename">The name of the file</param>
            <returns>The absolute path of the file</returns>
        </member>
        <member name="T:Buddy.UI.AccountSettingWdgRight">
            <summary>
            Represents an account element 
            </summary>
        </member>
        <member name="M:Buddy.UI.AccountSettingWdgRight.Awake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="T:Buddy.UI.Blank">
            <summary>
            Empty blank widget
            </summary>
        </member>
        <member name="T:Buddy.UI.AExplorerView">
            <summary>
            Base class for menu component
            </summary>
        </member>
        <member name="F:Buddy.UI.AExplorerView.mButton">
            <summary>
            Default button
            </summary>
        </member>
        <member name="P:Buddy.UI.AExplorerView.LocalTransform">
            <summary>
            Retrieve the local transform of the component
            </summary>
        </member>
        <member name="M:Buddy.UI.AExplorerView.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.AExplorerView.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.AExplorerView.OnUpdate">
            <summary>
            Called each frame when widget is placed (i.e not is the pool)
            </summary>
        </member>
        <member name="M:Buddy.UI.AExplorerView.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="M:Buddy.UI.AExplorerView.PastRectTransformInfo(UnityEngine.RectTransform)">
            <summary>
            Inner purpose for Rect transform modification
            </summary>
            <param name="iRectTransformItem">The rect transform to set</param>
        </member>
        <member name="T:Buddy.UI.ClockPanel">
            <summary>
            Top-Right Clock panel
            </summary>
        </member>
        <member name="T:Buddy.UI.CountdownNot">
            <summary>
            Display a timed confirmation notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.CountdownNot.With(System.String,System.Int32,System.Action,System.Action)">
            <summary>
            Specify the parameters for the timer notification. Validate will be called by default if no anwser
            </summary>
            <param name="iText">Text to display</param>
            <param name="iTimer">Timer in second. The notication will close after this timer. Validate will be called also. 3sec min</param>
            <param name="iOnValidate">Callback function if user click on validate</param>
            <param name="iOnCancel">Callback function if user click on cancel</param>
        </member>
        <member name="M:Buddy.UI.CountdownNot.Cancel">
            <summary>
            Inner method called after click on cancel. Do not call it manually
            </summary>
        </member>
        <member name="M:Buddy.UI.CountdownNot.Validate">
            <summary>
            Inner method called after click on validate. Do not call it manually
            </summary>
        </member>
        <member name="T:Buddy.UI.AlertNot">
            <summary>
            Display a validation notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.AlertNot.With(System.String,UnityEngine.Sprite,System.Action,System.Action)">
            <summary>
            Specify parameters for alert notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iOnValidate">Callback function if the user click on validate</param>
            <param name="iOnDelay">Callback function if the user click on delay</param>
        </member>
        <member name="M:Buddy.UI.AlertNot.With(System.String,UnityEngine.Sprite,UnityEngine.Color32,System.Action,System.Action)">
            <summary>
            Specify parameters for alert notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iIconColor">Icon color</param>
            <param name="iOnValidate">Callback function if the user click on validate</param>
            <param name="iOnDelay">Callback function if the user click on delay</param>
        </member>
        <member name="M:Buddy.UI.AlertNot.With(System.String,UnityEngine.Sprite,UnityEngine.Color32,UnityEngine.Color32,System.Action,System.Action)">
            <summary>
            Specify parameters for alert notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iIconColor">Icon color</param>
            <param name="iIconBackgroundColor">Icon background color</param>
            <param name="iOnValidate">Callback function if the user click on validate</param>
            <param name="iOnDelay">Callback function if the user click on delay</param> 
        </member>
        <member name="M:Buddy.UI.AlertNot.With(System.String,System.Action,System.Action)">
            <summary>
            Specify parameters for the alert notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Callback function if the user click on validate</param>
            <param name="iOnDelay">Callback function if the user click on delay</param>
        </member>
        <member name="M:Buddy.UI.AlertNot.Delay">
            <summary>
            Inner method called after click on delay. Do not call it manually
            </summary>
        </member>
        <member name="M:Buddy.UI.AlertNot.Validate">
            <summary>
            Inner method called after click on validate. Do not call it manually
            </summary>
        </member>
        <member name="T:Buddy.UI.MeteoNot">
            <summary>
            Display a weather notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.MeteoNot.With(System.Int32,System.String,System.String,System.String,System.String,Buddy.UI.WeatherInfo[])">
            <summary>
            Specify parameters for weather notification
            </summary>
            <param name="iTemperature">Current temperature</param>
            <param name="iWeather">Current weather</param>
            <param name="iDay">Current day</param>
            <param name="iCityLocation">Current city location</param>
            <param name="iCountryLocation">Current country location</param>
            <param name="iWeathers">Weather info about the weather evolution during the day Min : 0, Max 5</param>
        </member>
        <member name="T:Buddy.UI.ConfirmationNot">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.ConfirmationNot.With(System.String,System.Action,System.Action)">
            <summary>
            Specify parameter for a confirmation notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnCancel">Delegate on cancel</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="M:Buddy.UI.ConfirmationNot.With(System.String,System.Action,System.Action,UnityEngine.Sprite)">
            <summary>
            Specify parameter for a confirmation notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnCancel">Delegate on cancel</param>
            <param name="iIcon">Left side icon</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="M:Buddy.UI.ConfirmationNot.With(System.String,System.Action,System.Action,UnityEngine.Sprite,UnityEngine.Color32)">
            <summary>
            Specify parameter for a confirmation notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnCancel">Delegate on cancel</param>
            <param name="iIcon">Left side icon</param>
            <param name="iIconColor">Left side icon color</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="M:Buddy.UI.ConfirmationNot.With(System.String,System.Action,System.Action,UnityEngine.Sprite,UnityEngine.Color32,UnityEngine.Color32)">
            <summary>
            Specify parameter for a confirmation notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnCancel">Delegate on cancel</param>
            <param name="iIcon">Left side icon</param>
            <param name="iIconColor">Left side icon color</param>
            <param name="iIconBackgroundColor">Left side icon background color</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="T:Buddy.UI.MessageNot">
            <summary>
            Display a message callback notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.MessageNot.With(System.String,System.Action,System.Action)">
            <summary>
            Specify parameters for a received message notifcation
            </summary>
            <param name="iText">The text to display</param>
            <param name="iOnValidate">Callback method if user click on validate</param>
            <param name="iOnResponse">Callback method if user click on response</param>
        </member>
        <member name="M:Buddy.UI.MessageNot.Respond">
            <summary>
            Inner method called after click on response. Do not call it manually
            </summary>
        </member>
        <member name="M:Buddy.UI.MessageNot.Validate">
            <summary>
            Inner method called after click on validate. Do not call it manually
            </summary>
        </member>
        <member name="T:Buddy.UI.SimpleNot">
            <summary>
            Display a basic notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.SimpleNot.With(System.String)">
            <summary>
            Specify parameters for simple notification
            </summary>
            <param name="iText">Text to display</param>
        </member>
        <member name="M:Buddy.UI.SimpleNot.With(System.String,UnityEngine.Sprite)">
            <summary>
            Specify parameters for simple notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
        </member>
        <member name="M:Buddy.UI.SimpleNot.With(System.String,UnityEngine.Sprite,UnityEngine.Color32)">
            <summary>
            Specify parameters for simple notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iIconColor">Icon color</param>
        </member>
        <member name="M:Buddy.UI.SimpleNot.With(System.String,UnityEngine.Sprite,UnityEngine.Color32,UnityEngine.Color32)">
            <summary>
            Specify parameters for simple notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iIconColor">Icon color</param>
            <param name="iIconBackgroundColor">Icon background color</param>
        </member>
        <member name="T:Buddy.UI.ANotification">
            <summary>
            Notification that will be displayed on the top of the robot screen
            </summary>
        </member>
        <member name="T:Buddy.UI.Notifier">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:Buddy.UI.Notifier.Display``1(System.Single)">
            <summary>
            Display the typed notification. After this call, use immediatly the With method to specify notification arguments
            </summary>
            <typeparam name="T">Type of the notification. Meteo, timer confirmation ... </typeparam>
            <param name="iTimer">Default display timer. Exception for TimerNot, where the inner timer will be considered instead</param>
            <returns>The not that will be displayed</returns>
        </member>
        <member name="M:Buddy.UI.Notifier.HasUnreadNotif(System.Int32)">
            <summary>
            Check if the unread notifications contains a certain notification.
            </summary>
            <param name="iNotifID">The unique identifier of a notification</param>
            <returns>True or False</returns>
        </member>
        <member name="T:Buddy.UI.ExplorerPool">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:Buddy.UI.AvailableAppsContainer">
            <summary>
            Container for app icon
            </summary>
        </member>
        <member name="F:Buddy.UI.AvailableAppsContainer.mLabel">
            <summary>
            Label of the container
            </summary>
        </member>
        <member name="M:Buddy.UI.AvailableAppsContainer.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.AvailableAppsContainer.OnUpdate">
            <summary>
            Called at each frame
            </summary>
        </member>
        <member name="M:Buddy.UI.AvailableAppsContainer.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.AvailableAppsContainer.IsEmpty">
            <summary>
            True if there is shortcut in the container
            </summary>
            <returns>True if there is shortcut in the container</returns>
        </member>
        <member name="T:Buddy.UI.AppsContainer">
            <summary>
            Container for app icon
            </summary>
        </member>
        <member name="F:Buddy.UI.AppsContainer.mLabel">
            <summary>
            Label of the container
            </summary>
        </member>
        <member name="M:Buddy.UI.AppsContainer.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.AppsContainer.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.AppsContainer.IsEmpty">
            <summary>
            True if there is shortcut in the container
            </summary>
            <returns>True if there is shortcut in the container</returns>
        </member>
        <member name="T:Buddy.UI.AppWdgShortcut">
            <summary>
            App shortcut that 
            </summary>
        </member>
        <member name="M:Buddy.UI.AppWdgShortcut.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.AppWdgShortcut.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.AppWdgShortcut.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="T:Buddy.UI.AWidget">
            <summary>
            Base Widget component class. Represent an user input in a menu layout. Must be used in a AWindowLayout derived class.
            </summary>
        </member>
        <member name="F:Buddy.UI.AWidget.DEFAULT_TEXT">
            <summary>
            Default text
            </summary>
        </member>
        <member name="F:Buddy.UI.AWidget.DEFAULT_INT">
            <summary>
            Default int
            </summary>
        </member>
        <member name="M:Buddy.UI.AWidget.IsEmpty">
            <summary>
            Must return true if the widget is considered as empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buddy.UI.AWidget.OnDisplay">
            <summary>
            Called when widget is displayed
            </summary>
        </member>
        <member name="T:Buddy.UI.LabeledButton">
            <summary>
            Basic button for AWindowLayout with left label
            </summary>
        </member>
        <member name="M:Buddy.UI.LabeledButton.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.LabeledButton.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.LabeledButton.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="T:Buddy.UI.Button">
            <summary>
            Basic button for AWindowLayout, will be replaced by a classier button
            </summary>
        </member>
        <member name="F:Buddy.UI.Button.mLabel">
            <summary>
            Label of the button
            </summary>
        </member>
        <member name="M:Buddy.UI.Button.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.Button.OnClick">
            <summary>
            Callback method that will be called when the mButton item will be clicked
            </summary>
        </member>
        <member name="M:Buddy.UI.Button.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:Buddy.UI.Dropdown">
            <summary>
            Dropdown widget for menu. The integer[0] (idx), the string[0] (label) and the object[0] (opt param) 
            parameter of assigned commands will be updated on value change.
            </summary>
        </member>
        <member name="F:Buddy.UI.Dropdown.mLabel">
            <summary>
            Label of the dropdown
            </summary>
        </member>
        <member name="M:Buddy.UI.Dropdown.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.Dropdown.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.Dropdown.SetDefault(System.String)">
            <summary>
            Set the input label as default
            </summary>
            <param name="iLabel">The label</param>
        </member>
        <member name="M:Buddy.UI.Dropdown.SetDefault(System.Int32)">
            <summary>
            Set the label (corresponding to the index) as default
            </summary>
            <param name="iLabelIdx">The index label</param>
        </member>
        <member name="M:Buddy.UI.Dropdown.AddOption(System.String,System.Object)">
            <summary>
            Add a labeled option to the dropdown, with an optional object parameter
            </summary>
            <param name="iLabel">Displayed label for the option</param>
            <param name="iParam">Optional param for the coresponding label. Will be stored at Objects[0] in updated commands</param>
        </member>
        <member name="M:Buddy.UI.Dropdown.UpdateFeebackValue">
            <summary>
            Callback method that will be called when the dropdown value is changed. Inner purpose, do not call it
            </summary>
        </member>
        <member name="M:Buddy.UI.Dropdown.Display">
            <summary>
            Inner display purpose, do not call it
            </summary>
        </member>
        <member name="M:Buddy.UI.Dropdown.Hide">
            <summary>
            Inner display purpose, do not call it
            </summary>
        </member>
        <member name="T:Buddy.UI.Gauge">
            <summary>
            Slider widget for AWindowLayout
            </summary>
        </member>
        <member name="P:Buddy.UI.Gauge.Suffix">
            <summary>
            Suffix display for the gauge, "%" by default if percentage is enabled
            </summary>
        </member>
        <member name="P:Buddy.UI.Gauge.DisplayPercentage">
            <summary>
            Specify if the slider value must be DISPLAYED in percentage, ignore suffix
            </summary>
        </member>
        <member name="P:Buddy.UI.Gauge.Slider">
            <summary>
            The slider component
            </summary>
        </member>
        <member name="M:Buddy.UI.Gauge.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.Gauge.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.Gauge.UpdateFeebackValue">
            <summary>
            Modification callback for the slider. Inner purpose, do not call it
            </summary>
        </member>
        <member name="T:Buddy.UI.GaugeOnOff">
            <summary>
            Slider with toggle activation widget for AWindowLayout
            </summary>
        </member>
        <member name="P:Buddy.UI.GaugeOnOff.Suffix">
            <summary>
            Suffix display for the gauge, "%" by default if percentage is enabled
            </summary>
        </member>
        <member name="P:Buddy.UI.GaugeOnOff.DisplayPercentage">
            <summary>
            Specify if the slider value must be DISPLAYED in percentage, ignore suffix
            </summary>
        </member>
        <member name="P:Buddy.UI.GaugeOnOff.Slider">
            <summary>
            Slider component of the widget
            </summary>
        </member>
        <member name="P:Buddy.UI.GaugeOnOff.IsActive">
            <summary>
            Set if the toggle must be active when displayed
            </summary>
        </member>
        <member name="M:Buddy.UI.GaugeOnOff.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.GaugeOnOff.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.GaugeOnOff.StateChange">
            <summary>
            Modification callback for the toggle. Inner purpose, do not call it
            </summary>
        </member>
        <member name="M:Buddy.UI.GaugeOnOff.UpdateFeebackValue">
            <summary>
            Modification callback for the slider. Inner purpose, do not call it
            </summary>
        </member>
        <member name="T:Buddy.UI.OnOff">
            <summary>
            Toggle widget for AWindowLayout
            </summary>
        </member>
        <member name="P:Buddy.UI.OnOff.IsActive">
            <summary>
            Set if the toggle must be active when displayed
            </summary>
        </member>
        <member name="M:Buddy.UI.OnOff.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.OnOff.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.OnOff.StateChange">
            <summary>
            Modification callback. Inner purpose, do not call it
            </summary>
        </member>
        <member name="T:Buddy.UI.TextField">
            <summary>
            Text field widget
            </summary>
        </member>
        <member name="F:Buddy.UI.TextField.mField">
            <summary>
            The input field of the text field widget
            </summary>
        </member>
        <member name="P:Buddy.UI.TextField.EmptyText">
            <summary>
            The default "empty" value in the field awaiting an user input
            </summary>
        </member>
        <member name="M:Buddy.UI.TextField.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.TextField.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:Buddy.UI.Password">
            <summary>
            Password widget
            </summary>
        </member>
        <member name="F:Buddy.UI.Password.mField">
            <summary>
            The input field of the text field widget
            </summary>
        </member>
        <member name="P:Buddy.UI.Password.EmptyText">
            <summary>
            The default "empty" value in the field awaiting an user input
            </summary>
        </member>
        <member name="M:Buddy.UI.Password.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.Password.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:Buddy.UI.SearchField">
            <summary>
            Text field widget for "search" purposes for AWindowLayout
            </summary>
        </member>
        <member name="F:Buddy.UI.SearchField.mField">
            <summary>
            The input field of the text field widget
            </summary>
        </member>
        <member name="P:Buddy.UI.SearchField.EmptyText">
            <summary>
            The default "empty" value in the field awaiting an user input
            </summary>
        </member>
        <member name="M:Buddy.UI.SearchField.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.SearchField.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:Buddy.UI.Label">
            <summary>
            Simple read only text
            </summary>
        </member>
        <member name="M:Buddy.UI.Label.OnAwake">
            <summary>
            Called on awake
            </summary>
        </member>
        <member name="M:Buddy.UI.Label.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="T:Buddy.UI.AWindowLayout">
            <summary>
            Layout for left embedded menu in the OS interface. 
            Set base info in Init(), create your components in Build() and set text in LabelizeBase() and LabelizeWidgets()
            </summary>
        </member>
        <member name="F:Buddy.UI.AWindowLayout.DEFAULT_LAYOUT">
            <summary>
            Default layout name. Contains a simple button for leave the app
            </summary>
        </member>
        <member name="P:Buddy.UI.AWindowLayout.Title">
            <summary>
            Title of the menu that will be displayed when the window is opened, mostly the app name will be setted automaticaly
            </summary>
        </member>
        <member name="P:Buddy.UI.AWindowLayout.Description">
            <summary>
            Description of the menu, must not exced few words
            </summary>
        </member>
        <member name="P:Buddy.UI.AWindowLayout.MenuTitle">
            <summary>
            Short title in the menu. Can be the same as Title, or shorter for long Title
            </summary>
        </member>
        <member name="P:Buddy.UI.AWindowLayout.MenuIcon">
            <summary>
            Icon of the menu. Corresponds to the app icon defined in the XML manifest
            </summary>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.Update">
            <summary>
            Called at each frame when loaded
            </summary>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.Build">
            <summary>
            Called each time you want to display a menu layout. Put here what you want to create for your app menu
            </summary>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.LabelizeBase">
            <summary>
            Called for base display labelization
            </summary>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.LabelizeWidgets">
            <summary>
            Called once per Build and when a language-relocalization is apply
            </summary>
        </member>
        <member name="P:Buddy.UI.AWindowLayout.IsDisplayed">
            <summary>
            True if the layout is currently displayed as main layout
            </summary>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.CreateWidget``1">
            <summary>
            Create and returns a new widget
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <returns>The new widget</returns>
        </member>
        <member name="M:Buddy.UI.AWindowLayout.Dispose(Buddy.UI.AWidget)">
            <summary>
            Remove and clear the widget
            </summary>
            <param name="iWidget">The widget to dispose</param>
        </member>
        <member name="T:Buddy.UI.WindowPanel">
            <summary>
            Inner class that contains a AWindowLayout and line of the layout.
            </summary>
        </member>
        <member name="P:Buddy.UI.WindowPanel.Layout">
            <summary>
            The layout to display
            </summary>
        </member>
        <member name="P:Buddy.UI.WindowPanel.Sprite">
            <summary>
            Left side displayed image
            </summary>
        </member>
        <member name="M:Buddy.UI.WindowPanel.Clear">
            <summary>
            Clear method when the component comes to desappeared
            </summary>
        </member>
        <member name="M:Buddy.UI.WindowPanel.BuildWindowView(UnityEngine.Transform)">
            <summary>
            Build the layout and convert the widgets inside the Layout to line that will be displayed in the panel
            </summary>
        </member>
        <member name="T:Buddy.UI.WindowPanelWrapper">
            <summary>
            Inner class that will handle WindowPanel (lines + Layout)
            </summary>
        </member>
        <member name="M:Buddy.UI.WindowPanelWrapper.OpenWindow(Buddy.UI.WindowPanel)">
            <summary>
            Open the specified windows panel
            </summary>
            <param name="iContent">The panel to open and build</param>
        </member>
        <member name="M:Buddy.UI.WindowPanelWrapper.CloseWindow">
            <summary>
            Clear and close the current panel
            </summary>
        </member>
        <member name="M:Buddy.UI.WindowPanelWrapper.Labelize">
            <summary>
            Just update display info
            </summary>
        </member>
        <member name="T:Buddy.UI.AToast">
            <summary>
            A toast is the abstract class of a kind of display for the toaster. It can be a text, pictures display purpose, text with button...
            </summary>
        </member>
        <member name="T:Buddy.UI.Toaster">
            <summary>
            Toaster is a tool to help managing User Interface (Choosing canvas according to options, display pictures, text...)
            </summary>
        </member>
        <member name="T:Buddy.LanguageManager">
            <summary>
            Language managing
            </summary>
        </member>
        <member name="P:Buddy.LanguageManager.CurrentLang">
            <summary>
            Current OS/UI language
            </summary>
        </member>
        <member name="P:Buddy.LanguageManager.CurrentFormat">
            <summary>
            Current OS/UI language format
            </summary>
        </member>
        <member name="T:Buddy.DialogManager">
            <summary>
            Interaction management combining vocal and visual output to ask question to the user,
            could be given with expected user answer.
            TODO: Also handle common request (quit, pause, silence).
            </summary>
        </member>
        <member name="P:Buddy.DialogManager.Answer">
            <summary>
             Human answer
            </summary>
        </member>
        <member name="M:Buddy.DialogManager.Ask(System.Action{System.String},System.String,System.Int32,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Ask a question to the user in a coroutine
            </summary>
            <param name="iCallback">callback function using the human answer (string) as param</param>
            <param name="iErrVocal">iErrVisual is the number of wrong vocal input before activating visual</param>
            <param name="iQuestionKey">iQuestionKey is the key refering to the question from the dictionary</param>
            <param name="iOptionsKeys">iOptionsKeys is the list of keys that we will recognize as answers</param>
            <param name="iQueue">iQueue is at false if we want to ignore current TTS queue.</param>
        </member>
        <member name="T:Buddy.AVMState">
            <summary>
            Base state-machine state for vocal manager
            </summary>
        </member>
        <member name="T:Buddy.AVMErrorState">
            <summary>
            Base class for error stae in vocal managing
            </summary>
        </member>
        <member name="T:Buddy.VMNetworkTimeoutErrorState">
            <summary>
            Network timeout error state
            </summary>
        </member>
        <member name="T:Buddy.VMNoPermissionErrorState">
            <summary>
            No permission error state
            </summary>
        </member>
        <member name="T:Buddy.VMRequestAgainErrorState">
            <summary>
            Request again error state
            </summary>
        </member>
        <member name="T:Buddy.VMServerErrorState">
            <summary>
            Server error state
            </summary>
        </member>
        <member name="T:Buddy.VMNetworkErrorState">
            <summary>
            Network error state
            </summary>
        </member>
        <member name="T:Buddy.VMClientErrorState">
            <summary>
            Client error state
            </summary>
        </member>
        <member name="T:Buddy.VMBusyRecognitionErrorState">
            <summary>
            Busy speech recognition error state
            </summary>
        </member>
        <member name="T:Buddy.VMSpeechTimeoutState">
            <summary>
            Speech timeout error state
            </summary>
        </member>
        <member name="T:Buddy.VMNoMatchErrorState">
            <summary>
            No match error state
            </summary>
        </member>
        <member name="T:Buddy.VMAudioErrorState">
            <summary>
            Audio error state
            </summary>
        </member>
        <member name="T:Buddy.VMListeningTriggerState">
            <summary>
            Listening trigger state
            </summary>
        </member>
        <member name="T:Buddy.VMFinishRecognitionState">
            <summary>
            Finish speech recognition state
            </summary>
        </member>
        <member name="T:Buddy.VMSTTRecognitionState">
            <summary>
            STT recognition state
            </summary>
        </member>
        <member name="T:Buddy.VMIdleState">
            <summary>
            Base idle state
            </summary>
        </member>
        <member name="T:Buddy.VocalInputField">
            <summary>
            Input field text for STT debug / help purpose 
            </summary>
        </member>
        <member name="M:Buddy.VocalInputField.SendStringToActivation">
            <summary>
            Process the string command as speech text
            </summary>
        </member>
        <member name="T:Buddy.VocalDebug">
            <summary>
            Vocal layer for easiest control for STT and Sphinx.
            Set the VocalProcessing attribute for STT callback.
            You can also set StartListenBehaviour and StopListenBehaviour.
            </summary>
        </member>
        <member name="M:Buddy.VocalDebug.StartRecoWithTrigger">
            <summary>
            Set Vocal activation on Trigger Mode. Now, Buddy will need to here "Salut Buddy" or "Hello Buddy", before starting STT
            </summary>
        </member>
        <member name="M:Buddy.VocalDebug.StopTrigger">
            <summary>
            Stop sphinx trigger
            </summary>
        </member>
        <member name="M:Buddy.VocalDebug.StartInstantReco">
            <summary>
            Stop Trigger Mode and immediately starts STT request for instant listening
            </summary>
        </member>
        <member name="M:Buddy.VocalDebug.StopSTT">
            <summary>
            Stop the speach recognition
            </summary>
        </member>
        <member name="T:Buddy.VocalManager">
            <summary>
            Vocal layer for easier control for STT and Sphinx.
            Set the VocalProcessing attribute for STT callback.
            You can also set StartListenBehaviour and StopListenBehaviour.
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.RecoProcessFinished">
            <summary>
            Are we in the recognition process (may include error handling)?
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.RecognitionTriggered">
            <summary>
            Tells wether STT Recognition has been triggered or not.
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.StartListenBehaviour">
            <summary>
            Action will be called when STT starts listening
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.StopListenBehaviour">
            <summary>
            Action will be called when STT stops listening
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.OnEndReco">
            <summary>
            Action will be called with the recognized string after STT listening
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.OnPartialReco">
            <summary>
            Action will be called when STT has recognized a word, BUT recognition is not finished
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.OnError">
            <summary>
            Action will be called upon STT completion with an error. Throws a STTEnum error. After 3 consecutive errors, will momentally disable Sphinx.
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.EnableTrigger">
            <summary>
            Set Vocal activation on Trigger Mode. Now, Buddy will need to hear "Salut Buddy" or "Hello Buddy", before starting STT
            </summary>
        </member>
        <member name="P:Buddy.VocalManager.EnableDefaultErrorHandling">
            <summary>
            If set at true, the vocal manager controller will handle each error individually. If false, the vocal manager won't handle any error.
            Set to true by default
            </summary>
        </member>
        <member name="M:Buddy.VocalManager.LaunchDebug">
            <summary>
            Open or close the debug window for STT and Sphinx
            </summary>
        </member>
        <member name="M:Buddy.VocalManager.LaunchInputField">
            <summary>
            Open or close the input field window for STT
            </summary>
        </member>
        <member name="M:Buddy.VocalManager.StartInstantReco(System.Boolean)">
            <summary>
            Stop Trigger Mode and immediately starts STT request for instant listening
            <param name="iRestartTriggerIfEnabled">If true and EnableTrigger == true, 
            the method restarts the trigger mode after instant recognition</param>
            </summary>
        </member>
        <member name="M:Buddy.VocalManager.AsVocalInput(System.String)">
            <summary>
            Fake the input vocal signal with input text
            </summary>
            <param name="iInput">The input text that the Speech To Text will proceed</param>
        </member>
    </members>
</doc>
