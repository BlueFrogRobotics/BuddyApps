<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OS</name>
    </assembly>
    <members>
        <member name="T:BlueQuark.Internal.AComponent">
            <summary>
            Abstract class of the BlueQuark inner system. A component is a logical class that can subcribe to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Finalize">
            <summary>
            Unsubscribes from the loop system.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.EnableLoop">
            <summary>
            Subscribes the component to the looping system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the subscribtion has been recorded.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.DisableLoop">
            <summary>
            Unsubscribes the component from the looping system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the unsubscribtion has been recorded.</returns>
        </member>
        <member name="P:BlueQuark.Internal.AComponent.IsLooping">
            <summary>
            True if the component is registered to Looper.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AComponent.Parent">
            <summary>
            The parent transform of the current component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Initialize">
            <summary>
            Must be called once after Constructor.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Initialize(System.Object,System.Object[])">
            <summary>
            Must be called once after Constructor. Allows to set parameters.
            </summary>
            <param name="iArg">Any argument.</param>
            <param name="iArgs">Any argument.</param>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Loop">
            <summary>
            Called automatically at each frame when the component has subscribed to the Looper via EnableLoop().
            Can be disabled via DisableLoop().
            </summary>
            <seealso cref="M:BlueQuark.Internal.AComponent.EnableLoop"/>
            <seealso cref="M:BlueQuark.Internal.AComponent.DisableLoop"/>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Reset">
            <summary>
            Called automatically when an app is leaving.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Reshape">
            <summary>
            Called automatically when the component is set as a child component in a new transform.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Dispose">
            <summary>
            Called automatically when the component must be destroyed.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ABindedComponent">
            <summary>
            A binded component can subscribe/unsubscribe to the EventBus system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.EventBus"/>
        </member>
        <member name="F:BlueQuark.Internal.ABindedComponent.mEventBus">
            <summary>
            The event bus system. Allow to subscribe and unsubscribe from events. Also used to fire events.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ABindedComponent.mHandlerRegistrations">
            <summary>
            All event registrations.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.Finalize">
            <summary>
            Unbind from EventBus all registered handlers.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.RegisterHandler(System.String)">
            <summary>
            Register an handler (subscribtion id).
            </summary>
            <param name="iHandlerID">The subscribtion id</param>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.Bind">
            <summary>
            Put all your subcriptions inside this method.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AEvent"/>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.Unbind">
            <summary>
            Put all your unsubcriptions inside this method.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IAvailable">
            <summary>
            An IAvailable component can be considered as busy or available.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IAvailable.IsBusy">
            <summary>
            Returns true if the component is currently busy (displayed or processing something).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IMergeable`1">
            <summary>
            A meargeable object can be merge with T object.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IMergeable`1.Merge(`0)">
            <summary>
            Merge the input object to the this object.
            </summary>
            <typeparam name="T">Objects type.</typeparam>
            <param name="iOther">The other object to merge with this.</param>
        </member>
        <member name="T:BlueQuark.Internal.IStoppable">
            <summary>
            This component can be stopped.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IStoppable.Stop">
            <summary>
            Stops the running process.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IResumable">
            <summary>
            A component that can be resumed after being stopped.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IResumable.Resume">
            <summary>
            Resume the main process of the component.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IQueueSystem">
            <summary>
            Queue (FIFO) based component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IQueueSystem.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IQueueSystem.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IQueueSystem.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ICloneable`1">
            <summary>
            A clonable object can be copy to a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ICloneable`1.Clone">
            <summary>
            Clone the object by a shallow copy.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AModule`2">
            <summary>
            Base class for operating system module. A module is a unique main component handling major features.
            All modules are accessibles through Buddy static class.
            </summary>
            <seealso cref="T:BlueQuark.Buddy"/>
            <typeparam name="U">Type of the Presenter's ULink.</typeparam>
            <typeparam name="M">Type of the metric suite.</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AMetricSuite">
            <summary>
            A metric test suite class is used by each ABasePresenter class to test itself.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.DisplayTexture(BlueQuark.Internal.ICamera)">
            <summary>
            Display a stream texture on the lateral right side. Stay until test is passed.
            </summary>
            <param name="iCamera">Camera to display.</param>
            <returns>True if everything was right. False otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.DisplayTexture(UnityEngine.Texture)">
            <summary>
            Display a texture on the lateral right side. Stays until test is passed.
            </summary>
            <param name="iTexture">Texture to display.</param>
            <returns>True if everything was right. False otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.DisplayImage(UnityEngine.Sprite)">
            <summary>
            Display an image on the lateral right side. Stays until test is passed.
            </summary>
            <param name="iSprite">Sprite to display.</param>
            <returns>True if everything was right. False otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.DisplayText(System.String)">
            <summary>
            Display a text on the lateral right side. Stays until test is passed.
            </summary>
            <param name="iText">Text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.WaitManualValidation">
            <summary>
            Coroutine waiting for a manual validation of the test. It will display two lateral button to valid or unvalid the running test. Auto hide on time out.
            </summary>
            <returns>IEnumerator to hold.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement. The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator.</param>
            <returns>The new started coroutine.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop.</param>
        </member>
        <member name="T:BlueQuark.Internal.ABasePresenter`2">
            <summary>
            A Base presenter class is a Presenter class with a dedicated metric test suite. It also can use the Require/Release system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.APresenterULink"/>
            <seealso cref="T:BlueQuark.Internal.AMetricSuite"/>
            <typeparam name="U">Type of the Presenter's ULink</typeparam>
            <typeparam name="M">Type of the metric suite</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.ABasePresenter`2.IsRequired">
            <summary>
            Gets the required state of the current component (this). True if at least one external component is using this.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.Require(System.Object)">
            <summary>
            Sets a flag that the current component (this) is used by the calling component (owner). 
            An app can require a component only one time. Multiple components in OS can require a same component.
            MUST be call from Impl side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.Release">
            <summary>
            Free the current component (this) from the calling component. 
            MUST be call from Impl side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.ForceRelease">
            <summary>
            Free all 'require' flags.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ABasePresenter`2.TaskOwners">
            <summary>
            Gets all components that are currently using this component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.ProvideMetric">
            <summary>
            Provide a unique instance of the metric suite of the current presenter.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.DisposeMetric">
            <summary>
            Dispose the metric suite of the presenter.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.APresenter`1">
            <summary>
            A presenter class is linked to a Unity MonoBehaviour (called ULink). 
            ULink are not directly accessible and must be managed by the presenter.
            </summary>
            <seealso cref="T:BlueQuark.Internal.APresenterULink"/>
            <typeparam name="U">Type of the Presenter's ULink.</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.APresenter`1.mULink">
            <summary>
            Unity link (MonoBehaviour) of the Presenter object. Use it for platform dependant purposes and/or display and/or Unity callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponentInChildren``1">
            <summary>
            Returns the Unity component of Type type in the GameObject or any of its children using depth first search.
            An Unity component is returned only if it is found on an active GameObject.
            </summary>
            <typeparam name="T">The type of the Unity component to retrieve</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponentInParent``1">
            <summary>
            Returns the component of Type type in the GameObject or any of its parents.
            Recurses upwards until it finds a valid component.Returns null if no component found. Only components on active GameObjects are returned.
            </summary>
            <typeparam name="T">The type of the Unity component to retrieve</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponent``1">
            <summary>
            Returns the Unity component of Type type if the game object has one attached, null if it doesn't.
            </summary>
            <typeparam name="T">The type of Unity component to retrieve.</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponents``1">
            <summary>
            Returns Unity components of Type type if the game object has one attached, null if it doesn't.
            </summary>
            <typeparam name="T">The type of Unity component to retrieve.</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.AddComponent``1">
            <summary>
            Adds a Unity component class corresponding to the requested type to the game object.
            </summary>
            <typeparam name="T">The type of the Unity component to add</typeparam>
            <returns>The added Unity component</returns>
        </member>
        <member name="P:BlueQuark.Internal.APresenter`1.Parent">
            <summary>
            Parent transform of the presenter.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement. The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator.</param>
            <returns>The new started coroutine.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopAllCoroutines">
            <summary>
            Stop all started coroutines in this presenter.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MethodUnitTestStatus">
            <summary>
            Current status of a method execution for unit testing.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MethodUnitTest">
            <summary>
            Represents a class method test.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.APresenterULink">
            <summary>
            Unity Link is the BlueQuark interface between a logical class (Presenter) and Unity Monobehaviour class.
            Useful for display, Editor interaction, Android plugin, coroutine system, or callback purposes.
            A Presenter ULink use it own update system with the Loop method.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.APresenterULink.mIsLooping">
            <summary>
            Does the ULink is looping with the Looper system ?
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.APresenterULink.mLooper">
            <summary>
            Looping (Update like) system.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.APresenterULink.mEventBus">
            <summary>
            The event bus system. Allows to fire events.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.APresenterULink.IsLooping">
            <summary>
            True if the ULink is registered to Looper.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.Setup(BlueQuark.Internal.AComponent,BlueQuark.Internal.EventBus,BlueQuark.Internal.Looper)">
            <summary>
            Called after ctor to setup base dependencies.
            </summary>
            <param name="iPresenter">The assigned presenter.</param>
            <param name="iEventBus">The eventbus system.</param>
            <param name="iLooper">The looping (Update) system.</param>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.Initialize">
            <summary>
            Called after ctor and setup
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.Loop">
            <summary>
            Called automatically at each frame when the component has subscribe to the Looper via EnableLoop().
            Can be disable via DisableLoop().
            </summary>
            <seealso cref="M:BlueQuark.Internal.APresenterULink.EnableLoop"/>
            <seealso cref="M:BlueQuark.Internal.APresenterULink.DisableLoop"/>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.Reset">
            <summary>
            Called automatically when an app is quit.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.Dispose">
            <summary>
            Called automatically when the component must be destroyed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.EnableLoop">
            <summary>
            Subscribe the ULink to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the subscribtion has been recorded.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenterULink.DisableLoop">
            <summary>
            Unsubscribe the ULink from the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the unsubscribtion has been recorded.</returns>
        </member>
        <member name="T:BlueQuark.Internal.AULink">
            <summary>
            Unity Link is the BlueQuark interface between a logical class and Unity Monobehaviour class.
            Useful for display, Editor interaction, Android plugin, coroutine system, or callback purposes.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mLocalCanvas">
            <summary>
            Hypothetical canvas owned by the ULink gameobject or one of its son gameobject.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mBindedObject">
            <summary>
            Logical class of the current Unity Link. Use it to forward Unity callbacks.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mPlatformType">
            <summary>
            Platform specialization type of the ULink.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AULink.Type">
            <summary>
            Gets the platform type of the Unity Link.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Setup(BlueQuark.Internal.ULinkPlatformType)">
            <summary>
            First method call after the ULink ctor.
            </summary>
            <param name="iPlatformType">The specialization type of the ULink.</param>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Setup(System.Object)">
            <summary>
            Called after ctor to setup base dependencies.
            </summary>
            <param name="iBindedObject">The assigned object.</param>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Initialize">
            <summary>
            Called after ctor and setup
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Dispose">
            <summary>
            Called automatically when the component must be destroyed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.SetLayer(System.Int32)">
            <summary>
            Set the canvas layer if findable.
            </summary>
            <param name="iLayerIdx"></param>
        </member>
        <member name="M:BlueQuark.Internal.AULink.AddComponent``1">
            <summary>
            Adds a Unity component class corresponding to the requested type to the game object.
            </summary>
            <typeparam name="T">The type of the Unity component to add</typeparam>
            <returns>The added Unity component</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.ForwardToUmpl(System.Object)">
            <summary>
            Calls a method in the presenter part with the same name of the calling method with the suffix "Umpl". Use that method to forward an Unity event/callback to the Presenter Umpl side.
            </summary>
            <param name="iObject">Optional argument that will be forwarded to the Umpl Presenter method.</param>
        </member>
        <member name="T:BlueQuark.Internal.DefaultULink">
            <summary>
            Default sealed type for ULink purposes. Use it for static class or throwable class. Cannot be inherit.
            Useful only if need to access to coroutine system.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AIndexableULink">
            <summary>
            ULink that are enumerable like multiple sensors or motors. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AIndexableULink.Index">
            <summary>
            Index of the component. The Presenter must be a regular behaviour
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AHeadHinge`2">
            <summary>
            Hinge component of the robot neck. 
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.OfferQuery(System.Single,System.Single,BlueQuark.AccDecMode,System.Single,System.Action{System.Single})">
            <summary>
            Starts the set position of the hinges.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target velocity.</param>
            <param name="iAccDecMode">Acceleration/deceleration mode.</param>
            <param name="iTolerance">Angle tolerance.</param>
            <param name="iOnEndMove">Callback called at the end of the motion.</param>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.IsBusy">
            <summary>
            Returns true if the hinge is currently moving.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Error">
            <summary>
            Error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Angle">
            <summary>
            Current angle of the hinge. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Speed">
            <summary>
            Current speed of the hinge. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.AngularVelocity">
            <summary>
            Current angular velocity of the hinge. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Current">
            <summary>
            Current applied current on the hinge. Value in milli ampere.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.CurrentError">
            <summary>
            Current current error. 0 if not error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Locked">
            <summary>
            Locks/Unlocks the hinge. A locked hinge cannot move.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.Stop">
            <summary>
            Stops any running hinge command.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.PID">
            <summary>
            Current PID.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.TorqueThreshold">
            <summary>
            Maximal authorized threshold in percent before the motor is stopped by the torque control system.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:BlueQuark.Internal.AHeadHinge`2.EnableTorqueControl" -->
        <member name="M:BlueQuark.Internal.AHeadHinge`2.SetPID(System.Single,System.Single,System.Single)">
            <summary>
            Sets the proportional–integral–derivative controller. It is a control loop feedback mechanism.
            </summary>
            <param name="iKp">Term P is proportional to the current value of the SP − PV error e(t).</param>
            <param name="iKi">Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.</param>
            <param name="iKd">Term D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.</param>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.SetPID(BlueQuark.PIDParameters)">
            <summary>
            Sets the proportional–integral–derivative controller. It is a control loop feedback mechanism.
            </summary>
            <param name="iPID">PID to set.</param>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.SetAutomaticZero">
            <summary>
            Automatically detect and set the zero of the robot's head.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.SetAutomaticZero(System.Action{System.Int16})">
            <summary>
            Automatically detect and set the zero of the robot's head.
            </summary>
            <param name="iOnSet">Callback called when the set is done.</param>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.LockedByVocal">
            <summary>
            Is the robot currently locked because it is listening ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.LockedByGUI">
            <summary>
            Is the robot currently locked because important GUI elements are displayed ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.LockedByUser">
            <summary>
            Locks/Unlocks the hinge from user. A locked hinge cannot move.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ExplorerPeekState">
            <summary>
            State for explorer peek button.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IdleFaceState">
            <summary>
            Idle state for Buddy's face. 
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IdleFaceState.OnStateEnter(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target comes in the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="M:BlueQuark.Internal.IdleFaceState.OnStateExit(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target leaves the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="T:BlueQuark.Internal.ABehaviourAlgorithmVariable">
            <summary>
            Represents a named variable declared during a Behaviour algorithm. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ABehaviourAlgorithmVariable.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ABehaviourAlgorithmVariable.Value">
            <summary>
            The value of the variable.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABehaviourAlgorithmVariable.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>String serialization.</returns>
        </member>
        <member name="T:BlueQuark.Internal.BehaviourAlgorithmStorage">
            <summary>
            Meta Data concerning a behaviour algorithm for XML storage. The BA node is stored in the BehaviourAlgorithm class.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BehaviourAlgorithmStorage.Settings">
            <summary>
            Settings of the stored behaviour algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BehaviourAlgorithmStorage.Algorithm">
            <summary>
            The algorithm itself.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.BehaviourAlgorithmSettings">
            <summary>
            Meta data concerning a behaviour algorithm. The BA node is stored in the BehaviourAlgorithm class.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BehaviourAlgorithmSettings.Category">
            <summary>
            Custom category of the algorithm. A non null and non empty category will always be considere instead of any Mood/Commitment/move pattern.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BehaviourAlgorithmSettings.Mood">
            <summary>
            Global mood definition of the algorithm. Will be use for BA classification.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BehaviourAlgorithmSettings.Commitment">
            <summary>
            Commitment definition of the algorithm. Will be use for BA classification.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BehaviourAlgorithmSettings.MovementPattern">
            <summary>
            Movement pattern definition of the algorithm. Will be use for BA classification.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.BehaviourAlgorithmSettings.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LocalBehaviourAlgorithmVariable">
            <summary>
            Represents a named variable declared during a Behaviour algorithm. 
            </summary>
            <seealso cref="T:BlueQuark.Internal.ABehaviourAlgorithmVariable"/>
        </member>
        <member name="F:BlueQuark.Internal.RunBehaviourStructureVisitor.mAlgorithmVariables">
            <summary>
            Current (stack like) local and input variables of the algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.RunBehaviourStructureVisitor.mOnRunInstruction">
            <summary>
            Callback called at each intruction.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.RunBehaviourStructureVisitor.mConsidereInternalMood">
            <summary>
            Apply robot inner if true.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.RunBehaviourStructureVisitor.mCurrentLoop">
            <summary>
            Most nested loop. Null if top layer.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.RunBehaviourStructureVisitor.mToAbort">
            <summary>
            The visitor process must abort.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.RunBehaviourStructureVisitor.mULink">
            <summary>
            Sandbox ULink for coroutine purposes.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ActionManager">
            <summary>
            The action manager class defines high level function to control Buddy action.
            It also contains some function for decision making based on situation (state), mood and desire.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CompanionState">
            <summary>
            Different states of Companion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CompanionAction">
            <summary>
            Enum of actions that Buddy can perform
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.NONE">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.WANDER">
            <summary>
            Wander.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.DANCE">
            <summary>
            Dance.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.FOLLOW">
            <summary>
            Follow.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.GAME">
            <summary>
            Game.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.EDUTAINMENT">
            <summary>
            Edutainment.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.SERVICE">
            <summary>
            Service.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.JOKE">
            <summary>
            Joke.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.CHAT">
            <summary>
            Chat.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.TOUCH_INTERACT">
            <summary>
            Touch interact.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.LOOK_FOR_USER">
            <summary>
            Look for user.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.ASK_USER_PROFILE">
            <summary>
            Ask user profile.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.INFORM">
            <summary>
            Inform.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.EXPRESS_MOOD">
            <summary>
            Express mood.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.NOTIFY">
            <summary>
            Notify.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.MONITOR_APP">
            <summary>
            Monitor app.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.ASK_NOTIFY">
            <summary>
            Ask notify.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CliffState">
            <summary>
            This state is used when Buddy detects a cliff
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LookingToNotifyState">
            <summary>
            This state is called when Buddy is looking for a/any user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MonitorAppState">
            <summary>
            This is the state we use when an app is launched.
            Buddy shouldn't behave anymore....
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TestAudioState">
            <summary>
            This state is used when Buddy wants to move and decides to dance
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskNotifyState">
            <summary>
            This state is used to ask the name of the current user
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AskNotifyState.OnEndListen(BlueQuark.SpeechInput)">
            <summary>
            This function is called when an answer is received from the user
            </summary>
            <param name="iInput">User speech input</param>
        </member>
        <member name="T:BlueQuark.Internal.AudioBehaviourState">
            <summary>
            This state is used when Buddy detects a cliff
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledLevel">
            <summary>
            Level sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledLevel.OnClick">
            <summary>
            Called when the text is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledLevel.Size">
            <summary>
            Sets the maximum level. Possible values 1 - 10.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledLevel.SetLabel(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledLevel.SetLevel(System.Int32)">
            <summary>
            Sets the level.
            </summary>
            <param name="iLevel">The level to display. Possible values 1 - 10.</param>
        </member>
        <member name="T:BlueQuark.Internal.EImage">
            <summary>
            Text sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EImage.OnClick">
            <summary>
            Called when the text is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetImage(UnityEngine.Sprite)">
            <summary>
            Sets the image.
            </summary>
            <param name="iImage">The sprite to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetImage(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets the image.
            </summary>
            <param name="iImage">The sprite to display.</param>
            <param name="iColor">The color of the sprite.</param>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetImage(System.String,BlueQuark.Context)">
            <summary>
            Sets the image.
            </summary>
            <param name="iImageName">Name of the sprite.</param>
            <param name="iContext">Context of the sprite.</param>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetImage(System.String,UnityEngine.Color,BlueQuark.Context)">
            <summary>
            Sets the image.
            </summary>
            <param name="iImageName">Name of the sprite.</param>
            <param name="iColor">The color of the sprite.</param>
            <param name="iContext">Context of the sprite.</param>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetColor(UnityEngine.Color)">
            <summary>
            Sets the image.
            </summary>
            <param name="iColor">Color of the sprite.</param>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetSize(System.Single,System.Single)">
            <summary>
            Sets the image size.
            </summary>
            <param name="iWidth">Width</param>
            <param name="iHeight">Height</param>
        </member>
        <member name="M:BlueQuark.Internal.EImage.SetAlignment(UnityEngine.TextAlignment)">
            <summary>
            Sets image alignment.
            </summary>
            <param name="iAlignment">Alignment</param>
        </member>
        <member name="T:BlueQuark.Internal.EZone">
            <summary>
            Zone sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EZone.OnClick">
            <summary>
            Called when clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EZone.OnBuild">
            <summary>
            Action that builds elements inside
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EZone.Build">
            <summary>
            Build elements inside
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EZone.Rebuild">
            <summary>
            Update elements inside
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EZone.PairedToggle">
            <summary>
            Toggle that builds and clears the Zone
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EZone.CreateWidget``1(System.Int32)">
            <summary>
            Add internal widget to the Zone.
            </summary>
            <typeparam name="W"></typeparam>
            <param name="iColumn">Column index. 0 by default. Maximum 4.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.EZone.RemoveWidget(BlueQuark.Internal.AComponent)">
            <summary>
            Remove specific internal widget, if Zone contains it.
            </summary>
            <param name="iWidget"></param>
        </member>
        <member name="M:BlueQuark.Internal.EZone.RemoveAllWidgets">
            <summary>
            Remove and dispose all internal widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EZone.Clear">
            <summary>
            Remove and dispose all internal widgets.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Unlocker">
            <summary>
            Manages the front locking windows when lock by screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Unlocker.IsBusy">
            <summary>
            Returns true if the Dialoger is currently displaying something.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Unlocker.Display(System.Action,System.Action,System.Action)">
            <summary>
            Display the unlock numeric pad.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Unlocker.Hide">
            <summary>
            Hide the displayed dialog.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Blurer">
            <summary>
            GUI component handling the background blur.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Blurer.IsBusy">
            <summary>
            Returns true if displayed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Blurer.Display(System.Int32,BlueQuark.Internal.BlurModel,System.Boolean)">
            <summary>
            Show the blurred background underneath the layer.
            <c>iToCheckDepth</c>: normally, blur must not move lower if lower layer is revealed (it must stay blurred).
            But under some conditions it has to be moved (for example, when we return to previous state).
            In this case, check depth must be set to false.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Blurer.Hide(System.Int32)">
            <summary>
            Hide the blurred background.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.BRECom">
            <summary>
            Communication component between the Core application and the BYFW (BYFW side).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CSOACom">
            <summary>
            Communication component for the Rana board (Compute-Service-Oriented Architecture Communication).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CameraStreamCom">
            <summary>
            Camera stream communication from Compute board.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DictionaryEntry">
            <summary>
            Key-value dictionary base entry
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.Key">
            <summary>
            Key of the value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.BaseValue">
            <summary>
            Display purpose value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.ClosePhoneticValues">
            <summary>
            Listen list for STT input processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.RandomValues">
            <summary>
            Say list containing value that will be choosen randomly.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.DictionaryEntryType.BASE">
            <summary>
            Unique value for UI display purpose.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.DictionaryEntryType.CLOSE_PHONETIC">
            <summary>
            Dictionary entry for STT purpose mainly.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.DictionaryEntryType.RANDOM">
            <summary>
            Dictionary entry for TTS purpose mainly.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LanguageThesaurus">
            <summary>
            Language dictionary storage. Contains key-value entries for one language
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LanguageThesaurus.Entries">
            <summary>
            All key-value entries of the thesaurus
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LanguageThesaurus.#ctor">
            <summary>
            Represents all the dictionary entries
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LanguageThesaurus.ContainsKey(System.String)">
            <summary>
            Check existing key in existing entries
            </summary>
            <param name="iKey">Key to check</param>
            <returns>True if the key already exists in Entries</returns>
        </member>
        <member name="M:BlueQuark.Internal.Thesaurus.Contains(System.String,BlueQuark.Context)">
            <summary>
            Checks if a specified key-value pair is contained in the dictionary.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word to check</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>True if the key is stored inside the dictionary</returns>
        </member>
        <member name="M:BlueQuark.Internal.Thesaurus.GetBase(System.String,BlueQuark.Context,BlueQuark.ISO6391Code)">
            <summary>
            Retrieves the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <param name="iLanguage">Reference language.</param>
            <returns>The word in the current language, empty if not found</returns>
        </member>
        <member name="M:BlueQuark.Internal.Thesaurus.GetBase(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, empty if not found</returns>
        </member>
        <member name="M:BlueQuark.Internal.Thesaurus.GetRandom(System.String,BlueQuark.Context)">
            <summary>
            Retrieves a random word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished random word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, empty if not found</returns>
        </member>
        <member name="M:BlueQuark.Internal.Thesaurus.GetPhonetics(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding list to the input iKey. Useful for multiple response handling with the SpeechToText
            </summary>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>List of strings that must sound similar</returns>
        </member>
        <member name="M:BlueQuark.Internal.Thesaurus.ContainsPhonetic(System.String,System.String,BlueQuark.Context)">
            <summary>
            Proceed to a GetPhoneticsStrings(iKey, iContext = APP) and checks if one element on the closephonetic array is contained in iRef
            </summary>
            <param name="iRef">The sentence to compare to each word into the list</param>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>True if the one element of the closephonetic array in contained in iRef sentence (not null and not empty), false otherwise</returns>
        </member>
        <member name="T:BlueQuark.Internal.UpQuark">
            <summary>
            Operating system package manager.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNumber(System.Double)">
            <summary>
            Check if the input val is a correct number and not infinity.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if not infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNumber(System.Single)">
            <summary>
            Check if the input val is a correct number and not infinity.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if not infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNaN(System.Double)">
            <summary>
            Check if the input val is not a number or infinity.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNaN(System.Single)">
            <summary>
            Check if the input val is not a number or infinity.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsPositive(System.Double,System.Boolean)">
            <summary>
            Checks if the value is >= 0 or > 0 if strict.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iStrict">The value to check.</param>
            <returns>Return true if the value is >= 0, or > 0 if strict.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNegative(System.Double,System.Boolean)">
            <summary>
            Checks if the value is >= 0 or > 0 if strict.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iStrict">The value to check.</param>
            <returns>Return true if the value is >= 0, or > 0 if strict.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsInRange(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a value is in range between two values.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iLowerRange">The lower range.</param>
            <param name="iUpperRange">The upper range.</param>
            <returns>Returns true if strictly lower than lower range or strictly highier than upper range</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsAmong(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Check if a value is contained among provided numbers.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iRangeVal1">Mandatory comparative value.</param>
            <param name="iRangeVal2">Mandatory comparative value.</param>
            <param name="iRange">Dynamic comparative values.</param>
            <returns>Returns true if the value is among the provided numbers.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNotEmpty(System.String)">
            <summary>
            Checks if the string is not null, empty, or only contains whitespace.
            </summary>
            <param name="iString">String to check.</param>
            <returns>Returns true if the string is null, empty, or only contains whitespace.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsEmpty(System.String)">
            <summary>
            Checks if the string is null, empty, or only contains whitespace.
            </summary>
            <param name="iString">String to check.</param>
            <returns>Returns true if the string is null, empty, or only contains whitespace.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNotEmpty``1(``0[])">
            <summary>
            Checks if the array is not null or empty.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsEmpty``1(``0[])">
            <summary>
            Checks if the array is null or empty.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks if the array is null or empty.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks if the array is not null or empty.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsEmpty(OpenCVUnity.Mat)">
            <summary>
            Checks if the OpenCVUnity matrix is not null or empty.
            </summary>
            <param name="iMat">Matrix to check.</param>
            <returns>Returns true if the matrix is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsEmpty(UnityEngine.Texture)">
            <summary>
            Checks if the Unity texture is not null or empty.
            </summary>
            <param name="iTexture">Texture to check.</param>
            <returns>Returns true if the texture is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNotEmpty(UnityEngine.Texture)">
            <summary>
            Checks if the Unity texture is not null or empty.
            </summary>
            <param name="iTexture">Texture to check.</param>
            <returns>Returns true if the texture is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsEmpty(UnityEngine.Sprite)">
            <summary>
            Checks if the Unity sprite is not null or empty.
            </summary>
            <param name="iSprite">Sprite to check.</param>
            <returns>Returns true if the sprite and its texture is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNotEmpty(UnityEngine.Sprite)">
            <summary>
            Checks if the Unity sprite is not null or empty.
            </summary>
            <param name="iSprite">Sprite to check.</param>
            <returns>Returns true if the sprite and its texture is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNotNull(System.Object)">
            <summary>
            Checks if the reference of an object is not null.
            </summary>
            <param name="iObject">The referennce of the object to check.</param>
            <returns>Returns true if the object</returns>
        </member>
        <member name="M:BlueQuark.Internal.Guard.AssertIsNull(System.Object)">
            <summary>
            Checks if the reference of an object is null.
            </summary>
            <param name="iObject">The referennce of the object to check.</param>
            <returns>Returns true if the object</returns>
        </member>
        <member name="P:BlueQuark.Internal.LayerStack`1.Previous">
            <summary>
            Get the layer that is directly underneath the current.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LayerStack`1.CurrentData">
            <summary>
            Get data of a current layer.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LayerStack`1.PreviousData">
            <summary>
            Get data of a previous layer.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LayerStack`1.IsEmpty">
            <summary>
            Is there any layers except the empty base?
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.GetLayerData(System.Int32)">
            <summary>
            Get the data of indicated layer.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.Add(System.Int32,`0)">
            <summary>
            Add new layer and its data to the stack.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.GoTo(System.Int32)">
            <summary>
            Set current layer.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.Leave(System.Int32)">
            <summary>
            Remove layer and drop to the next.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.CropTop(System.Int32)">
            <summary>
            Remove all layers that are higher.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.CropBottom(System.Int32)">
            <summary>
            Remove all layers that are lower.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.Push(System.Int32,System.Boolean)">
            <summary>
            Add a layer to the stack.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.Remove(System.Int32)">
            <summary>
            Remove all layer inclusions from all the stack.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LayerStack`1.EnsureListSafety">
            Check if all conditions are safe
        </member>
        <member name="T:BlueQuark.Internal.BlurModel">
            <summary>
            A set of configurations for the blurred background.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.FDotNavigationDot">
            <summary>
            Dot navigation bullet for dot navigation bar Footer component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FDotNavigationDot.OnClick">
            <summary>
            Called when the dot is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FDotNavigationDot.Index">
            <summary>
            Index of the dot.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.FDotNavigationDot.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets a custom image to the dot element.
            </summary>
            <param name="iSprite">The sprite to set</param>
        </member>
        <member name="M:BlueQuark.Internal.FDotNavigationDot.SetColor(UnityEngine.Color)">
            <summary>
            Sets a custom color to the dot element.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="M:BlueQuark.Internal.FDotNavigationDot.Select(System.Boolean)">
            <summary>
            Sets the dot as selected or not.
            </summary>
            <param name="iVal">The value of the selection.</param>
        </member>
        <member name="T:BlueQuark.Internal.LoadingScreen">
            <summary>
            Loading screen GUI element that cover the entire screen. Use it for system DL/loading.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MetricBoard">
            <summary>
            Display manager test suite and functional tests.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MetricBoard.IsBusy">
            <summary>
            Returns true if the board is processing/displaying something.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MetricBoard.Display(BlueQuark.Internal.AComponent)">
            <summary>
            Display the test suite board according the presenter to test.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MetricBoard.CreateLateralWidget``1">
            <summary>
            Adds a widget on the right side of the board. The board must be dislayed.
            </summary>
            <typeparam name="MW">Type of the widget.</typeparam>
        </member>
        <member name="M:BlueQuark.Internal.MetricBoard.RemoveLateralWidget``1(``0)">
            <summary>
            Removes a lateral widget. 
            </summary>
            <typeparam name="MW">Type of the widget.</typeparam>
            <param name="iWidget">The widget to remove.</param>
        </member>
        <member name="M:BlueQuark.Internal.MetricBoard.Hide">
            <summary>
            Clear and hide the board. No effect if not displayed.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMWidget`1">
            <summary>
            Base class for Metric board widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IMetricBoardWidget">
            <summary>
            Base interface for typed Metric board widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MButton">
            <summary>
            Button widget for the test suite.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MButton.OnCancelClick">
            <summary>
            Called when the left failure button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MButton.OnValidClick">
            <summary>
            Called when the right validate button is clicked.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MBox">
            <summary>
            Line widget for the metric board UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MBox.OnClick">
            <summary>
            Called when the line is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MBox.Position">
            <summary>
            Position in the content scroll rect.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MBox.SetTest(BlueQuark.Internal.MethodUnitTest)">
            <summary>
            Sets the test to display, the properties will be auto updated on test status changes.
            </summary>
            <param name="iTest">The test to set.</param>
        </member>
        <member name="T:BlueQuark.Internal.MPicture">
            <summary>
            Represents an image that can be displayed during test suite.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MPicture.OnClick">
            <summary>
            Called when the main image is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MPicture.SetImage(UnityEngine.Sprite)">
            <summary>
            Set the main image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.Internal.MVideoStream">
            <summary>
            Represents a stream that can be displayed during test suite.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.MVideoStream.OnClick">
            <summary>
            Called when the main image is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MVideoStream.SetTexture(UnityEngine.Texture)">
            <summary>
            Set the main image.
            </summary>
            <param name="iTexture">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.MVideoStream.SetCameraStream(BlueQuark.Internal.ICamera)">
            <summary>
            Set the main image stream from camera.
            </summary>
            <param name="iCamera">The camera device to display. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.Internal.MText">
            <summary>
            Represents a simple text to display inside for test suite.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MText.SetLabel(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.HardwareCommand">
            <summary>
            Represents an array of byte that is used to communicate with the hardware side.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommand.Code">
            <summary>
            Code of the command. Read by the hardware side to process a specific need.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommand.Progress">
            <summary>
            Progress handler of the command.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommand.Payload">
            <summary>
            Complete payload of the command.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCommand.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>String of the command.</returns>
        </member>
        <member name="T:BlueQuark.Internal.HardwareCommandStatus">
            <summary>
            Represents the status of an hardware command.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.CREATED">
            <summary>
            The command is just created.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.QUEUED">
            <summary>
            The command is queued for further process.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.MERGING_FROM">
            <summary>
            Command parameters / OnProgress were replaced with a new command. 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.MERGING_TO">
            <summary>
            Command parameters / OnProgress were copied into exisint queued command.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.ABORTED">
            <summary>
            The command has been fully aborted.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.SENT">
            <summary>
            The command is queued for further process.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.NOT_SENT">
            <summary>
            The command was not sent.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.BAD_ACKNOWLEDGE">
            <summary>
            The command was sent but the acknowledgment is bad.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HardwareCommandStatus.SUCCESS">
            <summary>
            The command was sent and detected has successful.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.HardwareCommandProgress">
            <summary>
            Represents the progress of an hardware command.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.IsSucceeded">
            <summary>
            Is the command well acknowledged without error ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.IsDone">
            <summary>
            Is the command fully acknowledged ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.IsInterrupted">
            <summary>
            True if the command was not sent or abort in any way. See Status and Error for more info.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.Status">
            <summary>
            Current status of the command.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.Error">
            <summary>
            Error code. 0 if not error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.FrameID">
            <summary>
            ID of the communication frame. -1 if not sent.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCommandProgress.Acknowledgment">
            <summary>
            Byte array containing the full acknowledgment of the command. Null if not done.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMotherboard`2">
            <summary>
            Represents an motherboard within the robot's body.
            </summary>
            <typeparam name="U">ULink</typeparam>
            <typeparam name="M">Metric suite</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.AMotherboard`2.mName">
            <summary>
            Name of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMotherboard`2.Name">
            <summary>
            Name of the motherboard.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMotherboard`2.SerialNumber">
            <summary>
            Serial number of the board.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMotherboard`2.Version">
            <summary>
            Version of the motherboard.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMotherboard`2.Status">
            <summary>
            Status of the motherboard.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMotherboard`2.ResetStatus">
            <summary>
            Reset the status of the motherboard.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMotherboard`2.ToString">
            <summary>
            All info of the board.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMicrocontroller`2">
            <summary>
            Represents an microcontroller integrated circuit within the robot's body.
            </summary>
            <typeparam name="U">ULink</typeparam>
            <typeparam name="M">Metric suite</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.AMicrocontroller`2.mName">
            <summary>
            Name of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMicrocontroller`2.Name">
            <summary>
            Name of the microcontroller.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMicrocontroller`2.Version">
            <summary>
            Version of the microcontroller.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AMicrocontroller`2.Status">
            <summary>
            Status of the microcontroller.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMicrocontroller`2.ResetStatus">
            <summary>
            Reset the status of the microcontroller.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMicrocontroller`2.ToString">
            <summary>
            All info of the µC.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LookAroundSubStrategy.With(System.Single,System.Single,System.Single,System.Action)">
            <summary>
            Start a look around movement.
            Angles must be positive, or 0 if no movement needed.
            </summary>
            <param name="iHeadNoRotationAngle">Rotation angle for Head no axis.</param>
            <param name="iBodyRotationAngle">Rotation angle for wheels.</param>
            <param name="iVelocity">Velocity for all movement.</param>
            <param name="iOnEnd">Action to do when LookAround ends.</param>
        </member>
        <member name="T:BlueQuark.Internal.AMovementController">
            <summary>
            Define the minimum implementation for a controller.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AMovementController.mULink">
            <summary>
            ULink to run sandboxed coroutines without any side effect
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMovementController.Control(UnityEngine.Vector2,System.Single)">
            <summary>
            Control using given point,
            which is a normalized position.
            </summary>
            <param name="iPoint">Point that eyes must look.</param>
            <param name="iDistance">Distance to the target in meters.</param>
        </member>
        <member name="M:BlueQuark.Internal.AMovementController.Stop">
            <summary>
            Stop the controller
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMovementController.SetActive(System.Boolean)">
            <summary>
            Activate / Desactivate the controller.
            When a controller is activated it continues where it had stopped.
            </summary>
            <param name="iValue">True to activate, false to desactivate.</param>
        </member>
        <member name="M:BlueQuark.Internal.AMovementController.Reset">
            <summary>
            Reset the controller to it's default position
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMovementController.Dispose">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EyeController">
            <summary>
            Eye controller
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.EyeController.EYE_HYSTERESIS">
            <summary>
            Minimum displacement to allow eyes movement. (Normalized)
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EyeController.NormalizedPosition">
            <summary>
            The normalized position of the Eyes, from -1 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EyeController.Control(UnityEngine.Vector2,System.Single)">
            <summary>
            Control using given point,
            which is considere as normalized position.
            </summary>
            <param name="iPoint">Point that eyes must look.</param>
            <param name="iDistance">Distance to the target in meters.</param>
        </member>
        <member name="M:BlueQuark.Internal.EyeController.Stop">
            <summary>
            Stop the controller
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EyeController.SetActive(System.Boolean)">
            <summary>
            Activate / Desactivate the controller.
            When a controller is activated it continues where it had stopped.
            </summary>
            <param name="iValue">True to activate, false to desactivate.</param>
        </member>
        <member name="M:BlueQuark.Internal.EyeController.Reset">
            <summary>
            Reset the controller to it's default position
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EyeController.Dispose">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.HeadController">
            <summary>
            Head controller, this one need a BehaviourMovementPattern
            to know which head axis is allowed to move.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HeadController.HEAD_NO_STEP_ANGLE">
            <summary>
            Half of F.O.V
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HeadController.HEAD_YES_STEP_POSITIVE_ANGLE">
            <summary>
            Amplitude of the positive range for yes axis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HeadController.HEAD_YES_STEP_NEGATIVE_ANGLE">
            <summary>
            Amplitude of the negative range for yes axis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HeadController.HEAD_HYSTERESIS">
            <summary>
            Minimum displacement to allow head movement. (Normalized)
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HeadController.mNoAxisRange">
            <summary>
            Operating range for No axis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HeadController.mYesAxisRange">
            <summary>
            Operating range for Yes axis.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HeadController.Control(UnityEngine.Vector2,System.Single)">
            <summary>
            Control using given point,
            which is a normalized position.
            </summary>
            <param name="iPoint">Normalized position to use to control Head.</param>
            <param name="iDistance">Distance to the target in meters.</param>
        </member>
        <member name="M:BlueQuark.Internal.HeadController.Stop">
            <summary>
            Stop the controller
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HeadController.SetActive(System.Boolean)">
            <summary>
            Activate / Desactivate the controller.
            When a controller is activated it continues where it had stopped.
            </summary>
            <param name="iValue">True to activate, false to desactivate.</param>
        </member>
        <member name="M:BlueQuark.Internal.HeadController.Reset">
            <summary>
            Reset the controller to it's default position
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HeadController.Reset(System.Action)">
            <summary>
            Reset the controller to it's default position
            </summary>
            <param name="iOnEnd">On end callback</param>
        </member>
        <member name="M:BlueQuark.Internal.HeadController.Dispose">
            <summary>
            Dispose the head controller
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TrackingController">
            <summary>
            This controller is the master where the others, (EyeController, HeadController, ...) are slaves.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TrackingController.THRESHOLD_EYE_X">
            <summary>
            Threshold to allow head no axis movement.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TrackingController.THRESHOLD_EYE_Y">
            <summary>
            Threshold to allow head yes axis movement.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TrackingController.THRESHOLD_HEAD_NO_AXIS">
            <summary>
            Threshold to allow wheels movement.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.Control(UnityEngine.Vector2,System.Single)">
            <summary>
            Control allowed actuators using given point,
            which is a normalized position.
            </summary>
            <param name="iPoint">Point to use with other controller.</param>
            <param name="iDistance">Distance to the target in meters.</param>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.Stop">
            <summary>
            Stop the controller.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.SetActive(System.Boolean)">
            <summary>
            Activate / Desactivate the controller.
            When a controller is activated it continues where it had stopped.
            </summary>
            <param name="iValue">True to activate, false to desactivate.</param>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.Reset">
            <summary>
            Reset the controller to it's default position
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.Reset(System.Action)">
            <summary>
            Reset the controller to it's default position
            </summary>
            <param name="iOnEnd">On end callback</param>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.Dispose">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.ControlMotorsAsync">
            <summary>
            This function control Head and Wheels through time.
            Head move according to the eyes position and Wheels move according to the Head position.
            To check if an actuator can move, we only check if it's controller is not null.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TrackingController.ControlWheelsAsync(System.Single)">
            <summary>
            This function update wheels control at each frame with the stored target point.
            </summary>
            <param name="iDuration">Duration of wheel control.</param>
        </member>
        <member name="T:BlueQuark.Internal.WheelsController">
            <summary>
            Wheels controller, this one need a BehaviourMovementPattern
            to know which kind of motion is allowed. (Turn on itself or more)
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.WheelsController.WHEELS_HYSTERESIS">
            <summary>
            Minimum displacement to allow wheels movement. (Normalized)
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.WheelsController.CENTERED_THRESHOLD">
            <summary>
            Define the limit of the central area
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.WheelsController.PROXIMITY_THRESHOLD">
            <summary>
            Use when the linear velocity is adjust according to target's distance.
            Define the limit were the Linear velocity start to reduce.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WheelsController.Control(UnityEngine.Vector2,System.Single)">
            <summary>
            Control using given point,
            which is a normalized position.
            </summary>
            <param name="iPoint">Point to use to control wheels</param>
            <param name="iDistance">Distance to the target in meters.</param>
        </member>
        <member name="M:BlueQuark.Internal.WheelsController.ResetLastDirection">
            <summary>
            Reset the last wheels direction, to force move the next control call.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WheelsController.Stop">
            <summary>
            Stop the controller
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WheelsController.SetActive(System.Boolean)">
            <summary>
            Activate / Desactivate the controller.
            When a controller is activated it continues where it had stopped.
            </summary>
            <param name="iValue">True to activate, false to desactivate.</param>
        </member>
        <member name="M:BlueQuark.Internal.WheelsController.Reset">
            <summary>
            Reset the controller to it's default position
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WheelsController.Dispose">
            <summary>
            Dispose function
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.HumanTrackSubStrategy">
            <summary>
            Following strategy to track and follow a targeted human.
            Can be static (on place) or dynamic (follow user).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.HumanTrackSubStrategy.BehaviourOnNoDetection">
            <summary>
            Behaviour to adopt when no target found during research movement.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HumanTrackSubStrategy.BehaviourOnNoDetection.STOP">
            <summary>
            Stop the strategy.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HumanTrackSubStrategy.BehaviourOnNoDetection.CONTINUE">
            <summary>
            Continue the strategy.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HumanTrackSubStrategy.ANGULAR_SPEED">
            <summary>
            Angular speed seems too high when it's using in the search movement.
            Sometimes, during the rotate sub strategy, when a detection occure, there is a little lag between detection
            and wheels stop. Consequence: The direction is already outdated when it start to move.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.HumanTrackSubStrategy.BOX_AREA_STANDARD_FOR_METER">
            <summary>
            After observation of the bouding box area, we can estimate that an area of 30000
            correspond with a distance of 1 meters to the target.
            With that value, we try to estimate the distance of the human, according to it's bounding box area.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.ComputeHumanRelativePosition(BlueQuark.HumanEntity[],UnityEngine.Vector3@)">
            <summary>
            Retrieve the relative position of the targeted human.
            Pick the closest human first, then it track the human with the
            least displacement since the last frame.
            </summary>
            <param name="iHumans">List of detected humans.</param>
            <param name="ioPoint">Represent the position of the human.</param>
            <returns>On success return true, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.ComputeSkeletonRelativePosition(BlueQuark.SkeletonEntity[],UnityEngine.Vector3@)">
            <summary>
            Retrieve the relative position of the targeted skeleton.
            Pick the firest detected skeleton at the beginning, then it track the skeleton with the
            least displacement since the last frame.
            </summary>
            <param name="iSkeletons">List of detected skeleton.</param>
            <param name="ioPoint">Represent the position of the human.</param>
            <returns>On success return true, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.SkeletonToTarget(BlueQuark.SkeletonEntity)">
            <summary>
            Compute center point that represent the skeleton on 2D picture,
            taking into account depth position.
            </summary>
            <param name="iSkeleton">Skeleton to use.</param>
            <returns>The center of the skeleton, on the picture.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.ComputeThermalHumanRelativePosition(BlueQuark.ThermalEntity[],UnityEngine.Vector2@)">
            <summary>
            Retrieve the relative position of the targeted human.
            Pick the firt detected human at the beginning, then it track the human with the
            least displacement since the last frame.
            </summary>
            <param name="iHumans">List of detected humans.</param>
            <param name="ioPoint">Represent the position of the human.</param>
            <returns>On success return true, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.ObstacleDetected">
            <summary>
            Measure distance with sensors, and compute a score according to values.
            All value has been found empirically, to have stop distance of 0.5 meter to the target.
            </summary>
            <returns>The compute score, according to sensors measurement.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.ObstacleDetectionIsAvailable">
            <summary>
            Obstacle detection need at least: Front TOF sensors, or Right and Left TOF sensors.
            Otherwise, the obstacle detection will be ineffective.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HumanTrackSubStrategy.PointDisplacement(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Compute distance between two human entity, using their center point.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ID3FaceRecognizer">
            <summary>
            Provides face recognition using ID3 library.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ID3FaceRecognizer.IsBusy">
            <summary>
            True if a request is processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ID3FaceRecognizer.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ID3FaceRecognizer.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ID3FaceRecognizer.DetectFaceOnline(OpenCVUnity.Mat,System.Action{BlueQuark.Internal.ID3FaceEntity[],System.Boolean},System.Boolean)">
            <summary>
            Detect faces in a mat and return the face ids using the callback.
            </summary>
            <param name="iImage">The mat of the picture.</param>
            <param name="iOnRecognized">The callback with the list of face ids found in the picture.</param>
            <param name="iStore">True if the face should be saved on the server.</param>
        </member>
        <member name="M:BlueQuark.Internal.ID3FaceRecognizer.MatchFaceOnline(System.String,System.String,System.Action{System.Boolean,System.String,System.Boolean})">
            <summary>
            Performs a match between two face by using their ids.
            </summary>
            <param name="iIDProbe">Face id to check.</param>
            <param name="iIDRef">Face id of reference.</param>
            <param name="iOnMatched">Callback which has two parameters: the first one is true if the faces are the same, the second return the face ids of reference.</param>
        </member>
        <member name="M:BlueQuark.Internal.ID3FaceRecognizer.DeleteFaceOnline(System.String)">
            <summary>
            Performs a match between two face by using their ids.
            </summary>
            <param name="iID">Face id to check.</param>
        </member>
        <member name="M:BlueQuark.Internal.ID3FaceRecognizer.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ID3FaceEntity">
            <summary>
            Represents a face detected using the id3 library.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ID3FaceEntity.BoundingBox">
            <summary>
            The bouding box where the face is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ID3FaceEntity.CroppingBoundingBox">
            <summary>
            The bouding box where the face is detected.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AThermalAlgorithm">
            <summary>
            Base class for Thermal detection algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AThermalAlgorithm.mThermalFrameWidth">
            <summary>
            Width of the Thermal frame in pixel.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AThermalAlgorithm.mThermalFrameHeight">
            <summary>
            Height of the Thermal frame in pixel.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AThermalAlgorithm.mThermalFrameSize">
            <summary>
            Size of the frame in pixel.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AThermalAlgorithm.BAD_ARGUMENT_MSG">
            <summary>
            Error message if the given parameters are invalid.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AThermalAlgorithm.NULL_VALUE_MSG">
            <summary>
            Error message if a null value occured during algorithm process.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AThermalAlgorithm.Binding">
            <summary>
            Represent the index of a callback to fire, when this algorithm detect.
            A binding of -1 represent an instant detection.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AThermalAlgorithm.IsDisposed">
            <summary>
            Return true if this algorithm is disposed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AThermalAlgorithm.IsInstantDetection">
            <summary>
            Return true if this algorithm is an instant detection.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AThermalAlgorithm.#ctor(System.Int32)">
            <summary>
            Thermal Detection algorithm constructor.
            </summary>
            <param name="iBinding">The index of the callback to fire when this algorithm detect.</param>
        </member>
        <member name="M:BlueQuark.Internal.AThermalAlgorithm.Loop(OpenCVUnity.Mat)">
            <summary>
            Update of the algorithm, will be called at each new thermal frame.
            </summary>
            <param name="iThermalFrame">The data matrix of Thermal values</param>
            <returns>The array of ThermalEntity detected by the algorithm.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AThermalAlgorithm.Dispose">
            <summary>
            Mark this algorithm as disposed.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ThermalHumanAlgorithm">
            <summary>
            This algorithm, detect human in the Thermal Matrix.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ThermalHumanAlgorithm.HumanDetectSearchOption">
            <summary>
            Option for the thermal detect algorithm
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.HumanDetectSearchOption.NONE">
            <summary>
            Start the search algorithm with hotest point still available
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.HumanDetectSearchOption.CENTERED">
            <summary>
            Start the search with the hotest point still available and centered in the Mat
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ThermalHumanAlgorithm.NeighboursCheckingType">
            <summary>
            Option to check neighbours of a candidate.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.NeighboursCheckingType.BOTH">
            <summary>
            Will check one pixel to the left and one pixel to the right to the candidate.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.NeighboursCheckingType.RIGHT">
            <summary>
            Will check one pixel to the right of the candidate.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.NeighboursCheckingType.LEFT">
            <summary>
            Will check one pixel to the left of the candidate.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.LOWEST_CANDIDATE_TEMPERATURE">
            <summary>
            The lowest temperature of a candidate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalHumanAlgorithm.HIGHEST_CANDIDATE_TEMPERATURE">
            <summary>
            The highest temperature of a candidate
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.#ctor(BlueQuark.ThermalHumanParameters,System.Int32)">
            <summary>
            This algorithm, detect human in the Thermal Matrix.
            </summary>
            <param name="iParameters">Parameters used for the detection</param>
            <param name="iBinding">Index of a callback in a callback array, that will be execute on detection.</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.AssertParametersAreValid(BlueQuark.ThermalHumanParameters)">
            <summary>
            Return true if given ThermalHumanParameters is valid.
            </summary>
            <param name="iParameters">Parameters to test.</param>
            <returns>True if the given parameters are valid.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.Loop(OpenCVUnity.Mat)">
            <summary>
            Update loop of the algorithm, will be called at each new thermal frame.
            </summary>
            <param name="iThermalFrame">The data matrix of Thermal values</param>
            <returns>The array of ThermalEntity detected by the algorithm.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.GetBoundingBoxFromIndex(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            Retrieve the bounding box of an array index list.
            It will consider each index as point in a matrix, where the matrix is the array.
            </summary>
            <param name="iIndexes">List of array index</param>
            <param name="iWidth">Width of the array</param>
            <param name="iHeight">Height of the array</param>
            <returns>The rect that represent the bounding box, or null if an error occured.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.RetrieveHuman(BlueQuark.Internal.ThermalHumanAlgorithm.HumanDetectSearchOption)">
            <summary>
            Find a human following a hot vertical form strategy
            </summary>
            <param name="iDetectMode">The search priority of the algorithm</param>
            <returns>The first candidate pixel detected as human, -1 otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.InspectNeighbours(System.Int32,System.Single)">
            <summary>
            Search more human part,
            browsing all pixel above and below iCandidateIndex.
            Then, for each pixel encounter, test it and it's horizontal neighbour.
            </summary>
            <param name="iCandidateIndex">The index of the current candidate</param>
            <param name="iCandidateTemperature">The temperature of the current candidate</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.TryNeighbours(System.Int32,System.Single,BlueQuark.Internal.ThermalHumanAlgorithm.NeighboursCheckingType)">
            <summary>
            For each neighbour of iCandidateIndex, test if the value is valid as Human part.
            Neighbour checking is performed depending of iNeighboursToCheck
            </summary>
            <param name="iCandidateIndex">The index of the current candidate</param>
            <param name="iNeighbourThreshold">The threshold value that determine if a temperature is considered as a valid neighbour</param>
            <param name="iNeighboursToCheck">Define what neighbour to check</param>
            <returns>True if a valid neighbour is found, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.GetBestCandidate(BlueQuark.Internal.ThermalHumanAlgorithm.HumanDetectSearchOption)">
            <summary>
            Find best centered candidate in the frame that is not discard. (CENTERED PRIORITY)
            Find hottest value in the frame that is not discard. (NO PRIORITY)
            iMode define the search priority. (Centered or None)
            </summary>
            <param name="iMode">The search priority, (No priority or Centered search priority)</param>
            <returns>The index of the candidate found, -1 otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.AddHumanDetectedPart(System.Int32)">
            <summary>
            Add index only if the human detected part does not contain it.
            </summary>
            <param name="iIndex">The index number to add</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalHumanAlgorithm.DiscardCandidate(System.Int32)">
            <summary>
            Discard index only if the discard list does not contain it.
            </summary>
            <param name="iIndex">The index number to discard</param>
        </member>
        <member name="T:BlueQuark.Internal.ThermalMotionAlgorithm">
            <summary>
            This algorithm, detect motion in the Thermal Matrix.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ThermalMotionAlgorithm.MotionDetectSearchOption">
            <summary>
            Option for the thermal detect algorithm
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalMotionAlgorithm.MotionDetectSearchOption.NONE">
            <summary>
            Start the search algorithm with hotest point still available
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalMotionAlgorithm.MotionDetectSearchOption.CENTERED">
            <summary>
            Start the search with the hotest point still available and centered in the Mat
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.#ctor(BlueQuark.ThermalMotionParameters,System.Int32)">
            <summary>
            This algorithm, detect motion in the Thermal Matrix.
            </summary>
            <param name="iParameters">Parameters used for the detection</param>
            <param name="iBinding">Index of a callback in a callback array, that will be execute on detection.</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.AssertParametersAreValid(BlueQuark.ThermalMotionParameters)">
            <summary>
            Return true if given ThermalMotionParameters is valid.
            </summary>
            <param name="iParameters">Parameters to test.</param>
            <returns>True if the given parameters are valid.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.Loop(OpenCVUnity.Mat)">
            <summary>
            Update loop of the algorithm, will be called at each new thermal frame.
            </summary>
            <param name="iThermalFrame">The data matrix of Thermal values</param>
            <returns>The array of ThermalEntity detected by the algorithm.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.ComputeDifferentialTemperature">
            <summary>
            Compute the difference between actual temperature, and minimum temperature
            over all samples inside mThermalValuesSample.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.GetBoundingBoxFromIndex(System.Collections.Generic.List{System.Int32},System.Int32,System.Int32)">
            <summary>
            Retrieve the bounding box of an array index list.
            It will consider each index as point in a matrix, where the matrix is the array.
            </summary>
            <param name="iIndexes">List of array index</param>
            <param name="iWidth">Width of the array</param>
            <param name="iHeight">Height of the array</param>
            <returns>The rect that represent the bounding box, or null if an error occured.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.RetrieveMotion(BlueQuark.Internal.ThermalMotionAlgorithm.MotionDetectSearchOption)">
            <summary>
            Find a motion following a hot vertical form strategy
            </summary>
            <param name="iDetectMode">The search priority of the algorithm</param>
            <returns>The first candidate pixel detected as human, -1 otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.InspectNeighbours(System.Int32,System.Single)">
            <summary>
            Search more motion part,
            browsing all pixel above and below iCandidateIndex.
            Then, for each pixel encounter, test it and it's horizontal neighbour.
            </summary>
            <param name="iCandidateIndex">The index of the current candidate</param>
            <param name="iCandidateTemperature">The temperature of the current candidate</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.TryNeighbours(System.Int32,System.Single)">
            <summary>
            For each neighbour of iCandidateIndex, test if the value is valid as Motion part.
            Neighbour checking is performed depending of iNeighboursToCheck
            </summary>
            <param name="iCandidateIndex">The index of the current candidate</param>
            <param name="iNeighbourThreshold">The threshold value that determine if a temperature is considered as a valid neighbour</param>
            <returns>True if a valid neighbour is found, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.GetBestCandidate(BlueQuark.Internal.ThermalMotionAlgorithm.MotionDetectSearchOption)">
            <summary>
            Find best centered candidate in the frame that is not discard. (CENTERED PRIORITY)
            Find hottest value in the frame that is not discard. (NO PRIORITY)
            iMode define the search priority. (Centered or None)
            </summary>
            <param name="iMode">The search priority, (No priority or Centered search priority)</param>
            <returns>The index of the candidate found, -1 otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.AddMotionDetectedPart(System.Int32)">
            <summary>
            Add index only if the motion detected part does not contain it.
            </summary>
            <param name="iIndex">The index number to add</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalMotionAlgorithm.DiscardCandidate(System.Int32)">
            <summary>
            Discard index only if the discard list does not contain it.
            </summary>
            <param name="iIndex">The index number to discard</param>
        </member>
        <member name="T:BlueQuark.Internal.ThermalThresholdAlgorithm">
            <summary>
            This algorithm, detect when the Threshold is reached in the Thermal Matrix.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ThermalThresholdAlgorithm.DEFAULT_THRESHOLD_VALUE">
            <summary>
            Default value for the Threshold detection
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ThermalThresholdAlgorithm.#ctor(System.Int32,System.Int32)">
            <summary>
            This algorithm, detect when the Threshold is reached in the Thermal Matrix.
            </summary>
            <param name="iThreshold">The threshold value to monitor</param>
            <param name="iBinding">Index of a callback in a callback array, that will be execute on detection.</param>
        </member>
        <member name="M:BlueQuark.Internal.ThermalThresholdAlgorithm.AssertParametersAreValid(System.Int32)">
            <summary>
            Return true if the given parameter is valid.
            </summary>
            <param name="iParameters">Parameters to test.</param>
            <returns>True if the given parameter is valid.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ThermalThresholdAlgorithm.Loop(OpenCVUnity.Mat)">
            <summary>
            Update of the algorithm, will be called at each new thermal frame.
            </summary>
            <param name="iThermalFrame">The data matrix of Thermal values</param>
            <returns>The array of ThermalEntity detected by the algorithm.</returns>
        </member>
        <member name="T:BlueQuark.Internal.YOLODetector">
            <summary>
            Class used by the detectors using You Only Look Once (YOLO) algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.YOLODetector.#ctor(BlueQuark.TinyYOLO3Model[],System.Int32,System.Int32)">
            <summary>
            Creates a yolo detector using the tiny yolo v3 model with 80 classes.
            </summary>
            <param name="iClassesToDetect">The array of the classes that we want to detect.</param>
            <param name="iConfidence">int (range 1:1:10) which determines the confidence threshold for detection acceptation.</param>
            <param name="iSize">The size of the meshing, should be a multiple of 32.</param>
        </member>
        <member name="M:BlueQuark.Internal.YOLODetector.#ctor(BlueQuark.Internal.TinyYOLO3FaceModel[],System.Int32,System.Int32)">
            <summary>
            Creates a yolo detector using the tiny yolo v3 model for face detection.
            </summary>
            <param name="iClassesToDetect">The array of the classes that we want to detect.</param>
            <param name="iConfidence">int (range 1:1:100) which determines the confidence threshold for detection acceptation.</param>
            <param name="iSize">The size of the meshing, should be a multiple of 32.</param>
        </member>
        <member name="M:BlueQuark.Internal.YOLODetector.#ctor(BlueQuark.TinyYOLOVOCModel[],System.Int32,System.Int32)">
            <summary>
            Creates a yolo detector using the tiny yolo v3 voc model for face detection.
            </summary>
            <param name="iClassesToDetect">The array of the classes that we want to detect.</param>
            <param name="iConfidence">int (range 1:1:100) which determines the confidence threshold for detection acceptation.</param>
            <param name="iSize">The size of the meshing, should be a multiple of 32.</param>
        </member>
        <member name="M:BlueQuark.Internal.YOLODetector.Detect(OpenCVUnity.Mat)">
            <summary>
            Detect the presence of some type of object in the given picture.
            </summary>
            <param name="iInputFrame">The matrix in which we want to detect.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.YOLODetector.Dispose">
            <summary>
            Free the resources used by the detector.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TinyYOLO3FaceModel">
            <summary>
            Enumerate the class that can be detected using the tiny yolo v3 face model.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.YOLOEntity">
            <summary>
            Represents a yolo entity.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.YOLOEntity.ID">
            <summary>
            The id of the class detected with yolo.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.YOLOEntity.BoundingBox">
            <summary>
            The bounding box of the object detected in the picture.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.YOLOEntity.Center">
            <summary>
            The center of the object detected in the picture.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.READSPEAKER_TTS_LICENSE_KEY">
            <summary>
            Provided by David Rönn Jansson (david.ronn-jansson@readspeaker.com) of VoiceWare.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.ORBBEC_BODY_TRACKING_LICENSE_KEY">
            <summary>
            Provided by Gordon Thorsby (gthor@orbbec3d.com) of Orbbec3D.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.GOOGLE_SPEECH_API_CREDENTIALS_URL">
            <summary>
            Download via WWW request the text content of this URL.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.RADIOLINE_CLIENT_ID">
            <summary> 
            Client id to use the radioline api.
            Used to get a token (the radioline api is protected by a OAuth2 authentification).
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.RADIOLINE_CLIENT_SECRET">
            <summary> 
            Client string to use the radioline api.
            Used to get a token (the radioline api is protected by a OAuth2 authentification).
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.IP_DATA_API_KEY">
            <summary>
            Unique API key for geolocalization from IP adress. More info at https://ipdata.co/index.html.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.Licenses.ID3_FACE_REC_API_KEY">
            <summary>
            Api key for the dedicated id3 demo cloud api.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MusicType">
            <summary>
            Represents a music style.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.CLASSICAL">
            <summary>
            Classical.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.JAZZ">
            <summary>
            Jazz.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.BLUES">
            <summary>
            Blues.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.ROCK">
            <summary>
            Rock.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.METAL">
            <summary>
            Metal.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.RAP">
            <summary>
            Rap.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.HIP_HOP">
            <summary>
            Hip hop.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.R_AND_B">
            <summary>
            RnB.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.ELECTRO">
            <summary>
            Electro.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.COUNTRY">
            <summary>
            Country.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.POP">
            <summary>
            Pop.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicType.UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserTastes">
            <summary>
            Class that represent the tastes of a user.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserTastes.Color">
            <summary>
            Colour.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserTastes.Sport">
            <summary>
            Sport.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserTastes.MusicBand">
            <summary>
            Name of a Music band.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IFilteredNonBinarySensor">
            <summary>
            Base interface for sensor that returns a filtered linear value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IFilteredNonBinarySensor.FilteredValue">
            <summary>
            Current filtered value of the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.BlockingQueue`1">
            <summary>
            A fixed sized queue that can REFUSE to enqueue an element if the max number of element is reached. You have to dequeue first.
            </summary>
            <typeparam name="T">Type of stored elements.</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.BlockingQueue`1.Capacity">
            <summary>
            Maximal number of elements.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.BoundedQueue`1">
            <summary>
            A fixed sized queue that auto dequeue (FIFO) if the last enqueue reach over the max capacity of the queue.
            </summary>
            <typeparam name="T">Type of stored elements.</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.BoundedQueue`1.Capacity">
            <summary>
            Maximal number of elements.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TopologicalMappingNativeLibrary">
            <summary>
            Class for native DLL of topological navigation.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TopologocalMappingNativeObj">
            <summary>
            Native C++ topo navigation class
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologocalMappingNativeObj.Instance">
            <summary>
            Get instance
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologocalMappingNativeObj.Localizer">
            <summary>
            The localizer object
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologocalMappingNativeObj.JITInitialize(System.Boolean)">
            <summary>
            Initialize C++ object.
            TODO: Unity is single threaded? no need for thread safe?
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologocalMappingNativeObj.SaveObj">
            <summary>
            Save C++ object
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TopologicalMapPersistentData">
            <summary>
            Class for persistent data:
            The positions and angles of landmarks, etc
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.LandmarkPositions">
            <summary>
            Landmarks' positions by odometry
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.OrientationToNext">
            <summary>
            Landmarks' orientation on the path to the next landmark
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.Landmarks">
            <summary>
            Landmarks organized in rooms
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.LandmarkCount">
            <summary>
            Total number of landmarks
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.CurrentLandmark">
            <summary>
            Current Landmark to be added
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.Rooms">
            <summary>
            Room Names
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologicalMapPersistentData.Clear">
            <summary>
            Clear saved data.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologicalMapPersistentData.Save(System.String)">
            <summary>
            Save data
            </summary>
            <param name="iPath">Path to be saved</param>
        </member>
        <member name="T:BlueQuark.Internal.Reporter">
            <summary>
            Store and send log to BFR servers.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Reporter.DumpLog">
            <summary>
            Ask Java to dump log into a file.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.SerializableDictionary`2">
            <summary>
            Serializable Dictionary
            </summary>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.MapperULink">
            <summary>
            ULink
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Waypoint.ID">
            <summary>
            Identifier of waypoint
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Waypoint.Position">
            <summary>
            Global coordianation by odometry
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DesireManager">
            <summary>
            Manager class that controls the desire values.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DetectionManager">
            <summary>
            Manager class that have reference to the differents stimuli and subscribes to their callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.OnThermalDetected(BlueQuark.ObjectEntity[])">
            <summary>
            Called when fire has been detected
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.OnKidnappingDetected">
            <summary>
            Called when buddy is being kidnapped
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.LinkDetectorsEvents">
            <summary>
            Subscribe to the detectors callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.UnlinkDetectorsEvents">
            <summary>
            Unsubscibe to the detectors callbacks
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ACompanionState">
            <summary>
            Base class for Companion state machine's state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ACompanionState.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement.The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator</param>
            <returns>The new started coroutine</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACompanionState.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.Internal.ACompanionState.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop</param> 
        </member>
        <member name="T:BlueQuark.Internal.ChargingState">
            <summary>
            This state is used when the robot is charging
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DanceState">
            <summary>
            This state is used when Buddy wants to move and decides to dance
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GotoChargeState">
            <summary>
            This Navigating state is used to go back to charging station
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IdleState">
            <summary>
            This class is used when the robot is in default mode
            It will then go wander, interact, look for someone or charge according to the stimuli
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LookingForSomeoneState">
            <summary>
            This state is called when Buddy is looking for a/any user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NapState">
            <summary>
            This class is used when the robot is in default mode
            It will then go wander, interact, look for someone or charge according to the stimuli
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.WanderState">
            <summary>
            This state is call when Buddy wants to move
            it will roam around the house
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskInfoState">
            <summary>
            This state is used to ask a personal info to the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskJokeState">
            <summary>
            This state is used to ask for a joke to the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskNameState">
            <summary>
            This state is used to ask the name of the current user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ColourRecoState">
            <summary>
            This state is used to recognize the colour perceived by Buddy
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ConnectionState">
            <summary>
            This state is used to test the connection
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CopyUserState">
            <summary>
            This state is used to mimic user head position + facial emotion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.InformState">
            <summary>
            When Buddy wants to teach, it can also
            inform the user of some of its knowledge
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.InformState.GetRandomUserFact(BlueQuark.UserAccount)">
            <summary>
            TODO: move this function in profiling?
            </summary>
            <param name="iUserAccount"></param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Internal.ListenJokeState">
            <summary>
            This state is used when Buddy listens to a joke from the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MirrorState">
            <summary>
            This state is to show the camera feedback
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ProposeEdutainementState">
            <summary>
            This state is used to propose an edutainement app when
            Buddy feels like teaching
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ProposeGameState">
            <summary>
            Buddy wants to play and will propose some game to the user.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ProposeServiceState">
            <summary>
            Buddy will propose a service to the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RobotTouchedState">
            <summary>
            This state is called when the robot is touched
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TellJokeState">
            <summary>
            This state is called when Buddy wants to tell a joke
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VocalCommandState">
            <summary>
            This state is to manage all type of vocal commands from user
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.SortQuestionType(BlueQuark.SpeechInput)">
            <summary>
            Sort the type of the question returned by STT.
            It either corresponds to vocal orders, motion or launch application
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.GiveHourInEnglish">
            <summary>
            Give The Hour in English
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.VerbalizeHour(System.String)">
            <summary>
            Harder way to tell what time it is
            </summary>
            <param name="iSentence">Sentence to say</param>
            <returns>Sentence to say</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.GiveHourMeridiem(System.String)">
            <summary>
             Simple way to tell what time it is
            </summary>
            <param name="iSentence">Sentence to say</param>
            <returns>Sentence to say</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.GetTime(System.String)">
            <summary>
            Recover Time In Seconds
            </summary>
            <param name="iSpeech">Speech</param>
            <returns>Time in Seconds</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.SecondsToHour(System.Int32)">
            <summary>
            Recover the Time in (Hour, Minutes, Seconds)
            </summary>
            <param name="iTimeInSeconds">time in seconds</param>
            <returns>Array of int with 0 : hour, 1 : minutes, 2 : seconds</returns>
        </member>
        <member name="T:BlueQuark.Internal.BuddyInArmsState">
            <summary>
            This state is used when Buddy is in the arm of a user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ExpressMoodState">
            <summary>
            This state is used when Buddy wants to express its emotion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.FollowState">
            <summary>
            This state is used when Buddy needs to follow a user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LandingState">
            <summary>
            State used when we come back to Companion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NotifyState">
            <summary>
            This state is used when Buddy needs to inform the user of a notification
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserDetectedState">
            <summary>
            This state is called when a user is detected but not engaged (yet).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserDisengagedState">
            <summary>
            This state is used when the user explicitly ask Buddy to go away
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.WaitStartState">
            <summary>
            This state is just to wait for everything to be up in OS
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.SportType">
            <summary>
            Represents a sport.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.BASKETBALL">
            <summary>
            Basketball.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.FOOTBALL">
            <summary>
            Football.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.HANDBALL">
            <summary>
            Handball.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.RUGBY">
            <summary>
            Rugby.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.TENNIS">
            <summary>
            Tennis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.TABLETENNIS">
            <summary>
            Tabletennis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.CRICKET">
            <summary>
            Cricket.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.SWIMMING">
            <summary>
            Swimming.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.RUNNING">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.ARCHERY">
            <summary>
            Archery.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.FENCING">
            <summary>
            Fencing.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.CURLING">
            <summary>
            Curling.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportType.CLIMBING">
            <summary>
            Climbing.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TGraphPlot">
            <summary>
            Represents a full screen data plot that can be displayed in a monolith layout.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TGraphPlot.OnClick">
            <summary>
            Called when the plot is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TGraphPlot.SetUpdates(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}})">
            <summary>
            Set the graph callback methods.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph points. Cannot be null</param>
            <param name="iOnUpdateOrdinates">Function called to update graph points. Cannot be null</param>
        </member>
        <member name="T:BlueQuark.Internal.TVideoStream">
            <summary>
            Represents a full screen stream that can be displayed in a monolith layout.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TVideoStream.OnClick">
            <summary>
            Called when the main image is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TVideoStream.SetTexture(UnityEngine.Texture)">
            <summary>
            Set the main image.
            </summary>
            <param name="iTexture">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.TVideoStream.SetCameraStream(BlueQuark.Internal.ICamera)">
            <summary>
            Set the main image stream from camera.
            </summary>
            <param name="iCamera">The camera device to display. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.Internal.AUIFactory`2">
            <summary>
            UI factory provides UI widgets.
            </summary>
            <typeparam name="W">Kind of widget supported by the factory</typeparam>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="M:BlueQuark.Internal.AUIFactory`2.Provide``1">
            <summary>
            Provides an instantiated widget. Provided widgets must be placed in their respective transform parent and Reshape().
            </summary>
            <typeparam name="T">Type of widget to provide.</typeparam>
            <returns>The built widget.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AUIFactory`2.Provide(System.Type)">
            <summary>
            Provides an instantiated widget. Provided widgets must be placed in their respective transform parent and Reshape().
            </summary>
            <param name="iType">Type of widget to provide.</param>
            <returns>The built widget.</returns>
        </member>
        <member name="T:BlueQuark.Internal.IWidget">
            <summary>
            Widget are the very base elements for UI display. Every Widget is a Presenter.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.SplashScreen">
            <summary>
            Handles the loading screen when an app must be loaded.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.SplashScreen.IsBusy">
            <summary>
            Returns true if the Loader is currently displaying something.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Sprite)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null or empty.</param>
            <seealso cref="M:BlueQuark.Internal.SplashScreen.Hide"/>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Sprite,UnityEngine.Sprite)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Font,UnityEngine.Sprite)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iTitleFont">Font of the title text.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Font,UnityEngine.Sprite,UnityEngine.Sprite)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iTitleFont">Font of the title text.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Sprite,System.String,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iSpinText">Text of the spinning wheel.</param>
            <param name="iSpinColor">Color of the spinning wheel text.</param>
            <param name="iSpinImage">Image of the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Sprite,UnityEngine.Sprite,System.String,UnityEngine.Sprite)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
            <param name="iSpinText">Text of the spinning wheel.</param>
            <param name="iSpinImage">Image of the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Display(System.String,UnityEngine.Font,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Sprite,System.String,UnityEngine.Font,UnityEngine.Color,UnityEngine.Sprite)">
            <summary>
            Displays the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iTitleFont">Font of the title text.</param>
            <param name="iTitleColor">Color of the title text.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
            <param name="iSpinText">Text of the spinning wheel.</param>
            <param name="iSpinFont">Font of the spinning wheel text.</param>
            <param name="iSpinColor">Color of the spinning wheel text.</param>
            <param name="iSpinImage">Image of the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Internal.SplashScreen.Hide">
            <summary>
            Hides the splash screen.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.FakeSpeecher">
            <summary>
            The FakeSpeecher is the input text bar to type a fake input speech text. Can be displayed/hide with Enter key.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FakeSpeecher.IsBusy">
            <summary>
            Returns true if displayed.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ASlideToast">
            <summary>
            Represents a toast that can be slide (left/right) to another slide toast.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ASlideToast.ParentSlideSet">
            <summary>
            The slide set gathering all other slide toasts
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMonolithToast">
            <summary>
            Toast that includes only an only central GUI element.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMonolithToast.SetMainWidget``1(``0)">
            <summary>
            Set the solo widget inside the monolith layout of the toast.
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="iWidget">The widget that will be the main item of the layout</param>
        </member>
        <member name="M:BlueQuark.Internal.AMonolithToast.SetMainWidget(UnityEngine.GameObject)">
            <summary>
            Set the solo gameobject inside the monolith layout of the toast.
            </summary>
            <param name="iGameObject">The gameobject that will be the main item of the layout</param>
        </member>
        <member name="T:BlueQuark.Internal.TMonolithLayout">
            <summary>
            Represents a one block layout able to store only one big sealed widget or custom gameobject.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetMainWidget``1(``0)">
            <summary>
            Sets the main widget. 
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="iWidget">The widget to display. Must be a monolith widget</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetMainWidget(UnityEngine.GameObject)">
            <summary>
            Sets the main widget. 
            </summary>
            <param name="iGameObject">The custom game object to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.AppearFromLeft">
            <summary>
            Plays an animation to make the layout appeared from the right side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.AppearFromRight">
            <summary>
            Plays an animation to make the layout appeared from the left side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SlideToRight">
            <summary>
            Plays an animation to make the layout disappeared to the left side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SlideToLeft">
            <summary>
            Plays an animation to make the layout disappeared to the right side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetActiveRightArrow(System.Boolean)">
            <summary>
            Activates/Deactivates the right arrow.
            </summary>
            <param name="iActive">True to enable the rigth arrow</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetActiveLeftArrow(System.Boolean)">
            <summary>
            Activates/Deactivates the left arrow.
            </summary>
            <param name="iActive">True to enable the left arrow</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.Clear">
            <summary>
            Removes the main widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.THorizontalLayout">
            <summary>
            Represents an horizontal carousel containing many sealed widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.THorizontalLayout.Add``1(``0)">
            <summary>
            Adds a widgets at the right a already added widgets.
            </summary>
            <typeparam name="T">Type of the widget to add</typeparam>
            <param name="iWidget">The widget to add. Must be an horizontal widget</param>
        </member>
        <member name="M:BlueQuark.Internal.THorizontalLayout.Remove``1(``0)">
            <summary>
            Removes the given widget.
            </summary>
            <typeparam name="T">Type of the widget to remove</typeparam>
            <param name="iWidget">True if the remove was effective</param>
        </member>
        <member name="T:BlueQuark.Internal.TVerticalLayout">
            <summary>
            Represents a vertical list of sealed widget.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Add(UnityEngine.GameObject)">
            <summary>
            Adds a custom gameobject inside the list.
            </summary>
            <param name="iCustomGameObject">The game object to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Remove(UnityEngine.GameObject)">
            <summary>
            Removes a custom gameobject from the list.
            </summary>
            <param name="iCustomGameObject">The gameobject to add</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Select(UnityEngine.GameObject)">
            <summary>
            Makes the gameobject as selected. Does not unselect selected other elements.
            </summary>
            <param name="iCustomGameObject">The gameobject to select.</param>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Add(BlueQuark.TVerticalListBox)">
            <summary>
            Adds a vertical list widget inside the list.
            </summary>
            <param name="iWidget">The widget to add. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.AddSearch(System.String,UnityEngine.Sprite,System.Action{System.String})">
            <summary>
            Adds a vertical list search widget inside the list.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Remove(BlueQuark.TVerticalListBox)">
            <summary>
            Removes a vertical list widget from the list.
            </summary>
            <param name="iWidget">The widget to remove.</param>
            <returns>True if the remove was effective.</returns>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Select(BlueQuark.TVerticalListBox)">
            <summary>
            Makes the vertical widget as selected. Does not unselect selected other elements.
            </summary>
            <param name="iWidget">The box to select.</param>
        </member>
        <member name="T:BlueQuark.Internal.ICapsuleToasterWidget">
            <summary>
            Base interface for typed capsule toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATCapsuleWidget`1">
            <summary>
            Base class for a capsule toast widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.ATHorizontalWidget`1">
            <summary>
            Base class for a horizontal toast widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IHorizontalToasterWidget">
            <summary>
            Base interface for typed horizontal toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATMonolithWidget`1">
            <summary>
            Base class for a monolith toast widget. Only one monolith widget can be displayed at the same time.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IMonolithToasterWidget">
            <summary>
            Base interface for typed monolith toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TCalendar">
            <summary>
            TODO: WIP. Represents a calendar to setup dates.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TCountdown">
            <summary>
            Represents a countdown widget to display hours, minutes and seconds.
            </summary>
            <seealso cref="T:BlueQuark.CountdownToast"/>>
        </member>
        <member name="P:BlueQuark.Internal.TCountdown.OnClick">
            <summary>
            Called when the countdown is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TCountdown.OnTic">
            <summary>
            Called on each second tic.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TCountdown.Playing">
            <summary>
            Play/Pause the clock.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TCountdown.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Set the background color.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="M:BlueQuark.Internal.TCountdown.SetTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the start countdown time.
            </summary>
            <param name="iSeconds">Seconds remaining. From 0 to 59.</param>
            <param name="iMinutes">Minutes remaining. From 0 to 59.</param>
            <param name="iHours">Hours remaining. From to 99.</param>
        </member>
        <member name="M:BlueQuark.Internal.TCountdown.Pulse(System.Boolean)">
            <summary>
            Makes the background pulse.
            </summary>
            <param name="iVal">True to make the background pulse, false otherwise.</param>
        </member>
        <member name="T:BlueQuark.Internal.TPicture">
            <summary>
            Represents a full screen image that can be displayed in a monolith layout.
            </summary>
            <seealso cref="T:BlueQuark.PictureToast"/>>
        </member>
        <member name="P:BlueQuark.Internal.TPicture.OnClick">
            <summary>
            Called when the main image is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TPicture.SetImage(UnityEngine.Sprite)">
            <summary>
            Set the main image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.Internal.TIcon">
            <summary>
            Represents a small icon to display.
            </summary>
            <seealso cref="T:BlueQuark.IconToast"/>>
        </member>
        <member name="P:BlueQuark.Internal.TIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetCircle(System.Boolean)">
            <summary>
            Displays or hides a circle around the icon.
            </summary>
            <param name="iVal">True to display the circle, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetIcon(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets the main image of the icon.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iColor">The color icon.</param>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetDiskIcon(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Displays the icon inside a circle.
            </summary>
            <param name="iSprite">The sprite to display.</param>
            <param name="iColor">The color icon.</param>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background color.
            </summary>
            <param name="iColor">The colo to apply.</param>
        </member>
        <member name="T:BlueQuark.Internal.IVerticalToasterWidget">
            <summary>
            Base interface for typed vertical toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATVerticalWidget`1">
            <summary>
            Base class for a vertical toast widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.Waver">
            <summary>
            GUI component handling the lateral wave of the face.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Waver.IsBusy">
            <summary>
            Returns true if displayed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Waver.Display(BlueQuark.FacialExpression)">
            <summary>
            Shows the lateral waves with the wished expression color.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Waver.Hide">
            <summary>
            Hides the lateral waves.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMainNavigationStrategy">
            <summary>
            Base class for navigation strategy. Only one main navigation strategy can run at the same time.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ASubNavigationStrategy">
            <summary>
            A sub navigation strategy is a navigation strategy that can be started by another strategy (main or sub).
            Some main navigation strategies can rely only on substrategy use.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ANavigationStrategy">
            <summary>
            Base class for navigation strategy. A navigation strategy can starts sub navigation strategies.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ANavigationStrategy.mCurrentSubStrategy">
            <summary>
            The running sub strategy of the current (this) strategy. Must be null if not sub strategy is running.
            </summary>
            <seealso cref="M:BlueQuark.Internal.ANavigationStrategy.StartSubStrategy``1"/>>
            <seealso cref="M:BlueQuark.Internal.ANavigationStrategy.DisposeSubStrategy"/>>
        </member>
        <member name="F:BlueQuark.Internal.ANavigationStrategy.mKeepAlive">
            <summary>
            Must be true until the stragegy must be alive.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ANavigationStrategy.mIsDisposingSubStrategy">
            <summary>
            Guard that prevent several call to Dispose function.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ANavigationStrategy.mULink">
            <summary>
            Sandbox ULink for coroutine purposes.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StartSubStrategy``1">
            <summary>
            Stops any running sub strategy and starts a new one. Only one sub strategy can be started by the current (this) strategy at a time.
            </summary>
            <typeparam name="S">Type of the sub strategy to start</typeparam>
            <returns>The new created sub strategy to parametrize</returns>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.DisposeSubStrategy">
            <summary>
            Stops and dispose the running sub strategy of the current (this) strategy.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement.The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator</param>
            <returns>The new started coroutine</returns>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.Stop">
            <summary>
            Indicates that the current process is done or must be disposed. Must be automatically called at the end of any strategy.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MoveSubStrategy">
            <summary>
            Sub navigation strategy to move forward or backward until a reached distance or a specific condition.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MoveSubStrategy.AngleToTurn(BlueQuark.ObstacleDetection)">
            <summary>
            The angle for turning around when there is obstacle
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RotateToSubStrategy">
            <summary>
            Sub navigation strategy to turn to an absolute angle.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RotateSubStrategy">
            <summary>
            Sub navigation strategy to turn until a reached angle or a specific condition.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AESection.Finalize">
            <summary>
            Dipose the section.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AESection.CreateLayout``1(System.String,BlueQuark.Internal.AESection.SectionWidgetPosition)">
            <summary>
            Add new layout to the section
            </summary>
            <typeparam name="L">Layout type</typeparam>
            <param name="iTitle">Title for scroll target and fanfold list</param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Internal.AEContentWidget`1">
            <summary>
            Base class for content (right opened window) widget for Explorer.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AELayoutContentWidget`1">
            <summary>
            Base class for Explorer layout widget. Layout widget can contain many sealed widgets.
            </summary>
            <typeparam name="U">The widget</typeparam>
        </member>
        <member name="M:BlueQuark.Internal.AELayoutContentWidget`1.CreateWidget``1(System.Int32)">
            <summary>
            Creates and adds the wished widget inside the specified column.
            </summary>
            <typeparam name="W">Type of the widget to create.</typeparam>
            <param name="iColumnIdx">Index of the column to add the component.</param>
            <returns>The just created widget.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AELayoutContentWidget`1.RemoveWidgets(System.Collections.Generic.List{BlueQuark.Internal.AComponent})">
            <summary>
            Removes the specified widgets.
            </summary>
            <typeparam name="W">The type of widget to be removed.</typeparam>
            <param name="iWidgets">The widgets to be removed.</param>
        </member>
        <member name="M:BlueQuark.Internal.AELayoutContentWidget`1.RemoveWidget``1(``0)">
            <summary>
            Removes the specified widgets.
            </summary>
            <typeparam name="W">The type of widget to be removed.</typeparam>
            <param name="iWidget">The widgets to be removed.</param>
        </member>
        <member name="T:BlueQuark.Internal.AESealedContentWidget`1">
            <summary>
            Base class for Explorer sealed widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ISealedExplorerWidget">
            <summary>
            Base interface for typed Explorer sealed widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AEMenuWidget`1">
            <summary>
            Base class for menu (left side) widget for Explorer.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AEWidget`1">
            <summary>
            Base class for Explorer widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AUIPresenter`1">
            <summary>
            Base class for any UI widget element.
            </summary>
            <typeparam name="U">ULink.</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.EFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Injector">
            <summary>
            Instantiation system for the operating system. Based on Factory DP. Use this to make a Top-Down architecture. 
            For GUI widget, use UIFactory instead.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Injector.UniqueComponents">
            <summary>
            All instanciate Unique components.
            </summary>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="M:BlueQuark.Internal.Injector.Provide``1">
            <summary>
            Provides an instance of the wished type. UniqueComponent can be instantiate ONLY ONCE. 
            Any request to a already intantiate UniqueComponent will returns a null.
            </summary>
            <typeparam name="C">Type of the component to instantiate.</typeparam>
            <returns>The new component, null if it already instantiate or error.</returns>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="M:BlueQuark.Internal.Injector.Provide``1(System.Int32)">
            <summary>
            Provides an instance of the wished type. A ULink must be present in the scene. Regular component can be instantiate many times.
            Use this method to create indexable regular component. For GUI Widget, use UIFactory instead.
            </summary>
            <typeparam name="C">Type of the component to instantiate.</typeparam>
            <param name="iIndex">Index of the component to retrieve in the scene.</param>
            <returns>The new component, null if error</returns>
            <seealso cref="T:BlueQuark.Internal.IRegularComponent"/>
        </member>
        <member name="M:BlueQuark.Internal.Injector.ProvideDefaultULink">
            <summary>
            Provides a basic instance of a ULink. Use it for class that need access to sandboxed Unity coroutines.
            </summary>
            <returns>Instance of a new ULink. Must be Dispose() when no need anymore.</returns>
        </member>
        <member name="T:BlueQuark.Internal.ULinkPlatformType">
            <summary>
            ULink specialization for multiplatform purpose.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ULinkPlatformType.CROSS_PLATFORM">
            <summary>
            Can be run on any platform. EG : Completely software independant. Basically : GUI or empty ULink.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ULinkPlatformType.EMBEDDED">
            <summary>
            Can be run only in Embedded mode (now Android). EG : Hardware component or software that only can be ran on Android.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ULinkPlatformType.DISTRIBUTED">
            <summary>
            Can be run only in Embedded mode (now Android) with a Jetson Nano board plugged.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ULinkPlatformType.WINDOWS">
            <summary>
            Can be run only in Windows platform (in Editor). EG : Software platform dependant platform.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ULinkPlatformType.SIMULATED">
            <summary>
            Simulated version of an Hardware component. Can only be run on Editor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EventBus">
            <summary>
            Event bus system. Allow to listen and fire events through all the operating system assembly.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EventBus.Subscribe``1(System.Action{``0})">
            <summary>
            Stores callback and call it when the associed event is fired by FireEvent(iEvent).
            </summary>
            <typeparam name="T">Type of the event.</typeparam>
            <param name="iCallback">The callback to store.</param>
            <returns>The subscription id to register.</returns>
        </member>
        <member name="M:BlueQuark.Internal.EventBus.Unsubscribe(System.String)">
            <summary>
            Remove a subscription.
            </summary>
            <param name="iHandlerID">Complete id provided by the subscription method.</param>
            <returns>True if the unsubscription was correctly done.</returns>
        </member>
        <member name="M:BlueQuark.Internal.EventBus.FireEvent``1(``0)">
            <summary>
            Fire a T event to all T callback subscribers.
            </summary>
            <typeparam name="T">Type of the event.</typeparam>
            <param name="iFiredEvent">The event to fire.</param>
        </member>
        <member name="T:BlueQuark.Internal.AVisionAlgorithm`2">
            <summary>
            Base class for computer vision algorithms.
            <typeparam name="U">ULink type.</typeparam>
            <typeparam name="M">Metric type.</typeparam>
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mRGBHeight">
            <summary>
            Height of the last retrieved RGB frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mRGBWidth">
            <summary>
            With of the last retrieved RGB frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mDepthHeight">
            <summary>
            Height of the last retrieved Depth frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mDepthWidth">
            <summary>
            With of the last retrieved Depth frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mThermalHeight">
            <summary>
            Height of the last retrieved Thermal frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mThermalWidth">
            <summary>
            With of the last retrieved Thermal frame
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AVisionAlgorithm`2.OnNewFrame(OpenCVUnity.Mat,OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Called at each valuable frame.
            Write your computer vision algorithm inside this method.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AVisionAlgorithm`2.IsBusy">
            <summary>
            Returns true if the algorithm is active.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GCVLikelihood">
            <summary>
            Rate likelihood
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.UNKNOWN">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.VERY_UNLIKELY">
            <summary>
            Very low rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.UNLIKELY">
            <summary>
            Low rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.POSSIBLE">
            <summary>
            Medium rate 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.LIKELY">
            <summary>
            Correct rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.VERY_LIKELY">
            <summary>
            Very credible
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GCVLandmarkType">
            <summary>
            Kind of landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.UNKNOWN_LANDMARK">
            <summary>
            Unknown landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE">
            <summary>
            Left eye
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE">
            <summary>
            Right eye
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_OF_LEFT_EYEBROW">
            <summary>
            Left of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_OF_LEFT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_OF_RIGHT_EYEBROW">
            <summary>
            Left of right eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_OF_RIGHT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MIDPOINT_BETWEEN_EYES">
            <summary>
            Space between eyes
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_TIP">
            <summary>
            Nose tip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.UPPER_LIP">
            <summary>
            Upper lip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LOWER_LIP">
            <summary>
            Lower lip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_LEFT">
            <summary>
            Mouse left side
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_RIGHT">
            <summary>
            Mouse right side
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_CENTER">
            <summary>
            Center of the mouse
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_RIGHT">
            <summary>
            Bottom right side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_LEFT">
            <summary>
            Bottom left side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_CENTER">
            <summary>
            Bottom center side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_TOP_BOUNDARY">
            <summary>
            Left eye top boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_RIGHT_CORNER">
            <summary>
            Left eye right corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Left eye bottom boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_LEFT_CORNER">
            <summary>
            Left eye left corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_TOP_BOUNDARY">
            <summary>
            Right eye top boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_RIGHT_CORNER">
            <summary>
            RIght eye right corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Right eye bottom boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_LEFT_CORNER">
            <summary>
            Right eye left corner 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Left eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Right eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EAR_TRAGION">
            <summary>
            Left ear tragion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EAR_TRAGION">
            <summary>
            Right eear tragion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_PUPIL">
            <summary>
            Left eye pupil
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_PUPIL">
            <summary>
            Right eye pupil
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.FOREHEAD_GLABELLA">
            <summary>
            Glabella
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_GNATHION">
            <summary>
            Chin gnathion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_LEFT_GONION">
            <summary>
            Chin left gonion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_RIGHT_GONION">
            <summary>
            Chin right gonion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Looper">
            <summary>
            Looper manages all update system through the operating system assembly. It replace the Unity Update() system at each frame.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Looper.Subscribe(BlueQuark.Internal.AComponent)">
            <summary>
            Adds a component to update at each frame.
            </summary>
            <param name="iToUpdate">The component to subscribe to the update system.</param>
            <returns>True if the subscription is effective, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Looper.Unsubscribe(BlueQuark.Internal.AComponent)">
            <summary>
            Removes a component to update.
            </summary>
            <param name="iToRemove">The component to unsubscribe to the update system.</param>
            <returns>True if the unsubscription is effective, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Looper.Subscribe(BlueQuark.Internal.APresenterULink)">
            <summary>
            Adds a component to update at each frame.
            </summary>
            <param name="iToUpdate">The ULink to subscribe from the update system.</param>
            <returns>True if the subscription is effective, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Looper.Unsubscribe(BlueQuark.Internal.APresenterULink)">
            <summary>
            Removes a component to update.
            </summary>
            <param name="iToRemove">The ULink to unsubscribe from the update system.</param>
            <returns>True if the unsubscription is effective, false otherwise.</returns>
        </member>
        <member name="T:BlueQuark.Internal.IRegularComponent">
            <summary>
            The opposite of the IUniqueComponent. Can be wield and disposed easily. Mainly used for UI purposes or multiple sensors.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.IUniqueComponent">
            <summary>
            A unique component can be instanciated via Injector only once and cannot be disposed.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.IRegularComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.UnitTestAttribute">
            <summary>
            Attribute that signal to the metric suite engine that to tagged method as [UnitTest] must be ran.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UnitTestAttribute.Iterations">
            <summary>
            Number of iteration the test must be done.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UnitTestAttribute.Dependencies">
            <summary>
            Method test name that depends on the current method test.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.UnitTestAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.UnitTestAttribute.#ctor(System.Int32)">
            <summary>
            Constructor specifying number of iteration the test must be done.
            </summary>
            <param name="iIterations">Number of iteration the test must be done.</param>
        </member>
        <member name="T:BlueQuark.Internal.IMotor">
            <summary>
            Base interface for robot motors.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IMotor.Angle">
            <summary>
            Can represent the angle of the motor or the main axe of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IMotor.Speed">
            <summary>
            Current speed of the component, the unit depends on the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IMotor.Locked">
            <summary>
            Enables/Disables the lock of the component. A locked motor cannot move.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:BlueQuark.Internal.IMotor.TorqueThreshold" -->
        <!-- Badly formed XML comment ignored for member "P:BlueQuark.Internal.IMotor.EnableTorqueControl" -->
        <member name="T:BlueQuark.Internal.AppSandbox">
            <summary>
            Loads, unloads apps and store transited data.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AppUpdater">
            <summary>
            This component retrieves online apps and updates local apps
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Main">
            <summary>
            Entry point of the BlueQuark operating system. 
            Initialization (Awake) order : Looper > EventBus > Injector > Main 
            Call order : Main > Injector > EventBus + Looper
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.EventBus"/>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <seealso cref="T:BlueQuark.Buddy"/>
        </member>
        <member name="T:BlueQuark.Internal.HDMI">
            <summary>
            HDMI output management.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HDMI.IsConnected">
            <summary>
            True if the HDMI port is connected to an HDMI cable and a correct connexion is established.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TimeStamp">
            <summary>
            Represents a timestamp data
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Clock.#ctor(System.Boolean,System.Single,System.Single,System.Int32,System.Action{BlueQuark.Internal.Clock},System.Action{BlueQuark.Internal.Clock})">
            <summary>
            Create a new instance of a Clock object.
            </summary>
            <param name="iIsAuto">To start automatically.</param>
            <param name="iLimit">Time until the end of the cycle.</param>
            <param name="iDelay">Delay before the start of counting.</param>
            <param name="iRepeats">How many cycles to make.</param>
            <param name="iActionWhile">Action to call each tick.</param>
            <param name="iActionEnd">Action to call when the timer ends.</param>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Auto(System.Action{BlueQuark.Internal.Clock})">
            <summary>
            The simplest clock that runs infinitely.
            </summary>
            <param name="iActionWhile">Callback on every tick.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Repeater(System.Action{BlueQuark.Internal.Clock},System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Timer that resets after reaching it's limit.
            </summary>
            <param name="iAction">Action to repeat.</param>
            <param name="iRepeatTime">Repeat cycle time, in seconds.</param>
            /// <param name="iDelay">Delay before timer start, in seconds.</param>
            <param name="iRepeats">Number of repeats. 0 for infinite.</param>
            <param name="iIsAuto">To start upon creation.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Timer(System.Single,System.Action{BlueQuark.Internal.Clock},System.Action{BlueQuark.Internal.Clock},System.Boolean)">
            <summary>
            Timer that runs for a limited amount of time and ends.
            </summary>
            <param name="iLimit">Time for the timer to run, in seconds.</param>
            <param name="iActionEnd">Callback on reaching the limit.</param>
            <param name="iActionWhile">Callback on every tick.</param>
            <param name="iIsAuto">Will timer start automatically.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Stepper(System.Single,System.Action{BlueQuark.Internal.Clock},System.Action{BlueQuark.Internal.Clock})">
            <summary>
            Manual timer
            </summary>
            <param name="iLimit">Optional trigger for the final action.</param>
            <param name="iActionEnd">Callback on reaching the limit.</param>
            <param name="iActionWhile">Callback on every tick.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Timewatch(System.DateTime,System.Action{BlueQuark.Internal.Clock},System.Action{BlueQuark.Internal.Clock})">
            <summary>
            Timer set to an exact time.
            </summary>
            <param name="iTime">Goal time.</param>
            <param name="iActionEnd">Callback on reaching the goal time.</param>
            <param name="iActionWhile">Callback on every tick.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Timewatch(System.String,System.Action{BlueQuark.Internal.Clock},System.Action{BlueQuark.Internal.Clock})">
            <summary>
            Timer set to an exact time.
            </summary>
            <param name="iTime">Goal time as string to parse.</param>
            <param name="iActionEnd">Callback on reaching the goal time.</param>
            <param name="iActionWhile">Callback on every tick.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Tick(System.Single)">
            <summary>
            Adds time to timer
            </summary>
            <param name="iSeconds">Time in seconds to add. Default is Time.deltaTime.</param>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Start">
            <summary>
            Start the timer from idle state or restart after the pause.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Stop(System.Boolean)">
            <summary>
            Invoke reaching the limit.
            </summary>
            <param name="iWithCallback">To invoke final action.</param>
        </member>
        <member name="M:BlueQuark.Internal.Clock.StopAndReset(System.Single,System.Boolean)">
            <summary>
            Invoke reaching the limit and reset the timer.
            </summary>
            /// <param name="iLimit"></param>
            <param name="iWithCallback">To invoke final action.</param>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Reset(System.Single,System.Boolean)">
            <summary>
            Resets the timer to the start state.
            </summary>
            <param name="iLimit"></param>
            <param name="iWithRepeats"></param>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Restart">
            <summary>
            Restart the timer from the beginnning.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Clock.SetLimit(System.Single)">
            <summary>
            Set timer finish time.
            </summary>
            <param name="iLimit"></param>
        </member>
        <member name="M:BlueQuark.Internal.Clock.Stamp(System.String,System.Boolean)">
            <summary>
            Add a new timestamp.
            </summary>
            <param name="iDescription">Optional description of a timestamp.</param>
            <param name="iToRestart">To start a new cycle.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.Clock.LogStamps">
            <summary>
            Log all the stamps in the format: "0.123s : Description".
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.IsGoing">
            <summary>
            If timer is not idle, on pause or stopped and has not reached the limit yet.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.IsPaused">
            <summary>
            If timer is set on pause before reaching the limit.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.IsFinished">
            <summary>
            If timer has reached its limit or is stopped manually.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.ElapsedTime">
            <summary>
            Time passed for current repeat cycle, in seconds.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.TimeSpan">
            <summary>
            Time passed for current repeat cycle.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.RemainingTime">
            <summary>
            Time until current repeat cycle ends, in seconds. Zero if timer is infinite.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.ElapsedRepeats">
            <summary>
            Number of repeats already passed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.RemainingRepeats">
            <summary>
            Number of repeats until the timer ends. Zero if infinite repeats.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Clock.Stamps">
            <summary>
            Array of stamps in the format (Time in secondqs, Description).
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APlatformULink.WaitForPendingComponentsAsync">
            <summary>
            Coroutine that will wait until all IsSomethingPending of IQueueSystem OS components return false.
            </summary>
            <seealso cref="T:BlueQuark.Internal.IQueueSystem"/>>
        </member>
        <member name="T:BlueQuark.Internal.HardwareCom">
            <summary>
            Hardware communication with the Hemise board.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.IsBusy">
            <summary>
            Is a command is currently processing ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.EnableDebugMode">
            <summary>
            Enables/Disables hardware debug mode.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnCommandProgress">
            <summary>
            Called on each hardware command progression.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewDataFrame">
            <summary>
            Called on each new spontaneous data frame from the Hemise board. About every 50 milliseconds.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewErrSysFrame">
            <summary>
            Called when a new error system frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewSyncDataFrame">
            <summary>
            Called when a new synchronization data frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewDebugFrame">
            <summary>
            Called when a new debug frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewFixDataFrame">
            <summary>
            Called when a new system data frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewEEPFrame">
            <summary>
            Called when a new EEP frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewAckFrame">
            <summary>
            Called when a new acknowledge frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnSendCommand">
            <summary>
            Called when a command is sent to the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnPlug">
            <summary>
            Called when the cable is plugged. Should never happened on real circumstances.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnUnplug">
            <summary>
            Called when the cable is unplugged. Should never happened on real circumstances.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte[],System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified full payload (with command code) to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iPayload">The payload to send.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte[],System.Int32,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified full payload (with command code) to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iPayload">The payload to send.</param>
            <param name="iPriority">Priority of the command.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte[],System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified full payload (with command code) to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iPayload">The payload to send.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte[],System.Boolean,System.Int32,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified full payload (with command code) to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iPayload">The payload to send.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iPriority">Priority of the command.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Boolean,System.Int32,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iPriority">Priority of the command.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>        
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>      
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iVal7">Eighth value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iVal7">Eighth value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iVal7">Eighth value to store.</param>
            <param name="iVal8">Nineth value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iVal7">Eighth value to store.</param>
            <param name="iVal8">Nineth value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iVal7">Eighth value to store.</param>
            <param name="iVal8">Nineth value to store.</param>
            <param name="iVal9">Tenth value to store.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iVal0">First value to store.</param>
            <param name="iVal1">Second value to store.</param>
            <param name="iVal2">Third value to store.</param>
            <param name="iVal3">Fourths value to store.</param>
            <param name="iVal4">Fifth value to store.</param>
            <param name="iVal5">Sixth value to store.</param>
            <param name="iVal6">Seventh value to store.</param>
            <param name="iVal7">Eighth value to store.</param>
            <param name="iVal8">Nineth value to store.</param>
            <param name="iVal9">Tenth value to store.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte[],System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iPayload">The payload to send.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte[],System.Int32,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iPayload">The payload to send.</param>
            <param name="iPriority">Priority of the command. Higher the priority, faster it will be considered.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte[],System.Boolean,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iPayload">The payload to send.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte[],System.Boolean,System.Int32,System.Action{BlueQuark.Internal.HardwareCommandProgress})">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            </summary>
            <param name="iCode">The command code.</param>
            <param name="iPayload">The payload to send.</param>
            <param name="iForceEnqueue">If true, the command will be added as it. If false, any same command will be replaced by new provided parameters.</param>
            <param name="iPriority">Priority of the command. Higher the priority, faster the command will be considered.</param>
            <param name="iOnProgress">Optional callback called when the status command is changed.</param>
            <returns>The error code. 0 if no error.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.AbortAllCommands">
            <summary>
            Remove from the queue all no processed commands.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.AbortCommand">
            <summary>
            The current command won't be acknowledge anymore.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.AbortCommand(System.Byte)">
            <summary>
            Abort a not sent command matching with the command code.
            </summary>
            <param name="iCode"></param>
            <returns>True if a matching command has been correctly removed from the queue.</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GPIO">
            <summary>
            Global Purpose Input Output management.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GPIO.OnHigh">
            <summary>
            Called when a GPIO is set on high value after a low value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GPIO.OnLow">
            <summary>
            Called when a GPIO is set on low value after a high value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.IsLow(System.Int32)">
            <summary>
            Returns true if the specified GPIO is on low value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
            <returns>True if the GPIO is on low</returns>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.IsHigh(System.Int32)">
            <summary>
            Returns true if the specified GPIO is on high value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
            <returns>True if the GPIO is on high</returns>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetAsInput(System.Int32)">
            <summary>
            Sets the specified GPIO as input.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetAsOutput(System.Int32)">
            <summary>
            Sets the specified GPIO as output.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetHigh(System.Int32)">
            <summary>
            Set the output specified GPIO on high value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetLow(System.Int32)">
            <summary>
            Set the output specified GPIO on low value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.RoamSubStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.RoamSpeed,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.RoamSubStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.Mood,BlueQuark.RoamSpeed,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null</param>
            <param name="iMood">The mood that should be expressed through the motion.</param>
        </member>
        <member name="M:BlueQuark.Internal.RoamSubStrategy.WithMood(BlueQuark.Mood,BlueQuark.RoamSpeed,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Start wandering around in a certain mood.
            </summary>
            <param name="iMood">The mood that should be expressed through the motion.</param>
        </member>
        <member name="T:BlueQuark.Internal.LocalRobotPref">
            <summary>
            Represents the robot preferences.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableCheckAppsUpdate">
            <summary>
            Does the robot have to auto check for apps updates
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableAutoApplyAppsUpdate">
            <summary>
            Does the robot have to auto apply update if available
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableDLBuiltinApps">
            <summary>
            Does the robot have to download builtin apps
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableAutoApplySystemUpdate">
            <summary>
            Does the robot have to auto apply update if available
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableCheckSystemUpdate">
            <summary>
            Does the robot have to auto check for system updates
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.AutoLockScreen">
            <summary>
            Does the robot authorize the auto lock screen
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LockScreenTimer">
            <summary>
            The time in seconds user have to type pin
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.Pwd">
            <summary>
            Password of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastLoggedAccount">
            <summary>
            Last account which was logged on the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastOdometryPosition">
            <summary>
            Last odometry position of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastComputedPosition">
            <summary>
            Last computed position of the robot
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LocalRobotPref.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IBinarySensor">
            <summary>
            Base interface for sensor that returns a binary value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IBinarySensor.Value">
            <summary>
            Current value of the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ICamera">
            <summary>
            Base interface for camera sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ICamera`1">
            <summary>
            Base interface for camera sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.INonBinarySensor">
            <summary>
            Base interface for sensor that returns a linear value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.INonBinarySensor.Value">
            <summary>
            Current value of the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IClosableCamera`1">
            <summary>
            Base interface for camera sensor that can be closed.
            </summary>
            <typeparam name="T">Type of the mode</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IClosableCamera`1.Open(`0)">
            <summary>
            Open the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.Internal.IClosableCamera`1.Close">
            <summary>
            Close the device. May take a certain time.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IApertureSensor">
            <summary>
            Base interface for sensor with a notable field of view.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IApertureSensor.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IApertureSensor.VerticalFOV">
            <summary>
            The vertical field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IOrientedSensor">
            <summary>
            Base interface for sensor that is not fully in the front of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IOrientedSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IPlugabble">
            <summary>
            Pluggable component which can be connected or disconnected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IPlugabble.IsConnected">
            <summary>
            Return true if the component is plugged to the correct hardware port.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IThrowable">
            <summary>
            A throwable component handles error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IThrowable.Error">
            <summary>
            The last recorded error id.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AstraCamera">
            <summary>
            Astra Mini camera from Orbbec. <see cref="!:https://orbbec3d.com/astra-mini/"/>>
            It contains RGB + Depth + Infrared camera components.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AstraCamera.IsOpen">
            <summary>
            Returns true if at least one stream of the camera is open.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AstraCamera.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AstraCamera.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AstraCamera.IsBusy">
            <summary>
            Returns true if the camera is opening or closing a stream. False otherwise.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AstraCamera.SubscribeStream``1(System.EventHandler{Astra.FrameReadyEventArgs})">
            <summary>
            Subscribes to a camera input stream.
            </summary>
            <typeparam name="S">Type of the stream to retrieve.</typeparam>
            <param name="iOnNewFrame">The event handler to subscribe to the camera.</param>
            <returns>Stream to open / close</returns>
        </member>
        <member name="M:BlueQuark.Internal.AstraCamera.SubscribeStream``1(System.EventHandler{Astra.FrameReadyEventArgs},System.Action{``0})">
            <summary>
            Subscribes to a camera input stream.
            </summary>
            <typeparam name="S">Type of the stream to retrieve.</typeparam>
            <param name="iOnNewFrame">The event handler to subscribe to the camera.</param>
            <param name="iOnEnd">Callback called when the opening process is ended.</param>
            <returns>Stream to open / close</returns>
        </member>
        <member name="M:BlueQuark.Internal.AstraCamera.UnsubscribeStream``1(System.EventHandler{Astra.FrameReadyEventArgs})">
            <summary>
            Removes a subscription from a stream.
            </summary>
            <typeparam name="S">Type of the stream.</typeparam>
            <param name="iOnNewFrame">The event handler to remove.</param>
            <returns>True if the unsubscription was effective.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AstraCamera.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ILayoutExplorerWidget">
            <summary>
            Base interface for typed Explorer layout widget. Layout widget can contain many sealed widgets.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IExplorerWidget">
            <summary>
            Base interface for typed Explorer widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledAdder">
            <summary>
            Adds button sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledAdder.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledAdder.SetLabel(System.String)">
            <summary>
            Sets the button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledDropdown">
            <summary>
            Dropdown sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.OnSelect">
            <summary>
            Called when a dropdown item is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.IsBusy">
            <summary>
            Does the dropdown is open ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.EDropdownInfos">
            <summary>
            Returns a array of the dropdown infos added.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.SelectedOption">
            <summary>
            Option of the current selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.SelectedOptionIdx">
            <summary>
            Index of the current selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.SelectedOptionInfo">
            <summary>
            Info of the currently selected item.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Open">
            <summary>
            Opens the dropdown.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Close">
            <summary>
            Closes the dropdown.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Add(System.String,System.Object)">
            <summary>
            Adds a new item to the dropdown.
            </summary>
            <param name="iLabel">The text to display. Cannot be null or empty</param>
            <param name="iParameter">Optional parameter to store</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Add(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Adds a new item to the dropdown.
            </summary>
            <param name="iInfo">The info to add</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Remove(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Remove an item of the dropdown.
            </summary>
            <param name="iInfo"></param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Clear">
            <summary>
            Closes and removes all options.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EDropdownOption">
            <summary>
            Dropdown option for Dropup widget for Explorer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownOption.OnClick">
            <summary>
            Called when option is clicked and selected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownOption.Info">
            <summary>
            Represents the data to be stored for further callback.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EDropdownInfo">
            <summary>
            Dropdown data for Explorer GUI component
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownInfo.Label">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownInfo.Parameter">
            <summary>
            Optional parameter to store
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledButton">
            <summary>
            Button sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledButton.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledButton.SetLabel(System.String)">
            <summary>
            Sets the left button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledButton.SetText(System.String)">
            <summary>
            Sets the inner button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Display an optional icon of the button.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledPasswordField">
            <summary>
            Password text field sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledPasswordField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledPasswordField.OnEndEdit">
            <summary>
            Called when the user clicked out of the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledPasswordField.SetLabel(System.String)">
            <summary>
            Sets the left password label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledPasswordField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledPasswordField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledSliderToggle">
            <summary>
            Toggable slider sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.MaxSlidingValue">
            <summary>
            The maximum allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.MinSlidingValue">
            <summary>
            The minimal allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.WholeSlidingValue">
            <summary>
            Should the value only be allowed to be whole numbers ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledSliderToggle.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledSlider">
            <summary>
            Slider sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ELabeledSlider.SliderType.NUMBER_CENTER">
            <summary>
            Changin number value in the center
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ELabeledSlider.SliderType.TEXTS_NONUMBER">
            <summary>
            Describing labels (up to three), no number
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ELabeledSlider.SliderType.TEXTS_NUMBER">
            <summary>
            Describing labels (up to three) and number value near the label
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.MaxSlidingValue">
            <summary>
            The maximum allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.MinSlidingValue">
            <summary>
            The minimal allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.WholeSlidingValue">
            <summary>
            Should the value only be allowed to be whole numbers ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.Type">
            <summary>
            Type of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.IsInteractive">
            <summary>
            Can user change the slider value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledSlider.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledSlider.SetTextValues(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="iTextLeft"></param>
            <param name="iTextRight"></param>
            <param name="iTextCenter"></param>
        </member>
        <member name="T:BlueQuark.Internal.EDropdown">
            <summary>
            Dropdown sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.OnSelect">
            <summary>
            Called when a dropdown item is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.IsBusy">
            <summary>
            Does the dropdown is open ?
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.SelectedOption">
            <summary>
            Label of the currently selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.SelectedOptionIdx">
            <summary>
            Index of the currently selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.SelectedOptionInfo">
            <summary>
            Info of the currently selected item.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Open">
            <summary>
            Opens the dropdown.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Close">
            <summary>
            Closes the dropdown.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Add(System.String,System.Object)">
            <summary>
            Adds a new item to the dropdown.
            </summary>
            <param name="iLabel">The text to display. Cannot be null or empty</param>
            <param name="iParameter">Optional parameter to store</param>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Add(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Adds a new item to the dropdown.
            </summary>
            <param name="iInfo">The info to add</param>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Remove(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Remove an item of the dropdown.
            </summary>
            <param name="iInfo"></param>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Clear">
            <summary>
            Closes and removes all options.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EPasswordField">
            <summary>
            Password text field sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EPasswordField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EPasswordField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EPasswordField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.EPasswordField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledTextField">
            <summary>
            Text field sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledTextField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledTextField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetLabel(System.String)">
            <summary>
            Sets the left password label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets text field image.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledToggle">
            <summary>
            Toggle sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledToggle.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ETextField">
            <summary>
            Text field sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ETextField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ETextField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ETextField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ETextField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ETextField.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets text field image.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.EAppIcon">
            <summary>
            App icon sealed widget for Explorer GUI component. Stores callbacks called when the icon is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EAppIcon.AppInfo">
            <summary>
            The stored app info.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EAppIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EAppIcon.OnHold">
            <summary>
            Called when icon is hold.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EAppIcon.SetAppInfo(BlueQuark.AppInfo)">
            <summary>
            Sets to store the app data.
            </summary>
            <param name="iInfo">The app data</param>
        </member>
        <member name="T:BlueQuark.Internal.EButton">
            <summary>
            Button sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EButton.Enabled">
            <summary>
            Set if button is enabled
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetLabel(System.String)">
            <summary>
            Sets the button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetLeftIcon(UnityEngine.Sprite)">
            <summary>
            Display an optional icon on the left side of the button.
            </summary>
            <param name="iSprite">The sprite to display. Empty to hide</param>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetLeftIcon(System.String)">
            <summary>
            Display an optional icon on the left side of the button.
            </summary>
            <param name="iSpriteName">The name of sprite to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetRightIcon(UnityEngine.Sprite)">
            <summary>
            Display an optional icon on the right side of the button.
            </summary>
            <param name="iSprite">The sprite to display. Empty to hide</param>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetRightIcon(System.String)">
            <summary>
            Display an optional icon on the right side of the button.
            </summary>
            <param name="iSpriteName">The name of sprite to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.EText">
            <summary>
            Text sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EText.OnClick">
            <summary>
            Called when the text is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EText.SetLabel(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.EGridLayout">
            <summary>
            Grid layout that can contains many sealed widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EGridLayout.SetLabel(System.String)">
            <summary>
            Sets the top text label of the layout group.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.EFanfoldLayout">
            <summary>
            One column layout for Explorer GUI component. This layout can be maximized and minimized to display or hide.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnShare">
            <summary>
            Called when the Share button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnDelete">
            <summary>
            Called when the Delete button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnMaximize">
            <summary>
            Called when the Maximize button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnMinimize">
            <summary>
            Called when the Minimize button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplaySelectAll">
            <summary>
            Display the select all button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplayShare">
            <summary>
            Display the Share button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplayTrash">
            <summary>
            Display the delete button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplayToggle">
            <summary>
            Display the toggle.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.MinMaxEnabled">
            <summary>
            Display the toggle.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.Label">
            <summary>
            Top text label.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EFanfoldLayout.SetLabel(System.String)">
            <summary>
            Sets the top text label of the layout group.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.EFanfoldLayout.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the left icon of the layout.
            </summary>
            <param name="iIcon">Image to show on icon. If empty or null, hides icon.</param>
        </member>
        <member name="M:BlueQuark.Internal.EFanfoldLayout.SetIcon(System.String)">
            <summary>
            Sets the left icon of the layout.
            </summary>
            <param name="iIcon">Image to show on icon. If empty or null, hides icon.</param>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EFanfoldLayout.Maximize">
            <summary>
            Expand the layout.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EFanfoldLayout.Minimize">
            <summary>
            Compact the layout.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ETwoColumnsLayout">
            <summary>
            Two columns layout for Explorer GUI component.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EOneColumnLayout">
            <summary>
            One column layout for Explorer GUI component. This is the base layout for Explorer content.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ESideButton">
            <summary>
            Left side button of the Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ESideButton.OnClick">
            <summary>
            Callback when the button is clicked
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetEmpty(System.Boolean)">
            <summary>
            Specifies if the button must be considered as a blank place. Button wont be interactable anymore.
            </summary>
            <param name="iEmpty">True to make it empty, false otherwise</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetIndex(System.Int32)">
            <summary>
            Sets the inde of the button
            </summary>
            <param name="iIndex">Index to store. Cannot be negative</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetMaskIcon(UnityEngine.Sprite)">
            <summary>
            Sets the mask icon to display.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon to display.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.RotateIcon(System.Single)">
            <summary>
            Starts the button rotation.
            </summary>
            <param name="iVal">Should the button rotate ?</param>
        </member>
        <member name="T:BlueQuark.Internal.ETopIcon">
            <summary>
            Top right icon for Explorer GUI component
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ETopIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ETopIcon.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon to display.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.ETopIcon.SetSubicon(UnityEngine.Sprite)">
            <summary>
            Sets the subicon to display.
            </summary>
            <param name="iSprite">The sprite to display. Set to invisible if null. By default it is a dot.</param>
        </member>
        <member name="M:BlueQuark.Internal.ETopIcon.SetIconColor(UnityEngine.Color)">
            <summary>
            Set icon color
            </summary>
            <param name="iColor">Color to set.</param>
        </member>
        <member name="M:BlueQuark.Internal.ETopIcon.SetSubiconColor(UnityEngine.Color)">
            <summary>
            Set subicon color
            </summary>
            <param name="iColor">Color to set.</param>
        </member>
        <member name="M:BlueQuark.Internal.ETopIcon.SetVisible(System.Boolean)">
            <summary>
            Show or hide icon.
            </summary>
            <param name="iVisible">Visibility.</param>
        </member>
        <member name="T:BlueQuark.Internal.FFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IFooterWidget">
            <summary>
            Base interface for typed Footer widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AFWidget`1">
            <summary>
            Base class for Footer widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.FDropupOption">
            <summary>
            Dropup option for Dropup widget for Footer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FDropupOption.OnClick">
            <summary>
            Called when option is clicked and selected.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.FDropupOption.Select(System.Boolean)">
            <summary>
            Sets the option as select or not.
            </summary>
            <param name="iVal">True to set the option as select, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.Internal.FDropupOption.SetInfo(BlueQuark.FDropupInfo)">
            <summary>
            Sets the data to be stored for further callback.
            </summary>
            <param name="iInfo">The data to store.</param>
        </member>
        <member name="T:BlueQuark.Internal.NFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ANotification.ID">
            <summary>
            ID of the notification.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ANWidget`1">
            <summary>
            Base class for Notifier widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.NBox">
            <summary>
            Base box for the Notifier GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.NBox.ID">
            <summary>
            ID of the stored notification.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.NBox.Info">
            <summary>
            The stored notification info.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NBox.Select(System.Boolean,System.Boolean)">
            <summary>
            Sets the box as selected or not.
            </summary>
            <param name="iVal">Does the box is selected ?</param>
            <param name="iWithSides">Does the side wave must be displayed ? Effect only if iVal is true.</param>
        </member>
        <member name="M:BlueQuark.Internal.NBox.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.NBox.SetText(System.String)">
            <summary>
            Sets the text into the notification.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.NBox.DisplayValidate">
            <summary>
            Displays the validation button.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NBox.DisplayReply">
            <summary>
            Displays the reply button.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NBox.DisplayRepeat">
            <summary>
            Displays the repeat button.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.INotifierWidget">
            <summary>
            Base interface for typed Notifier widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ACapsuleToast">
            <summary>
            Toast that is displayed as a horizontal capsule with two lateral button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ACapsuleToast.LeftAction">
            <summary>
            Called when the left button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ACapsuleToast.RightAction">
            <summary>
            Called when the right button is clicked.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AToast">
            <summary>
            Base class for any toast. A toast is only a storage system waiting for its display.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mLayoutType">
            <summary>
            Type of the layout of the toast.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mOnSideClick">
            <summary>
            Callback called when the user click on the side of the current displayed toast.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mOnDisplay">
            <summary>
            Callback called when the toast is displayed.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mOnHide">
            <summary>
            Callback called when the toast is hidden.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.ID">
            <summary>
            ID of the toast.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.OnSideClick">
            <summary>
            Called when the current toast is displayed and a side click happened.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.OnDisplay">
            <summary>
            Called when the current toast is displayed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.OnHide">
            <summary>
            Called when the current toast is hidden.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.LayoutType">
            <summary>
            Type of the layout (Presenter) to display.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AToast.Dispose">
            <summary>
            Called when the toast must be revoked.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATWidget`1">
            <summary>
            Base class for Toaster widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IToasterWidget">
            <summary>
            Base interface for typed Toaster widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATLayoutWidget`2">
            <summary>
            Base class for a toast layout widget. A layout will display the content stored in the toast (PictureToast, IconToast, ParameterToast...). Can only contain sealed elements.
            </summary>
            <typeparam name="T">Type of toast managed by the layout</typeparam>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.ATLayoutWidget`2.mToastInfo">
            <summary>
            The toast info container, contains info that must be displayed
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ATLayoutWidget`2.mWidgets">
            <summary>
            Displayed widgets. Must be cleared on layout dispose
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ILayoutToasterWidget">
            <summary>
            Base interface for typed Toaster layout widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TCapsuleLayout">
            <summary>
            Displays a capsule layout with two lateral buttons. The capsule element can store many sealed widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetTopIcon(UnityEngine.Sprite)">
            <summary>
            Sets an optional top icon.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetRightIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon of the right button.
            </summary>
            <param name="iSprite">The sprite to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetLeftIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon of the left button.
            </summary>
            <param name="iSprite">The sprite to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetLeftLabel(System.String)">
            <summary>
            Sets the label of the left button.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetRightLabel(System.String)">
            <summary>
            Sets the label of the right button.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.AddHorizontally``1(``0)">
            <summary>
            Adds the given widget as a column element.
            </summary>
            <typeparam name="T">Type of the widget to add</typeparam>
            <param name="iWidget">The widget to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.AddVertically``1(``0)">
            <summary>
            Adds the given widget as a row element.
            </summary>
            <typeparam name="T">Type of the widget to add</typeparam>
            <param name="iWidget">The widget to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.Remove``1(``0)">
            <summary>
            Removes the given widget.
            </summary>
            <typeparam name="T">Type of the widget to remove</typeparam>
            <param name="iWidget">The widget to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="T:BlueQuark.Internal.ISealedToasterWidget">
            <summary>
            Base interface for typed Explorer sealed widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATSealedWidget`1">
            <summary>
            Base class for sealed Toaster widget. A sealed is a small element contained in layout or other sealed elements.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AState">
            <summary>
            Base class for state machine's state.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AState.mStateMachine">
            <summary>
            State machine of the state.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AState.mEventBus">
            <summary>
            The event bus system. Allows to fire events.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AState.Name">
            <summary>
            Name of the state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.Setup(BlueQuark.Internal.StateMachine,BlueQuark.Internal.EventBus)">
            <summary>
            Called after ctor to setup base dependencies.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.Initialize">
            <summary>
            Called after ctor and setup.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateEnter">
            <summary>
            Called when the state machine target comes in the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateUpdate">
            <summary>
            Called at each frame when the state machine target is in the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateExit">
            <summary>
            Called when the state machine target leaves the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.Dispose">
            <summary>
            Called automatically when the master component must be destroyed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateEnter(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target comes in the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateUpdate(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called at each frame when the state machine target is in the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateExit(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target leaves the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="T:BlueQuark.Internal.StateMachine">
            <summary>
            State machine data structure. Composed of AStates.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AState"/>>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNumber(System.Double)">
            <summary>
            Check if the input val is a correct number and not infinity. Log error if false.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if not infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNumber(System.Single)">
            <summary>
            Check if the input val is a correct number and not infinity. Log error if false.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if not infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNaN(System.Double)">
            <summary>
            Check if the input val is not a number or infinity. Log error if true.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNaN(System.Single)">
            <summary>
            Check if the input val is not a number or infinity. Log error if true.
            </summary>
            <param name="iVal">The value to check.</param>
            <returns>True if infinity or NaN.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsPositive(System.Double,System.Boolean)">
            <summary>
            Checks if the value is >= 0 or > 0 if strict. Log error if false.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iStrict">The value to check.</param>
            <returns>Return true if the value is >= 0, or > 0 if strict.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNegative(System.Double,System.Boolean)">
            <summary>
            Checks if the value is >= 0 or > 0 if strict. Log error if false.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iStrict">The value to check.</param>
            <returns>Return true if the value is >= 0, or > 0 if strict.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsInRange(System.Double,System.Double,System.Double)">
            <summary>
            Checks if a value is in range between two values. Log error if false.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iLowerRange">The lower range.</param>
            <param name="iUpperRange">The upper range.</param>
            <returns>Returns true if strictly lower than lower range or strictly highier than upper range</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsAmong(System.Double,System.Double,System.Double,System.Double[])">
            <summary>
            Check if a value is contained among provided numbers. Log error if false.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iRangeVal1">Mandatory comparative value.</param>
            <param name="iRangeVal2">Mandatory comparative value.</param>
            <param name="iRange">Dynamic comparative values.</param>
            <returns>Returns true if the value is among the provided numbers.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNotEmpty(System.String)">
            <summary>
            Checks if the string is not null, empty, or only contains whitespace. Log error if false.
            </summary>
            <param name="iString">String to check.</param>
            <returns>Returns true if the string is null, empty, or only contains whitespace.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsEmpty(System.String)">
            <summary>
            Checks if the string is null, empty, or only contains whitespace. Log error if true.
            </summary>
            <param name="iString">String to check.</param>
            <returns>Returns true if the string is null, empty, or only contains whitespace.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNotEmpty``1(``0[])">
            <summary>
            Checks if the array is not null or empty. Log error if false.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsEmpty``1(``0[])">
            <summary>
            Checks if the array is null or empty. Log error if true.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks if the array is null or empty. Log error if false.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Checks if the array is not null or empty. Log error if true.
            </summary>
            <param name="iArray">Array to check.</param>
            <returns>Returns true if the array is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsEmpty(OpenCVUnity.Mat)">
            <summary>
            Checks if the OpenCVUnity matrix is not null or empty. Log error if true.
            </summary>
            <param name="iMat">Matrix to check.</param>
            <returns>Returns true if the matrix is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsEmpty(UnityEngine.Texture)">
            <summary>
            Checks if the Unity texture is not null or empty. Log error if true.
            </summary>
            <param name="iTexture">Texture to check.</param>
            <returns>Returns true if the texture is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsEmpty(UnityEngine.Sprite)">
            <summary>
            Checks if the Unity sprite is not null or empty. Log error if true.
            </summary>
            <param name="iSprite">Sprite to check.</param>
            <returns>Returns true if the sprite or its texture is null or empty.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNotNull(System.Object)">
            <summary>
            Checks if the reference of an object is not null. Log error if false.
            </summary>
            <param name="iObject">The referennce of the object to check.</param>
            <returns>Returns true if the object.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsNull(System.Object)">
            <summary>
            Checks if the reference of an object is null. Log error if true.
            </summary>
            <param name="iObject">The referennce of the object to check.</param>
            <returns>Returns true if the object.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsFilePath(System.String)">
            <summary>
            Checks if the filesystem path leads to a file. Log error if true.
            </summary>
            <param name="iPath">Filesystem path to check.</param>
            <returns>Returns true if it's a file path.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.AssertIsDirectoryPath(System.String)">
            <summary>
            Checks if the filesystem path leads to a directory. Log error if true.
            </summary>
            <param name="iPath">Filesystem path to check.</param>
            <returns>Returns true if it's a directory path.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APIGuard.GetCallingMethodName">
            <summary>
            Gets the absolute name of calling method, must be called from an assert method guard.
            </summary>
            <returns>Concatenation of the class name and the method name.</returns>
        </member>
        <member name="T:BlueQuark.Internal.GoogleSpeech">
            <summary>
            Google Speech API interface component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.IsBusy">
            <summary>
            Returns true if a request is currently processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.IsConnected">
            <summary>
            Returns true if API is connected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.APICredentials">
            <summary>
            Returns the used api credentials.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.OnEndListening">
            <summary>
            Called at the end of any request.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.OnPartialListening">
            <summary>
            Called during an input speech processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.Language">
            <summary>
            Language currently detected by the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.OutputFilePath">
            <summary>
            Get the complete path where the recorded audio will be saved.
            Note : It will save nothing when using ListenFromFile().
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.Listen(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Starts a listening request.
            </summary>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
            <param name="iListenUntilSilence">If true, the listen will stop at the end of the first sentence.</param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.Internal.GoogleSpeechStatus},System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Starts a listening request.
            </summary>
            <param name="iOnStartListening">Callback called at the start of a sentence</param>
            <param name="iOnEndListening">Callback called at the end of a sentence</param>
            <param name="iOnGoogleSpeechStatus">Callback called at the end of the recognition.</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
            <param name="iListenUntilSilence">If true, the listen will stop at the end of the first sentence.</param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.RecognizeFromFile(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.Internal.GoogleSpeechStatus})">
            <summary>
            Audio format must be in FLAC or WAV or RAW.
            </summary>
            <param name="iPath">Path of the audio file.</param>
            <param name="iOnEndRecognition">On end of recognition.</param>
            <param name="iOnListeningEvent">Callback called at the end of the recognition.</param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.SetAPICredentialsAndStart(System.String,System.Action{BlueQuark.Internal.GoogleSpeechStatus})">
            <summary>
            Set the credentials API, can be a filepath or filecontent
            </summary>
            <param name="iCredentials">Google Speech API credentials</param>
            <param name="iOnGoogleSpeechStatus">Callback called at the end of the recognition.</param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.Stop">
            <summary>
            Stop the current request.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GoogleSpeechStatus">
            <summary>
            All the possible audio events than can be detected by GoogleSpeech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.BEGINNING_OF_SPEECH">
            <summary>
            Start of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.CREDENTIAL_ERROR">
            <summary>
            Bad credential error.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.API_CONNECTED">
            <summary>
            Api is connected.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.API_NOT_CONNECTED">
            <summary>
            Api is not connected.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.API_REMOTE_ERROR">
            <summary>
            Error returned by the remote API.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.Internal.GoogleSpeechStatus.AUDIO_FILE_NOT_FOUND" -->
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.BUSY">
            <summary>
            Google speech is busy.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.TIME_OUT">
            <summary>
            Google speech timeout.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GoogleSpeechStatus.END_OF_SPEECH">
            <summary>
            Occur after trailing silence.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.OutputVoice.op_Equality(BlueQuark.Internal.OutputVoice,BlueQuark.Internal.OutputVoice)">
            <summary>
            Checks if two voices are the same.
            </summary>
            <param name="iFirstVoice">First voice to compare.</param>
            <param name="iSecondVoice">Second voice to compare.</param>
            <returns>True if they describe the same voice.</returns>
        </member>
        <member name="M:BlueQuark.Internal.OutputVoice.op_Inequality(BlueQuark.Internal.OutputVoice,BlueQuark.Internal.OutputVoice)">
            <summary>
            Checks if two voices are differents.
            </summary>
            <param name="iFirstVoice">First voice to compare.</param>
            <param name="iSecondVoice">Second voice to compare.</param>
            <returns>True if they describe a different voice.</returns>
        </member>
        <member name="T:BlueQuark.Internal.VocalTrigger">
            <summary>
            Trigger used to detect if the sentence "OKAY BUDDY" has been said.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VocalTrigger.HOT_WORD">
            <summary>
            Detected hot word.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VocalTrigger.NO_RECOGNITION_SCORE">
            <summary>
            Default vocal trigger recognition score for bad value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.IsBusy">
            <summary>
            Returns true if the component is currently listening the trigger.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.OnDetect">
            <summary>
            Called when the hot word has been detected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.OnCompleteDetect">
            <summary>
            Called when the hot word has been detected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.SoundLocalization">
            <summary>
            Sound localization of the hot word speaker.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.RecognitionScore">
            <summary>
            Recognition score of the hot word.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.Language">
            <summary>
            Language currently detected by the component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalTrigger.Stop">
            <summary>
            Stops the hot word listening.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalTrigger.Listen">
            <summary>
            Starts the hot word listening.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VoConSpeech">
            <summary>
            VoCon (by Nuance) API interface component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.IsBusy">
            <summary>
            Returns true if a request is currently processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.LocalGrammars">
            <summary>
            Returns OS provided grammars in the current InputLanguage.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OnEndListening">
            <summary>
            Called at the end of any request.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OnBestEndListening">
            <summary>
            Called at the end of any request.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OnListeningStatus">
            <summary>
            Called on any vocal input event.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.Language">
            <summary>
            Language currently detected by the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OutputFilePath">
            <summary>
            Gets the path of the file containing the recorded audio.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts a listening request.
            </summary>
            <param name="iConfidenceThreshold">Confidence threshold for acceptance. From 1 to 9999.</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConStatus},System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts the Vocon recognition engine.
            </summary>
            <param name="iOnEndListening">Callback called at the end of the request</param>
            <param name="iOnListeningEvent">Callback called at any input speech event</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts the Vocon recognition engine.
            </summary>
            <param name="iGrammar">The grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String,System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConStatus},System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts the Vocon recognition engine.
            </summary>
            <param name="iGrammar">The grammar that will be used.</param>
            <param name="iOnEndListening">Callback called at the end of the request</param>
            <param name="iOnListeningEvent">Callback called at any input speech event</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String[],System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts the Vocon recognition engine.
            </summary>
            <param name="iGrammars">The grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String[],System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConStatus},System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Starts the Vocon recognition engine.
            </summary>
            <param name="iGrammars">The grammar that will be used.</param>
            <param name="iOnEndListening">Callback called at the end of the request</param>
            <param name="iOnListeningEvent">Callback called at any input speech event</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
            <param name="iTimeOut">Tolerated silence time in seconds before a timeout is throw.</param>
            <param name="iLeadingSilenceTimeOut">Tolerated silence time in seconds before detected speech.</param>
            <param name="iTrailingSilenceTimeOut">Tolerated silence time in seconds at end of speech.</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Stop">
            <summary>
            Stop the current request.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Compile(System.String)">
            <summary>
            Compile the grammar txt or bnf into a bin file. Output file will be at the same location of the input txt or bnf file.
            </summary>
            <param name="iGrammar">The grammar to compile</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Compile(System.String[])">
            <summary>
            Compile the grammar txt or bnf into a bin file. Output file will be at the same location of the input txt or bnf file.
            </summary>
            <param name="iGrammars">The grammar to compile</param>
        </member>
        <member name="P:BlueQuark.Internal.EmbeddedVoConSpeechULink.OutputFilePath">
            <summary>
            Sets the OutputFilePath.
            Note : The OutputFilePath is passed to VoCon after an initASR.
            </summary>
            <seealso cref="P:BlueQuark.Internal.EmbeddedVoConSpeechULink.Language"/>
        </member>
        <member name="T:BlueQuark.Internal.WindowsVoConSpeechULink">
            <summary>
            WIP : fake timer
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VoConStatus">
            <summary>
            All the possible audio events that can be detected by Vocon.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.BEGINNING_OF_SPEECH">
            <summary>
            User started to speak.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.MAYBE_SPEECH">
            <summary>
            Could be the beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.NO_SPEECH">
            <summary>
            The previously sent MAYBE_SPEECH event did not lead
            to and actual beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.TIME_OUT">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.TRAILING_SILENCE">
            <summary>
            A trailing silence was detected.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.BAD_SIGNAL_NOISE_RATIO">
            <summary>
            The signal to noise ratio is too low.
            This event is generated if at the end of an utterance
            the signal/noise ratio remains below 12dB.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.OVERLOAD">
            <summary>
            The speech level is too loud.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.TOO_QUIET">
            <summary>
            The speech level is too weak.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.NO_SIGNAL">
            <summary>
            No or very low input signal.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.POOR_MIC">
            <summary>
            This could mean that the microphone or the audio hardware is of poor quality. 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.NO_LEADING_SILENCE">
            <summary>
            The recording apparantly does not start with leading silence.
            Possibly the speaker started speaking too soon,
            but because this detection is only energy based,
            other noise events at the start of the utterance may also trigger this condition.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.Confidence">
            <summary>
            The confidence level of the result. Values are between 1 (low confidence) and 9999 (high confidence).
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.Utterance">
            <summary>
            The text of the result from the recognition process.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.StartRule">
            <summary>
            The name of the 'start rule' which produced the result. The format is 'grammarName#startRuleName'.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TextToSpeech">
            <summary>
            Text to speech allows you to make Buddy talks an input System.String.
            The Windows version uses SAPI, the Android version uses VoiceText by ReadSpeeaker/VoiceWare.
            So, available methods have not the same behaviour on different devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.IsBusy">
            <summary>
            Returns true if a request is currently processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.OnEndSpeaking">
            <summary>
            Called at the end of any output speech.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Language">
            <summary>
            Output language of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Voice">
            <summary>
            Output vocie of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Pitch">
            <summary>
            Sets the pitch. From 0 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Speed">
            <summary>
            Sets the speech rate. From 0 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.Stop">
            <summary>
            Stop the current output speech.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.Say(System.String,System.Action{System.Boolean})">
            <summary>
            Makes the robot speak the input utterance.
            </summary>
            <param name="iUtterance">The text to say</param>
            <param name="iOnEnSpeaking">callback called on end of output speech</param>
        </member>
        <member name="M:BlueQuark.Internal.RESTMemoryStream.ToArray">
            <summary>
            Returns the entire content of the stream as a byte array. This is not safe because the call to new byte[] may 
            fail if the stream is large enough. Where possible use methods which operate on streams directly instead.
            </summary>
            <returns>A byte[] containing the current data in the stream</returns>
        </member>
        <member name="M:BlueQuark.Internal.RESTMemoryStream.ReadFrom(System.IO.Stream,System.Int64)">
            <summary>
            Reads length bytes from source into the this instance at the current position.
            </summary>
            <param name="iStream">The stream containing the data to copy</param>
            <param name="iLength">The number of bytes to copy</param>
        </member>
        <member name="M:BlueQuark.Internal.RESTMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire stream into destination, regardless of Position, which remains unchanged.
            </summary>
            <param name="iStream">The stream to write the content of this stream to</param>
        </member>
        <member name="T:BlueQuark.TaskOwner">
            <summary>
            Represents any OS component or App behaviour that is using an OS component.
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Type">
            <summary>
            Type of the user component (the owner).
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Parameter">
            <summary>
            Optional parameter of the called method.
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Name">
            <summary>
            Simplified name of the user component (the owner).
            </summary>
        </member>
        <member name="T:BlueQuark.PIDParameters">
            <summary>
            Represents a Proportional Integral Derivative regulation.
            </summary>
        </member>
        <member name="P:BlueQuark.PIDParameters.Kp">
            <summary>
            Term P is proportional to the current value of the SP − PV error e(t).
            </summary>
        </member>
        <member name="P:BlueQuark.PIDParameters.Ki">
            <summary>
            Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.
            </summary>
        </member>
        <member name="P:BlueQuark.PIDParameters.Kd">
            <summary>
            Term D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.
            </summary>
        </member>
        <member name="M:BlueQuark.PIDParameters.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:BlueQuark.Accessories">
            <summary>
            Accessories give control to lateral actuators.
            </summary>
        </member>
        <member name="T:BlueQuark.FanMode">
            <summary>
            Fan working mode.
            </summary>
        </member>
        <member name="F:BlueQuark.FanMode.OFF">
            <summary>
            Fan off
            </summary>
        </member>
        <member name="F:BlueQuark.FanMode.ON">
            <summary>
            Fan on
            </summary>
        </member>
        <member name="F:BlueQuark.FanMode.AUTO">
            <summary>
            Auto regulation on temperature
            </summary>
        </member>
        <member name="T:BlueQuark.Head">
            <summary>
            Head gives control to Yes and No head hinges.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.HIGH_SPEED">
            <summary>
            High speed for head movement in degrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.NORMAL_SPEED">
            <summary>
            Normal speed for head movement in degrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.LOW_SPEED">
            <summary>
            Low speed for head movement in degrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.DEFAULT_ANG_VELOCITY">
            <summary>
            Default speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Head.IsBusy">
            <summary>
            Returns true if any head hinge is moving.
            </summary>
        </member>
        <member name="P:BlueQuark.Head.Yes">
            <summary>
            The Yes (pitch) hinge of the robot's head.
            </summary>
        </member>
        <member name="P:BlueQuark.Head.No">
            <summary>
            The No (Yaw) hinge of the robot's head.
            </summary>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single)">
            <summary>
            Makes the head targets the wished position. 
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + left, - right.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single,System.Action{System.Single,System.Single})">
            <summary>
            Makes the head targets the wished position. 
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + left, - right.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single,System.Single)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + up, - down.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + up, - down.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
            <param name="iAccDecMode">Accelration mode.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single,System.Single,BlueQuark.AccDecMode,System.Action{System.Single,System.Single})">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + up, - down.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
            <param name="iAccDecMode">Accelration mode.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition,System.Action{System.Single,System.Single})">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition,System.Single)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
            <param name="iAccDecMode">Accelration mode.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition,System.Single,BlueQuark.AccDecMode,System.Action{System.Single,System.Single})">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
            <param name="iAccDecMode">Accelration mode.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.Head.ResetPosition">
            <summary>
            Resets both hinges position to the original Buddy's position.
            </summary>
        </member>
        <member name="M:BlueQuark.Head.ResetPosition(System.Action{System.Single,System.Single})">
            <summary>
            Resets both hinges position to the original Buddy's position.
            </summary>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.Head.Stop">
            <summary>
            Stops any running hinge command.
            </summary>
        </member>
        <member name="M:BlueQuark.Head.SetZeroPosition">
            <summary>
            Set the current yes/no position as the new absolute zero position.
            </summary>
        </member>
        <member name="T:BlueQuark.NoHeadHinge">
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe).
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.MAX_LEFT_ANGLE">
            <summary>
            Max reachable angle for this hinge. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.MAX_RIGHT_ANGLE">
            <summary>
            Min reachable angle for this hinge. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.DEFAULT_ANGLE">
            <summary>
            Default hinge angle. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.MAX_ANG_VELOCITY">
            <summary>
            Max reachable speed for this hinge. Value in degrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.DEFAULT_ANG_VELOCITY">
            <summary>
            Default speed for this hinge. Value in degrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.DEFAULT_TOLERANCE">
            <summary>
            Default Tolerance allowed during control. Value in degrees.
            </summary>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single)">
            <summary>
            Requests to move the hinge to the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target, In range of [-100, 100] degrees.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Action{System.Single})">
            <summary>
            Requests to move the hinge to the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target, In range of [-100, 100] degrees.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Requests to move the hinge to the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. In range of [-100, 100] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single,System.Action{System.Single})">
            <summary>
            Requests to move the hinge to the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. In range of [-100, 100] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Requests to move the hinge to the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. In range of [-100, 100] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode,System.Action{System.Single})">
            <summary>
            Requests to move the hinge to the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. In range of [-100, 100] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.ResetPosition">
            <summary>
            Resets the hinge position to DEFAULT_ANGLE.
            </summary>
            <seealso cref="F:BlueQuark.NoHeadHinge.DEFAULT_ANGLE"/>>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.ResetPosition(System.Action{System.Single})">
            <summary>
            Resets the hinge position to DEFAULT_ANGLE.
            </summary>
            <seealso cref="F:BlueQuark.NoHeadHinge.DEFAULT_ANGLE"/>>
        </member>
        <member name="T:BlueQuark.YesHeadHinge">
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe).
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.MAX_UP_ANGLE">
            <summary>
            Max reachable angle for this hinge in up position. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.MAX_DOWN_ANGLE">
            <summary>
            Max reachable angle for this hinge in down position. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.DEFAULT_ANGLE">
            <summary>
            Default hinge angle. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.MAX_ANG_VELOCITY">
            <summary>
            Max reachable speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.DEFAULT_ANG_VELOCITY">
            <summary>
            Default speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.DEFAULT_TOLERANCE">
            <summary>
            Default tolerance allowed during control. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.YesHeadHinge.OnEmergencyStop">
            <summary>
            Callback called when an emergency stop occured. It can happen when an obstacle is detected between the neck and the heart of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.YesHeadHinge.OnEndEmergencyStop">
            <summary>
            Callback called when an emergency stop is over.
            </summary>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Action{System.Single})">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single,System.Action{System.Single})">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode,System.Action{System.Single})">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
            <param name="iOnEndMove">Callback called at the end of the move.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.ResetPosition">
            <summary>
            Resets the hinge position to DEFAULT_ANGLE.
            </summary>
            <seealso cref="F:BlueQuark.YesHeadHinge.DEFAULT_ANGLE"/>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.ResetPosition(System.Action{System.Single})">
            <summary>
            Resets the hinge position to DEFAULT_ANGLE.
            </summary>
            <seealso cref="F:BlueQuark.YesHeadHinge.DEFAULT_ANGLE"/>>
        </member>
        <member name="T:BlueQuark.AccDecMode">
            <summary>
            Acceleration and deceleration mode for motor slaving.
            </summary>
        </member>
        <member name="F:BlueQuark.AccDecMode.NORMAL">
            <summary>
            Normal speed mode.
            </summary>
        </member>
        <member name="F:BlueQuark.AccDecMode.SMOOTH">
            <summary>
            Smooth speed mode.
            </summary>
        </member>
        <member name="F:BlueQuark.AccDecMode.HIGH">
            <summary>
            Max speed mode.
            </summary>
        </member>
        <member name="T:BlueQuark.Fan">
            <summary>
            Head fan control component for air cooling.
            </summary>
        </member>
        <member name="F:BlueQuark.Fan.DEFAULT_LOW_TEMPERATURE">
            <summary>
            The default low temperature value in degrees Celsius.
            </summary>
        </member>
        <member name="F:BlueQuark.Fan.DEFAULT_HIGH_TEMPERATURE">
            <summary>
            The default high temperature value in degrees Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.Fan.LowTemperature">
            <summary>
            The fan will stop when the low temperature is reached. From 0 to 255 degrees Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.Fan.HighTemperature">
            <summary>
            The fan will start when the high temperature is reached. . From 0 to 255 degrees Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.Fan.Mode">
            <summary>
            The operating mode of the fan (on, off, auto).
            </summary>
        </member>
        <member name="P:BlueQuark.Fan.IsBusy">
            <summary>
            If the fan is working.
            </summary>
        </member>
        <member name="M:BlueQuark.Fan.SetMode(BlueQuark.FanMode)">
            <summary>
            Sets the fan mode.
            </summary>
        </member>
        <member name="M:BlueQuark.Fan.Stop">
            <summary>
            Stops the fan.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDEvent">
            <summary>
            System event that can be show up as a LED behaviour.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.IDLE">
            <summary>
            Normal and common state.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.BATTERY_CHARGING">
            <summary>
            Battery is loading and WWR is off.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.BATTERY_FULLY_CHARGED">
            <summary>
            Battery fully loaded and WWR is off.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.BATTERY_VERY_LOW">
            <summary>
            Battery at very low level.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.SYSTEM_BOOTING">
            <summary>
            System boot is processing.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.SYSTEM_BOOT_ERROR">
            <summary>
            An error occured on the Rainette or Hemise board.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.DEBUG_MODE">
            <summary>
            Debug mode is On.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.SYSTEM_BOOT_COMPLETE">
            <summary>
            System boot completed. Normal and common state.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.SYSTEM_SHUTDOWN">
            <summary>
            System shutdown, WWR shutdown in progress.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.SYSTEM_FATAL_ERROR">
            <summary>
            A fatal error occured.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.ACCESSORY_DETECTED">
            <summary>
            An accessory has been detected correctly.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDEvent.ACCESSORY_ERROR">
            <summary>
            An accessory error occured.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDColor">
            <summary>
            Color enumeration corresponding to the mood of the robot.
            Can be easily combined with the Face. SetMood(FaceMood) component.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.RED_ANGRY">
            <summary>
            Sets the LED color to red.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PURPLE_GRUMPY">
            <summary>
            Sets the LED color to soft purple.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.ORANGE_HAPPY">
            <summary>
            Sets the LED color to orange.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREEN_LISTENING">
            <summary>
            Sets the LED color to soft white.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BLUE_NEUTRAL">
            <summary>
            Sets the LED color to soft blue.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PINK_SAD">
            <summary>
            Sets the LED color to hard purple.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BROWN_SCARED">
            <summary>
            Sets the LED color to hard orange.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.YELLOW_SICK">
            <summary>
            Sets the LED color to soft green.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.YELLOW_SURPRISED">
            <summary>
            Sets the LED color to hard yellow.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREEN_THINKING">
            <summary>
            Sets the LED color to green.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREY_TIRED">
            <summary>
            Sets the LED color to grey.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PINK_LOVE">
            <summary>
            Sets the LED color to pink.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREEN_HEARING">
            <summary>
            Sets the LED color to intense white.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDPulsePattern">
            <summary>
            Represents different LED blinking patterns that Buddy can display.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.BASIC_BLINK">
            <summary>
            Basic blink.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.HEART_BEAT">
            <summary>
            Heart Beat.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.BREATHING">
            <summary>
            Breathing impression.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.DYNAMIC">
            <summary>
            Dynamic behaviour.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.LISTENING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.PEACEFUL">
            <summary>
            Peaceful.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.RECHARGE">
            <summary>
            Battery charging.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.DEFAULT">
            <summary>
            Default light behaviour.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.NOBLINK">
            <summary>
            No blinking light behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.MediaChannel">
            <summary>
            Sound channel for music purposes.
            </summary>
        </member>
        <member name="T:BlueQuark.ASoundChannel`2">
            <summary>
            Channel for sound output.
            </summary>
            <typeparam name="U">ULink type.</typeparam>
            <typeparam name="M">Metric type.</typeparam>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.IsBusy">
            <summary>
            Returns True if a any sound is currently played from any speaker.  
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Status">
            <summary>
            Status of the Speaker.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Pitch">
            <summary>
            The pitch of the audio source.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Time">
            <summary>
            Playback position in seconds.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Mute">
            <summary>
            Tells if the audiosource is muted or not.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Repeat">
            <summary>
            Specifies if the channel must repeat the current audio source.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Volume">
            <summary>
            Volume of this channel. Range between 0 and 1.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Play(BlueQuark.SoundSample)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="iSound">The already loaded sound to play.</param>
            <seealso cref="T:BlueQuark.SoundSample"/>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Play(BlueQuark.SoundSample,System.Single)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="iSound">The already loaded sound to play.</param>
            <param name="iVolume">Volume between 0 and 1.</param>
            <seealso cref="T:BlueQuark.SoundSample"/>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Play(UnityEngine.AudioClip)">
            <summary>
            Plays the specified sound.
            </summary>
            <param name="iClip">The audioclip to play. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Play(UnityEngine.AudioClip,System.Single)">
            <summary>
            Plays the specified sound.
            </summary>
            <param name="iClip">The audioclip to play. Cannot be null.</param>
            <param name="iVolume">Volume between 0 and 1.</param>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Pause">
            <summary>
            Pauses the audio clip.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Resume">
            <summary>
            If paused, resumes the active audio clip.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Stop">
            <summary>
            Stops playing the current audio clip.
            </summary>
        </member>
        <member name="T:BlueQuark.EffectChannel">
            <summary>
            The Sound channel for UI or miscellaneous sounds.
            </summary>
        </member>
        <member name="T:BlueQuark.VocalChannel">
            <summary>
            Sound channel for vocal purposes.
            </summary>
        </member>
        <member name="T:BlueQuark.SoundSample">
            <summary>
            Kind of sound that Buddy can natively handle for voice acting.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.CURIOUS_1">
            <summary>
            Curious sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.CURIOUS_2">
            <summary>
            Curious sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.FOCUS_1">
            <summary>
            Focus sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.FOCUS_2">
            <summary>
            Focus sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_1">
            <summary>
            Laugh sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_2">
            <summary>
            Laugh sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_3">
            <summary>
            Laugh sound 3.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_4">
            <summary>
            Laugh sound 4.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_5">
            <summary>
            Laugh sound 5.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SIGH">
            <summary>
            Sigh sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_1">
            <summary>
            Surprised sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_2">
            <summary>
            Surprised sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_3">
            <summary>
            Surprised sound 3.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_4">
            <summary>
            Surprised sound 4.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_5">
            <summary>
            Surprised sound 5.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_6">
            <summary>
            Surprised sound 6.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.YAWN">
            <summary>
            Yawn sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_CURIOUS">
            <summary>
            Random curious sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_LAUGH">
            <summary>
            Random laugh sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_SURPRISED">
            <summary>
            Random surprised sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_1">
            <summary>
            Deep beep.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_2">
            <summary>
            High beep.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_3">
            <summary>
            Beep beep.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_4">
            <summary>
            Small beep.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_SONG">
            <summary>
            Random song accapella.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SONG_1">
            <summary>
            accapella song.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SONG_2">
            <summary>
            accapella song.
            </summary>
        </member>
        <member name="T:BlueQuark.ChannelStatus">
            <summary>
            Status of the channel.
            </summary>
        </member>
        <member name="F:BlueQuark.ChannelStatus.PLAYING">
            <summary>
            A sound is currently playing.
            </summary>
        </member>
        <member name="F:BlueQuark.ChannelStatus.PAUSED">
            <summary>
            A sound is currently paused.
            </summary>
        </member>
        <member name="F:BlueQuark.ChannelStatus.STOPPED">
            <summary>
            No sound is playing.
            </summary>
        </member>
        <member name="T:BlueQuark.AudioGain">
            <summary>
            Gain of the output amplifier.
            </summary>
        </member>
        <member name="F:BlueQuark.AudioGain.HIGH">
            <summary>
            36 dB.
            </summary>
        </member>
        <member name="F:BlueQuark.AudioGain.MEDIUM">
            <summary>
            32 dB.
            </summary>
        </member>
        <member name="F:BlueQuark.AudioGain.LOW">
            <summary>
            20 dB.
            </summary>
        </member>
        <member name="P:BlueQuark.RelativeOdometry.Landmark">
            <summary>
            Landmark value of the object.
            </summary>
        </member>
        <member name="P:BlueQuark.RelativeOdometry.Value">
            <summary>
            Odometry value relative to the landmark.
            </summary>
        </member>
        <member name="T:BlueQuark.FacialPart">
            <summary>
            Represents a part of the buddy face.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.SKIN">
            <summary>
            Skin.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.MOUTH">
            <summary>
            Mouth.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.RIGHT_EYE">
            <summary>
            Right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.LEFT_EYE">
            <summary>
            Left eye.
            </summary>
        </member>
        <member name="T:BlueQuark.BehaviourInterpreter">
            <summary>
            Interpretes and run Behaviour Algorithms which contains sequential or parallel instructions to play robot behaviours.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.IsBusy">
            <summary>
            Returns true if an algorithm is running.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.CurrentBehaviourAlgorithmFilename">
            <summary>
            Gets the filename of the currently running behaviour algorithm. 
            Returns Null if no BA is running. Returns "PBAO" (provided behavour algorithm object) if BA was not provided from file.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.LocalBehaviourAlgorithmCategories">
            <summary>
            Gets all findable categories (in lower case) of local algorithms.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.LocalBehaviourAlgorithms">
            <summary>
            Gets the Behaviour algorithms file name (in lower case and without extension) provided by the system.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take into account the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[])">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File containing the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[])">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(System.String)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iCategory">Dynamic category of the algorithm to play.</param>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(System.String,BlueQuark.BehaviourMovementPattern)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iCategory">Dynamic category of the algorithm to play.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(System.String,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iCategory">Dynamic category of the algorithm to play.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local</param>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(System.String,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iCategory">Dynamic category of the algorithm to play.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(System.String,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iCategory">Dynamic category of the algorithm to play.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (present in the Raw/BML/ and Raw/BA/ directories) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Stop">
            <summary>
            Stops the running algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.StopAndClear">
            <summary>
            Stops the running algorithm and empty the algorithm queue.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunSub(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="T:BlueQuark.BehaviourCommitment">
            <summary>
            Represents the robot human interaction engagement.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.HUMAN_PRESENCE">
            <summary>
            A human is present.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.HUMAN_ENGAGED">
            <summary>
            A human is engaging the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.ENGAGED">
            <summary>
            The robot is engaging a human.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.INTERACTING">
            <summary>
            All parts are currently in interaction. 
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.NOT_ENGAGED">
            <summary>
            The robot is considered as not engaged.
            </summary>
        </member>
        <member name="T:BlueQuark.BehaviourMovementPattern">
            <summary>
            Represents a kind of motion.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.EYES">
            <summary>
            Eyes movement only.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.NO_AXE_HEAD">
            <summary>
            No head hinge motion only.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.YES_AXE_HEAD">
            <summary>
            Yes head hinge motion only.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.HEAD">
            <summary>
            Head motion only.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.BODY_ROTATION">
            <summary>
            Wheels rotation only (Theta angle).
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.BODY_LOCAL_DISPLACEMENT">
            <summary>
            Limited area wheels motion (X, Y, Theta).
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.BODY_DISPLACEMENT">
            <summary>
            Full wheels motion (X, Y, Theta) without limit.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.LEFT_ACCESSORY">
            <summary>
            Left robot's lateral arm.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.RIGHT_ACCESSORY">
            <summary>
            Right robot's lateral arm.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.ACCESSORIES">
            <summary>
            Robot's lateral arms.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.COMPLETE_FREEDOM">
            <summary>
            Full motion : eyes, head, arms and wheels (X, Y Theta).
            </summary>
        </member>
        <member name="T:BlueQuark.ABehaviourStructure">
            <summary>
            Base class for Behaviour Instruction and Algorithm. A structure is executed by the BehaviourInterpreter.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourStructure.IsBusy">
            <summary>
            Returns true if the current structure is currently executed.
            </summary>
        </member>
        <member name="M:BlueQuark.ABehaviourStructure.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Visitor design pattern method. Use it to pass through the structure with the ISimpleBehaviourStructureVisitor.
            </summary>
            <param name="iVisitor">The visitor to visit.</param>
            <seealso cref="T:BlueQuark.ISimpleBehaviourStructureVisitor"/>
        </member>
        <member name="M:BlueQuark.ABehaviourStructure.CheckIfIsBusy``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Check if any instruction, including this, is busy.
            </summary>
            <typeparam name="T">Behaviour instruction.</typeparam>
            <param name="iCollection">Array of behaviour instruction. Typically sub instructions.</param>
            <returns>True if any of instruction is busy.</returns>
        </member>
        <member name="T:BlueQuark.AConditionBehaviourInstruction">
            <summary>
            Base class for condition behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.IfConditionBehaviourInstruction"/>
            <seealso cref="T:BlueQuark.ElseConditionBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.AConditionBehaviourInstruction.ConstComparedValue">
            <summary>
            A const value to compare if ComparedVariable and SecondComparedVariable do not 
            correspond to each over or if any of these value is not set.
            </summary>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction.ComparedVariable"/>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction.SecondComparedVariable"/>
        </member>
        <member name="P:BlueQuark.AConditionBehaviourInstruction.ComparedVariable">
            <summary>
            First variable to compare.
            </summary>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction.SecondComparedVariable"/>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction.ConstComparedValue"/>
        </member>
        <member name="P:BlueQuark.AConditionBehaviourInstruction.SecondComparedVariable">
            <summary>
            Second variable to compare.
            </summary>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction.ComparedVariable"/>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction.ConstComparedValue"/>
        </member>
        <member name="M:BlueQuark.AConditionBehaviourInstruction.#ctor">
            <summary>
            Creates a base condition (behaviour) instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.SynchronizedBlockBehaviourInstruction">
            <summary> 
            The 'synchronized' block (behaviour) instruction
            </summary>
        </member>
        <member name="M:BlueQuark.SynchronizedBlockBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.LookAtBehaviourInstruction">
            <summary>
            Represents a Look At behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.LookAtBehaviourInstruction.Position">
            <summary>
            Represents the position to look at.
            </summary>
        </member>
        <member name="P:BlueQuark.LookAtBehaviourInstruction.Smooth">
            <summary>
            Represents if the movement is smooth.
            </summary>
        </member>
        <member name="M:BlueQuark.LookAtBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.LookAtBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.PlayFacialEventBehaviourInstruction">
            <summary>
            Represents a behaviour instruction to play a facial event on the robot face.
            </summary>
        </member>
        <member name="P:BlueQuark.PlayFacialEventBehaviourInstruction.FacialEvent">
            <summary>
            The facial event to play.
            </summary>
        </member>
        <member name="M:BlueQuark.PlayFacialEventBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.PlayFacialEventBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.AUserInputBehaviourInstruction">
            <summary>
            Abstract class to any waiting-user-statement-instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.NoiseInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified amount of sound is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseInputBehaviourInstruction.Threshold">
            <summary>
            Threshold in dB.
            </summary>
        </member>
        <member name="M:BlueQuark.NoiseInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.NoiseInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ElseConditionBehaviourInstruction">
            <summary>
            The 'else' (behaviour) instruction
            </summary>
            <seealso cref="T:BlueQuark.AControlBehaviourInstruction"/>
            <seealso cref="!:IfConditionBehaviourInstruction&lt;T&gt;"/>
        </member>
        <member name="M:BlueQuark.ElseConditionBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.IfConditionBehaviourInstruction">
            <summary>
            The 'if' (behaviour) instruction.
            </summary>
            <typeparam name="T">The type of the value to compare.</typeparam>
            <seealso cref="T:BlueQuark.AConditionBehaviourInstruction"/>
            <seealso cref="T:BlueQuark.AControlBehaviourInstruction"/>
            <seealso cref="T:BlueQuark.ElseConditionBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.IfConditionBehaviourInstruction.Else">
            <summary>
            The else condition behaviour instruction. 
            </summary>
        </member>
        <member name="M:BlueQuark.IfConditionBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.MoveBodyInputBehaviourInstruction">
            <summary>
            WIP : Represents a get input statement instruction. The instruction will last until a robot's body movement is done.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveBodyInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.MoveHeadInputBehaviourInstruction">
            <summary>
            WIP : Represents a get input statement instruction. The instruction will last until a robot's body movement is done.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadInputBehaviourInstruction.AnyPosition">
            <summary>
            If true, any force motion will end the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadInputBehaviourInstruction.ConditionalPositions">
            <summary>
            Needed motion to end with the statement (BlueQuark.GazePosition enum).
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadInputBehaviourInstruction.PositionResultLocalVariableName">
            <summary>
            Output variable name to store the first detected april tag.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveHeadInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveHeadInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ColorInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified color is shown.
            </summary>
        </member>
        <member name="P:BlueQuark.ColorInputBehaviourInstruction.ConditionalColors">
            <summary>
            Needed colors to end with the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.ColorInputBehaviourInstruction.ColorResultLocalVariableName">
            <summary>
            Output variable name of first detected color.
            </summary>
        </member>
        <member name="M:BlueQuark.ColorInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.ColorInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.AprilTagInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified april tag is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagInputBehaviourInstruction.AnyContent">
            <summary>
            If true, any input april tag will end the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagInputBehaviourInstruction.ConditionalContents">
            <summary>
            Needed tags to end with the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagInputBehaviourInstruction.ContentResultLocalVariableName">
            <summary>
            Output variable name to store the first detected april tag.
            </summary>
        </member>
        <member name="M:BlueQuark.AprilTagInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.AprilTagInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.QRCodeInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified QRCode is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeInputBehaviourInstruction.AnyContent">
            <summary>
            If true, any input QRCode will end the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeInputBehaviourInstruction.ConditionalContents">
            <summary>
            Needed tags to end with the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeInputBehaviourInstruction.ContentResultLocalVariableName">
            <summary>
            Output variable name to store the first detected QRCode.
            </summary>
        </member>
        <member name="M:BlueQuark.QRCodeInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.QRCodeInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.FaceInteractionInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified face part of the robot is touched.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceInteractionInputBehaviourInstruction.AnyPart">
            <summary>
            If true, any touched facial part will end the statement.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceInteractionInputBehaviourInstruction.ConditionalParts">
            <summary>
            Needed facial part to be touched to end with the statement (BlueQuark.FacialPart enum)
            </summary>
        </member>
        <member name="P:BlueQuark.FaceInteractionInputBehaviourInstruction.PartResultLocalVariableName">
            <summary>
            Output variable name to store the first touched part.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceInteractionInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceInteractionInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ListenInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified utterance is get by the STT.
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.ConditionalRules">
            <summary>
            Optional grammar rules to be triggered to end this statement.
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.Mode">
            <summary>
            Speech recognition mode of the instruction (BlueQuark.SpeechRecognitionMode enum).
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.ConditionalUtterances">
            <summary>
            Optional utterances to be triggered to end this statement.
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.Credentials">
            <summary>
            Optional credentials (Mode into FREESPEED_ONLY or GRAMMAR_THEN_FREESPEECH).
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.Grammars">
            <summary>
            Optional grammars (Mode into GRAMMAR_ONLY or GRAMMAR_THEN_FREESPEECH).
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.RuleResultLocalVariableName">
            <summary>
            Output variable name to store the first good matching rule.
            </summary>
        </member>
        <member name="P:BlueQuark.ListenInputBehaviourInstruction.UtteranceResultLocalVariableName">
            <summary>
            Output variable name to store the first good matching utterance.
            </summary>
        </member>
        <member name="M:BlueQuark.ListenInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.ListenInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.MotionInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a movement is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionInputBehaviourInstruction.Threshold">
            <summary>
            Threshold from 0 to 10 for motion detection. The smaller, the more sensible.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionInputBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ForLoopBehaviourInstruction">
            <summary>
            The 'for' loop (behaviour) instruction
            </summary>
        </member>
        <member name="P:BlueQuark.ForLoopBehaviourInstruction.Iterations">
            <summary>
            Represents the iteration of the for loop.
            </summary>
        </member>
        <member name="M:BlueQuark.ForLoopBehaviourInstruction.#ctor">
            <summary>
            Create a base for loop object.
            </summary>
        </member>
        <member name="M:BlueQuark.ForLoopBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor"></param>
        </member>
        <member name="T:BlueQuark.InfinitLoopBehaviourInstruction">
            <summary>
            The 'infinite loop' (behaviour) instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.InfinitLoopBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.IDurableBehaviourInstruction">
            <summary>
            Represents a durable behaviour instruction interface.
            </summary>
        </member>
        <member name="P:BlueQuark.IDurableBehaviourInstruction.Duration">
            <summary>
            Represents the duration.
            </summary>
        </member>
        <member name="T:BlueQuark.MoveHeadBehaviourInstruction">
            <summary>
            Represents a move head behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.Position">
            <summary>
            Represents the target position.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.CustomMove">
            <summary>
            Must be set to true if the movement is custom.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.YesAngle">
            <summary>
            Represents the yes (axe) angle. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.YesAngleMargin">
            <summary>
            Represents the yes (axe) angle margin. 0 by default. If different, set angle will be YesAngle +/- YesAngleMargin. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.NoAngle">
            <summary>
            Represents the no (axe) angle. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.NoAngleMargin">
            <summary>
            Represents the no (axe) angle margin. 0 by default. If different, set angle will be NoAngle +/- NoAngleMargin. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.YesSpeed">
            <summary>
            Represents the yes (axe) speed. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.YesSpeedMargin">
            <summary>
            Represents the yes (axe) speed margin.  0 by default. If different, set speed will be YesSpeed +/- YesSpeedMargin. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.NoSpeed">
            <summary>
            Represents the no (axe) speed. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.NoSpeedMargin">
            <summary>
            Represents the no (axe) speed margin.  0 by default. If different, set speed will be NoSpeed +/- NoSpeedMargin. Value in degrees per second.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveHeadBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveHeadBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.MoveBodyBehaviourInstruction">
            <summary>
            Represents a move body behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.Angle">
            <summary>
            Represents the angle of the movement, value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.AngleMargin">
            <summary>
            Represents the angle margin of the movement. 0 by default. No effect if Angle == 0.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.Speed">
            <summary>
            Represents the speed of the movement (in degrees/second or meters/second).
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.SpeedMargin">
            <summary>
            Represents the speed margin of the movement. 0 by default. In degrees/second or meters/second.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.Distance">
            <summary>
            Represents the distance of the movement, value in meters.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.DistanceMargin">
            <summary>
            Represents the distance margin of the movement. 0 by default. No effect if Distance == 0.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveBodyBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveBodyBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.DisplayImageBehaviourInstruction">
            <summary>
            Displayable image (behaviour) instruction.
            </summary>
        </member>
        <member name="P:BlueQuark.DisplayImageBehaviourInstruction.Duration">
            <summary>
            Duration of the image display.
            </summary>
        </member>
        <member name="P:BlueQuark.DisplayImageBehaviourInstruction.FileName">
            <summary>
            Filename of the image to display. Used as Resources.GetSprite(FileName).
            </summary>
        </member>
        <member name="M:BlueQuark.DisplayImageBehaviourInstruction.#ctor">
            <summary>
            Creates a base display image (behaviour) instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.DisplayImageBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.SetLightBehaviourInstruction">
            <summary>
            Rerpresents a behaviour instruction to change the light of the robot's body.
            </summary>
        </member>
        <member name="P:BlueQuark.SetLightBehaviourInstruction.Color">
            <summary>
            LED color to set (BlueQuark.LEDColor enum).
            </summary>
        </member>
        <member name="P:BlueQuark.SetLightBehaviourInstruction.Duration">
            <summary>
            Duration in seconds of the color set.
            </summary>
        </member>
        <member name="M:BlueQuark.SetLightBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.SetLightBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.WaitBehaviourInstruction">
            <summary>
            Represents a wait instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.WaitBehaviourInstruction.Duration">
            <summary>
            Duration in second of the wait.
            </summary>
        </member>
        <member name="M:BlueQuark.WaitBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.WaitBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.SayBehaviourInstruction">
            <summary>
            Represents a behaviour instruction to make the robot speak.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:BlueQuark.SayBehaviourInstruction.Key" -->
        <member name="P:BlueQuark.SayBehaviourInstruction.Utterance">
            <summary>
            Litteral utterance to say.
            </summary>
        </member>
        <member name="P:BlueQuark.SayBehaviourInstruction.Pitch">
            <summary>
            Pitch of the voice.
            </summary>
        </member>
        <member name="P:BlueQuark.SayBehaviourInstruction.Speed">
            <summary>
            Speed of the voice.
            </summary>
        </member>
        <member name="M:BlueQuark.SayBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.SayBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.PlaySoundBehaviourInstruction">
            <summary>
            Represents a behaviour instruction to play a sound.
            </summary>
        </member>
        <member name="P:BlueQuark.PlaySoundBehaviourInstruction.FileName">
            <summary>
            If not null or empty, will search the filename into the Buddy.Resource.GetAudioClip(FileName).
            </summary>
        </member>
        <member name="P:BlueQuark.PlaySoundBehaviourInstruction.SoundSample">
            <summary>
            OS SoundSample (BlueQuark enum) to play.
            </summary>
        </member>
        <member name="M:BlueQuark.PlaySoundBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.PlaySoundBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.AJumpBehaviourInstruction">
            <summary>
            Abstract class of transfer instruction. Jump statements are used to transfer control from one point to another point in the program due to some specified code while executing the program.
            </summary>
        </member>
        <member name="T:BlueQuark.GoToBehaviourInstruction">
            <summary>
            The 'Go To' (behaviour) instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.GoToBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.BreakBehaviourInstruction">
            <summary> 
            The 'break' (behaviour) instruction
            </summary>
        </member>
        <member name="M:BlueQuark.BreakBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.BehaviourInstructionArgument`1">
            <summary>
            Represents a named variable for a specific instruction. 
            </summary>
            <typeparam name="T">Type of the data of the variable</typeparam>
        </member>
        <member name="P:BlueQuark.BehaviourInstructionArgument`1.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInstructionArgument`1.Value">
            <summary>
            Value of the variable.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInstructionArgument`1.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>String serialization.</returns>
        </member>
        <member name="T:BlueQuark.ABehaviourInstruction">
            <summary>
            Base class for behaviour instruction. Behaviour instruction is the atomic element for a any behaviour algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourInstruction.Parent">
            <summary>
            The block (condition or loop) parent of the current instruction. Null if not contained in a block.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourInstruction.IsBlocking">
            <summary>
            True if the instruction is a blocking instruction. The execution process will not wait for the end of a non blocking instruction.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourInstruction.IsRequired">
            <summary>
            If a required instruction failed, all the algorithm stops.
            </summary>
        </member>
        <member name="M:BlueQuark.ABehaviourInstruction.#ctor">
            <summary>
            Creates a base instruction object.
            </summary>
        </member>
        <member name="T:BlueQuark.AControlBehaviourInstruction">
            <summary>
            Base class for block instruction (condition or loop).
            </summary>
        </member>
        <member name="P:BlueQuark.AControlBehaviourInstruction.IsBusy">
            <summary>
            Returns true if the current structure is currently executed.
            </summary>
        </member>
        <member name="P:BlueQuark.AControlBehaviourInstruction.SubInstructions">
            <summary>
            Instructions contained in the block.
            </summary>
        </member>
        <member name="M:BlueQuark.AControlBehaviourInstruction.#ctor">
            <summary>
            Creates a new block instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalInputBehaviourInstruction">
            <summary>
            Represents a get input statement instruction. The instruction will last until a specified temperature is detected.
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalInputBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ALoopBehaviourInstruction">
            <summary>
            Base class for loop behaviour instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.InputBehaviourAlgorithmVariable">
            <summary>
            Represents an input named variable given to a Behaviour algorithm.
            </summary>
            <seealso cref="T:BlueQuark.Internal.ABehaviourAlgorithmVariable"/>
        </member>
        <member name="T:BlueQuark.AProcedureBehaviourInstruction">
            <summary>
            Base class for method call instruction.
            </summary>
        </member>
        <member name="P:BlueQuark.AProcedureBehaviourInstruction.Delay">
            <summary>
            The delay to wait before execute the instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.AProcedureBehaviourInstruction.#ctor">
            <summary>
            Creates a base procedure behaviour instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.SetMoodBehaviourInstruction">
            <summary>
            Represents a behaviour instruction to change the robot's mood.
            </summary>
        </member>
        <member name="P:BlueQuark.SetMoodBehaviourInstruction.Mood">
            <summary>
            The mood to set (BlueQuark.Mood enum).
            </summary>
        </member>
        <member name="P:BlueQuark.SetMoodBehaviourInstruction.Duration">
            <summary>
            Duration of the effect until the next instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.SetMoodBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.SetMoodBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.RunScriptBehaviourInstruction">
            <summary>
            Represents a behaviour instruction to run another Behaviour Algorithm contained into a file.
            </summary>
        </member>
        <member name="P:BlueQuark.RunScriptBehaviourInstruction.FileName">
            <summary>
            File name of the file containing the BehaviourAlgorithm to play.
            </summary>
        </member>
        <member name="P:BlueQuark.RunScriptBehaviourInstruction.Parameters">
            <summary>
            Optional variables to use as argument of the loaded behaviour algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.RunScriptBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.RunScriptBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor to visit (ie : process) the current (this) instruction (see Visitor design pattern).
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.BehaviourAlgorithm">
            <summary>
            Represents a set of (behaviour) intructions. Can be run asynchroneously by the BehaviourInterpreter.
            </summary>
            <seealso cref="T:BlueQuark.BehaviourInterpreter"/>>
        </member>
        <member name="P:BlueQuark.BehaviourAlgorithm.IsBusy">
            <summary>
            Returns true if the current structure is currently executed.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourAlgorithm.Instructions">
            <summary>
            Instructions of the algorithms. Some instructions can contains some sub instructions.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourAlgorithm.#ctor">
            <summary>
            Creates a new behaviour algorithm. Can be serialized for further usages.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourAlgorithm.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Visitor design pattern method. Use it to pass through the structure with the ISimpleBehaviourStructureVisitor.
            </summary>
            <param name="iVisitor">The visitor to visit.</param>
            <seealso cref="T:BlueQuark.ISimpleBehaviourStructureVisitor"/>>
        </member>
        <member name="P:BlueQuark.BehaviourAlgorithm.Name">
            <summary>
            Used only for runtime. Can be null, "PBAO" or filename.
            </summary>
        </member>
        <member name="T:BlueQuark.Behaviour">
            <summary>
            Module that contains all the interaction features (Mood, Face, Behaviour player).
            </summary>
        </member>
        <member name="F:BlueQuark.Behaviour.MIN_MOOD_DURATION">
            <summary>
            Minimal mood duration before any change.
            </summary>
        </member>
        <member name="F:BlueQuark.Behaviour.DEFAULT_MOOD">
            <summary>
            Default robot's mood.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.IsBusy">
            <summary>
            Tells whether a behaviour is playing or the mood is changing.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Face">
            <summary>
            Face of the robot (Eyes and mouth).
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Interpreter">
            <summary>
            Behaviour algorithm player.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Mood">
            <summary>
            The current robot's mood (face + LED color). The mood stays until the end of duration AND new mood request.
            </summary>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Boolean)">
            <summary>
            Sets the robot's mood (face + LED color). The mood stays until the end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Single,System.Boolean)">
            <summary>
            Sets the robot's mood (face + LED color). The mood stays until the end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iDuration">Duration in seconds of the mood before swap to the next queued mood. Stay if no next mood.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Action{BlueQuark.Mood},System.Boolean)">
            <summary>
            Sets the robot's mood. The mood stays until the end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iOnEndSwap">Callback called when the action is done.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Single,System.Action{BlueQuark.Mood},System.Boolean)">
            <summary>
            Sets the robot's mood. The mood stays until the end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iDuration">Duration in seconds of the mood before swap to the next queued mood. Stay if no next mood.</param>
            <param name="iOnEndSwap">Callback called when the action is done.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.ResetMood">
            <summary>
            Sets the default mood.
            </summary>
            <seealso cref="F:BlueQuark.Behaviour.DEFAULT_MOOD"/>
        </member>
        <member name="M:BlueQuark.Behaviour.Stop">
            <summary>
            Stops all currently running behaviours.
            </summary>
        </member>
        <member name="M:BlueQuark.Behaviour.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Face">
            <summary>
            Face of the robot. You can use this component to make Buddy smile or cry, depending of your needs.
            Some events are also available like blinking, swallowing, yawning...
            If you use the Text to Speech component, the robot face will automatically "talk".
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_X_GAZE_POSITION">
            <summary>
            Max value for x (horizontal) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_X_GAZE_POSITION">
            <summary>
            Min value for x (horizontal) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_X_GAZE_POSITION">
            <summary>
            Default x (horizontal) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_Y_GAZE_POSITION">
            <summary>
            Max value for y (vertical) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_Y_GAZE_POSITION">
            <summary>
            Min value for y (vertical) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_Y_GAZE_POSITION">
            <summary>
            Default y (vertical) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_FACE_DURATION">
            <summary>
            Minimal face duration before any change.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_FACIAL_EXPRESSION">
            <summary>
            Default facial expression.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_AROUSAL">
            <summary>
            Max value for face arousal.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_AROUSAL">
            <summary>
            Min value for face arousal.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_AROUSAL">
            <summary>
            Default face arousal value.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_PLEASURE">
            <summary>
            Max value for face pleasure.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_PLEASURE">
            <summary>
            Min value for face pleasure.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_PLEASURE">
            <summary>
            Default face pleasure value.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.IsBusy">
            <summary>
            Returns true if speaking or rolling eyes or changing expression
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchMouth">
            <summary>
            Set of callbacks called when mouth is clicked by the user.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchLeftEye">
            <summary>
            Set of callbacks called when left eye is clicked by the user.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchRightEye">
            <summary>
            Set of callbacks called when right eye is clicked by the user.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchSkin">
            <summary>
            Set of callbacks called when the skin is touched (ie : except mouth and eyes).
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouch">
            <summary>
            Set of callbacks called when the face is touched anywhere.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Texture">
            <summary>
            Texture of Buddy's face.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.GazeX">
            <summary>
            The current gaze X position of the face. From -1 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.GazeY">
            <summary>
            The current gaze Y position of the face. From -1 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.SetFacialExpression(BlueQuark.FacialExpression,System.Boolean)">
            <summary>
            Asks the face to switch to the specified mood.
            </summary>
            <param name="iFacialExpression">The name of the mood to switch to.</param>
            <param name="iEnqueue">If false, the queue will be clear and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Face.SetFacialExpression(BlueQuark.FacialExpression,System.Action{BlueQuark.FacialExpression},System.Boolean)">
            <summary>
            Asks the face to switch to the specified mood.
            </summary>
            <param name="iFacialExpression">The name of the mood to switch to.</param>
            <param name="iOnEndSwap">Callback called at the end of the swap.</param>
            <param name="iEnqueue">If false, the queue will be clear and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Face.ResetFacialExpression">
            <summary>
            Resets the facial expression.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent,System.Boolean)">
            <summary>
            Buddy will make a facial event.
            </summary>
            <param name="iFacialEvent">The mouth event.</param>
            <param name="iEnqueue">If false, the queue will be clear and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent,System.Action{BlueQuark.FacialEvent},System.Boolean)">
            <summary>
            Buddy will make a facial event.
            </summary>
            <param name="iFacialEvent">The mouth event.</param>
            <param name="iOnStartEvent">Callback called at the beginning of the event.</param>
            <param name="iEnqueue">If false, the queue will be clear and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent,System.Action{BlueQuark.FacialEvent},System.Action{BlueQuark.FacialEvent},System.Boolean)">
            <summary>
            Buddy will make a facial event.
            </summary>
            <param name="iFacialEvent">The mouth event.</param>
            <param name="iOnStartEvent">Callback called at the beginning of the event.</param>
            <param name="iOnEndEvent">Callback called at the end of the event.</param>
            <param name="iEnqueue">If false, the queue will be clear and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(System.Single,System.Single)">
            <summary>
            Looks at the specified location. Interrupts any other LookAtSmoothly process.
            </summary>
            <param name="iX">X coordinate, from -1 to 1.</param>
            <param name="iY">Y coordinate, from -1 to 1.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(System.Single,System.Single,System.Action{System.Single,System.Single})">
            <summary>
            Looks at the specified location. Interrupts any other LookAtSmoothly process.
            </summary>
            <param name="iX">X coordinate, from -1 to 1.</param>
            <param name="iY">Y coordinate, from -1 to 1.</param>
            <param name="iOnEndLookAt">Callback called at the end of the gaze changement.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(BlueQuark.GazePosition)">
            <summary>
            Shortcut to LookAt(X, Y) method. Interrupt any other LookAtSmoothly process.
            </summary>
            <param name="iLookAt">The location to look at.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(BlueQuark.GazePosition,System.Action{System.Single,System.Single})">
            <summary>
            Shortcut to LookAt(X, Y) method. Interrupt any other LookAtSmoothly process.
            </summary>
            <param name="iLookAt">The location to look at.</param>
            <param name="iOnEndLookAt">Callback called at the end of the gaze changement.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAt(System.Single,System.Single)">
            <summary>
            Looks at the specified location (bottom left => -1, -1).
            </summary>
            <param name="iX">X coordinate, from -1 to 1.</param>
            <param name="iY">Y coordinate, from -1 to 1.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAt(BlueQuark.GazePosition)">
            <summary>
            Shortcut to LookAt(X, Y) method.
            </summary>
            <param name="iLookAt">The location to look at.</param>
        </member>
        <member name="M:BlueQuark.Face.ResetLookAt">
            <summary>
            Resets the face gaze to the default position.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Arousal">
            <summary>
            Arousal of the face. From -1 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Pleasure">
            <summary>
            Pleasure of the face. From -1 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.SetLabialExpression(BlueQuark.LabialExpression)">
            <summary>
            Sets the labial expression of the robot until a new mood is set.
            </summary>
            <param name="iExpression">The expression to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetArousalSmoothly(System.Single)">
            <summary>
            Sets the face arousal. From -1 to 1. Interrupts any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iArousal">The value to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetArousalSmoothly(System.Single,System.Action{System.Single})">
            <summary>
            Sets the face arousal. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iArousal">The value to set.</param>
            <param name="iOnEndSwap">Callbak called on the end of the swap.</param>
        </member>
        <member name="M:BlueQuark.Face.SetPleasureSmoothly(System.Single)">
            <summary>
            Sets the face pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetPleasureSmoothly(System.Single,System.Action{System.Single})">
            <summary>
            Sets the face pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
            <param name="iOnEndSwap">Callback called on the end of the swap.</param>
        </member>
        <member name="M:BlueQuark.Face.SetInternalMoodSmoothly(System.Single,System.Single)">
            <summary>
            Sets both Arousal and Pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
            <param name="iArousal">The value to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetInternalMoodSmoothly(System.Single,System.Single,System.Action{System.Single,System.Single})">
            <summary>
            Sets both Arousal and Pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
            <param name="iArousal">The value to set.</param>
            <param name="iOnEndSwap">Callback called on the end of the swap.</param>
        </member>
        <member name="T:BlueQuark.TouchPart">
            <summary>
            Represents a part of the buddy face.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.SKIN">
            <summary>
            Skin.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.MOUTH">
            <summary>
            Mouth.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.RIGHT_EYE">
            <summary>
            Right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.LEFT_EYE">
            <summary>
            Left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.RIGHT_HEAD">
            <summary>
            Right head.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.LEFT_HEAD">
            <summary>
            Left head.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.BACK_HEAD">
            <summary>
            Left head.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.RIGHT_SHOULDER">
            <summary>
            Right shoulder.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.LEFT_SHOULDER">
            <summary>
            Left shoulder.
            </summary>
        </member>
        <member name="F:BlueQuark.TouchPart.HEART">
            <summary>
            Heart.
            </summary>
        </member>
        <member name="T:BlueQuark.FacialEvent">
            <summary>
            Possible Buddy facial expressions. Mouth and eye events.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SMILE">
            <summary>
            Makes the face smile.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.YAWN">
            <summary>
            Makes the face yawn.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SURPRISED">
            <summary>
            Makes the face scream like a cute barbarian.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_RIGHT_EYE">
            <summary>
            Makes the face blinking the right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_LEFT_EYE">
            <summary>
            Makes the face blinking the left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_EYES">
            <summary>
            Makes the face blinking both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.TEASE">
            <summary>
            Puts the tong out of the mouth.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SUSPICIOUS">
            <summary>
            Makes half blink of an eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.DOUBTFUL">
            <summary>
            Makes half blink of both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.WHAT">
            <summary>
            What ?
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.GROWLING">
            <summary>
            Like angry face expression, but different.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.WHISTLE">
            <summary>
            Makes the mouse whistle.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.CLOSE_EYES">
            <summary>
            Closes both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.OPEN_EYES">
            <summary>
            Opens both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.CLOSE_LEFT_EYE">
            <summary>
            Closes left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.OPEN_LEFT_EYE">
            <summary>
            Opens left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.CLOSE_RIGHT_EYE">
            <summary>
            Closes right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.OPEN_RIGHT_EYE">
            <summary>
            Opens right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.RELATIVE_EVENT">
            <summary>
            A relative event to some mood.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.FALL_ASLEEP">
            <summary>
            Asleep Buddy.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.AWAKE">
            <summary>
            Awakes the mighty Buddy.
            </summary>
        </member>
        <member name="T:BlueQuark.GazePosition">
            <summary>
            Shortcut enum for face LookAt(x, y) method.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.CENTER">
            <summary>
            Look at center.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP">
            <summary>
            Look at the top.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.LEFT">
            <summary>
            Look at the extreme left.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.RIGHT">
            <summary>
            Look at the extreme right.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM">
            <summary>
            Look at the bottom.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP_LEFT">
            <summary>
            Look at top left.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP_RIGHT">
            <summary>
            Look at top right.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM_RIGHT">
            <summary>
            Look at bottom rigth.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM_LEFT">
            <summary>
            Look at bottom left.
            </summary>
        </member>
        <member name="T:BlueQuark.LabialExpression">
            <summary>
            Represents different labial expressions that Buddy can show.
            </summary>
        </member>
        <member name="F:BlueQuark.LabialExpression.NEUTRAL">
            <summary>
            Neutral way to talk.
            </summary>
        </member>
        <member name="F:BlueQuark.LabialExpression.ANGRY">
            <summary>
            Angry way to talk.
            </summary>
        </member>
        <member name="F:BlueQuark.LabialExpression.HAPPY">
            <summary>
            Happy way to talk.
            </summary>
        </member>
        <member name="T:BlueQuark.FacialExpression">
            <summary>
            Represents an expression that Buddy can show through its face.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.NEUTRAL">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.ANGRY">
            <summary>
            Angry.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.GRUMPY">
            <summary>
            Grumpy.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.HAPPY">
            <summary>
            Happy.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.LISTENING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SAD">
            <summary>
            Sad.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SCARED">
            <summary>
            Scared.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SICK">
            <summary>
            Sick.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SURPRISED">
            <summary>
            Surprised.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.THINKING">
            <summary>
            Thinking.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.TIRED">
            <summary>
            Tired.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.LOVE">
            <summary>
            In love !
            </summary>
        </member>
        <member name="T:BlueQuark.Mood">
            <summary>
            Represents different expressions that Buddy can show.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.NEUTRAL">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.ANGRY">
            <summary>
            Angry.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.GRUMPY">
            <summary>
            Grumpy.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.HAPPY">
            <summary>
            Happy.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.LISTENING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.HEARING">
            <summary>
            Hearing.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SAD">
            <summary>
            Sad.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SCARED">
            <summary>
            Scared.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SICK">
            <summary>
            Sick.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SURPRISED">
            <summary>
            Surprised.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.THINKING">
            <summary>
            Thinking.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.TIRED">
            <summary>
            Tired.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.LOVE">
            <summary>
            In love !
            </summary>
        </member>
        <member name="T:BlueQuark.ComputeMotherboard">
            <summary>
            Represents the motherboard for high complexity algorithms.
            </summary>
        </member>
        <member name="T:BlueQuark.TVerticalListSearch">
            <summary>
            Box for vertical list of elements. Can be customized by adding right side button. 
            </summary>
            <seealso cref="T:BlueQuark.VerticalListToast"/>
        </member>
        <member name="P:BlueQuark.TVerticalListSearch.OnEndEdit">
            <summary>
            Called when the main part of the box is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TVerticalListSearch.SetPlaceholder(System.String)">
            <summary>
            Set search placeholder
            </summary>
            <param name="iPlaceholder">Placeholder text</param>
        </member>
        <member name="M:BlueQuark.TVerticalListSearch.SetIcon(UnityEngine.Sprite)">
            <summary>
            Set search icon.
            </summary>
            <param name="iIcon">Icon sprite</param>
        </member>
        <member name="P:BlueQuark.MobileData.IsBusy">
            <summary>
            True if the wifi is currently busy (Connection, disconnection, retrieving...).
            </summary>
        </member>
        <member name="P:BlueQuark.MobileData.Enabled">
            <summary>
            Enables/Disables the WiFi module.
            </summary>
        </member>
        <member name="P:BlueQuark.MobileData.NetworkType">
            <summary>
            Type of network security.
            </summary>
        </member>
        <member name="P:BlueQuark.MobileData.CarrierName">
            <summary>
            Name of the network carrier.
            </summary>
        </member>
        <member name="P:BlueQuark.MobileData.SignalStrength">
            <summary>
            Strength of the signal (0-5).
            </summary>
        </member>
        <member name="P:BlueQuark.MobileData.IsSimReady">
            <summary>
            If sim card is ready.
            </summary>
        </member>
        <member name="P:BlueQuark.MobileData.IMEI">
            <summary>
            IMEI of the SIM.
            </summary>
        </member>
        <member name="M:BlueQuark.MobileData.Connect">
            <summary>
            Tries to connect to the network.
            </summary>
        </member>
        <member name="M:BlueQuark.MobileData.Disconnect">
            <summary>
            Disconnects from the network.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanSearchResult">
            <summary>
            The results of a human search.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchResult.Name">
            <summary>
            The label of a recognized face.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchResult.IsGoal">
            <summary>
            Is the human is the one we searched for.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchResult.IsKnown">
            <summary>
            Is the human is present in the database.
            </summary>
        </member>
        <member name="T:BlueQuark.YOLOParameter">
            <summary>
            Parameters for YOLO.
            </summary> 
        </member>
        <member name="P:BlueQuark.YOLOParameter.RegionOfInterest">
            <summary>
            Represents the region of interest.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.UseThermal">
            <summary>
            If we use the thermal mode.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.ThermalThreshold">
            <summary>
            Represents the thermal threshold.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.DetectFallenHuman">
            <summary>
            If we detect fallen humans.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.DownSample">
            <summary>
            Represents the down sample.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.ImageSize">
            <summary>
            Size of meshing. The higher it is the more accurate the detection will be but will be slower.
            Must be a multiple of 32.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.ConfidenceThreshold">
            <summary>
            Represents the confidence threshold. Value in percentage.
            </summary>
        </member>
        <member name="T:BlueQuark.ObjectDetector">
            <summary>
            Human detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectDetector.IsBusy">
            <summary>
            Returns true if the algorithm is active.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectDetector.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectDetector.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.ObjectDetector.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectDetector.OnDetect">
            <summary>
            Called when a face is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.ObjectDetector.Detect(OpenCVUnity.Mat,BlueQuark.ObjectDetectorParameter,System.Action{BlueQuark.ObjectEntity[]},System.Boolean)">
            <summary>
            Does a one time object detection.
            </summary>
            <param name="iFrame">The mat in which the detection will be done.</param>
            <param name="iParam">The parameters of the detection.</param>
            <param name="iOnDetect">The callback with the detected objects.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="T:BlueQuark.TinyYOLOVOCModel">
            <summary>
            Enumeration of the 20 classes that can be detected using the tiny yolo v3 voc model.
            </summary>
        </member>
        <member name="T:BlueQuark.ScheduledTask">
            <summary>
            Represents a base scheduled reminder.
            </summary>
            <seealso cref="T:BlueQuark.AReminder"/>
        </member>
        <member name="P:BlueQuark.ScheduledTask.ReminderTime">
            <summary>
            Date of the reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.ScheduledTask.RepetitionDays">
            <summary>
            Repetition of the reminder by week.
            </summary>
        </member>
        <member name="P:BlueQuark.ScheduledTask.Rule">
            <summary>
            Rule of the task.
            </summary>
        </member>
        <member name="M:BlueQuark.ScheduledTask.#ctor(System.String,System.String,System.DateTime,System.String,System.Collections.Generic.List{BlueQuark.UserAccount},System.Collections.Generic.List{System.DayOfWeek},BlueQuark.ReminderState)">
            <summary>
            Creates a base scheduled reminder. 
            </summary>
            <param name="iContent">Content of the scheduled reminder.</param>
            <param name="iRule">Rule for the task to execute</param>
            <param name="iReminderTime">Date of the reminder.</param>
            <param name="iReminderNotifContent">Reminder notif content.</param>
            <param name="iTargets">The users concerned by the reminder.</param>
            <param name="iRepetitionDays">Repetition of the reminder by week.</param>
            <param name="iReminderState">State of the reminder.</param>
        </member>
        <member name="T:BlueQuark.HDCameraType">
            <summary>
            Front or back camera.
            </summary>
        </member>
        <member name="T:BlueQuark.FDotNavigation">
            <summary>
            Dot navigation bar for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FDotNavigation.OnClick">
            <summary>
            Called when a dot is clicked. Developer is responsible to set (or not) the clicked dot as selected.
            </summary>
        </member>
        <member name="P:BlueQuark.FDotNavigation.Item(System.Int32)">
            <summary>
            Selects the dot navigation dot at the given index. Starts at 0. Unselect the current selected dot.
            </summary>
            <param name="iIndex">Index of the dot to select.</param>
            <returns>Index of the dot to select.</returns>
        </member>
        <member name="P:BlueQuark.FDotNavigation.Dots">
            <summary>
            Number of dots. If set, clears all previously setted dots. Don't forget to select a dot after calling this function. 
            </summary>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetLabel(System.String)">
            <summary>
            Sets the label of the component.
            </summary>
            <param name="iText">Text to display. Null to hide.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetLabelSize(System.Int32)">
            <summary>
            Sets the police size of the label.
            </summary>
            <param name="iSize"></param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetCustomDotIcon(UnityEngine.Sprite)">
            <summary>
            Sets a custom image to the dot elements.
            </summary>
            <param name="iSprite">The sprite to set for each element.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetCustomDotColor(UnityEngine.Color)">
            <summary>
            Sets a custom color to the dot elements.
            </summary>
            <param name="iColor">The color to set for each element.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetCustomLabelFont(UnityEngine.Font)">
            <summary>
            Sets a custom font to the optional text.
            </summary>
            <param name="iFont">The font to set.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.Select(System.Int32)">
            <summary>
            Selects the dot navigation dot at the given index. Starts at 0. Unselects the current selected dot.
            </summary>
            <returns>Index of the dot to select.</returns>
        </member>
        <member name="T:BlueQuark.USBDrive">
            <summary>
            Represents an USB drive key connected to the robot.
            </summary>
        </member>
        <member name="T:BlueQuark.Boards">
            <summary>
            Embedded electronic boards collection.
            </summary>
        </member>
        <member name="P:BlueQuark.Boards.Head">
            <summary>
            Gets the head motherboard component.
            </summary>
        </member>
        <member name="P:BlueQuark.Boards.Body">
            <summary>
            Gets the body motherboard componentt.
            </summary>
        </member>
        <member name="P:BlueQuark.Boards.Main">
            <summary>
            Gets the main Android device.
            </summary>
        </member>
        <member name="P:BlueQuark.Boards.Compute">
            <summary>
            Gets the main device for compute purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.Temperature">
            <summary>
            CPU temperature of the Android board.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.TemperatureError">
            <summary>
            Temperature error. 0 if no error.
            </summary>
        </member>
        <member name="M:BlueQuark.MainMotherboard.SoftwareRestart">
            <summary>
            Reboot the Android board by software mean. Terminal function.
            </summary>s
        </member>
        <member name="M:BlueQuark.MainMotherboard.HardwareRestart">
            <summary>
            Reboot the Android board with hardware command. Terminal function.
            </summary>
        </member>
        <member name="M:BlueQuark.MainMotherboard.RecoveryRestart">
            <summary>
            Reboot in recovery mode the Android board. Terminal function.
            </summary>
        </member>
        <member name="M:BlueQuark.MainMotherboard.SoftwareShutdown">
            <summary>
            Force the power off of the Android board. Terminal function.
            </summary>
        </member>
        <member name="M:BlueQuark.MainMotherboard.HardwareShutdown">
            <summary>
            Power off the Android board. Terminal function.
            </summary>
        </member>
        <member name="M:BlueQuark.MainMotherboard.ForceShutdown">
            <summary>
            Force power off the Android board. Terminal function.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.MemoryUsage">
            <summary>
            RAM used by the CPU (1 is full).
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.CPUUsage">
            <summary>
            CPU used by the current program (1 is full).
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.GCMemory">
            <summary>
            Memory handle by the dot net garbage collector. Value in Mbyte.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.VirtualMemory">
            <summary>
            The Private Bytes, plus the space shared with other processes for loaded DLLs, etc. 
            VirtualMemorySize measures all of the virtual memory that your process uses. 
            Which includes the pages shared by all other processes on your machine. 
            Which in a .NET program includes the operating system, CLR, jitter and the ngen-ed Framework assemblies.
            Value in Mbyte.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.PhysicalMemory">
            <summary>
            The portion of ALL the memory of my process that has not been paged to disk. So the amount paged to disk should be (Virtual - Working Set).
            Value in Mbyte.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.PrivateMemory">
            <summary>
            The Memory the process has requested to store data. Some of it may be paged to disk or not.
            Value in Mbyte.
            </summary>
        </member>
        <member name="P:BlueQuark.MainMotherboard.JavaMemory">
            <summary>
            Memory currently managed by the Java side. Value in Mbyte.
            </summary>
        </member>
        <member name="T:BlueQuark.BodyMotherboard">
            <summary>
            Represents the motherboard inside Buddy's body.
            </summary>
        </member>
        <member name="P:BlueQuark.BodyMotherboard.WheelsµC">
            <summary>
            Gets the wheels microcontroller.
            </summary>
        </member>
        <member name="P:BlueQuark.BodyMotherboard.BodyµC">
            <summary>
            Gets the body microcontroller.
            </summary>
        </member>
        <member name="T:BlueQuark.HeadMotherboard">
            <summary>
            Represents the motherboard inside Buddy's head.
            </summary>
        </member>
        <member name="P:BlueQuark.HeadMotherboard.HeadµC">
            <summary>
            Gets the head microcontroller.
            </summary>
        </member>
        <member name="P:BlueQuark.HeadMotherboard.AudioµC">
            <summary>
            Gets the audio microcontroller.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanSearchParameters">
            <summary>
            Parameters for HumanSearchStrategy.
            Timer field is not set, by default.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.OnDetect">
            <summary>
            Called when the HumanTrackStrategy detect someone.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.OnEnd">
            <summary>
            Called when the HumanSearchStrategy end.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.OnFound">
            <summary>
            Called when the HumanSearchStrategy found someone.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.OnFoundFace">
            <summary>
            Called when the HumanSearchStrategy found someone with face detection.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.HumanDetectionMode">
            <summary>
            Determine what technology to use for human detection.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.HumansToFind">
            <summary>
            Names of humans to find.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanSearchParameters.#ctor">
            <summary>
            Create parameters for HumanSearchStrategy with default values.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanSearchParameters.#ctor(System.Single,System.Action,System.Action{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},System.Single,BlueQuark.HumanDetectionMode)">
            <summary>
            Create parameters for HumanSearchStrategy with given values.
            </summary>
            <param name="iTimer">It's possible to specify a duration for the search.</param>
            <param name="iOnEnd">Callback called when HumanSearchStrategy end.</param>
            <param name="iOnFound">Callback called when a human is found.</param>
            <param name="iOnDetect">Callback when a human is detected.</param>
            <param name="iStoppingDistance"> Distance in meters to stop in front of human.</param>
            <param name="iSensorMode">Sensor to use for the tracking.</param>
        </member>
        <member name="P:BlueQuark.HumanSearchParameters.SearchTime">
            <summary>
            The search will stop when the search time is up.
            Used only if callback condition is missing.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanTrackParameters">
            <summary>
            Parameters for HumanTrackingStrategy implementation.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanTrackParameters.OnEnd">
            <summary>
            Called at the end of HumanTrackStrategy.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanTrackParameters.OnDetect">
            <summary>
            Called when the HumanTrackStrategy detect someone.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanTrackParameters.OnFront">
            <summary>
            Called when the HumanTrackStrategy is stopped in front of human.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanTrackParameters.MotionFreedom">
            <summary>
            Degrees of freedom allowed for tracking.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanTrackParameters.HumanDetectionMode">
            <summary>
            Determine what technology to use for human detection.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanTrackParameters.#ctor">
            <summary>
            Create parameters for HumanTracking with default values.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanTrackParameters.#ctor(System.Action{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},System.Action,BlueQuark.BehaviourMovementPattern,BlueQuark.HumanDetectionMode)">
            <summary>
            Create parameters for HumanTracking with given values.
            </summary>
            <param name="iOnDetect">Callback when a human is detected.</param>
            <param name="iOnFront">Callback when the tracking stops in front of the targeted human.</param>
            <param name="iMotionFreedom">Degree of freedom allowed during tracking.</param>
            <param name="iSensorMode">Sensor to use for the tracking.</param>
        </member>
        <member name="T:BlueQuark.HumanTrackStrategy">
            <summary>
            Following strategy to track and follow a targeted human.
            Can be static (on place) or dynamic (follow user).
            </summary>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.StaticTracking(System.Predicate{BlueQuark.HumanEntity})">
            <summary>
            Starts a static human tracking with different options for moving parts. 
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.StaticTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity})">
            <summary>
            Starts a static human tracking with different options for moving parts. 
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.StaticTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},BlueQuark.BehaviourMovementPattern)">
            <summary>
            Starts a static human tracking with different options for moving parts. 
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
            <param name="iMotionFreedom">Which parts of the robot will move.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.StaticTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},BlueQuark.BehaviourMovementPattern,BlueQuark.HumanDetectionMode)">
            <summary>
            Starts a static human tracking with different options for moving parts. 
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
            <param name="iMotionFreedom">Which parts of the robot will move.</param>
            <param name="iSensorMode">Using vision(RGB) or depth camera.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.DynamicTracking(System.Predicate{BlueQuark.HumanEntity})">
            <summary>
            Start a dynamic human tracking. The robot will follow the user.
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.DynamicTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity})">
            <summary>
            Start a dynamic human tracking. The robot will follow the user.
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnFront">Call when stopping in front of human.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.DynamicTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity})">
            <summary>
            Start a dynamic human tracking. The robot will follow the user.
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnFront">Call when stopping in front of human.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.DynamicTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},BlueQuark.HumanDetectionMode)">
            <summary>
            Start a dynamic human tracking. The robot will follow the user.
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnFront">Call when stopping in front of human.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
            <param name="iSensorMode">Using vision(RGB) or depth camera.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.Tracking(System.Predicate{BlueQuark.HumanEntity},BlueQuark.HumanTrackParameters)">
            <summary>
            Start a human tracking with custom parameters.
            </summary>
            <param name="iWhileCondition"></param>
            <param name="iParameters"></param>
        </member>
        <member name="T:BlueQuark.FaceRecognitionError">
            <summary>
            Error occuring during a step of the face recognizer.
            </summary>
        </member>
        <member name="F:BlueQuark.FaceRecognitionError.NO_FACE_DETECTED">
            <summary>
            No face have been detected in the picture.
            </summary>
        </member>
        <member name="F:BlueQuark.FaceRecognitionError.NOT_RECOGNIZED">
            <summary>
            No face have been recognized.
            </summary>
        </member>
        <member name="F:BlueQuark.FaceRecognitionError.CONNECTION_ERROR">
            <summary>
            Connection issue during the web request.
            </summary>
        </member>
        <member name="T:BlueQuark.AThermalAlgorithmParameters">
            <summary>
            Parameters for a thermal human detection.
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalHumanParameters">
            <summary>
            Parameters for a thermal human detection.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalHumanParameters.CandidateOperatingRange">
            <summary>
            Range temperature of a candidate.
            Exemple: Default value of the ThermalHumanAlgorithm works between [0° ; 38°] (Celsius)
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalHumanParameters.ScoreThreshold">
            <summary>
            Thresold used for the final detection of human.
            <para> Lowering this value has the effect of increasing sensitivity
            and therefore false positives</para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalHumanParameters.CandidateCoefficient">
            <summary>
            Coefficient to compute candidate value.
            <para> Increase this value to increase the acceptance
            threshold for a candidate temperature </para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalHumanParameters.NeighboursCoefficient">
            <summary>
            Coefficient to compute neighbour value.
            <para> This value determines the acceptance of a temperature as a neighbor,
            based on a percentage of the candidate. </para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalHumanParameters.IsLyingDown">
            <summary>
            Defines if the algorithm should detect standing or lying down human.
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalHumanParameters.#ctor">
            <summary>
            Create parameters for Thermal human detection, with default values.
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalHumanParameters.#ctor(System.Single,System.Single,System.Single,System.Boolean,BlueQuark.Range{System.Single})">
            <summary>
            Create parameters for Thermal human detection, with given values.
            </summary>
            <param name="iScore">The number of detected part to reach to fire a detection.</param>
            <param name="iCandidateCoefficient">The coefficient use to compare and validate a temperature as candidate.</param>
            <param name="iNeighboursCoefficient">The coefficient use to compare and validate a temperature as neighbour.</param>
            <param name="iIsLyingDown">Determine if the algorithm should detect lying down or standing human.</param>
            <param name="iCandidateOperatingRange">Temperature operating range for candidate.</param>
        </member>
        <member name="T:BlueQuark.ThermalMotionParameters">
            <summary>
            Parameters for a thermal motion detection.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalMotionParameters.ScoreThreshold">
            <summary>
            Threshold used for the final detection of human.
            <para> Lowering this value has the effect of increasing sensitivity
            and therefore false positives</para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalMotionParameters.CandidateCoefficient">
            <summary>
            Coefficient to compute candidate value.
            <para> Increase this value to increase the acceptance
            threshold for a candidate temperature </para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalMotionParameters.NeighboursCoefficient">
            <summary>
            Coefficient to compute neighbour value.
            <para> This value determines the acceptance of a temperature as a neighbor,
            based on a percentage of the candidate. </para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalMotionParameters.NumberOfFrameToSample">
            <summary>
            Number of thermal matrix sampled to compute a relative thermal matrix.
            <para> ( Difference between current matrix and a matrix reconstructed from
            the minimum values ​​of each pixel contained in the sample) </para>
            <para> This value must be between [10 ; 100].</para>
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalMotionParameters.#ctor">
            <summary>
            Create parameters for Thermal motion detection, with default values.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.ThermalMotionParameters.#ctor(System.Single,System.Single,System.Single,System.Int32)" -->
        <member name="T:BlueQuark.TinyYOLO3Model">
            <summary>
            Enumeration of the 80 classes that can be detected using the tiny yolo v3 model.
            </summary>
        </member>
        <member name="T:BlueQuark.GlobalPosition">
            <summary>
            Represents a global position on Earth.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.City">
            <summary>
            Estimated nearest found city.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.Region">
            <summary>
            Estimated region.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.CountryName">
            <summary>
            Country name.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.CountryCode">
            <summary>
            ISO 3166 country code.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.ContinentName">
            <summary>
            Continent name.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.ContinentCode">
            <summary>
            ISO 3166 continent code.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.Latitude">
            <summary>
            Geographic coordinate that specifies the north–south position of this point on the Earth's surface.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.Longitude">
            <summary>
            Geographic coordinate that specifies the east–west position of this point on the Earth's surface.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.Postal">
            <summary>
            Postal code of the city.
            </summary>
        </member>
        <member name="P:BlueQuark.GlobalPosition.CallingCode">
            <summary>
            Telephone number prefixes for reaching telephone subscribers in the networks of the member countries or regions of the International Telecommunication Union (ITU).
            The codes are defined by the ITU-T in standards E.123 and E.164.
            </summary>
        </member>
        <member name="M:BlueQuark.GlobalPosition.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>Serialization of this.</returns>
        </member>
        <member name="T:BlueQuark.BCP47Code">
            <summary>
            Describes the string values in BCP-47 format.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.EN">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.FR">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.IT">
            <summary>
            Itialian language.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.DE">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.JA">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.NL">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.BCP47Code.KR">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.Geolocalization">
            <summary>
            Inner global positioning system of the OS.
            </summary>
        </member>
        <member name="P:BlueQuark.Geolocalization.GlobalPosition">
            <summary>
            Current global position of the robot. Updated at each internet access.
            </summary>
        </member>
        <member name="T:BlueQuark.BatteryChargingStatus">
            <summary>
            Charging status of the robot's battery.
            </summary>
        </member>
        <member name="F:BlueQuark.BatteryChargingStatus.NOT_CHARGING">
            <summary>
            The robot is autonomous and not charging.
            </summary>
        </member>
        <member name="F:BlueQuark.BatteryChargingStatus.CHARGING">
            <summary>
            The robot is currently charging.
            </summary>
        </member>
        <member name="T:BlueQuark.EchoCancellationParameters">
            <summary>
            Echo cancellation microphones parameters.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.MIN_DATA_SIZE">
            <summary>
            Min tolerated bus data size.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.MAX_DATA_SIZE">
            <summary>
            Max tolerated bus data size.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.DEFAULT_DATA_SIZE">
            <summary>
            Default bus data size.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.MIN_GAIN">
            <summary>
            Min tolerated gain.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.MAX_GAIN">
            <summary>
            Max tolerated gain.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.DEFAULT_GAIN">
            <summary>
            Default gain.
            </summary>
        </member>
        <member name="F:BlueQuark.EchoCancellationParameters.DEFAULT_DENOISER_STATE">
            <summary>
            Default denoiser state.
            </summary>
        </member>
        <member name="P:BlueQuark.EchoCancellationParameters.DataSize">
            <summary>
            Size of data processed in batch by the AEC.
            </summary>
        </member>
        <member name="P:BlueQuark.EchoCancellationParameters.DenoiserState">
            <summary>
            Denoiser usage.
            </summary>
        </member>
        <member name="P:BlueQuark.EchoCancellationParameters.Gain">
            <summary>
            Automatic gain of AEC.
            </summary>
        </member>
        <member name="M:BlueQuark.EchoCancellationParameters.#ctor">
            <summary>
            Ctor with default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.EchoCancellationParameters.#ctor(System.Int16)">
            <summary>
            Ctor to set the batch data size.
            </summary>
            <param name="iDataSize">Size of data processed in batch by the AEC</param>
        </member>
        <member name="M:BlueQuark.EchoCancellationParameters.#ctor(System.Int16,System.Int16)">
            <summary>
            Ctor to set the batch data size and the automatic gain.
            </summary>
            <param name="iDataSize">Size of data processed in batch by the AEC</param>
            <param name="iGain">Automatic gain of AEC</param>
        </member>
        <member name="M:BlueQuark.EchoCancellationParameters.#ctor(System.Int16,System.Int16,System.Int16)">
            <summary>
            Ctor to set the batch data size.
            </summary>
            <param name="iDataSize">Size of data processed in batch by the AEC.</param>
            <param name="iGain">Automatic gain of AEC.</param>
            <param name="iDenoiserState">Denoiser usage.</param>
        </member>
        <member name="M:BlueQuark.EchoCancellationParameters.ToString">
            <summary>
            ToString overriding.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="T:BlueQuark.SoundDetectionParameters">
            <summary>
            Noise detection microphones parameters.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundDetectionParameters.DEFAULT_OFFSET">
            <summary>
            Default added offset.
            </summary>
        </member>
        <member name="P:BlueQuark.SoundDetectionParameters.Offset">
            <summary>
            Offset added to dB value to calibrate the ambient sound level.
            </summary>
        </member>
        <member name="M:BlueQuark.SoundDetectionParameters.#ctor">
            <summary>
            Ctor with default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.SoundDetectionParameters.#ctor(System.Int16)">
            <summary>
            Ctor to set the offset.
            </summary>
            <param name="iOffSet">Offset added to dB value to calibrate the ambient sound level.</param>
        </member>
        <member name="M:BlueQuark.SoundDetectionParameters.ToString">
            <summary>
            ToString overriding.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="T:BlueQuark.SoundOutputParameters">
            <summary>
            Source sound output microphones parameters.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundOutputParameters.MIN_VOLUME">
            <summary>
            Minimal tolerated volume.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundOutputParameters.MAX_VOLUME">
            <summary>
            Maximal tolerated volume.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundOutputParameters.DEFAULT_VOLUME">
            <summary>
            Default volume of the out sound.
            </summary>
        </member>
        <member name="P:BlueQuark.SoundOutputParameters.Volume">
            <summary>
            Output volume.
            </summary>
        </member>
        <member name="M:BlueQuark.SoundOutputParameters.#ctor">
            <summary>
            Ctor with default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.SoundOutputParameters.#ctor(System.Byte)">
            <summary>
            Ctor to set the output volume.
            </summary>
            <param name="iVolume">The output volume in dB.</param>
        </member>
        <member name="M:BlueQuark.SoundOutputParameters.ToString">
            <summary>
            ToString overriding.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="T:BlueQuark.VocalTriggerParameters">
            <summary>
            Vocal trigger microphones parameters for the hotword "OKAY BUDDY".
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.MIN_THRESHOLD">
            <summary>
            Minimal tolerated threshold. Everything will pass.
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.MAX_THRESHOLD">
            <summary>
            Maximal tolerated threshold. Nothing will pass.
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.DEFAULT_THRESHOLD">
            <summary>
            Default threshold value.
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.MIN_SEARCH">
            <summary>
            Min tolerated search.
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.MAX_SEARCH">
            <summary>
            Max tolerated search.
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.DEFAULT_SEARCH">
            <summary>
            Default number of search.
            </summary>
        </member>
        <member name="F:BlueQuark.VocalTriggerParameters.DEFAULT_LANGUAGE">
            <summary>
            Default recognized language for the hotword.
            </summary>
        </member>
        <member name="P:BlueQuark.VocalTriggerParameters.Search">
            <summary>
            Number of search done by the algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.VocalTriggerParameters.Language">
            <summary>
            Current language detected.
            </summary>
        </member>
        <member name="P:BlueQuark.VocalTriggerParameters.Threshold">
            <summary>
            Threshold of the recognition.
            </summary>
        </member>
        <member name="M:BlueQuark.VocalTriggerParameters.#ctor">
            <summary>
            Ctor with all default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.VocalTriggerParameters.#ctor(System.Int16)">
            <summary>
            Ctor to set the threshold. Arbitrary unit.
            </summary>
            <param name="iThreshold">Recognition threshold.</param>
        </member>
        <member name="M:BlueQuark.VocalTriggerParameters.#ctor(System.Int16,System.Int16)">
            <summary>
            Ctor to set the threshold and the number of search.
            </summary>
            <param name="iThreshold">Recognition threshold.</param>
            <param name="iSearch">Number of search.</param>
        </member>
        <member name="M:BlueQuark.VocalTriggerParameters.#ctor(System.Int16,BlueQuark.ISO6391Code)">
            <summary>
            Ctor to set the threshold and the detected language.
            </summary>
            <param name="iThreshold">Recognition threshold.</param>
            <param name="iLanguage">Language that must be detected by the ASR.</param>
        </member>
        <member name="M:BlueQuark.VocalTriggerParameters.#ctor(System.Int16,System.Int16,BlueQuark.ISO6391Code)">
            <summary>
            Ctor to set the threshold, the number of search and the language to detect.
            </summary>
            <param name="iThreshold">Recognition threshold.</param>
            <param name="iSearch">Number of search.</param>
            <param name="iLanguage">Language that must be detected by the ASR.</param>
        </member>
        <member name="M:BlueQuark.VocalTriggerParameters.ToString">
            <summary>
            ToString overriding.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="T:BlueQuark.BeamformingParameters">
            <summary>
            Beamforming microphones parameters.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.ALGORITHM_CARDIOD_BASIC">
            <summary>
            BF algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.ALGORITHM_CARDIOD_DENOISE">
            <summary>
            BF algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.ALGORITHM_ASR_READY">
            <summary>
            BF algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.ALGORITHM_STRONG">
            <summary>
            BF algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DEFAULT_ALGORITHM">
            <summary>
            BF algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_BACK_RIGHT">
            <summary>
            Direction mode at the back right of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_BACK">
            <summary>
            Direction mode at the back of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_BACK_LEFT">
            <summary>
            Direction mode at the back left of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_LEFT">
            <summary>
            Direction mode at the left of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_FRONT_LEFT">
            <summary>
            Direction mode at the front left of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_FRONT">
            <summary>
            Direction mode at the front of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_FRONT_RIGHT">
            <summary>
            Direction mode at the front right of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DIRECTION_RIGHT">
            <summary>
            Direction mode at the right of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.BeamformingParameters.DEFAULT_DIRECTION">
            <summary>
            Default direction mode at the back right of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.BeamformingParameters.Algorithm">
            <summary>
            Algorithm used for the beamforming.
            </summary>
        </member>
        <member name="P:BlueQuark.BeamformingParameters.Direction">
            <summary>
            Direction of the beamforming.
            </summary>
        </member>
        <member name="P:BlueQuark.BeamformingParameters.Gain">
            <summary>
            Default gain.
            </summary>
        </member>
        <member name="M:BlueQuark.BeamformingParameters.#ctor">
            <summary>
            Ctor with default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.BeamformingParameters.#ctor(System.Byte)">
            <summary>
            Ctor to set the algorithm.
            </summary>
            <param name="iDirection">Used algorithm for the detection.</param>
        </member>
        <member name="M:BlueQuark.BeamformingParameters.ToString">
            <summary>
            ToString overriding.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="M:BlueQuark.BeamformingParameters.#ctor(System.Byte,System.Byte)">
            <summary>
            Ctor to set the algorithm and the direction of the detection.
            </summary>
            <param name="iAlgorithm">Used algorithm for the detection.</param>
            <param name="iDirection">Direction of the detection.</param>
        </member>
        <member name="T:BlueQuark.SoundLocalizationParameters">
            <summary>
            Source sound localization microphones parameters.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.ALGORITHM_XCORR">
            <summary>
            Cross correlation algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.ALGORITHM_GCCP">
            <summary>
            Sound loc algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.ALGORITHM_BMPH">
            <summary>
            Sound loc algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.DEFAULT_ALGORITHM">
            <summary>
            Default algorithm used by Sound loc.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.MIN_RESOLUTION">
            <summary>
            Min tolerated angle resolution.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.MAX_RESOLUTION">
            <summary>
            Max tolerated angle resolution.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.DEFAULT_RESOLUTION">
            <summary>
            Default angle resolution.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.MIN_THRESHOLD">
            <summary>
            Minimal tolerated threshold. Everything will pass.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.MAX_THRESHOLD">
            <summary>
            Maximal tolerated threshold. Nothing will pass.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundLocalizationParameters.DEFAULT_THRESHOLD">
            <summary>
            Default sound threshold.
            </summary>
        </member>
        <member name="P:BlueQuark.SoundLocalizationParameters.Algorithm">
            <summary>
            Algorithm used to compute the angle.
            </summary>
        </member>
        <member name="P:BlueQuark.SoundLocalizationParameters.Resolution">
            <summary>
            Angle resolution in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.SoundLocalizationParameters.Threshold">
            <summary>
            Sound threshold from which the angle is computed.
            </summary>
        </member>
        <member name="M:BlueQuark.SoundLocalizationParameters.#ctor">
            <summary>
            Ctor with all default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.SoundLocalizationParameters.#ctor(System.Byte)">
            <summary>
            Ctor to set both algorithm and resolution.
            </summary>
            <param name="iResolution">Angle resolution in degrees.</param>
        </member>
        <member name="M:BlueQuark.SoundLocalizationParameters.#ctor(System.Byte,System.Int32)">
            <summary>
            Ctor to set both algorithm and resolution.
            </summary>
            <param name="iResolution">Angle resolution in degrees.</param>
            <param name="iThreshold">A lower threshold will tolerate more input.</param>
        </member>
        <member name="M:BlueQuark.SoundLocalizationParameters.ToString">
            <summary>
            ToString overriding.
            </summary>
            <returns>Result.</returns>
        </member>
        <member name="M:BlueQuark.SoundLocalizationParameters.#ctor(System.Byte,System.Int32,System.Byte)">
            <summary>
            Ctor to set both algorithm and resolution.
            </summary>
            <param name="iAlgorithm">Used algorithm.</param>
            <param name="iResolution">Angle resolution in degrees.</param>
            <param name="iThreshold">A lower threshold will tolerate more input.</param>
        </member>
        <member name="T:BlueQuark.HumanDetectionMode">
            <summary>
            Sensors to be used for tracking. The thermal sensor is always used.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanDetectionMode.THERMAL">
            <summary>
            Thermal camera.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanDetectionMode.VISION">
            <summary>
            RGB camera with thermal.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanDetectionMode.SKELETON">
            <summary>
            Using depth-based skeleton detection with thermal. 
            </summary>
        </member>
        <member name="T:BlueQuark.RoamStrategy">
            <summary>
            Local roaming strategy.
            </summary>
        </member>
        <member name="M:BlueQuark.RoamStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.RoamSpeed,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iRoamSpeed">Advancing speed during roam.</param>
        </member>
        <member name="M:BlueQuark.RoamStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.Mood,BlueQuark.RoamSpeed,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iMood">The mood that should be expressed through the motion.</param>
            <param name="iRoamSpeed">Advancing speed during roam.</param>
        </member>
        <member name="M:BlueQuark.RoamStrategy.WithMood(BlueQuark.Mood,BlueQuark.RoamSpeed,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Start wandering around in a certain mood.
            </summary>
            <param name="iMood">The mood that should be expressed through the motion.</param>
        </member>
        <member name="T:BlueQuark.SkeletonJointStatus">
            <summary>
            Represents the skeletons joint status of an entity.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointStatus.NOT_TRACKED">
            <summary>
            Not tracked.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointStatus.LOW_CONFIDENCE">
            <summary>
            Low confidence.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointStatus.TRACKED">
            <summary>
            Tracked.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonJointType">
            <summary>
            Represents the skeletons joint type of an entity.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.HEAD">
            <summary>
            Head.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.SHOULDER_SPINE">
            <summary>
            Shoulder spine.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_SHOULDER">
            <summary>
            Left shoudler.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_ELBOW">
            <summary>
            Left elbow.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_HAND">
            <summary>
            Left hand.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_SHOULDER">
            <summary>
            Right shoulder.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_ELBOW">
            <summary>
            Right elbow.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_HAND">
            <summary>
            Right hand.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.MID_SPINE">
            <summary>
            Mid spine.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.BASE_SPINE">
            <summary>
            Base spine.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_HIP">
            <summary>
            Left hip.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_KNEE">
            <summary>
            Left knee.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_FOOT">
            <summary>
            Left foot.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_HIP">
            <summary>
            Right hip.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_KNEE">
            <summary>
            Right knee.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_FOOT">
            <summary>
            Right foot.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_WRIST">
            <summary>
            Left wrist.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_WRIST">
            <summary>
            Right wrist.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.NECK">
            <summary>
            Neck.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonEntityStatus">
            <summary>
            Represents the skeleton entity status.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.NOT_TRACKED">
            <summary>
            Not tracked.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.LOST">
            <summary>
            Lost.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.BEGIN_TRACKED">
            <summary>
            Begin tracked.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.TRACKED">
            <summary>
            Tracked.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonJoint">
            <summary>
            Represents a skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.DepthPosition">
            <summary>
            Represents the depth position of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.WorldPosition">
            <summary>
            Represents the world position of the skeleton joint. In millimeters.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Orientation">
            <summary>
            Represents the orientation of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Status">
            <summary>
            Represents the status of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Type">
            <summary>
            Represeznts the type of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Position2D">
            <summary>
            A vector in [0,1] * [0,1] representing the joint's 2D position. Can be used to display a joint in a matrix: (Position2D.x * Mat.Width, Position2D.y * Mat.Height)
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonEntity">
            <summary>
            Human skeleton data structure.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntity.MAX_DETECTION_DISTANCE">
            <summary>
            Represents the max detection distance in meters.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.CenterOfMass">
            <summary>
            World coordinate in mm.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Joints">
            <summary>
            Represents the list of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Status">
            <summary>
            Represents the skeleton entity status.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.ID">
            <summary>
            Represents the id of the skeleton entity. 
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Human">
            <summary>
            Gets the human entity.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Distance">
            <summary>
            Distance to human in meter.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Confidence">
            <summary>
            Confidence of the detection, from 0 to 1. Depend on the number of joints and distance.
            </summary>
        </member>
        <member name="M:BlueQuark.SkeletonEntity.Equals(System.Object)">
            <summary>
            Equal method override.
            </summary>
            <param name="iObj">The object to compare.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:BlueQuark.SkeletonEntity.GetHashCode">
            <summary>
            Gets the hash code of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.ThermalEntity">
            <summary>
            Represents an Entity found by a thermal detect algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalEntity.HighestTemperature">
            <summary>
            Highest temperature in Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalEntity.AverageTemperature">
            <summary>
            Average temperature in Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalEntity.BoundingBox">
            <summary>
            Limit values of the detected entity in the matrix.
            Available in Human and Motion detect mode, null otherwise.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalEntity.Center">
            <summary>
            The center point of the detected entity in the matrix.
            Available in Human and Motion detect mode, null otherwise.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanDetectorParameter">
            <summary>
            Parameters for HumanDetector: which sensor to use. If using VISION, can further configure YOLOParameters.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetectorParameter.HumanDetectionMode">
            <summary>
            Using skeleton or vision. Thermal is always used.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetectorParameter.YOLO">
            <summary>
            Represents the yolo parameters.
            </summary>
        </member>
        <member name="T:BlueQuark.Map">
            <summary>
            Map data class used by Mapper
            </summary>
        </member>
        <member name="P:BlueQuark.Map.LOCAL_FILE">
            <summary>
            C# level map data
            </summary>
        </member>
        <member name="M:BlueQuark.Map.#ctor(System.String)">
            <summary>
            Create a path
            </summary>
            <param name="iPath">Path to the file</param>
        </member>
        <member name="M:BlueQuark.Map.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="T:BlueQuark.Mapper">
            <summary>
            Mapper class.
            For a topological map, it is possible to add and remove rooms, as well as connecting these rooms.
            One can learn landmarks in the room for navigation.
            </summary>
        </member>
        <member name="P:BlueQuark.Mapper.RoomCountImpl">
            <summary>
            Return the number of rooms present in the model
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.AddRoomImpl(BlueQuark.Room)">
            <summary>
            Add a new room in the topological map
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.RemoveRoomImpl(BlueQuark.Room)">
            <summary>
            Remove room from the topological map
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.LearnLocalizationImpl(OpenCVUnity.Mat,BlueQuark.Room)">
            <summary>
            Function to calculate the keypoints and features of a single image,
            And then add them to the bag of words model for localization
            </summary>
            <param name="iRGBFrame"></param>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.StartFromExistingLandmarkImpl(System.Int32)">
            <summary>
            Start a new path from existing landmark
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.ArriveAtExistingLandmarkImpl(System.Int32)">
            <summary>
            Join path at a existing landmark
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.UpdateLandmarkDistance(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Update the connection between two landmarks
            </summary>
            <param name="iStart"></param>
            <param name="iEnd"></param>
            <param name="iDist">Distance in meter</param>
            <param name="iOrientation">Orientation in degree</param>
            <returns></returns>
        </member>
        <member name="P:BlueQuark.Mapper.RoomCount">
            <summary>
            Counts the number of rooms.
            </summary>
        </member>
        <member name="P:BlueQuark.Mapper.RoomList">
            <summary>
            Returns the list of rooms.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.Init(BlueQuark.Map,System.Boolean)">
            <summary>
            Explicitly initialize Mapper.
            </summary>
            <param name="iMap"></param>
            <param name="iReinit"></param>
        </member>
        <member name="M:BlueQuark.Mapper.AddRoom(BlueQuark.Room)">
            <summary>
            Adds a room into the map.
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.RemoveRoom(BlueQuark.Room)">
            <summary>
            Removes a room from the map.
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.AddRoomConnection(BlueQuark.Room,BlueQuark.Room)">
            <summary>
            Adds connection between two rooms in the topological map.
            </summary>
            <param name="iRoom1"></param>
            <param name="iRoom2"></param>
        </member>
        <member name="M:BlueQuark.Mapper.RoomsConnected(BlueQuark.Room,BlueQuark.Room)">
            <summary>
            Returns if room1 and room2 are connected in the topological map.
            </summary>
            <param name="iRoom1"></param>
            <param name="iRoom2"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Mapper.SetDirection">
            <summary>
            Used when learning landmarks for navigation.
            After learning a landmark, sets direction leading to the next landmark.
            The orientation will be used to update the path info between two landmarks.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.StartFromExistingLandmark(System.Int32)">
            <summary>
            During learning landmarks for navigation, starts a new path from existing landmark.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.ArriveAtExistingLandmark(System.Int32)">
            <summary>
            During learning landmarks for navigation, uses this function to join an existing landmark, a path will corresponding length and orientation.
            will be created in the topological map.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.SaveModel">
            <summary>
            Saves navigation and localization model, calculated image featuers as wells as the topological map.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.ClearModel">
            <summary>
            Clears navigation and localization model calculated image featuers as wells as the topological map.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.LearnNavigationAsync(BlueQuark.Room,System.Int32)">
            <summary>
            Runs the coroutine to learn a landmark for navigation.
            The robot will rotate on itself iNImages times to takes images.
            Images wiil be learned in both the bag of words model (localization)
            And nav model.
            </summary>
            <param name="iRoom">The room.</param>
            <param name="iNImages">Number of images to take.</param>
            <returns>The coroutine.</returns>
        </member>
        <member name="M:BlueQuark.Mapper.LearnLocalizationAsync(BlueQuark.Room,System.Int32)">
            <summary>
            Coroutine to learn images in bag of words model for localization.
            Will take nImages with equal angular distance.
            (for example, 6 images = 60 degrees)
            </summary>
            <param name="iRoom">The room.</param>
            <param name="iNumImages">The total number of images in this landmark;</param>
            <returns>The coroutine;</returns>
        </member>
        <member name="T:BlueQuark.Room">
            <summary>
            Room class for topological map.
            <see cref="!:https://stackoverflow.com/questions/2779743/can-you-add-to-an-enum-type-in-run-time"/>
            </summary>
        </member>
        <member name="P:BlueQuark.Room.Name">
            <summary>
            Room name.
            </summary>
        </member>
        <member name="P:BlueQuark.Room.Owner">
            <summary>
            Owner UserAccount;
            </summary>
        </member>
        <member name="M:BlueQuark.Room.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BlueQuark.Room.#ctor(System.String)">
            <summary>
            Create a room using label.
            </summary>
            <param name="iLabel">The label of the room.</param>
        </member>
        <member name="P:BlueQuark.Room.DefaultRooms">
            <summary>
            Gets the list of rooms by default.
            </summary>
        </member>
        <member name="M:BlueQuark.Room.Equals(System.Object)">
            <summary>
            Overrides Object.Equals
            </summary>
            <param name="iObj"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Room.GetHashCode">
            <summary>
            Overrides Object.GetHashCode
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:BlueQuark.Rooms">
            <summary>
            A default collection of rooms.
            </summary>
        </member>
        <member name="F:BlueQuark.Rooms.Kitchen">
            <summary>
            Kitchen by default.
            </summary>
        </member>
        <member name="F:BlueQuark.Rooms.LivingRoom">
            <summary>
            Living room by default.
            </summary>
        </member>
        <member name="F:BlueQuark.Rooms.Bedroom">
            <summary>
            Bedroom by default.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonDetector">
            <summary>
            Skeleton detector algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonDetector.MAX_BODIES">
            <summary>
            Max tracked bodies.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonDetector.OnDetect">
            <summary>
            Called when an skeleton is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.CalendarManager">
            <summary>
            Represents the calender manager component.
            </summary>
        </member>
        <member name="P:BlueQuark.CalendarManager.PlannedAlarms">
            <summary>
            List of all alarms of the system.
            </summary>
        </member>
        <member name="P:BlueQuark.CalendarManager.PlannedEvents">
            <summary>
            List of all active events in the system.
            </summary>
        </member>
        <member name="P:BlueQuark.CalendarManager.DiaryEvents">
            <summary>
            List of all active diary events.
            </summary>
        </member>
        <member name="P:BlueQuark.CalendarManager.ScheduledTasks">
            <summary>
            List of all tasks of the system.
            </summary>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.DiaryEventReminder)">
            <summary>
            Adds an issued event to the current list.
            </summary>
            <param name="iIssuedEvent">The issued event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.PlannedEventReminder)">
            <summary>
            Adds a planned event to the current list.
            </summary>
            <param name="iPlannedEvent">The planned event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.PlannedAlarmReminder)">
            <summary>
            Adds a planned alarm to the list.
            </summary>
            <param name="iPlannedAlarm">The planned alarm.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.ScheduledTask)">
            <summary>
            Adds a planned alarm to the list.
            </summary>
            <param name="iScheduledTask">The Scheduled task.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.DiaryEventReminder)">
            <summary>
            Removes a given diary event from the active list.
            </summary>
            <param name="iIssuedEvent">The issued event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.PlannedEventReminder)">
            <summary>
            Removes a Planned event from the active list.
            </summary>
            <param name="iPlannedEvent">The planned event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.PlannedAlarmReminder)">
            <summary>
            Removes a planned alarm from the active list.
            </summary>
            <param name="iPlannedAlarm">The planned alarm.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.ScheduledTask)">
            <summary>
            Removes a scheduled task from the active list.
            </summary>
            <param name="iScheduledTask">The scheduled task.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.AddNotifFromReminder(BlueQuark.AReminder,System.Action,System.Action)">
            <summary>
            Adds a notification linked to the given reminder.
            </summary>
            <param name="iReminder">The reminder.</param>
            <param name="iOnValidate">Action on the validation.</param>
            <param name="iOnRefuse">Action on the refuse.</param>
        </member>
        <member name="T:BlueQuark.AReminder">
            <summary>
            Represents a base class for reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.NotifId">
            <summary>
            Represents the notification id.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.ReminderNotifContent">
            <summary>
            Represents the content of the reminder notification.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.ReminderContent">
            <summary>
            Represents the content of the reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.ReminderState">
            <summary>
            Represents the reminder state.
            </summary>
            <seealso cref="P:BlueQuark.AReminder.ReminderState"/>
        </member>
        <member name="P:BlueQuark.AReminder.Targets">
            <summary>
            Represents the users targeted by the reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.AReminder.#ctor">
            <summary>
            Creates a base reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.AReminder.#ctor(System.String,System.String,BlueQuark.ReminderState,System.Collections.Generic.List{BlueQuark.UserAccount})">
            <summary>
            Creates a base reminder.
            </summary>
            <param name="iReminderContent">The content of the reminder.</param>
            <param name="iReminderNotifContent">The notif content of the reminder.</param>
            <param name="iReminderState">The state of the reminder.</param>
            <param name="iTargets">The users concerned by the reminder.</param>
        </member>
        <member name="T:BlueQuark.AScheduledReminder">
            <summary>
            Represents a base scheduled reminder.
            </summary>
            <seealso cref="T:BlueQuark.AReminder"/>
        </member>
        <member name="P:BlueQuark.AScheduledReminder.ReminderTime">
            <summary>
            Date of the reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.AScheduledReminder.RepetitionDays">
            <summary>
            Repetition of the reminder by week.
            </summary>
        </member>
        <member name="M:BlueQuark.AScheduledReminder.#ctor">
            <summary>
            Creates a base scheduled reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.AScheduledReminder.#ctor(System.String,System.DateTime,System.String,System.Collections.Generic.List{BlueQuark.UserAccount},System.Collections.Generic.List{System.DayOfWeek},BlueQuark.ReminderState)">
            <summary>
            Creates a base scheduled reminder. 
            </summary>
            <param name="iContent">Content of the scheduled reminder.</param>
            <param name="iReminderTime">Date of the reminder.</param>
            <param name="iReminderNotifContent">Reminder notif content.</param>
            <param name="iTargets">The users concerned by the reminder.</param>
            <param name="iRepetitionDays">Repetition of the reminder by week.</param>
            <param name="iReminderState">State of the reminder.</param>
        </member>
        <member name="T:BlueQuark.CalendarEventType">
            <summary>
            Type of diary event.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.PARTY">
            <summary>
            Party.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.APPOINTMENT">
            <summary>
            Appointment.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.HOLIDAYS">
            <summary>
            Holidays.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.HOBBY">
            <summary>
            Hobby.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.BIRTHDAY">
            <summary>
            An error occured.
            </summary>
        </member>
        <member name="T:BlueQuark.DiaryEventReminder">
            <summary>
            Represents a diary event reminder.
            </summary>
            <seealso cref="T:BlueQuark.AReminder"/>
            <seealso cref="T:BlueQuark.DiaryEventType"/>
        </member>
        <member name="P:BlueQuark.DiaryEventReminder.EventTime">
            <summary>
            The event time.
            </summary>
        </member>
        <member name="P:BlueQuark.DiaryEventReminder.Type">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="M:BlueQuark.DiaryEventReminder.#ctor(System.String,System.DateTime,System.String,BlueQuark.DiaryEventType,System.Collections.Generic.List{BlueQuark.UserAccount},BlueQuark.ReminderState)">
            <summary>
            Create a new diary event reminder.
            </summary>
            <param name="iContent">The content of the reminder.</param>
            <param name="iEventTime">The time of the reminder.</param>
            <param name="iNotifContent">The notif content.</param>
            <param name="iType">The type of the reminder.</param>
            <param name="iTargets">The users targeted by the reminder.</param>
            <param name="iReminderState">The state of the reminder.</param>
        </member>
        <member name="T:BlueQuark.DiaryEventType">
            <summary>
            Type of diary event.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.INFORM">
            <summary>
            Robots needs to inform.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.MISSED_CALL">
            <summary>
            Missed Call.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.MAIL_RECEIVED">
            <summary>
            An external media was recived.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.MEDIA_RECEIVED">
            <summary>
            An external media was recived.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.SYSTEM_ERROR">
            <summary>
            An error occured.
            </summary>
        </member>
        <member name="T:BlueQuark.PlannedAlarmReminder">
            <summary>
            Represent a planned alarm reminder.
            </summary>
            <seealso cref="T:BlueQuark.AScheduledReminder"/>
        </member>
        <member name="P:BlueQuark.PlannedAlarmReminder.Music">
            <summary>
            The music used for the alarm.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedAlarmReminder.Activated">
            <summary>
            Represents if the alarm is activated.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedAlarmReminder.Volume">
            <summary>
            Volume of the alarm.
            </summary>
        </member>
        <member name="M:BlueQuark.PlannedAlarmReminder.#ctor(System.String,System.DateTime,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.List{System.DayOfWeek},System.Collections.Generic.List{BlueQuark.UserAccount},BlueQuark.ReminderState)">
            <summary>
            Creates a new planed alarm reminder.
            </summary>
            <param name="iContent">The content of the reminder.</param>
            <param name="iReminderTime">The date of the reminder.</param>
            <param name="iReminderNotifContent">The notif content of the alarm.</param>
            <param name="iMusic">The music of the alarm.</param>
            <param name="iVolume">The volume of the alarm.</param>
            <param name="iActivated">If the alarm is activated.</param>
            <param name="iRepetitionDays">The repetition of the alarm in the week.</param>
            <param name="iTargets">The users targeted by the reminder.</param>
            <param name="iReminderState">The reminder state.</param>
        </member>
        <member name="T:BlueQuark.PlannedEventReminder">
            <summary>
            Represents a planned event reminder.
            </summary>
            <seealso cref="T:BlueQuark.AScheduledReminder"/>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.NotifyUser">
            <summary>
            True if the user will be notified.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.EventTime">
            <summary>
            The time of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.Duration">
            <summary>
            The duration of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.Type">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.RepetitionTime">
            <summary>
            The repetition of the reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.PlannedEventReminder.#ctor(System.String,System.DateTime,System.Boolean,System.String,BlueQuark.CalendarEventType,System.Collections.Generic.List{BlueQuark.UserAccount},BlueQuark.RepetitionTime,System.Collections.Generic.List{System.DayOfWeek},BlueQuark.ReminderState)">
            <summary>
            Creates a planned event reminder.
            </summary>
            <param name="iContent">The content of the reminder.</param>
            <param name="iReminderTime">The date of the reminder.</param>
            <param name="iNotify">If the user will be notified.</param>
            <param name="iReminderNotifContent">The notif content of the alarm.</param>
            <param name="iType">The type of the event Calendar.</param>
            <param name="iRepetitionDays">The repetition of the alarm in the week.</param>
            <param name="iTargets">The users targeted by the reminder.</param>
            <param name="iRepetitionTime">The time of the reminder.</param>
            <param name="iReminderState">The reminder state.</param>
        </member>
        <member name="T:BlueQuark.ReminderState">
            <summary>
            Status of the reminder.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.NEW">
            <summary>
            Reminder newly added.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.ACTIVE">
            <summary>
            Reminder newly added.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.DELIVERED">
            <summary>
            Reminder was delivered to someone.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.VALIDATED">
            <summary>
            The reminder's notification was validated.
            </summary>
        </member>
        <member name="T:BlueQuark.RepetitionTime">
            <summary>
            Type of diary event.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.ONCE">
            <summary>
            The event happens only once.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.DAYLY">
            <summary>
            The event happens dayly.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.WEEKLY">
            <summary>
            The event happens weekly.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.EVERY_TWO_WEEKS">
            <summary>
            The event happens every two weeks.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.MONTHLY">
            <summary>
            The event happens every month.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.ANNUAL">
            <summary>
            The event happens every year.
            </summary>
        </member>
        <member name="T:BlueQuark.Language">
            <summary>
            Represents a language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.ISO6391Code">
            <summary>
            Represents a language norm code.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.ISO6392Code">
            <summary>
            Represents a language norm code.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.ISO6393Code">
            <summary>
            Represents a language norm code.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.BCP47Code">
            <summary>
            Represents a norm code language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.LocalName">
            <summary>
            Represents the local name of the language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.EnglishName">
            <summary>
            Represents the english name of the language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.Culture">
            <summary>
            The culture info related to the language.
            </summary>
        </member>
        <member name="M:BlueQuark.Language.op_Equality(BlueQuark.Language,BlueQuark.Language)">
            <summary>
            Checks if two languages are the same.
            </summary>
            <param name="iFirstLanguage">First language to compare.</param>
            <param name="iSecondLanguage">Second language to compare.</param>
            <returns>True if they describe the same language.</returns>
        </member>
        <member name="M:BlueQuark.Language.op_Inequality(BlueQuark.Language,BlueQuark.Language)">
            <summary>
            Checks if two languages are differents.
            </summary>
            <param name="iFirstLanguage">First language to compare.</param>
            <param name="iSecondLanguage">Second language to compare.</param>
            <returns>True if they describe a different language.</returns>
        </member>
        <member name="P:BlueQuark.Language.OutputVoices">
            <summary>
            Represents a list of installed voices for the language. It is updated each install/update and uninstall. 
            </summary>
        </member>
        <member name="T:BlueQuark.ISO6393Code">
            <summary>
            Language three-letter codes, the same as 639-2/T for languages, but with distinct codes for each variety of an ISO 639 macrolanguage.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.ENG">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.FRA">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.ITA">
            <summary>
            Italian language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.DEU">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.JPN">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.NLD">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.KOR">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.ISO6392Code">
            <summary>
            Language three-letter codes, mostly the same as 639-2/T, but with some codes derived from English names rather than native names of languages.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.ENG">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.FRA">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.ITA">
            <summary>
            Italian language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.GER">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.JPN">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.NLD">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.KOR">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.Photograph">
            <summary>
            This class represents a photo taken during a running app. Can be saved as PNG on the HDD.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.TimeStamp">
            <summary>
            The date time when the photo has been created.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Image">
            <summary>
            Content of the photograph.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Location">
            <summary>
            Path to the parent directory.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Name">
            <summary>
            Name of the photo.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Extension">
            <summary>
            Extension of the file.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.FullPath">
            <summary>
            Full path of the photograph.
            </summary>
        </member>
        <member name="M:BlueQuark.Photograph.Dispose">
            <summary>
            Disposes the object and its inner texture. Does not delete the image if stored in disk.
            </summary>
        </member>
        <member name="M:BlueQuark.Photograph.Update(UnityEngine.Sprite)">
            <summary>
            Update the stored image. Must be saved for permanent effect.
            </summary>
            <param name="iNewImage">The new image to set.</param>
            <returns>True if operation is successful.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Update(UnityEngine.Texture2D)">
            <summary>
            Update the stored image. Must be saved for permanent effect.
            </summary>
            <param name="iNewImage">The new image to set.</param>
            <returns>True if operation is successful.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Update(OpenCVUnity.Mat)">
            <summary>
            Update the stored image. Must be saved for permanent effect.
            </summary>
            <param name="iNewImage">The new image to set.</param>
            <returns>True if operation is successful.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Save">
            <summary>
            Saves the image on disk. The Photo will be readable only for the running App.
            </summary>
            <returns>The fullpath to the saved photograph.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Delete">
            <summary>
            Deletes the local version of the photo.
            </summary>
            <returns>True if the deletion was successful, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.CreateFromFile(System.String)">
            <summary>
            Creates a photograph object from the given full path.
            </summary>
            <param name="iFullpath">Full path (with file and extension) to the image file.</param>
            <returns>The loaded photograph from the file. Null if error or not found.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.CreateSpritelessFromFile(System.String)">
            <summary>
            Creates a spriteless (no sprite will be load into memory) photograph object from the given full path.
            </summary>
            <returns>The metadata object without loaded sprite. Null if error or not found.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.CreateFromBytes(System.Byte[])">
            <summary>
            Creates a photograph object from the given full path.
            </summary>
            <param name="iData">Full path (with file and extension) to the image file.</param>
            <returns>The loaded photograph from the file. Null if error or nor found.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.SaveBytes(System.Byte[])">
            <summary>
            Save a byte array as a photograph. The location is chosen according to the running app and the current user.
            </summary>
            <param name="iData">Byte array of the sprite.</param>
            <returns>The fullpath to the saved photograph.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.SaveBytes(System.Byte[],System.String)">
            <summary>
            Save a byte array as a photograph. The location will be choosen regarding the running app and the current user.
            </summary>
            <param name="iData">Byte array of the sprite.</param>
            <param name="iFilename">Filename of the sprite to save.</param>
            <returns>The fullpath to the saved photograph.</returns>
        </member>
        <member name="T:BlueQuark.LanguageManager">
            <summary>
            Language handler for the system.
            </summary>
            <seealso cref="T:BlueQuark.Language"/>
        </member>
        <member name="P:BlueQuark.LanguageManager.OutputLanguage">
            <summary>
            The language used for any talk purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.LanguageManager.InputLanguage">
            <summary>
            The language used for any listening purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.LanguageManager.GUILanguage">
            <summary>
            The language used for all GUI purposes. Can only be set by user.
            </summary>
        </member>
        <member name="P:BlueQuark.LanguageManager.AvailableLanguages">
            <summary>
            All runnable languages by the system.
            </summary>
        </member>
        <member name="M:BlueQuark.LanguageManager.GetLanguageFromISOCode(BlueQuark.ISO6391Code)">
            <summary>
            Retrieves any existing language from its ISO-639-1 code.
            </summary>
            <param name="iCode">The code of the language to retrieve.</param>
            <returns>The language if existing, null otherwise.</returns>
        </member>
        <member name="M:BlueQuark.LanguageManager.GetLanguageFromLocalName(System.String)">
            <summary>
            Retrieves any existing language from its local name.
            </summary>
            <param name="iLocalName">The string corresponding to the language.</param>
            <returns>The language if existing, null otherwise.</returns>
        </member>
        <member name="M:BlueQuark.LanguageManager.GetLanguageFromEnglishName(System.String)">
            <summary>
            Retrieves any existing language from its English name.
            </summary>
            <param name="iEnglishName">The string corresponding to the language.</param>
            <returns>The language if existing, null otherwise.</returns>
        </member>
        <member name="M:BlueQuark.LanguageManager.InstallVoice(BlueQuark.Internal.OutputVoice,System.Action{System.Boolean})">
            <summary>
            This function will install a voice.
            It can takes several minutes.
            </summary>
            <param name="iVoiceToInstall">The voice to install.</param>
            <param name="iOnEndInstalling">Boolean is false if the voice cannot be installed.</param>
        </member>
        <member name="M:BlueQuark.LanguageManager.UninstallVoice(BlueQuark.Internal.OutputVoice,System.Action{System.Boolean})">
            <summary>
            This funciton will uninstall a voice.
            </summary>
            <param name="iVoiceToUninstall">The voice to uninstall.</param>
            <param name="iOnEndUninstalling">
            Boolean is true if the voice has been uninstalled or if it is not installed. 
            It can be false if the voice is queued or is currently installing.
            </param>
        </member>
        <member name="M:BlueQuark.LanguageManager.UseVoice(BlueQuark.Internal.OutputVoice,System.Action{System.Boolean})">
            <summary>
            Changes the voice to use. You should change the SystemLanguage only if this function succeed, in the callback.
            You must ensure that the voice to use is installed before calling this method.
            </summary>
            <param name="iVoiceToUse">The voice to set.</param>
            <param name="iOnEndSettingVoiceToUse">
            Boolean is true if the voice has been initialized well.
            It can be false if the voice is not installed of is currently installing.
            </param>
        </member>
        <member name="T:BlueQuark.ACameraFrame">
            <summary>
            The Generic Image Camera Output Container.
            It contains a Texture2D and/or a Mat.
            Each Camera possesses only one CameraFrame.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Texture">
            <summary>
            Current frame's Texture.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.MirroredTexture">
            <summary>
            Gets the mirrored FrameTexture
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Mat">
            <summary>
            Current frame's CVMat.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.ID">
            <summary>
            ID of the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Width">
            <summary>
            Width of the current frame. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Height">
            <summary>
            Height of the current frame. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.UpdatesTexture">
            <summary>
            Tells if CameraFrame updates its Texture.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.UpdatesMat">
            <summary>
            Tells if CameraFrame updates its Mat.
            </summary>
        </member>
        <member name="T:BlueQuark.DepthCameraFrame">
            <summary>
            The DepthCamera specialized frame
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCameraFrame.DepthFrameData">
            <summary>
            Raw depth values in mm
            </summary>
        </member>
        <member name="T:BlueQuark.HDCameraFrame">
            <summary>
            The HDCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.InfraredCameraFrame">
            <summary>
            The InfraredCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.RGBCameraFrame">
            <summary>
            The RGBCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalCameraFrame">
            <summary>
            The ThermalCamera specialized frame.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCameraFrame.RelativeTexture">
            <summary>
            Returns the texture relatively to the hottest point in the thermal matrix in gradient of red and blue.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCameraFrame.AbsoluteTexture">
            <summary>
            Returns the absolute texture in gradient of red and blue.
            </summary>
        </member>
        <member name="T:BlueQuark.Range`1">
            <summary>
            Represents a range within a minimal value and a maximal value.
            </summary>
        </member>
        <member name="P:BlueQuark.Range`1.Minimum">
            <summary>
            The minimal value of this range.
            </summary>
        </member>
        <member name="P:BlueQuark.Range`1.Maximum">
            <summary>
            The maximal value of this range.
            </summary>
        </member>
        <member name="M:BlueQuark.Range`1.#ctor(`0,`0)">
            <summary>
            Create a range with given values.
            </summary>
            <param name="iMinimum">The minimal value of the range.</param>
            <param name="iMaximum">The maximal value of the range.</param>
        </member>
        <member name="M:BlueQuark.Range`1.ToString">
            <summary>
            Converts the range of this instance to its equivalent string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Range`1.IsValid">
            <summary>
            Determine if the range is valid.
            </summary>
            <returns>True if range is valid (), false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Range`1.ContainsValue(`0)">
            <summary>
            Determine if the given value is inside the range.
            </summary>
            <param name="iValue">The value to test.</param>
            <returns>True if the value is inside the range, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Range`1.IsInsideRange(BlueQuark.Range{`0})">
            <summary>
            Determine if this range is inside the bounds of another range.
            </summary>
            <param name="iRange">The range to test</param>
            <returns>True if this range is included, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Range`1.ContainsRange(BlueQuark.Range{`0})">
            <summary>
            Determine if another range is inside the bounds of this range.
            </summary>
            <param name="iRange">The range to test.</param>
            <returns>True if the given range is included, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Range`1.ClampValue(`0)">
            <summary>
            Clamp the value between minimum and maximum of this range.
            </summary>
            <param name="iValue">The value to clamp.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="T:BlueQuark.AStringMask`1">
            <summary>
            
            </summary>
        </member>
        <member name="T:BlueQuark.Cognitive">
            <summary>
            The Module that represents the emotional and brain core of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.IsBusy">
            <summary>
            If cognitive is busy.
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.InternalState">
            <summary>
            Returns the internal state.
            </summary>
            <seealso cref="P:BlueQuark.Cognitive.InternalState"/>
        </member>
        <member name="M:BlueQuark.Cognitive.UserExists(System.String)">
            <summary>
            If the list of users registered with the companion contain the provided name.
            </summary>
            <param name="iUserName">The name to search for in the user list.</param>
            <returns>True if user is registered with the companion.</returns>
        </member>
        <member name="T:BlueQuark.InternalState">
            <summary>
            Internal state component of the robot. Gives you access to the entire mind state of buddy.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.ComputeBias">
            <summary>
            Compute the uncumulative emotional stimuli
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.Variable2Mood(System.Int32,System.Int32)">
            <summary>
            To visualize the internal state rapartition, it's recommended to have a look at the documentation on the NAS.
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
        </member>
        <member name="P:BlueQuark.InternalState.Mood">
            <summary>
            The current state of mind of Buddy.
            </summary>
        </member>
        <member name="P:BlueQuark.InternalState.Pleasure">
            <summary>
            The positivity value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.InternalState.Arousal">
            <summary>
            The energy value of the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.ExplainMood">
            <summary>
            Buddy will explain why it's in its current state, relatively to its past interactions.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.AddCumulative(BlueQuark.EmotionalEvent)">
            <summary>
            Add a cumulative event to Buddy's actual list.
            </summary>
            <param name="iEmotionalEvent">The emotional event.</param>
        </member>
        <member name="T:BlueQuark.EmotionalEvent">
            <summary>
            Class that represent an emotional event.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Type">
            <summary>
            Gets the category of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.EventDescriber">
            <summary>
            Describes the event and compares if events are similar.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.ExplanationKey">
            <summary>
            This is used to explain Buddy's mood.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Positivity">
            <summary>
            The positivity value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Energy">
            <summary>
            The energy value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.MoodDirection">
            <summary>
            Tells where this event is going to, which mood should result.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Time">
            <summary>
            Time when the event was registered.
            </summary>
        </member>
        <member name="M:BlueQuark.EmotionalEvent.#ctor(System.Int32,System.Int32,System.String,System.String,BlueQuark.EmotionalEventType,BlueQuark.InternalMood)">
            <summary>
            
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
            <param name="iExplanationKey"></param>
            <param name="iEventDescriber"></param>
            <param name="iType"></param>
            <param name="iMoodDirection"></param>
        </member>
        <member name="M:BlueQuark.EmotionalEvent.#ctor(System.Int32,System.Int32,System.String,System.String,BlueQuark.EmotionalEventType,BlueQuark.InternalMood,System.Int32)">
            <summary>
            
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
            <param name="iExplanationKey"></param>
            <param name="iEventDescriber"></param>
            <param name="iType"></param>
            <param name="iMoodDirection"></param>
            <param name="iTime"></param>
        </member>
        <member name="T:BlueQuark.EmotionalEventType">
            <summary>
            Represents the different emotional type.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.INTERACTION">
            <summary>
            Interaction.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.EXTERNAL_EVENT">
            <summary>
            External Event.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.UNFULFILLED_DESIRE">
            <summary>
            Unfulfilled desire.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.FULFILLED_DESIRE">
            <summary>
            Fulfilled desire.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.CALENDAR">
            <summary>
            Calendar.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.APP">
            <summary>
            App.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.NEUTRAL">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.EXCITED">
            <summary>
            Excited.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.ANGRY">
            <summary>
            Angry.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.SAD">
            <summary>
            Sad.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.HAPPY">
            <summary>
            Happy.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.GRUMPY">
            <summary>
            Grumpy.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.BITTER">
            <summary>
            Bitter.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.RELAXED">
            <summary>
            Relaxed.
            </summary>
        </member>
        <member name="T:BlueQuark.FLabeledButton">
            <summary>
            Labeled button widget for the Footer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FLabeledButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.FLabeledButton.SetLabel(System.String)">
            <summary>
            Sets the label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.FLabeledHorizontalSlider">
            <summary>
            Slider bar for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FLabeledHorizontalSlider.OnSlide">
            <summary>
            Called when the value changed.
            </summary>
        </member>
        <member name="P:BlueQuark.FLabeledHorizontalSlider.SlidingValue">
            <summary>
            The current sliding value.
            </summary>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetButtonBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets background icon of the button.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetButtonBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background color of the button.
            </summary>
            <param name="iColor">The color of the button background.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetSliderBackground(UnityEngine.Sprite)">
            <summary>
            Sets the background of the slider.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetSliderColor(UnityEngine.Color)">
            <summary>
            Sets the slider's color.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetFillBackground(UnityEngine.Sprite)">
            <summary>
            Sets the fill gauge background image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetFillColor(UnityEngine.Color)">
            <summary>
            Sets the fill gauge color.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="T:BlueQuark.GraphPlotToast">
            <summary>
            Represents a graph plot UI element.
            </summary>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}},System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}},System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="T:BlueQuark.VideoStreamToast">
            <summary>
            Represents a full screen video stream UI element.
            </summary>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(BlueQuark.Internal.ICamera)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCamera">The texture stream to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(BlueQuark.Internal.ICamera,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCamera">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(BlueQuark.Internal.ICamera,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCamera">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(BlueQuark.Internal.ICamera,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCamera">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="T:BlueQuark.TSliderToggle">
            <summary>
            Toggable slider sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.MaxSlidingValue">
            <summary>
            The maximum allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.MinSlidingValue">
            <summary>
            The minimal allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.WholeSlidingValue">
            <summary>
            Should the value only be allowed to be whole numbers ?
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.TSliderToggle.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="T:BlueQuark.TLabeledToggle">
            <summary>
            Toggle sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.TLabeledToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TLabeledToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.TLabeledToggle.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="M:BlueQuark.TLabeledToggle.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.BluetoothDevice">
            <summary>
            Represents a bluetooth device.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.IsConnected">
            <summary>
            True if the device is connected.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.IsPaired">
            <summary>
            True if the device is paired.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.Name">
            <summary>
            Represents the name of the bluetooth device.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.Address">
            <summary>
            Represent the mac address of the device.
            </summary>
        </member>
        <member name="T:BlueQuark.BluetoothActionStatus">
            <summary>
            Represents the possible bluetooth actions.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.PAIRING_SUCCESS">
            <summary>
            Pairing success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.PAIRING_FAILED">
            <summary>
            Pairing failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.UNPAIRING_SUCCESS">
            <summary>
            Unpairing success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.UNPAIRING_FAILED">
            <summary>
            Unpairing failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.CONNECTION_SUCCESS">
            <summary>
            Connection success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.CONNECTION_FAILED">
            <summary>
            Connection failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.DISCONNECTION_SUCCESS">
            <summary>
            Disconnection success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.DISCONNECTION_FAILED">
            <summary>
            Disconnection failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.RECEIVING_SUCCESS">
            <summary>
            Receiving success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.RECEIVING_FAILED">
            <summary>
            Receiving failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.SEND_SUCCESS">
            <summary>
            Send success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.SEND_FAILED">
            <summary>
            Send failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.DEVICE_NOT_PAIRED">
            <summary>
            Device not paired.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.DEVICE_NOT_CONNECTED">
            <summary>
            Device not connected.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.DEVICE_NOT_FOUND">
            <summary>
            Device not found.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.SCANNING_STARTED">
            <summary>
            Scanning started.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionStatus.SCANNING_FINISHED">
            <summary>
            Scanning finished.
            </summary>
        </member>
        <member name="T:BlueQuark.Screen">
            <summary>
            Screen component of the robot. Handle miscellaneous data and locking system.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Height">
            <summary>
            Gets the height in the screen in pixel.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Width">
            <summary>
            Gets the width of the screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.DPI">
            <summary>
            Gets the dots per inch of the screen. It is a measure of spatial printing or video or image scanner dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm).
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.FrameRate">
            <summary>
            Gets the number of frame per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.TargetFrameRate">
            <summary>
            Gets the target frame rate of the engine.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.VSyncCount">
            <summary>
            Gets the vertical synchronization count according to Unity system.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.AntiAliasing">
            <summary>
            Anti aliasing according to Unity system.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Brightness">
            <summary>
            The brightness of the screen. From 0 to 1. 1 is fully luminous.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Locked">
            <summary>
            Locks/unlocks the screen. Can be temporary unlocked by user with the global password. Locked system is enabled until programmaticaly unlocked.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Duplicated">
            <summary>
            Enables/Disables the robot screen display on HDMI output.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.LockTimeout">
            <summary>
            Time out during an unlocking attempt.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.RelockTimeout">
            <summary>
            Time out after an unlocking success.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnClickToUnlock">
            <summary>
            Called when the screen is locked and a user asks for unlocking.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnCancelUnlock">
            <summary>
            Called when the screen is locked and a user cancels an unlocking attempt.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnSuccessUnlock">
            <summary>
            Called when the screen is locked and a user successfully unlocks the screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnFailUnlock">
            <summary>
            Called when the screen is locked and a user didn't succeed to unlock the screen after an attempt.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnTimeoutUnlock">
            <summary>
            Called when the screen is locked and the LockTimeout occurs.
            </summary>
            <seealso cref="P:BlueQuark.Screen.LockTimeout"/>
        </member>
        <member name="P:BlueQuark.Screen.OnTouch">
            <summary>
            Called when a user interacts with the screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnSwipe">
            <summary>
            Called when a user swipe occured.
            </summary>
        </member>
        <member name="M:BlueQuark.Screen.DisplayLockingToast">
            <summary>
            Displays the locking toast on the screen. Can happen only if the screen is locked.
            </summary>
        </member>
        <member name="T:BlueQuark.SwipeDirection">
            <summary>
            User swipe direction on the robot screen.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.UP">
            <summary>
            The movement is bottom->up.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.DOWN">
            <summary>
            The movement is top->down.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.RIGHT">
            <summary>
            The movement is left->right.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.LEFT">
            <summary>
            The movement is right->left.
            </summary>
        </member>
        <member name="T:BlueQuark.SlideSet">
            <summary>
            Represents a collection of Slides
            </summary>
        </member>
        <member name="P:BlueQuark.SlideSet.Count">
            <summary>
            Number of slide in the current slide set.
            </summary>
        </member>
        <member name="P:BlueQuark.SlideSet.CurrentIndex">
            <summary>
            Index of the current displayed slide.
            </summary>
        </member>
        <member name="P:BlueQuark.SlideSet.OnNext">
            <summary>
            Called when the next button is enabled and clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.SlideSet.OnPrevious">
            <summary>
            Called when the previous button is enabled and clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.EnableNext">
            <summary>
            Enable the next action. Do nothing if already enabled or no next slide.
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.EnablePrevious">
            <summary>
            Enable the previous action. Do nothing if already enabled or no previous slide.
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.DisableNext">
            <summary>
            Disable the next action. Do nothing if already disabled.
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.DisablePrevious">
            <summary>
            Disable the previous action. Do nothing if already disabled.
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.SetDefaultSlide``1">
            <summary>
            Sets the default slide. Displayed when no slide is present.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <returns>The toast as default toast to configure.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.AddFirstDisplayedSlide``1">
            <summary>
            Sets the first slide to be displayed.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <returns>The toast as the first displayed toast to configure.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.AddSlide``1">
            <summary>
            Adds a sliding toast to the slide set. Slide are append from left to right. Up to 1000 toasts in a slide. 
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <returns>The added toast to configure.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.RemoveSlide``1(``0,System.Boolean)">
            <summary>
            Removes a sliding toast from the curent slide set.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <param name="iSlide">The slide to remove.</param>
            <param name="iGoNextIfCurrent">If the removed slide was the current slide, set iGoNextIfCurrent to true to go to the next slide, false for the previous one.</param>
            <returns>True if the remove was successful, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.RemoveSlide(System.Int32,System.Boolean)">
            <summary>
            Removes a sliding toast from the curent slide set.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <param name="iIdx">Index of the slide to remove.</param>
            <param name="iGoNextIfCurrent">If the removed slide was the current slide, set iGoNextIfCurrent to true to go to the next slide, false for the previous one.</param>
            <returns>True if the remove was successful, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoTo(System.Int32,System.Action)">
            <summary>
            Moves to the wished toast. Makes a swap transition if the wished toast is near to the current toast.
            </summary>
            <param name="iSlideIdx">The target toast index, must be between 0 and 4.</param>
            <param name="iOnEndAnim">Callback called at the end of the animation.</param>
            <returns>True if the target toast is in bound.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoTo(BlueQuark.Internal.ASlideToast,System.Action)">
            <summary>
            Moves to the wished toast. Makes a swap transition if the wished toast is near to the current toast.
            </summary>
            <param name="iSlide">The target toast.</param>
            <param name="iOnEndAnim">Callback called at the end of the animation.</param>
            <returns>True if the target toast is in bound.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoNext(System.Action)">
            <summary>
            Swaps to the next toast.
            </summary>
            <returns>True if the swap was well (there is at least one next toast).</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoPrevious(System.Action)">
            <summary>
            Swaps to the previous toast.
            </summary>
            <returns>True if the swap was well (there is at least one previous toast).</returns>
        </member>
        <member name="T:BlueQuark.CalendarToast">
            <summary>
            Represents a calendar. TODO : WIP
            </summary>
        </member>
        <member name="T:BlueQuark.CountdownToast">
            <summary>
            Represents a countdown clock that can be managed.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.IsDone">
            <summary>
            Returns true if the countdown is done.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Second">
            <summary>
            Remaining seconds in the current minute.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Minute">
            <summary>
            Remaining minutes in the current hour.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Hour">
            <summary>
            Remaining hours.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Playing">
            <summary>
            Is the countdown playing ?
            </summary>
        </member>
        <member name="M:BlueQuark.CountdownToast.Pulse(System.Boolean)">
            <summary>
            Sets a pulsation beyond the countdown.
            </summary>
            <param name="iVal">True to active the pulsation, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,UnityEngine.Color)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,UnityEngine.Color)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,UnityEngine.Color)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="T:BlueQuark.CustomToast">
            <summary>
            Represents a custom element that can be displayed with the Toaster or Dialoger.
            </summary>
        </member>
        <member name="M:BlueQuark.CustomToast.With(UnityEngine.GameObject)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCustomGameObject">The gameobject to display at the center of the layout. 
            The GameObject will be destroyed. So provide a copy via GameObject.Instanciate(go) if you want to keep the original GO.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CustomToast.With(UnityEngine.GameObject,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCustomGameObject">The gameobject to display at the center of the layout. 
            The GameObject will be destroyed. So provide a copy via GameObject.Instanciate(go) if you want to keep the original GO.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CustomToast.With(UnityEngine.GameObject,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iCustomGameObject">The gameobject to display at the center of the layout. 
            The GameObject will be destroyed. So provide a copy via GameObject.Instanciate(go) if you want to keep the original GO.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="T:BlueQuark.PictureToast">
            <summary>
            Represents a full screen picture UI element.
            </summary>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="T:BlueQuark.IconToast">
            <summary>
            Represents a toast composed by an icon.
            </summary>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Boolean,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iDisplayDisk">Doest the disk must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Boolean,System.Boolean,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iDisplayDisk">Doest the disk must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Boolean,System.Boolean,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iDisplayDisk">Doest the disk must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="T:BlueQuark.VerticalListToast">
            <summary>
            Represents a list of vertical elements.
            </summary>
        </member>
        <member name="M:BlueQuark.VerticalListToast.With(System.Action{BlueQuark.VerticalListToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Callback called when the toast is display. Use the given argument to add vertical elements.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.With(System.Action{BlueQuark.VerticalListToast},System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Callback called when the toast is display. Use the given argument to add vertical elements.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.With(System.Action{BlueQuark.VerticalListToast},System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Callback called when the toast is display. Use the given argument to add vertical elements.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.CreateBox">
            <summary>
            Creates and adds a widget inside the vertical list.
            </summary>
            <returns>The wished widget.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.CreateSearch(System.String,UnityEngine.Sprite,System.Action{System.String})">
            <summary>
            Creates search for the list
            </summary>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Remove(BlueQuark.TVerticalListBox)">
            <summary>
            Removes from the list the specified widget.
            </summary>
            <param name="iBox">The widget to remove.</param>
            <returns>True if the remove was successful.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Select(BlueQuark.TVerticalListBox)">
            <summary>
            Sets the target widget as selected.
            </summary>
            <param name="iBox">The box to select.</param>
        </member>
        <member name="M:BlueQuark.VerticalListToast.AddCustomBox(UnityEngine.GameObject)">
            <summary>
            Adds a custom item to the list.
            </summary>
            <param name="iCustomGameObject">The custom item to add.</param>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Remove(UnityEngine.GameObject)">
            <summary>
            Removes the specified custom item.
            </summary>
            <param name="iCustomGameObject">The item to remove.</param>
            <returns>True if the remove was successful.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Select(UnityEngine.GameObject)">
            <summary>
            Sets the target game object as selected.
            </summary>
            <param name="iCustomGameObject">The gameobject to select.</param>
        </member>
        <member name="T:BlueQuark.TNumPad">
            <summary>
            Represents a large numpad (cannot be cumulate with other capsule widgets) inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TNumPad.OnChangeValue">
            <summary>
            Called when the input value has changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TNumPad.PINLength">
            <summary>
            Authorized PIN length.
            </summary>
        </member>
        <member name="M:BlueQuark.TNumPad.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TNumPad.Clear">
            <summary>
            Clears the current setted input text.
            </summary>
        </member>
        <member name="T:BlueQuark.TRate">
            <summary>
            Represents a rate system for capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TRate.OnRate">
            <summary>
            Called when the rate value has changed. From 0 to 5.
            </summary>
        </member>
        <member name="P:BlueQuark.TRate.RateValue">
            <summary>
            Currently selected rate value. From 0 to 5.
            </summary>
        </member>
        <member name="T:BlueQuark.TAlarmSetting">
            <summary>
            Represents a set of sub widgets to setup a clock.
            </summary>
        </member>
        <member name="P:BlueQuark.TAlarmSetting.OnToggle">
            <summary>
            Called when a day has bin toggle. Each day is encoded in one bit. A bit to 1 mean the day is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.TAlarmSetting.ToggleValues">
            <summary>
            The current set of toggled values.
            </summary>
        </member>
        <member name="M:BlueQuark.TAlarmSetting.SetClockLabel(System.String,System.String)">
            <summary>
            Sets the clock label.
            </summary>
            <param name="iClock">The clock time to display. Cannot be null or empty.</param>
            <param name="iInfo">Optional sub info.</param>
        </member>
        <member name="M:BlueQuark.TAlarmSetting.SetLabel(System.String)">
            <summary>
            Sets the main label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TToggleTable">
            <summary>
            Represents a multi column table of toggles to add inside a capsule toast.
            </summary>
        </member>
        <member name="M:BlueQuark.TToggleTable.CreateToggleInLeftColumn">
            <summary>
            Creates and adds a toggle inside the left column of the table.
            </summary>
            <returns>The created toggle.</returns>
        </member>
        <member name="M:BlueQuark.TToggleTable.CreateToggleInRightColumn">
            <summary>
            Creates and adds a toggle inside the right column of the table.
            </summary>
            <returns>The created toggle.</returns>
        </member>
        <member name="M:BlueQuark.TToggleTable.RemoveToggle(BlueQuark.TToggle)">
            <summary>
            Removes a toggle from the table.
            </summary>
            <param name="iToggle">The toggle to remove.</param>
            <returns>True if the remove was effective.</returns>
        </member>
        <member name="M:BlueQuark.TToggleTable.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="T:BlueQuark.THorizontalListBox">
            <summary>
            Box for horizontal list of elements.
            </summary>
        </member>
        <member name="T:BlueQuark.TCarousel">
            <summary>
            Represents a vertical carousel to set number or data inside a vertical display of capsule layout.
            </summary>
        </member>
        <member name="T:BlueQuark.TLeftSideButton">
            <summary>
            Left button subwidget for VerticalListBox widget.
            </summary>
        </member>
        <member name="P:BlueQuark.TLeftSideButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.Display">
            <summary>
            Display the button.
            </summary>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.Hide">
            <summary>
            Hide the button.
            </summary>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetLabel(System.String)">
            <summary>
            Sets the label of the button. Hides icon.
            </summary>
            <param name="iText">The text to display. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button icon. Hides label.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets The icon color if icon mode.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Changes the background color of the button.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="T:BlueQuark.TRightSideButton">
            <summary>
            Right button subwidget for VerticalListBox widget.
            </summary>
        </member>
        <member name="P:BlueQuark.TRightSideButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetLabel(System.String)">
            <summary>
            Sets the label of the button. Hides icon.
            </summary>
            <param name="iText">The text to display. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button icon. Hides label.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets The icon color if icon mode.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetStroke(System.Boolean)">
            <summary>
            Sets as true to display a line to separate many button.
            </summary>
            <param name="iVal">True to display stroke, false otherwise.</param>
        </member>
        <member name="T:BlueQuark.TVerticalListBox">
            <summary>
            Box for vertical list of elements. Can be customized by adding right side button. 
            </summary>
            <seealso cref="T:BlueQuark.VerticalListToast"/>
        </member>
        <member name="P:BlueQuark.TVerticalListBox.OnClick">
            <summary>
            Called when the main part of the box is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.TVerticalListBox.LeftButton">
            <summary>
            The left button of the box.
            </summary>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.SetLabel(System.String)">
            <summary>
            Sets the label of the box.
            </summary>
            <param name="iText">The text to display. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.SetLabel(System.String,System.String)">
            <summary>
            Sets a multiline label for the box.
            </summary>
            <param name="iUpperText">The upper text to display. If null or empty, a SetLabel will be applied.</param>
            <param name="iLowerText">The lower text to display. If null or empty, a SetLabel will be applied.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.SetCenteredLabel(System.Boolean)">
            <summary>
            Sets the text as centered within the box.
            </summary>
            <param name="iVal">Set as true to center text, false to set to left alignment.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.CreateRightButton">
            <summary>
            Creates an adds a right side button.
            </summary>
            <returns>The just created button to parametrize.</returns>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.RemoveRightButton(BlueQuark.TRightSideButton)">
            <summary>
            Removes a button.
            </summary>
            <param name="iButton">The button to remove.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.Select(System.Boolean)">
            <summary>
            Sets the box as (un)selected.
            </summary>
            <param name="iVal">True for selection, false otherwise.</param>
        </member>
        <member name="T:BlueQuark.DisplacementStrategy">
            <summary>
            Navigation strategies for basic robot movement.
            </summary>
        </member>
        <member name="F:BlueQuark.DisplacementStrategy.MAX_DISTANCE">
            <summary>
            Max distance that can be done in one move instruction. Value in meters.
            </summary>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Action,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Action{UnityEngine.Vector3},BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Single,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iAngularVelocity">Target angular speed in degree by seconds. Maximum 250deg/s.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Single,System.Action,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target linear speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iAngularVelocity">Target angular speed in degree by seconds. Maximum 250deg/s.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Single,System.Action{UnityEngine.Vector3},BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target linear speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iAngularVelocity">Target angular speed in degree by seconds. Maximum 250deg/s.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.MoveWhile(System.Predicate{UnityEngine.Vector3},BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward until the condition is false.
            </summary>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iCondition">The movement condition. Must returns true while the user condition is not fulfilled. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.MoveWhile(System.Predicate{UnityEngine.Vector3},System.Single,BlueQuark.ObstacleAvoidanceType)">
            <summary>
            Moves forward or backward until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true while the user condition is not fulfilled. Cannot be null.</param>
            <param name="iObstacleOption">How to react when encountered an obstacle.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single)">
            <summary>
            Turns the robot's body by a given angle.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees. + turn left, - turn right.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single,System.Single)">
            <summary>
            Turns the robot's body by a given angle.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single,System.Action)">
            <summary>
            Turns the robot's body by a given angle.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single,System.Single,System.Action)">
            <summary>
            Turns the robot's body by a given angle.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single,System.Single,System.Action{UnityEngine.Vector3})">
            <summary>
            Turns the robot's body by a given angle.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single)">
            <summary>
            Turns the robot's body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees. Must be between [-180, 180].</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single,System.Single)">
            <summary>
            Turns the robot's body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees. Must be between [-180, 180].</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single,System.Action)">
            <summary>
            Turns the robot's body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees. Must be between [-180, 180].</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single,System.Single,System.Action)">
            <summary>
            Turns the robot's body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees. Must be between [-180, 180].</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single,System.Single,System.Action{UnityEngine.Vector3})">
            <summary>
            Turns the robot's body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees. Must be between [-180, 180].</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateWhile(System.Predicate{UnityEngine.Vector3})">
            <summary>
            Makes the robot rotate until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true until the user condition is not fulfilled. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateWhile(System.Predicate{UnityEngine.Vector3},System.Single)">
            <summary>
            Makes the robot rotate until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true until the user condition is not fulfilled. Cannot be null</param>
            <param name="iAngularVelocity">Target speed in degrees per second. Negative speed will invert the rotation.</param>
        </member>
        <member name="T:BlueQuark.ObstacleAvoidanceType">
            <summary>
            Obstacle avoidance options
            </summary>
        </member>
        <member name="F:BlueQuark.ObstacleAvoidanceType.NONE">
            <summary>
            No obstacle detection.
            </summary>
        </member>
        <member name="F:BlueQuark.ObstacleAvoidanceType.STOP">
            <summary>
            Stop and wait for a short time. 
            Restart if obstacle disappeared, else stop completely.
            </summary>
        </member>
        <member name="F:BlueQuark.ObstacleAvoidanceType.TURN">
            <summary>
            Turn from the obstalce.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanDetector">
            <summary>
            Human detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetector.OnDetect">
            <summary>
            Called when a face is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDetectorRework">
            <summary>
            Detects moving points in frame.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetectorRework.OnDetect">
            <summary>
            Callback array fired on detection.
            </summary>
        </member>
        <member name="T:BlueQuark.FaceRecognizer">
            <summary>
            Facial recognition component.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceRecognizer.IsBusy">
            <summary>
            True if a request is processing.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceRecognizer.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceRecognizer.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.Recognize(OpenCVUnity.Mat,System.Action{BlueQuark.FaceEntity[]},System.Action{BlueQuark.FaceRecognitionError})">
            <summary>
            Asks for a facial recognition.
            </summary>
            <param name="iRGBMat">RGB matrix where the face is present.</param>
            <param name="iOnRecognized">The callback that returns the list of the recognized users.</param>
            <param name="iOnRecoError">The callback to a possible error occuring during recognition.</param>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.Recognize(OpenCVUnity.Mat,System.Action{BlueQuark.FaceEntity[]})">
            <summary>
            Asks for a facial recognition.
            </summary>
            <param name="iRGBMat">RGB matrix where the face is present.</param>
            <param name="iOnRecognized">The callback that returns the list of the recognized users.</param>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.AddFace(OpenCVUnity.Mat,System.String)">
            <summary>
            Adds a new labeled face. Should be conclued by a Train() call.
            </summary>
            <param name="iRGBMat">RGB matrix where the face is present. Must be sync with the iDepthMat.</param>
            <param name="iName">Label to add.</param>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.Train(System.Action{BlueQuark.FaceEntity[]},System.Action{BlueQuark.FaceRecognitionError})">
            <summary>
            Creates a new model based on current added faces.
            </summary>
            <param name="iOnEndTraining">Called when the training has ended. Returns the list of the users whom faces have been detected and saved to database. </param>
            <param name="iOnRecoError">The callback to a possible error occuring during training.</param>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.Train(System.Action{BlueQuark.FaceEntity[]})">
            <summary>
            Creates a new model based on current added faces.
            </summary>
            <param name="iOnEndTraining">Called when the training has ended. Returns the list of the users whom faces have been detected and saved to database. </param>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.ClearTraining">
            <summary>
            Clear the untrained training data. Useless if Train() has been called before.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.HandWavingEntity">
            <summary>
            Represents a waving entity.
            </summary>
        </member>
        <member name="P:BlueQuark.HandWavingEntity.BoundingBox">
            <summary>
            Gets the bouding box of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.HandWavingEntity.FrameCoordinates">
            <summary>
            Gets the coordonates of the entity in the frame.
            </summary>
        </member>
        <member name="P:BlueQuark.HandWavingEntity.WorldCoordinates">
            <summary>
            Gets the coordonates of the entity in the world.
            </summary>
        </member>
        <member name="M:BlueQuark.HandWavingEntity.ConvertCoord">
            <summary>
            Converts the coordonates from the frame to the world.
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDetectorParameter">
            <summary>
            Represents the parameters of a motion detector.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetectorParameter.RegionOfInterest">
            <summary>
            Represents the region of interest.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetectorParameter.SensibilityThreshold">
            <summary>
            Represents the sensibility threshold. 2 by default.
            </summary>
        </member>
        <member name="T:BlueQuark.RoomDetector">
            <summary>
            Class containing functions of topological localization and navigation.
            Using images from a single RGB-Camera. 
            A bag of words model is used for localization, while navigation is based on image matching.
            OpenCV is used for keypoint detection and descriptor calculation.
            </summary>
        </member>
        <member name="M:BlueQuark.RoomDetector.RunLocalizationImpl(System.Action{BlueQuark.Room})">
            <summary>
            Run localization coroutine. 
            When finished, will call iSetOutput to return room result
            </summary>
            <param name="iOnEndLocalization"> For example, (x) => {lReuslt = x;} </param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.GetPathLength(System.Int32,System.Int32)">
            <summary>
            Get the path length at a step
            </summary>
            <param name="iPath"></param>
            <param name="iStep"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.DistanceBetweenLandmarks(System.Int32,System.Int32)">
            <summary>
            Get the distance measured by odometry between two landmarks.
            </summary>
            <param name="iLdmk1"></param>
            <param name="iLdmk2"></param>
            <returns>Distance in meter</returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.FindPath(System.Int32,System.Int32)">
            <summary>
            Find path between start landmark and end landmark.
            Dijkstra's algorithm is used to find the shortest-length path.
            The path index is returned.
            </summary>
            <param name="iStart">Index of start landmark</param>
            <param name="iEnd">Index of end landmark</param>
            <returns>Found path index</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.RoomDetector.FacingWall(OpenCVUnity.Mat)" -->
        <member name="M:BlueQuark.RoomDetector.JITInitialize(BlueQuark.Map,System.Boolean)">
            <summary>
            Initialize model by deserialization two config files
            </summary>
        </member>
        <member name="M:BlueQuark.RoomDetector.LocalizeAsync(System.Action{BlueQuark.Room})">
            <summary>
            Localize in which room is the robot
            </summary>
            <param name="iSetRoom">Action to get localization result after finished</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.RecognizeRoom(OpenCVUnity.Mat,System.Boolean@)">
            <summary>
            When finished, returns room name or Unidentified.
            If more images are required, oFinished is false.
            </summary>
            <param name="iRGBFrame"></param>
            <param name="ioFinished"></param> 
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.SetMap(BlueQuark.Map)">
            <summary>
            Set a specific map to use for mapper.
            Else the default map shall be used.
            </summary>
            <param name="iMap">A map file.</param>
        </member>
        <member name="M:BlueQuark.RoomDetector.RunLocalization(System.Action{BlueQuark.Room})">
            <summary>
            Runs localization coroutine. 
            When finished, will call iSetOutput to return room result.
            </summary>
            <param name="iOnEndLocalization"> For example, (x) => {lReuslt = x;} </param>
        </member>
        <member name="M:BlueQuark.RoomDetector.Correct(BlueQuark.Room)">
            <summary>
            When the localization result is incorrect, use this function to give the right answer to retrain model.
            </summary>
            <param name="iCorrectRoom">The correct room.</param>
        </member>
        <member name="T:BlueQuark.ShadeColor">
            <summary>
            Represent a shade color.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.BLACK">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.WHITE">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.BLUE">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.CYAN">
            <summary>
            Cyan.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.GREY">
            <summary>
            Grey.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.GREEN">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.MAGENTA">
            <summary>
            Magenta.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.RED">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.YELLOW">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.ORANGE">
            <summary>
            Orange.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.BROWN">
            <summary>
            Brown.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.PINK">
            <summary>
            Pink.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.PURPLE">
            <summary>
            Purple.
            </summary>
        </member>
        <member name="T:BlueQuark.HandWavingDetector">
            <summary>
            Hand waving detector algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.HandWavingDetector.OnDetect">
            <summary>
            Called when an hand waving is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanFacePosition">
            <summary>
            Orientation of the face
            </summary>
        </member>
        <member name="F:BlueQuark.HumanFacePosition.UNDEFINED">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanFacePosition.FACIAL">
            <summary>
            Facial.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanFacePosition.ROTATED_30">
            <summary>
            Rotated 30.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanFacePosition.ROTATED_330">
            <summary>
            Rotated 330.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanFacePosition.LEFT_PROFILE">
            <summary>
            Left profile.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanFacePosition.RIGHT_PROFILE">
            <summary>
            Right profile.
            </summary>
        </member>
        <member name="T:BlueQuark.FaceEntity">
            <summary>
            Represents a detected face.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.BoundingBox">
            <summary>
            The bouding box where the face is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.Center">
            <summary>
            Points where the face is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.Speed">
            <summary>
            Speed of the detected face.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.Position">
            <summary>
            Pose orientation of the face.
            </summary>
            <seealso cref="T:BlueQuark.HumanFacePosition"/>
        </member>
        <member name="P:BlueQuark.FaceEntity.Label">
            <summary>
            Label of the face recognized.
            </summary>
        </member>
        <member name="T:BlueQuark.AprilTagEntity">
            <summary>
            April tag detected via AprilTagDetector.
            </summary>
            <seealso cref="T:BlueQuark.AprilTagDetector"/>
        </member>
        <member name="P:BlueQuark.AprilTagEntity.ID">
            <summary>
            Value of the tag.
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagEntity.Points">
            <summary>
            Set of points corresponding to tag corner.
            </summary>
        </member>
        <member name="T:BlueQuark.FaceDetector">
            <summary>
            Face detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceDetector.ConfidenceThreshold">
            <summary>
            Threshold of the confidence in %
            </summary>
        </member>
        <member name="P:BlueQuark.FaceDetector.OnDetect">
            <summary>
            Called when a face is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceDetector.GetEyesInMat(BlueQuark.FaceEntity,OpenCVUnity.Mat)">
            <summary>
            Returns eye from the face.
            </summary>
            <param name="iFace">The face entity to track in the frame.</param>
            <param name="iFrame">The frame where the face belong.</param>
            <returns>Bounding rec containing estimate position of eyes.</returns>
        </member>
        <member name="M:BlueQuark.FaceDetector.RecognizeEmotion(BlueQuark.FaceEntity,OpenCVUnity.Mat)">
            <summary>
            Returns the estimated emotion of the input face.
            </summary>
            <param name="iFace">The face entity.</param>
            <param name="iFrame">The frame where the face belong.</param>
            <returns>The estimated emotion.</returns>
        </member>
        <member name="M:BlueQuark.FaceDetector.RecognizeEmotionStr(BlueQuark.FaceEntity,OpenCVUnity.Mat)">
            <summary>
            Returns the estimated emotion of the input face.
            </summary>
            <param name="iFace">The face entity.</param>
            <param name="iFrame">The frame where the face belong.</param>
            <returns>The estimated emotion.</returns>
        </member>
        <member name="T:BlueQuark.AprilTagDetector">
            <summary>
            April tags detection. Based on : <see href="https://april.eecs.umich.edu/software/apriltag/">Article.</see>
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagDetector.OnDetect">
            <summary>
            Called when any april tags face the camera of the robot. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.AppCategory">
            <summary>
            Represents the different app categories.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.COMPANION">
            <summary>
            Companion category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.EDUTAINMENT">
            <summary>
            Edutainment category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.GAME">
            <summary>
            Game category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.HEALTH">
            <summary>
            Health category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.MULTIMEDIA">
            <summary>
            Multimedia category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.UTILITY">
            <summary>
            Utility category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.SECURITY">
            <summary>
            Security category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.OTHER">
            <summary>
            Other category.
            </summary>
        </member>
        <member name="T:BlueQuark.AppVersionReleaseStatus">
            <summary>
            Represents a version state of the app.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.DEVELOP">
            <summary>
            In development.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.RELEASE">
            <summary>
            Release.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.RELEASE_INTERNAL">
            <summary>
            Internal release
            </summary>
        </member>
        <member name="T:BlueQuark.Dialoger">
            <summary>
            Dialogers are like Toasters but works on a different layer (over the Toaster).
            </summary>
            <seealso cref="T:BlueQuark.Toaster"/>>
        </member>
        <member name="P:BlueQuark.Dialoger.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Dialoger.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Dialoger.IsBusy">
            <summary>
            Returns true if the Dialoger is currently displaying something.
            </summary>
        </member>
        <member name="P:BlueQuark.Dialoger.DisplayedDialogID">
            <summary>
            Gets the UID of the current displayed dialog.
            </summary>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast).</typeparam>
            <returns>The dialog info to argument with the method With(args).</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1(System.String)">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast).</typeparam>
            <returns>The dialog info to argument with the method With(args).</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1(System.String,System.String)">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast).</typeparam>
            <returns>The dialog info to argument with the method With(args).</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Hide">
            <summary>
            Hide the displayed dialog.
            </summary>
        </member>
        <member name="M:BlueQuark.Dialoger.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.AppsSection">
            <summary>
            Apps Explorer section. Browse, download and manage builtin and user apps.
            </summary>
        </member>
        <member name="T:BlueQuark.ParametersSection">
            <summary>
            Parameters Explorer section. Browse, and manage robot, GUI and app parameters.
            </summary>
        </member>
        <member name="T:BlueQuark.ISO6391Code">
            <summary>
            Language two-letter codes, one per language for ISO 639 macrolanguage.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.EN">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.FR">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.IT">
            <summary>
            Italian language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.DE">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.JA">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.NL">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.KO">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.WiFiNetwork">
            <summary>
            Represents a local WiFi network available for a connexion.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.Name">
            <summary>
            Name of the network.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.SignalStrength">
            <summary>
            Signal of the network.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.MACAddress">
            <summary>
            Mac address of the network
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.Connected">
            <summary>
            True if it is connected
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.SecurityProtocol">
            <summary>
            Network security type
            </summary>
        </member>
        <member name="T:BlueQuark.GCVDetectionType">
            <summary>
            Kind of detection request for Google Cloud Vision API.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.TYPE_UNSPECIFIED">
            <summary>
            Misc.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.FACE_DETECTION">
            <summary>
            Face information.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LANDMARK_DETECTION">
            <summary>
            Landmark (Eiffel tower, Golden Bridge, left eye, right hand...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LOGO_DETECTION">
            <summary>
            Logo detection (Coca cola ...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LABEL_DETECTION">
            <summary>
            Labelization (desk, floor, robot, window, hand ...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.TEXT_DETECTION">
            <summary>
            Optical Character Recognition.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.SAFE_SEARCH_DETECTION">
            <summary>
            Is this content safe for children ? (blood, violence, explicit scene ...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.IMAGE_PROPERTIES">
            <summary>
            Image properties (main color).
            </summary>
        </member>
        <member name="T:BlueQuark.QRCodePoints">
            <summary>
            Represents the points of a QRCode.
            </summary>
        </member>
        <member name="F:BlueQuark.QRCodePoints.THIRTEEN_POINTS">
            <summary>
            Thirteen point QR code.
            </summary>
        </member>
        <member name="F:BlueQuark.QRCodePoints.THREE_POINTS">
            <summary>
            Three point QR code.
            </summary>
        </member>
        <member name="T:BlueQuark.Brightness">
            <summary>
            Represents a brightness power.
            </summary>
        </member>
        <member name="F:BlueQuark.Brightness.MEDIUM">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:BlueQuark.Brightness.LOW">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:BlueQuark.Brightness.HIGH">
            <summary>
            High.
            </summary>
        </member>
        <member name="T:BlueQuark.TFInceptionModelType">
            <summary>
            Represents a TF Inception model type.
            </summary>
        </member>
        <member name="F:BlueQuark.TFInceptionModelType.V1">
            <summary>
            V1.
            </summary>
        </member>
        <member name="F:BlueQuark.TFInceptionModelType.V3">
            <summary>
            V2.
            </summary>
        </member>
        <member name="T:BlueQuark.TFModelType">
            <summary>
            Represents a TF model type.
            </summary>
        </member>
        <member name="F:BlueQuark.TFModelType.MNIST">
            <summary>
            Reads an image and outputs the number that's read.
            </summary>
        </member>
        <member name="F:BlueQuark.TFModelType.INCEPTION">
            <summary>
            Inception-based model for Image Classification.
            Deep Convolutional Network method.
            </summary>
        </member>
        <member name="T:BlueQuark.Actuators">
            <summary>
            Module containing all robot actuators.  
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Accessories">
            <summary>
            Accessories give control to lateral actuators.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Head">
            <summary>
            Head gives control to Yes and No head hinges.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.LEDs">
            <summary>
            LEDs allow to change light color/intensity and turn on/off the flash light.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Speakers">
            <summary>
            Speakers allow to properly manage sound output.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Wheels">
            <summary>
            Wheels control component.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Fan">
            <summary>
            Fan inside the robot's head.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDs">
            <summary>
            Light-Emitting Diode component of the robot. Corresponds to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_DOWN_SLOPE">
            <summary>
            Speed to off phase. Value in milliseconds.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_UP_SLOPE">
            <summary>
            Speed to on phase. Value in milliseconds.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_ON_DURATION">
            <summary>
            Duration when the led is on. Value in milliseconds
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_OFF_DURATION">
            <summary>
            Duration when the led is off. Value in milliseconds.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_LOW_LEVEL">
            <summary>
            This is the minimum light in %. Relative to maximum light.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_PULSE_PATTERN">
            <summary>
            Default pulse pattern.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDs.DEFAULT_PRIORIY">
            <summary>
            Priority for the commands SHOULDER_LEDS_BEHAVIOR and HEART_LEDS_BEHAVIOR. 
            These commands will be accepted (and so a new color on led displayed) only if priority level set by the present command is greater or equal than the priority of the current LEDs display.
            NOTA : The particular value of 0 for the priority permits to tell the low-level that now the displayed color is managed by low-level.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.HeartColor">
            <summary>
            The color of the heart.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.LeftShoulderColor">
            <summary>
            The color of the left shoulder.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.RightShoulderColor">
            <summary>
            The color of the right shoulder.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.Flash">
            <summary>
            Powers On/Off the frontal flash light of the robot with full intensity. Same as FlashIntensity = 0 or 1.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.FlashIntensity">
            <summary>
            Powers On/Off the frontal flash light of the robot with specific intensity. 0 means no light, 1 means full light.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.FlashDuration">
            <summary>
            Duration in seconds of the Flash LED when activated. 0 means infinity. Max is 60secs. Applied for the next Flash[Intensity] method call.
            </summary>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyLights(BlueQuark.HSVColor)">
            <summary>
            Sets all lights (shoulders + heart) to the wished color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyLights(System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets all lights (shoulders + heart) to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersLights(BlueQuark.HSVColor)">
            <summary>
            Sets both shoulders lights to the wished HSV color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersLights(System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets both shoulders lights to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartLight(BlueQuark.HSVColor)">
            <summary>
            Sets the heart light to the wished HSV color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartLight(System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets the heart light to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPattern(BlueQuark.PulsePattern)">
            <summary>
            Change the light pattern.
            </summary>
            <param name="iPattern">Pattern to display on LED.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPattern(System.Byte,System.UInt16,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets all lights (shoulders + heart) to the wished pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase. Value in milliseconds/%.</param>
            <param name="iDownSlope">Speed to off phase. Value in milliseconds/%.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPatternTimeSlope(System.Byte,System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Sets all lights (shoulders + heart) to the wished pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase. Value in milliseconds.</param>
            <param name="iDownSlope">Speed to off phase. Value in milliseconds.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartPattern(BlueQuark.PulsePattern)">
            <summary>
            Change the light pattern.
            </summary>
            <param name="iPattern">Pattern to display on LED.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartPattern(System.Byte,System.UInt16,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Sets the heart light to the wished pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase. Value in milliseconds/%, from 0 to 100ms/%</param>
            <param name="iDownSlope">Speed to off phase. Value in milliseconds/%, from 0 to 100ms/%.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartPatternTimeSlope(System.Byte,System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Sets the heart light to the wished pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase. Value in milliseconds, from 0 to 10 000ms.</param>
            <param name="iDownSlope">Speed to off phase. Value in milliseconds, from 0 to 10 000ms.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersPattern(BlueQuark.PulsePattern)">
            <summary>
            Change the light pattern.
            </summary>
            <param name="iPattern">Pattern to display on LED.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersPattern(System.Byte,System.UInt16,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Change the light pattern.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase. Value in milliseconds/%.</param>
            <param name="iDownSlope">Speed to off phase. Value in milliseconds/%.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersPatternTimeSlope(System.Byte,System.UInt16,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Change the light pattern.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase. Value in milliseconds.</param>
            <param name="iDownSlope">Speed to off phase. Value in milliseconds.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPattern(System.UInt16)">
            <summary>
            Sets all lights (shoulders + heart) to the wished blink with given duration.
            </summary>
            <param name="iDuration">Duration between on and off. Value in milliseconds.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartPattern(System.UInt16)">
            <summary>
            Sets all lights (shoulders + heart) to the wished blink with given duration.
            </summary>
            <param name="iDuration">Duration between on and off. Value in milliseconds.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersPattern(System.UInt16)">
            <summary>
            Sets all lights (shoulders + heart) to the wished blink with given duration.
            </summary>
            <param name="iDuration">Duration between on and off. Value in milliseconds.</param>
        </member>
        <member name="P:BlueQuark.LEDs.Priority">
            <summary>
            Current color priority. SetColor will be accepted (and so a new color on LEDs displayed) only if priority level set by the present command is greater or equal than the priority of the currend LEDs display.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.EventPriority">
            <summary>
            Current trigged event priority.
            </summary>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyLights(BlueQuark.HSVColor,System.Byte)">
            <summary>
            Sets all lights (shoulders + heart) to the wished color.
            </summary>
            <param name="iColor">The light to apply.</param>
            <param name="iPriority">From 1 to 255. The particular value of 0 for the priority permits to tell the low-level that now the displayed color is managed by low-level.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersLights(BlueQuark.HSVColor,System.Byte)">
            <summary>
            Sets both shoulders lights to the wished HSV color.
            </summary>
            <param name="iColor">The light to apply.</param>
            <param name="iPriority">From 1 to 255. The particular value of 0 for the priority permits to tell the low-level that now the displayed color is managed by low-level.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersLights(System.UInt16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets both shoulders lights to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iPriority">From 1 to 255. The particular value of 0 for the priority permits to tell the low-level that now the displayed color is managed by low-level.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartLight(BlueQuark.HSVColor,System.Byte)">
            <summary>
            Sets the heart light to the wished HSV color.
            </summary>
            <param name="iColor">The light to apply.</param>
            <param name="iPriority">From 1 to 255. The particular value of 0 for the priority permits to tell the low-level that now the displayed color is managed by low-level.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartLight(System.UInt16,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets the heart light to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iPriority">From 1 to 255. The particular value of 0 for the priority permits to tell the low-level that now the displayed color is managed by low-level.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyLights(System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.PulsePattern,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.PulsePattern)">
            <summary>
            Play a sophisticated behaviour of LEDs.
            </summary>
            <param name="iShouldersMode">Mode for heart steps, 0=OFF 1=Unchanged 2=S1 3=S1 + S2.</param>
            <param name="iShouldersRepeatTime">0..255 (0 = endless).</param>
            <param name="iShouldersColorStep1">Shoulders Step 1 colors.</param>
            <param name="iShouldersRepeatStep1">How many times the shoulders step 1 should be repeated ? 1..255</param>
            <param name="iShouldersOffTimeStep1">0..25.5s (step 100ms).</param>
            <param name="iShouldersColorStep2">Shoulders step 2 colors.</param>
            <param name="iShouldersRepeatStep2">How many times the shoulders step 2 should be repeated ? 1..255</param>
            <param name="iShouldersOffTimeStep2">0..25.5s (step 100ms).</param>
            <param name="iShouldersPattern">LEDs pattern for shoulders.</param>
            <param name="iHeartMode">Mode for heart steps, 0=OFF 1=Unchanged 2=S1 3=S1 + S2.</param>
            <param name="iHeartRepeatTime">0..255 (0 = endless).</param>
            <param name="iHeartColorStep1">Heart step 1 colors.</param>
            <param name="iHeartRepeatStep1">How many times the heart step 2 should be repeated ? 1..255</param>
            <param name="iHeartOffTimeStep1">Heart offtime for step 1, 0..25.5s (step 100ms).</param>
            <param name="iHeartColorStep2">Heart step 2 colors.</param>
            <param name="iHeartRepeatStep2">How many times the heart step 2 should be repeated ? 1..255</param>
            <param name="iHeartOffTimeStep2">Heart offtime for step 2, 0..25.5s (step 100ms).</param>
            <param name="iHeartPattern">LEDs pattern for heart.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetEvent(BlueQuark.LEDEvent,System.Byte,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.PulsePattern,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.HSVColor,System.Byte,System.Byte,BlueQuark.PulsePattern)">
            <summary>
            Defines the functional LED matrix to set what color and LED behavior to display when robot is in certain circumstances 
            (when board start or board shutdown or a fatal error occured, ...). Up to 15 events could be set in this matrix. 
            To be noted that when EEPROM is reinit, a default Matrix event is stored for each event (complete re-init).
            </summary>
            <param name="iEvent">Event to store in EEPROM. No: 0..14.</param>
            <param name="iPriority">Event priority.</param>
            <param name="iShouldersMode">Mode for shoulders steps, 0=OFF 1=Unchanged 2=S1 3=S1 + S2.</param>
            <param name="iShouldersRepeatTime">0..255 (0 = endless).</param>
            <param name="iShouldersColorStep1">Shoulders Step 1 colors.</param>
            <param name="iShouldersRepeatStep1">How many times the shoulders step 1 should be repeated ? 1..255</param>
            <param name="iShouldersOffTimeStep1">0..25.5s (step 100ms).</param>
            <param name="iShouldersColorStep2">Shoulders step 2 colors.</param>
            <param name="iShouldersRepeatStep2">How many times the shoulders step 2 should be repeated ? 1..255</param>
            <param name="iShouldersOffTimeStep2">0..25.5s (step 100ms).</param>
            <param name="iShouldersPattern">Shoulders LEDs pattern.</param>
            <param name="iHeartMode">Mode for heart steps, 0=OFF 1=Unchanged 2=S1 3=S1 + S2.</param>
            <param name="iHeartRepeatTime">0..255 (0 = endless).</param>
            <param name="iHeartColorStep1">Heart step 1 colors.</param>
            <param name="iHeartRepeatStep1">How many times the heart step 2 should be repeated ? 1..255</param>
            <param name="iHeartOffTimeStep1">Heart offtime for step 1, 0..25.5s (step 100ms).</param>
            <param name="iHeartColorStep2">Heart step 2 colors.</param>
            <param name="iHeartRepeatStep2">How many times the heart step 2 should be repeated ? 1..255</param>
            <param name="iHeartOffTimeStep2">Heart offtime for step 2, 0..25.5s (step 100ms).</param>
            <param name="iHeartPattern">Hear LEDs pattern.</param>
        </member>
        <member name="M:BlueQuark.LEDs.PlayEvent(BlueQuark.LEDEvent)">
            <summary>
            Trig manually a LED Matrix event. Permits to test an event manually instead of waiting this event really occurs. 
            When this command is sent, the event is thown through the ATMEGA.
            </summary>
            <param name="iEvent">The event to simulate.</param>
        </member>
        <member name="T:BlueQuark.Speakers">
            <summary>
            Speaker component of the robot. Allows you to handle multiple sound channels.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.IsBusy">
            <summary>
            Returns true if any channel is currently playing something.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Vocal">
            <summary>
            Sound channel for vocal purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Media">
            <summary>
            Sound channel for music purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Effects">
            <summary>
            Sound channel for UI or miscellaneous sounds.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Volume">
            <summary>
            Global volume system. From 0 to 1. 1 is full volume.
            </summary>
        </member>
        <member name="M:BlueQuark.Speakers.Stop">
            <summary>
            Stops all sound channels.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Enable">
            <summary>
            Enables/Disables the audio output.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Gain">
            <summary>
            Gain of the output amplifier.
            </summary>
        </member>
        <member name="T:BlueQuark.Wheels">
            <summary>
            Wheels (right and left) of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.ENTRAX">
            <summary>
            Distance between each wheels in meters.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.RADIUS">
            <summary>
            Radius of one wheel in meters.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.MAX_LIN_VELOCITY">
            <summary>
            Max allowed linear velocity for wheels asserv. Meters per seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.MAX_ANG_VELOCITY">
            <summary>
            Max allowed angular velocity for wheels asserv. Degrees per seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_LIN_VELOCITY">
            <summary>
            Default linear velocity for wheels asserv. Meters per seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_ANG_VELOCITY">
            <summary>
            Default angular velocity for wheels asserv. Degrees per seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_SMOOTH_ACCELERATION">
            <summary>
            Default smooth acceleration / deceleration value for wheels starting/stopping. Represents the speed that can be reached in 1 second. Value in meters per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_NORMAL_ACCELERATION">
            <summary>
            Default normal acceleration / deceleration value for wheels starting/stopping. Represents the speed that can be reached in 1 second. Value in meters per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_HIGH_ACCELERATION">
            <summary>
            Default high acceleration / deceleration value for wheels starting/stopping. Represents the speed that can be reached in 1 second. Value in meters per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.MIN_TORQUE_THRESHOLD">
            <summary>
            Minimal tolerated threshold for the torque control system. Value in percent.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.MAX_TORQUE_THRESHOLD">
            <summary>
            Maximal tolerated threshold for the torque control system. Value in percent.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_TORQUE_THRESHOLD">
            <summary>
            Default tolerated threshold for the torque control system. Value in percent.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.IsBusy">
            <summary>
            Returns true if the wheels are moving (controlled or pushed in any way).
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.IsControlled">
            <summary>
            Returns true if the wheels are currently operated by the engine. Typically, if false but IsBusy is true, it means that the robot is pushed manually.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Odometry">
            <summary>
            X,Y,TH computed position of the robot since last boot. Values in meters and degrees (-180° to 180°).
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.CumulativeOdometry">
            <summary>
            X,Y,TH computed position of the robot since last boot. Values in meters and degrees (min float° to max float°).
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Error">
            <summary>
            Wheels error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Angle">
            <summary>
            Theta angle of the robot. Shortcut to odometry.z. Value in degrees (180° to 180).
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Speed">
            <summary>
            Mean speed of the wheels. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LinearVelocity">
            <summary>
            Current applied linear velocity. Value in millimeters per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.AngularVelocity">
            <summary>
            Current applied angular velocity. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LeftRotationalSpeed">
            <summary>
            Current left wheel speed. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.RightRotationalSpeed">
            <summary>
            Current right wheel speed. Value in degrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.TravelledDistance">
            <summary>
            Traveled distance from first robot boot. Value in meters.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LeftAverageCurrent">
            <summary>
            Average (500ms window) current applied current on the left wheel. Value in milli ampere.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LeftCurrent">
            <summary>
            Current applied current on the left wheel. Value in milli ampere.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.RightAverageCurrent">
            <summary>
            Average (500ms window) current applied current on the right wheel. Value in milli ampere.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.RightCurrent">
            <summary>
            Current applied current on the right wheel. Value in milli ampere.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.PositionError">
            <summary>
            Position error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.CurrentError">
            <summary>
            Voltage and current error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Locked">
            <summary>
            Sets the wheels as locked. Locked wheels cannot move.
            </summary>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,System.Action)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iOnEndAcc">Callback called when the motion has finished to change.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iMode">Acceleration/deceleration mode.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,BlueQuark.AccDecMode,System.Action)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iMode">Acceleration/deceleration mode.</param>
            <param name="iOnEndAcc">Callback called when the motion has finished to change.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,BlueQuark.AccDecMode,System.Single)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iMode">Acceleration/deceleration mode.</param>
            <param name="iDistance">Distance to travel in meters.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,BlueQuark.AccDecMode,System.Single,System.Action)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iMode">Acceleration/deceleration mode.</param>
            <param name="iDistance">Distance to travel in meters.</param>
            <param name="iOnEndAcc">Callback called when the motion has finished to change.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,BlueQuark.AccDecMode,System.Single,System.Single)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iMode">Acceleration/deceleration mode.</param>
            <param name="iDistance">Distance to travel in meters.</param>
            <param name="iAngle">Rotation to perform in degrees.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single,BlueQuark.AccDecMode,System.Single,System.Single,System.Action)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters per second) of an object position within a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees per second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <param name="iMode">Acceleration/deceleration mode.</param>
            <param name="iDistance">Distance to travel in meters.</param>
            <param name="iAngle">Rotation to perform in degrees.</param>
            <param name="iOnEndAcc">Callback called when the motion has finished to change.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.Stop">
            <summary>
            Stops wheels.
            </summary>
        </member>
        <member name="M:BlueQuark.Wheels.Stop(BlueQuark.AccDecMode)">
            <summary>
            Stops wheels.
            </summary>
        </member>
        <member name="M:BlueQuark.Wheels.ImmediateStop">
            <summary>
            Process an urgent stop.
            </summary>
        </member>
        <member name="M:BlueQuark.Wheels.CreateRelativeOdometry">
            <summary>
            Creates a relative odometry with the current position as the landmark.
            </summary>
            <returns>The relative odometry.</returns>
        </member>
        <member name="M:BlueQuark.Wheels.CreateRelativeOdometry(UnityEngine.Vector3)">
            <summary>
            Creates a relative odometry with the provided landmark.
            </summary>
            <param name="iLandmark">The landmark which will be used as the relative reference.</param>
            <returns>The relative odometry.</returns>
        </member>
        <member name="P:BlueQuark.Wheels.LinearPID">
            <summary>
            Current PID of the linear.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.AngularPID">
            <summary>
            Current PID of the motor.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:BlueQuark.Wheels.TorqueThreshold" -->
        <!-- Badly formed XML comment ignored for member "P:BlueQuark.Wheels.EnableTorqueControl" -->
        <member name="M:BlueQuark.Wheels.SetPIDs(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets the proportional–integral–derivative controller. It is a control loop feedback mechanism.
            </summary>
            <param name="iKpLin">Term P is proportional to the current value of the SP − PV error e(t).</param>
            <param name="iKiLin">Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.</param>
            <param name="iKdLin">erm D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.</param>
            <param name="iKpAng">Term P is proportional to the current value of the SP − PV error e(t).</param>
            <param name="iKiAng">Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.</param>
            <param name="iKdAng">Term D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.</param>
        </member>
        <member name="M:BlueQuark.Wheels.SetPIDs(BlueQuark.PIDParameters,BlueQuark.PIDParameters)">
            <summary>
            Sets the proportional–integral–derivative controller. It is a control loop feedback mechanism.
            </summary>
            <param name="iLinearPID">Current PID of the motor.</param>
            <param name="iAngularPID">Current PID of the motor.</param>
        </member>
        <member name="M:BlueQuark.Wheels.SetAccDecValue(BlueQuark.AccDecMode,System.Single)">
            <summary>
            Sets value to the provided acceleration/deceleration mode.
            </summary>
            <param name="iMode">The mode to update to the corresponding value.</param>
            <param name="iValue">The new value of the mode in meter/second.</param>
        </member>
        <member name="P:BlueQuark.Wheels.LockedByGUI">
            <summary>
            Currently locked because important GUI elements are displayed.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LockedByUser">
            <summary>
            Sets the wheels as locked. Locked wheels cannot move.
            </summary>
        </member>
        <member name="T:BlueQuark.AAppData">
            <summary>
            Your app data class must inherit from this class. Your app data will be store here.
            The data object will be serialized when the application is quited and unserialized the first time GetInstance()
            will be called. Don't ever change the name of your {APP_NAME}Data class.
            </summary>
        </member>
        <member name="F:BlueQuark.AAppData.sInstance">
            <summary>
            Instance of your data (singleton).
            </summary>
        </member>
        <member name="M:BlueQuark.AAppData.GetInstance``1">
            <summary>
            Retrieves your last save version of your data.
            </summary> 
            <typeparam name="T">Type of your data class.</typeparam>
            <returns>Your data object.</returns>
        </member>
        <member name="M:BlueQuark.AAppData.DeleteLocal">
            <summary>
            Delete local data file.
            </summary>
        </member>
        <member name="T:BlueQuark.AAppActivity">
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Behaviour">
            <summary>
            Gathers all interaction features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Navigation">
            <summary>
            Gathers all navigation features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.WebService">
            <summary>
            Gathers all web services (Facebook, Twitter, Spotify, meteo, Wolfram alpha) features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Perception">
            <summary>
            Gathers all perception (mainly vision) features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Sensors">
            <summary>
            Gathers all sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Actuators">
            <summary>
            Gathers all motors, LED and speakers.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Resources">
            <summary>
            Resource loader to retrieve Unity object. Check both Resources/ and downloaded Assetbundles. Allow you to retrieve the full path from the name of the raw file.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.GUI">
            <summary>
            Gathers all UI handler (toaster, notifier, header).
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.IO">
            <summary>
            Gathers WiFi, Bluetooth.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Vocal">
            <summary>
            Gathers WiFi, Bluetooth.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Animator">
            <summary>
            Your optional Animator. You must init it by using {APP_NAME}Activity.Init(animator) static method.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Objects">
            <summary>
            Stored objects from {APP_NAME}Activity.Init(animator, obj1, obj2...) static method.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnLoading(System.Object[])">
            <summary>
            Called when the app loading occur. You can proceed here your high pre-computes or data loading.
            </summary>
            <param name="iArgs">Optional args.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnAwake">
            <summary>
            Called when the app is fully loaded and after all Awake() calls in the loaded App.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnStart">
            <summary>
            Called after all Start() calls in the loaded App.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnQuit">
            <summary>
            Called when the application is currently unloading. It will be your last call.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.Init(UnityEngine.Animator,System.Object[])">
            <summary>
            This static method allow you to set basic param to your Activity. It must be done at the beginning of your app.
            </summary>
            <param name="iAnimator">.</param>
            <param name="iParams">.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.QuitApp">
            <summary>
            Quits the running app.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.AskForQuitApp(System.Boolean)">
            <summary>
            If set as true, ask confirmation for app quit.
            </summary>
            <param name="iVal">.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.LoadScene(System.Int32)">
            <summary>
            Loads the scene {AppID}-{SceneIndex}
            </summary>
            <param name="iSceneIndex">Index of the scene (0, 1, 2...), where 0 is the main scene.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.Trigger(System.String)">
            <summary>
            Trigger the named trigger in the presetted animator.
            </summary>
            <param name="iTriggerName">Trigger name.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.ResetTrigger(System.String)">
            <summary>
            Resets the named trigger in the presetted animator.
            </summary>
            <param name="iTriggerName">.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetBool(System.String,System.Boolean)">
            <summary>
            Sets the bool value of the named boolean in the presetted animator.
            </summary>
            <param name="iBoolName">The bool name to set.</param>
            <param name="iVal">Value of the boolean.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetBool(System.String)">
            <summary>
            Retrieves the value of the named boolean in the presetted animator.
            </summary>
            <param name="iBoolName">Boolean name.</param>
            <returns>The value of the named boolean.</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetInteger(System.String,System.Int32)">
            <summary>
            Sets the bool value of the named integer in the presetted animator.
            </summary>
            <param name="iIntName">The integer name to set.</param>
            <param name="iVal">Value of the integer.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetInteger(System.String)">
            <summary>
            Retrieves the value of the named integer in the presetted animator.
            </summary>
            <param name="iIntName">Integer name.</param>
            <returns>The value of the named integer.</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetFloat(System.String,System.Single)">
            <summary>
            Sets the bool value of the named float in the presetted animator.
            </summary>
            <param name="iFloatName">The float name to set.</param>
            <param name="iVal">Value of the float.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetFloat(System.String)">
            <summary>
            Retrieves the value of the named foat in the presetted animator.
            </summary>
            <param name="iFloatName">Foat name.</param>
            <returns>The value of the named foat.</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Begins a coroutine.
            </summary>
            <param name="iFunc">Your coroutine to start.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the coroutine.
            </summary>
            <param name="iFunc">Your coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the coroutine.
            </summary>
            <param name="iFunc">Your coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopAllCoroutines">
            <summary>
            Stops all started coroutines.
            </summary>
        </member>
        <member name="T:BlueQuark.AppInfo">
            <summary>
            Meta data of an application. External dev should never explicitly use this class.
            It's an internal class for app managing.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ID">
            <summary>
            Unique application identifier.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ShortName">
            <summary>
            The string that will be used as directory / class name.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.CommercialName">
            <summary>
            The string that will be displayed in the menu / loading.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ShortDescription">
            <summary>
            The description string that will be displayed in the menu.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.MainScene">
            <summary>
            Application main scene (entrypoint). Error if NULL.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Authors">
            <summary>
            The app authors.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Version">
            <summary>
            Current installed app version.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.VersionStatus">
            <summary>
            Current installed app version type.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.VersionName">
            <summary>
            Current installed app version name.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Category">
            <summary>
            The app category.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Permissions">
            <summary>
            The app permissions.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ActivityClassName">
            <summary>
            Application Activity fullname.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Data">
            <summary>
            Application data. Automaticaly serialized after unload app, and deserialized after app loading.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Activity">
            <summary>
            Application Activity entrypoint for callback.
            </summary>
        </member>
        <member name="M:BlueQuark.AppInfo.#ctor">
            <summary>
            AppInfo are build by deserialization inside the AppManager.
            </summary>
        </member>
        <member name="T:BlueQuark.AppManager">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.IsBusy">
            <summary>
            Returns true if the manager is currently loading or running an app.
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.PersistentDataPath">
            <summary>
            Gets the full path to the data app folder of the current user.
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.SharedPersistentDataPath">
            <summary>
            Gets the full path to the shared data app folder.
            </summary>
        </member>
        <member name="M:BlueQuark.AppManager.StartApp(System.String,System.Object[])">
            <summary>
            Starts the specified application.
            </summary>
            <param name="iIdentifier">The app's scene, id, shortname, commercialname.</param>
            <param name="iAppParameters">The app's parameters. Will be given to the AppActivity at start.</param>
            <returns>The application category.</returns>
        </member>
        <member name="M:BlueQuark.AppManager.Stop">
            <summary>
            Stops the current running app. No effect if no running app.
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.CurrentApp">
            <summary>
            The current running application.
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.InstalledApps">
            <summary>
            All installed and playable applications on the robot.
            </summary>
        </member>
        <member name="M:BlueQuark.AppManager.GetAppCategory(System.String)">
            <summary>
            Gets the category from an installed application.
            </summary>
            <param name="iIdentifier">The app's scene, id, shortname, commercialname.</param>
            <returns>The application category.</returns>
        </member>
        <member name="M:BlueQuark.AppManager.StartApp(BlueQuark.AppInfo,System.Object[])">
            <summary>
            Starts the specified application.
            </summary>
            <param name="iApp">The app to start up.</param>
            <param name="iAppParameters">The app's parameters. Will be given to the AppActivity at start.</param>
        </member>
        <member name="T:BlueQuark.Buddy">
            <summary>
            Hub of the Buddy Unity Operating System (OS) and entry point of the SDK's API.
            A Unique instance of Buddy is created in the whole program. 
            Gives access to robot control and tools like UI, sensors, perception, actuators, resources and miscellaneous managers.
            Access to Buddy's modules using Buddy.[MODULE_NAME] in a static way.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Actuators">
            <summary>
            The module containing sub components responsible of moving and controlling the robot system.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Sensors">
            <summary>
            The module containing whole robot sensors. Sensors are used for detection and perception systems.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.IO">
            <summary>
            The module containing all IO hardware components like Bluetooth, WiFi or GPIO.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Resources">
            <summary>
            The module in charge of handling all application assets (scene, sprites, raw files, sounds ...).
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Cognitive">
            <summary>
            The module containing all cognitive aspect of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Behaviour">
            <summary>
            The module containing all behaviour component such as Mood or the Behaviour player.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.WebServices">
            <summary>
            The module containing all miscenalleous web service components.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Navigation">
            <summary>
            The navigation module in charge of running one navigation strategy. 
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Perception">
            <summary>
            The module containing all sensor's base or image processing algorithms.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Vocal">
            <summary>
            The module for vocal management (say, hot word and listen).
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.GUI">
            <summary>
            The module containing all GUI built-in tools such like notification or contextual widgets.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Platform">
            <summary>
            The module handling all meta or external data and handlers like apps, language or users. 
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Boards">
            <summary>
            The module handling all embedded electronic boards. BlueFrog access reserved.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Instance">
            <summary>
            Instance of the unique Buddy object. Be /!\ VERY /!\ careful with this instance. /!\ ONLY /!\ process /!\ READONLY /!\ action.
            </summary>
        </member>
        <member name="T:BlueQuark.Platform">
            <summary>
            Module containing all meta data of the operating system.
            </summary>
        </member>
        <member name="F:BlueQuark.Platform.SDK_NAME">
            <summary>
            Name of the Software development kit and runtime Operating system.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Application">
            <summary>
            App management.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Calendar">
            <summary>
            Memo/Reminding storage and management.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Users">
            <summary>
            User management.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Language">
            <summary>
            Gets the language manager.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Geolocalization">
            <summary>
            Gets inner global positioning system.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.StartTime">
            <summary>
            Gets the time stamp since the OS boot.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.RobotUID">
            <summary>
            Gets the unique identifier for the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.RobotVersion">
            <summary>
            Gets the version of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.DotNetFrameworkVersion">
            <summary>
            Gets a version that describes the major, minor, build, and revision numbers of the common language runtime.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.FrameworkVersion">
            <summary>
            Gets the version of the Buddy FrameWork (BYFW).
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.CoreVersion">
            <summary>
            Gets the version of the Core system app.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.UnityVersion">
            <summary>
            Gets the version of the Unity runtime used to play the program.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.BREVersion">
            <summary>
            Gets the current software versionning of the robot (Core + Framework).
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.OperatingSystem">
            <summary>
            Device operating system name with version.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.RestartBRE">
            <summary>
            Restarts the Core Android application.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.Shutdown">
            <summary>
            Stops the core application.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.ForceShutdown">
            <summary>
            Forces stop the core application.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.DisposeOS">
            <summary>
            Dispose the operating system.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.DisposeOS(System.Action)">
            <summary>
            Dispose the operating system.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.ResetOS">
            <summary>
            Reset the operating system and the whole API.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.ResetOS(System.Action)">
            <summary>
            Reset the operating system and the whole API.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.SendMessageToCore(System.String)">
            <summary>
            Send a messaga to Core.
            </summary>
            <param name="iMessage"></param>
        </member>
        <member name="T:BlueQuark.Bluetooth">
            <summary>
            Wireless technology to connect with other close devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.Enabled">
            <summary>
            Gets if the bluetooth module is enabled.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.Discoverable">
            <summary>
            Is device discoverable
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.Address">
            <summary>
            Bluetooth device address
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.DiscoverableTime">
            <summary>
            Time left until discoverability is off
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.Name">
            <summary>
            Name of the discoverable device
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.PairedDevices">
            <summary>
            Gets the paired devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.VisibleDevices">
            <summary>
            Gets the visible devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.ConnectedDevices">
            <summary>
            Gets the connected devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnFoundDevice">
            <summary>
            Callback array fired when a new device is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnPairingRequest">
            <summary>
            Callback array fired when a new device is paired.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnReceivingData">
            <summary>
            Callback array fired when receiving data.
            </summary>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnScanStatusUpdate">
            <summary>
            Callback array fired on scan status update.
            </summary>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnDiscoverabilityStatusUpdate">
            <summary>
            Callback array fired when discoverability time changes
            </summary>
        </member>
        <member name="M:BlueQuark.Bluetooth.PairWith(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Pairs buddy to a given device.
            </summary>
            <param name="iDevice">The device to pair.</param>
            <param name="iOnEndPairing">Action on the end of pairing.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.PairWith(BlueQuark.BluetoothDevice)">
            <summary>
            Pairs buddy to a given device.
            </summary>
            <param name="iDevice">The device to pair.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.UnpairFrom(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Unpairs buddy from a device. 
            </summary>
            <param name="iDevice">The device to unpair.</param>
            <param name="iOnEndUnpairing">Action on the end of unpair.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.UnpairFrom(BlueQuark.BluetoothDevice)">
            <summary>
            Unpairs buddy from a device.
            </summary>
            <param name="iDevice">The device to unpair.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.AcceptPairing(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Accepts a pairing request.
            </summary>
            <param name="iDevice">The device which request the pairing with buddy.</param>
            <param name="iOnEndPairing">Action on the end of accepting request.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.ConnectTo(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Connects to a device.
            </summary>
            <param name="iDevice">The device to connect.</param>
            <param name="iOnEndConnect">Action on the end of connection try.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.ConnectTo(BlueQuark.BluetoothDevice)">
            <summary>
            Connects to a device.
            </summary>
            <param name="iDevice">The device to connect.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.DisconnectFrom(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Disconnects from a device.
            </summary>
            <param name="iDevice">The device to disconnect.</param>
            <param name="iOnEndDisconnect">Action on the end of disconnection.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.DisconnectFrom(BlueQuark.BluetoothDevice)">
            <summary>
            Disconnects from a device.
            </summary>
            <param name="iDevice">The device to disconnect.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.WaitConnection(System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Enables the incoming connections. 
            </summary>
            <param name="iOnAcceptedConnection">Action on a accepted connection.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.StopWaitConnection">
            <summary>
            Disables the incoming connections.
            </summary>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.Byte[],System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Sends data to a connected device.
            </summary>
            <param name="iDevice">The device to send the datas.</param>
            <param name="iData">The datas to send.</param>
            <param name="iOnEndSend">Action on the end of sending.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.Byte[])">
            <summary>
            Sends data to a connected device.
            </summary>
            <param name="iDevice">The device to send the datas.</param>
            <param name="iData">The datas to send.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.String,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Sends file to a connected device.
            </summary>
            <param name="iDevice">The device to send the file.</param>
            <param name="iFilePath">The path of the file.</param>
            <param name="iOnEndSend">Action on the end of sending.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.String)">
            <summary>
            Sends file to a connected device.
            </summary>
            <param name="iDevice">The device to send the file.</param>
            <param name="iFilePath">The path of the file.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,UnityEngine.Sprite,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionStatus})">
            <summary>
            Sends picture of a sprite to a connected device.
            </summary>
            <param name="iDevice">The device to send the pic.</param>
            <param name="iSprite">The sprite containing the pic.</param>
            <param name="iOnEndSend">Action on the end of sending.</param>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,UnityEngine.Sprite)">
            <summary>
            Sends picture of a sprite to a connected device.
            </summary>
            <param name="iDevice">The device to send the pic.</param>
            <param name="iSprite">The sprite containing the pic.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.StartScan">
            <summary>
            Starts scanning for visible devices.
            </summary>
            <seealso cref="T:BlueQuark.BluetoothActionStatus"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.Listen(System.Action{System.String})">
            <summary>
            Listen to incoming data.
            </summary>
            <param name="iCallback">Action to be invoked if any data received.</param>
        </member>
        <member name="T:BlueQuark.IO">
            <summary>
            IO module containing all IO interfaces (Bluetooth, WiFi...) 
            </summary>
        </member>
        <member name="P:BlueQuark.IO.Storage">
            <summary>
            USB drive management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.WiFi">
            <summary>
            Local wireless networking system management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.MobileData">
            <summary>
            Local wireless networking system management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.Bluetooth">
            <summary>
            Wireless technology to connect with other close devices.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.BRECommunication">
            <summary>
            Communication component with the Core application.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.HardwareCommunication">
            <summary>
            Communication component with the Hemise board.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.CameraStreamCommunication">
            <summary>
            Communication component with the Rana board for video stream.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.CSOACommunication">
            <summary>
            Communication component with the Rana board.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.GPIO">
            <summary>
            Global Purpose Input Output management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.HDMI">
            <summary>
            HDMI output management.
            </summary>
        </member>
        <member name="T:BlueQuark.Storage">
            <summary>
            Local storage and USB drive management.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.PluggedUSBDrives">
            <summary>
            Gets currently connected USB drive to the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.OnPlugUSBDrive">
            <summary>
            Callback called when a new USB drive is connected.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.OnUnplugUSBDrive">
            <summary>
            Callback called when a connected USB drive is unconnected.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.RemainingSpaceInternal">
            <summary>
            Remaining Internal drive space in bytes.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.UsedSpaceInternal">
            <summary>
            Currently used Internal drive space in bytes.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.TotalSpaceInternal">
            <summary>
            Total Internal drive space in bytes.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.RemainingSpaceExternal">
            <summary>
            Remaining External drive space in bytes.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.UsedSpaceExternal">
            <summary>
            Currently used External drive space in bytes.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.TotalSpaceExternal">
            <summary>
            Total External drive space in bytes.
            </summary>
        </member>
        <member name="P:BlueQuark.Storage.EEPROMData">
            <summary>
            EEPROM data.
            </summary>
        </member>
        <member name="M:BlueQuark.Storage.ResetEEPROM">
            <summary>
            Resets the EEPROM stored data.
            </summary>
        </member>
        <member name="T:BlueQuark.WiFi">
            <summary>
            Local wireless networking system management.
            </summary>
            <summary>
            Allows you to access to tablet parameters and settings (WiFi, Bluetooth, accelerometers...).
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.IsBusy">
            <summary>
            True if the wifi is currently busy (Connection, disconnection, retrieving...).
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.Enabled">
            <summary>
            Enables/Disables the WiFi module.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.MACAddress">
            <summary>
            Network controller MAC address.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.OnLocalNetworksUpdated">
            <summary>
            A callback array fired each time the local network list is updated.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.OnCurrentLocalNetworkUpdated">
            <summary>
            A Callback array fired when the local connexion changes.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.ConfiguredNetworks">
            <summary>
            List of all favorite networks.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.LocalNetworks">
            <summary>
            Gets all detected local networks.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.CurrentWiFiNetwork">
            <summary>
            Gets the current connected network.
            </summary>
        </member>
        <member name="M:BlueQuark.WiFi.ConnectTo(System.String,System.String,System.Action{System.Boolean,System.String})">
            <summary>
            Tries to connect to the specified network.
            </summary>
            <param name="iNetwork">The network name. Case sensitive.</param>
            <param name="iPassword">Password of the network.</param>
            <param name="iOnConnectCallback">Callback called when the connection is established or failed.</param>
        </member>
        <member name="M:BlueQuark.WiFi.ConnectTo(BlueQuark.WiFiNetwork,System.String,System.Action{System.Boolean,System.String})">
            <summary>
            Tries to connect to the specified network.
            </summary>
            <param name="iNetwork">The network to connect.</param>
            <param name="iPassword">Password of the network.</param>
            <param name="iOnConnectCallback">Callback called when the connection is established or failed.</param>
        </member>
        <member name="M:BlueQuark.WiFi.ConnectToConfigured(BlueQuark.WiFiNetwork,System.Action{System.Boolean,System.String})">
            <summary>
            Tries to connect to a favorite network.
            </summary>
            <param name="iNetwork">The known network.</param>
            <param name="iOnConnectCallback">Callback called when the connection is established or failed.</param>
        </member>
        <member name="M:BlueQuark.WiFi.RemoveFavoriteNetwork(BlueQuark.WiFiNetwork)">
            <summary>
            Removes a favorite network.
            </summary>
            <param name="iNetwork">The network to remove.s</param>
            <returns>Return true if success</returns>
        </member>
        <member name="M:BlueQuark.WiFi.Disconnect(System.Action{System.Boolean,System.String})">
            <summary>
            Disconnects from the current network.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanSearchStrategy">
            <summary>
            Searching human strategy in the known environment.
            </summary>
        </member>
        <member name="F:BlueQuark.HumanSearchStrategy.HEAD_YES_POSITIVE_AMPLITUDE">
            <summary>
            Amplitude of the positive range for yes axis.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.OrientHeadYesAxis(BlueQuark.HumanEntity,BlueQuark.Range{System.Single})">
            <summary>
            Compute point around chest of the HumanEntity.
            Orient head yes axis using this point.
            Only use in Vision mode for now, because BoundingBox is null in Skeleton and too small in Thermal.
            </summary>
            <param name="iHuman">The human target to use.</param>
            <param name="iHeadYesAxisAuthorizedRange">The authorized range for yes axis. (Degree)</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Predicate{UnityEngine.Vector3})">
            <summary>
            Starts a human search while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Predicate{UnityEngine.Vector3},System.Action{BlueQuark.HumanEntity})">
            <summary>
            Starts a human search while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iOnFound">Action to do when human is found.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Single,System.Action,System.Action{BlueQuark.HumanEntity})">
            <summary>
            Starts a human search during a given time.
            </summary>
            <param name="iTimeout">Search time, strictly greater than 0.</param>
            <param name="iOnEnd">Action when searching ends.</param>
            <param name="iOnFound">Action to do when human is found.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.UntilFound(System.String,System.Action{BlueQuark.HumanSearchResult})">
            <summary>
            Starts a human search with face recognition during a given time.
            </summary>
            <param name="iGoalName">The name of the searched human.</param>
            <param name="iOnFoundFace">Action to do when human is found with face recognition.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.UntilFound(System.String,System.Single,System.Action,System.Action{BlueQuark.HumanSearchResult})">
            <summary>
            Starts a human search with face recognition during a given time.
            </summary>
            <param name="iGoalName">The name of the searched human.</param>
            <param name="iTimeout">Search time, strictly greater than 0.</param>
            <param name="iOnEnd">Action when searching ends.</param>
            <param name="iOnFoundFace">Action to do when human is found with face recognition.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.HumanSearchParameters)">
            <summary>
            Starts a human search while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iParameters">The parameters to use for the search.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Single,BlueQuark.HumanSearchParameters)">
            <summary>
            Starts a human search during a given time.
            </summary>
            <param name="iTimeout">Search time, strictly greater than 0.</param>
            <param name="iParameters">The parameters to use for the search.</param>
        </member>
        <member name="T:BlueQuark.Navigation">
            <summary>
            Module managing navigation strategies. Able to run one main navigation strategy at a time.
            </summary>
        </member>
        <member name="P:BlueQuark.Navigation.IsBusy">
            <summary>
            Returns true if a navigation strategy is currently running.
            </summary>
        </member>
        <member name="M:BlueQuark.Navigation.Run``1">
            <summary>
            Runs a navigation strategy. This strategy can be parametrize in this way : Run().With(args).
            Starting a strategy will stop any running strategy.
            </summary>
            <typeparam name="S">The strategy type.</typeparam>
            <returns>The strategy to parametrize.</returns>
        </member>
        <member name="M:BlueQuark.Navigation.Stop">
            <summary>
            Stops the running navigation strategy and the wheels. No effect if no running navigation strategy.
            </summary>
        </member>
        <member name="T:BlueQuark.RoamSpeed">
            <summary>
            Speed for roaming
            </summary>
        </member>
        <member name="F:BlueQuark.RoamSpeed.NORMAL">
            <summary>
            Normal speed roaming. ~0.6m/s maximum.
            </summary>
        </member>
        <member name="F:BlueQuark.RoamSpeed.LOW">
            <summary>
            High speed roaming. ~0.5m/s maximum.
            </summary>
        </member>
        <member name="F:BlueQuark.RoamSpeed.HIGH">
            <summary>
            High speed roaming. ~0.8m/s maximum.
            </summary>
        </member>
        <member name="T:BlueQuark.GoogleCloudVision">
            <summary>
            To use this feature, you must set iKey with your own Google vision API key.
            Available at https://console.cloud.google.com/projectselector/apis/credentials
            </summary>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,OpenCVUnity.Mat,BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detects the wanted feature in the input image.
            </summary>
            <param name="iKey">Key to authorize request.</param>
            <param name="iImage">The image to retrieve info.</param>
            <param name="iFeatureType">The kind of feature.</param>
            <param name="iCallback">Callback with the output Annotate response.</param>
            <param name="iMaxResult">Max wish results.</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,UnityEngine.Texture2D,BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detects the wanted feature in the input image.
            </summary>
            <param name="iKey">Key to authorize request.</param>
            <param name="iImage">The image to retrieve info.</param>
            <param name="iFeatureType">The kind of feature.</param>
            <param name="iCallback">Callback with the output Annotate response.</param>
            <param name="iMaxResult">Max wish results.</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,System.Byte[],BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detects the wanted feature in the input image.
            </summary>
            <param name="iKey">Key to authorize request.</param>
            <param name="iImage">The image to retrieve info.</param>
            <param name="iFeatureType">The kind of feature.</param>
            <param name="iCallback">Callback with the output Annotate response.</param>
            <param name="iMaxResult">Max wish results.</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:BlueQuark.KidnappingDetector">
            <summary>
            Detector algorithm for kidnapping, ie : the robot has been rised from the floor.
            </summary>
        </member>
        <member name="P:BlueQuark.KidnappingDetector.OnDetect">
            <summary>
            Called when the robot is detected as kidnapped. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDetector">
            <summary>
            Detects moving points in frame. Do not use this during moving.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetector.OnDetect">
            <summary>
            Called when a motion is detected in front of the robot. Remove all callbacks to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.NoiseDetector">
            <summary>
            Represents the noise detector component.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.OnDetect">
            <summary>
            Callback array fired on detection.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.MicrophoneIdx">
            <summary>
            Represents the index of the microphone.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.MicrophoneData">
            <summary>
            Represents the microphone data.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.RecordClip">
            <summary>
            Represents microphone recorded clip. 
            </summary>
        </member>
        <member name="T:BlueQuark.ObstacleDetector">
            <summary>
            Obstacle detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetector.OnDetect">
            <summary>
            Called when an obstacle is detected.
            </summary>
        </member>
        <member name="M:BlueQuark.ObstacleDetector.Detect">
            <summary>
            Makes a instant detection of any present obstacle near the robot.
            </summary>
            <returns>An obstacle detection containing any detected nearby obstacle.</returns>
        </member>
        <member name="T:BlueQuark.Perception">
            <summary>
            This module contains all the base perception features (Face tracking, Detectors...).
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ShadeProcessing">
            <summary>
            Color tool.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ThermalDetector">
            <summary>
            Thermal tool.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.QRCodeDetector">
            <summary>
            QRCode tool for read and write.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.MotionDetector">
            <summary>
            Feature to detect and track movement.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.MotionDetectorRework">
            <summary>
            Feature to detect and track movement.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ObstacleDetector">
            <summary>
            Feature to detect arround obstacles.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.NoiseDetector">
            <summary>
            Feature to detect loud sound pike.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.KidnappingDetector">
            <summary>
            Use this feature to callback if Buddy is kidnapped.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.AprilTagDetector">
            <summary>
            Feature to detect AprilTags.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.FaceDetector">
            <summary>
            Feature to detect Faces.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.HandWavingDetector">
            <summary>
            Feature to detect short range Waving.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.GoogleCloudVision">
            <summary>
            Access to the google cloud vision feature.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.RoomDetector">
            <summary>
            Localization tool.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.Mapper">
            <summary>
            A topological map of rooms and waypoints.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.TensorFlow">
            <summary>
            Feature to make prediction on available models.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.FaceRecognizer">
            <summary>
            Feature to recognized recorded human faces.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.HumanDetector">
            <summary>
            Human full body detection feature.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.SkeletonDetector">
            <summary>
            Body detection with skeleton data structure.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ObjectDetector">
            <summary>
            Object detection feature.
            </summary>
        </member>
        <member name="T:BlueQuark.QRCodeDetector">
            <summary>
            QR code detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeDetector.OnDetect">
            <summary>
            Called when a QR code is detected in front of the robot. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Detect(OpenCVUnity.Mat,BlueQuark.QRCodePoints)">
            <summary>
            Detect all QR code in given frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iMode">The QRcode strategy to apply.</param>
            <returns>Set of detected QR codes.</returns>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Detect(UnityEngine.Texture2D,BlueQuark.QRCodePoints)">
            <summary>
            Detect all QR code in given frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iMode">The QRcode strategy to apply.</param>
            <returns>Set of detected QR codes.</returns>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Write(System.String,OpenCVUnity.Size)">
            <summary>
            Write the input content as a QR code.
            </summary>
            <param name="iContent">Content to write.</param>
            <param name="iSize">Size of the QR code.</param>
            <returns>The texture of the QR code.</returns>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Write(System.String,System.Int32,System.Int32)">
            <summary>
            Write the input content as a QR code.
            </summary>
            <param name="iContent">Content to write.</param>
            <param name="iWidth">Width of the QR code.</param>
            <param name="iHeight">Height of the QR code.</param>
            <returns>The texture of the QR code.</returns>
        </member>
        <member name="T:BlueQuark.ShadeProcessing">
            <summary>
            Color processing component.
            </summary>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetBrightness(OpenCVUnity.Mat)">
            <summary>
            Gets the brightness of the input frame.
            </summary>
            <param name="iFrame">The fame to check.</param>
            <returns>Estimated brightness of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.Mask(OpenCVUnity.Mat,UnityEngine.Color32[])">
            <summary>
            Applies a color mask on the input frame. All input color will be removed from the frame.
            </summary>
            <param name="iFrame">The frame to mask on.</param>
            <param name="iColors">The color to remove from frame.</param>
            <returns>The frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.Reduce(OpenCVUnity.Mat,System.Int32)">
            <summary>
            Creates a color reduction on the input frame.
            </summary>
            <param name="iFrame">The frame to reduce.</param>
            <param name="iNbColor">Max number of color to handle in the frame.</param>
            <returns>The reduced frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetColor(OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Returns the main color of the frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="ioReducedFrame">The reduced frame.</param>
            <returns>The main color of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetColors(OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Returns the three main colors of the frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="ioReducedFrame">The reduced frame.</param>
            <returns>The three main colors of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetColors(OpenCVUnity.Mat,System.Int32,OpenCVUnity.Mat)">
            <summary>
            Returns the iNbColor main colors of the frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iNbColor">Number of color to detect.</param>
            <param name="ioReducedFrame">The reduced frame.</param>
            <returns>The main colors of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.FindColor(OpenCVUnity.Mat,UnityEngine.Color32)">
            <summary>
            Retrieves all positions where a specified color is found.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iColor">The color to find.</param>
            <returns>All position of the given color.</returns>
        </member>
        <member name="T:BlueQuark.TensorFlow">
            <summary>
            TensorFlow API interface component using Inception model. Offline system.
            </summary>
        </member>
        <member name="M:BlueQuark.TensorFlow.ConvertToGrayscale(OpenCVUnity.Mat,System.Int32,System.Int32)">
            <summary>
            Converts a Mat into grayscale float array with desired output width and height
            </summary>
            <param name="iFrame">Frame that will be processed</param>
            <param name="iOutputWidth">Desired output width</param>
            <param name="iOutputHeight">Desired output height</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferMNISTLabel">
            <summary>
            Guess which number is shown in the image
            </summary>
            <returns>
            The string of the number guessed as first element, then the confidence level of classification
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferMNISTLabel(OpenCVUnity.Mat)">
            <summary>
            Guess which number is shown in the image
            </summary>
            <param name="iFrame">Frame that will be processed, as on OpenCV Mat</param>
            <returns>
            The string of the number guessed as first element, then the confidence level of classification
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferInceptionLabel">
            <summary>
            Guess what is seen in the image, associating a label with a probability associated
            </summary>
            <returns>
            An array of each detected element in the frame of the camera
            Each value in the array is formatted as follows : "label [confidence]"
            e.g. : "electric fan [0.865495]"
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferInceptionLabel(OpenCVUnity.Mat)">
            <summary>
            Guess what is seen in the image, associating a label with a probability associated
            </summary>
            <param name="iFrame">Frame that will be processed, as on OpenCV Mat</param>
            <returns>
            An array of each detected element in the frame of the camera
            Each value in the array is formatted as follows : "label [confidence]"
            e.g. : "electric fan [0.865495]"
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InitClassifier(BlueQuark.TFModelType)">
            <summary>
            Starts the desired classifier model.
            </summary>
            <remarks>
            Only one model can be active at a time.
            </remarks>
            <param name="iModel">The model that will be initialized.</param>
        </member>
        <member name="M:BlueQuark.TensorFlow.InitClassifier(BlueQuark.TFModelType,System.String,System.String)">
            <summary>
            Starts the desired classifier model.
            </summary>
            <remarks>
            Only one model can be active at a time.
            </remarks>
            <param name="iModel">The model that will be initialized.</param>
            <param name="iModelFile">The model file wanted for the chosen classifier.</param>
            <param name="iLabelsFile">The corresponding labels for the classifier's output.</param>
        </member>
        <member name="M:BlueQuark.TensorFlow.Predict">
            <summary>
            Gets current camera frame and feeds it into current active model.
            </summary>
            <remarks>
            Camera must be on for this method to work.
            </remarks>
        </member>
        <member name="M:BlueQuark.TensorFlow.Predict(OpenCVUnity.Mat)">
            <summary>
            Gets current camera frame and feeds it into current active model.
            </summary>
            <param name="iFrame">Frame that's going to be analyzed as an OpenCV Mat.</param>
        </member>
        <member name="T:BlueQuark.ThermalDetector">
            <summary>
            Represents a thermal detection class.
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalDetector.DetectImpl``1(``0)">
            <summary>
            Make an instant detection, on the current frame.
            <para> Use <see cref="T:System.Int32"/> to threshold detection.
            Use <see cref="T:BlueQuark.ThermalHumanParameters"/> to Human detection. </para>
            <para> Note: <see cref="T:BlueQuark.ThermalMotionParameters"/> not available with instant detection. </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="iParameter">The parameters to use for this detection.</param>
            <returns>An array of detected thermal entity, or null if nothing was detected.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.OnNewFrame(OpenCVUnity.Mat,OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Detects the thermal entities by creating a mask based on thermal values and fuses them with the camera frame.
            </summary>
            <param name="iRGBCamFrame">RGB Camera pixel matrix</param>
            <param name="iDepthCamFrame">Depth Camera pixel matrix</param>
            <param name="iThermalFrame">Thermal Camera pixel matrix</param>
        </member>
        <member name="M:BlueQuark.ThermalDetector.OnRemoveAlgorithm(System.Type,System.Int32)">
            <summary>
            Retrieves the running algorithm which have same type of iAlgorithmType 
            and binded with iCallbackIndex, then this algorithm is dispose.
            </summary>
            <param name="iAlgorithmType">The algorithm type to remove.</param>
            <param name="iCallbackIndex">The callback index which is use as binding for detect algorithm.</param>
        </member>
        <member name="M:BlueQuark.ThermalDetector.OnClearAlgorithm(System.Type)">
            <summary>
            Disposes all running algorithm which have same type of iAlgorithmType.
            </summary>
            <param name="iAlgorithmType">The algorithm type to clear.</param>
        </member>
        <member name="M:BlueQuark.ThermalDetector.OnModifyAlgorithm``1(System.Type,System.Int32,``0)">
            <summary>
            <para>Try to create the new algorithm with given parameter,
            then retrieve the old algorithm bind with iCallbackIndex and call it's dispose function.
            Finally add the new algorithm to the list of running algorithm.</para>
            If an error occured during the modification the old algorithm is not remove.<br/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="iAlgorithmType">The algorithm type to modify.</param>
            <param name="iCallbackIndex">The callback index which is use as binding for detect algorithm.</param>
            <param name="iParameter">The new parameter to use for this algorithm.</param>
        </member>
        <member name="M:BlueQuark.ThermalDetector.FindDetectAlgorithmIndex(System.Type,System.Int32)">
            <summary>
            Find the index of the detect algorithm store in mRunningDetectAlgorithms,
            that match with given type and Callback index.
            </summary>
            <param name="iAlgorithmType">The algorithm type to find</param>
            <param name="iCallbackIndex">The callback index which is use as binding for detect algorithm.</param>
            <returns>The index of the detect algorithm that match with given parameters.</returns>
        </member>
        <member name="P:BlueQuark.ThermalDetector.OnDetect">
            <summary>
            Called when a Thermal value in the matrix, exceed the given threshold.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalDetector.OnHumanDetect">
            <summary>
            Called when a Human is detected.
            Optimal range is between [0.5 ; 1.5] meters
            <para> The results are altered according to the environment.
            (Air flow, Thermal matrix facing the sun) </para>
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalDetector.OnMotionDetect">
            <summary>
            Called when a Motion is detected.
            Optimal range is between [0.5 ; 1.5] meters
            <para> The results are altered according to the environment.
            (Air flow, Thermal matrix facing the sun) </para>
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalDetector.Detect``1(``0)">
            <summary>
            Makes an instant detection, on the current frame.
            <para> Use <see cref="T:BlueQuark.ThermalHumanParameters"/> to Human detection. </para>
            <para> Note: Motion detection is not available in instant detection, so don't use <see cref="T:BlueQuark.ThermalMotionParameters"/></para>
            </summary>
            <typeparam name="T">The parameters to use for this detection.</typeparam>
            <returns>An array of detected thermal entity.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.Detect(System.Int32)">
            <summary>
            Makes an instant Thermal threshold detection, on the current frame.
            </summary>
            <param name="iThreshold">The temperature to use for this thermal threshold detection.</param>
            <returns>An array of detected thermal entity.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetHottestTemperature">
            <summary>
            Returns the hottest temperature.
            </summary>
            <returns>The hottest temperature.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetHottestPoints">
            <summary>
            Returns the list of hottest points.
            </summary>
            <returns>The list of hottest points.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetAverageTemperature">
            <summary>
            Returns the average temperature.
            </summary>
            <returns>The average temperatuer.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetPointsHotterThan(System.Single)">
            <summary>
            Return a list of points hotter than a given temperature.
            </summary>
            <param name="iThresholdTemperature">The temperature limit.</param>
            <returns>The list of points.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.IsHotterThan(System.Single)">
            <summary>
            Compare the given temperature with the temperature of the instance.
            </summary>
            <param name="iThresholdTemperature"></param>
            <returns>True if the instance is hotter than the given temperature.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.CheckHumanPresence(System.Single@,System.Single)">
            <summary>
            Tells if a human is present by comparing average temperatures over regions .
            Works from 0.5m to 2.5m approximately.
            </summary>
            <param name="oTemperatureDiff">The difference of average temperature between hottest and coldest regions.</param>
            <param name="iThresholdDiff">When difference of average temperature of hottest and coldest regions is greater than this value, return true.</param>
            <returns>Yes if human present</returns>
        </member>
        <member name="T:BlueQuark.HumanEntity">
            <summary>
            Human entity detected.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.HumanDetectionMode">
            <summary>
            Human detected by VISION or by SKELETON.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.BoundingBox">
            <summary>
            Available when in SensorMode.VISION. Null if not available.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Center">
            <summary>
            Available when in SensorMode.VISION. Null if not avaiable.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Distance">
            <summary>
            Distance to human in meters. Available in SensorMode.SKELETON. -1 if not available.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Confidence">
            <summary>
            Confidence of this entity. From 0 to 1. -1 if not available.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Skeleton">
            <summary>
            Associated skeleton. Available in SensorMode.SKELETON. Null if not available.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.BodyPosition">
            <summary>
            Position of the body.
            </summary>
        </member>
        <member name="T:BlueQuark.HorizontalMotion">
            <summary>
            Represents a horizontal motion;
            </summary>
        </member>
        <member name="F:BlueQuark.HorizontalMotion.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.HorizontalMotion.LEFT_TO_RIGHT">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:BlueQuark.HorizontalMotion.RIGHT_TO_LEFT">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:BlueQuark.VerticalMotion">
            <summary>
            Represents a vertical motion;
            </summary>
        </member>
        <member name="F:BlueQuark.VerticalMotion.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.VerticalMotion.TOP_DOWN">
            <summary>
            Top down.
            </summary>
        </member>
        <member name="F:BlueQuark.VerticalMotion.BOTTOM_UP">
            <summary>
            Bottom up;
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDirection">
            <summary>
            Represents a motion direction.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDirection.Vertical">
            <summary>
            Vertical motion.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDirection.Horizontal">
            <summary>
            Horizontal motion.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionDirection.ToString">
            <summary>
            To string method.
            </summary>
            <returns>The string representation of the struct.</returns>
        </member>
        <member name="T:BlueQuark.MotionEntity">
            <summary>
            Represents a motion entity.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.Direction">
            <summary>
            Direction of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.Speed">
            <summary>
            Speed of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.BoundingBox">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.RectInFrame">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.Confidence">
            <summary>
            Confidenec of the motion entity;
            </summary>
        </member>
        <member name="T:BlueQuark.MotionEntityExtension">
            <summary>
            Represents an extention of motion entity.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionEntityExtension.ToDirection(BlueQuark.MotionEntity[])">
            <summary>
            Gets a motion direction.
            </summary>
            <param name="iMotions">The motion entity to get the motion direction.</param>
            <returns>The motion direction.</returns>
        </member>
        <member name="T:BlueQuark.ObjectEntity">
            <summary>
            Represents an object entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.BoundingBox">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.Label">
            <summary>
            Label, if applicable, of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.Confidence">
            <summary>
            Confidence of this entity. From 0 to 1.
            </summary>
        </member>
        <member name="T:BlueQuark.ObstacleEntity">
            <summary>
            Represents an obstacle element nearby the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleEntity.Distance">
            <summary>
            Distance to the obstacle in millimeters. -1 if not available or no obstacle.
            </summary>
        </member>
        <member name="T:BlueQuark.ObstacleDetection">
            <summary>
            Obstacle detection frame with all related obstacles.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetection.Count">
            <summary>
            Total number of detected obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetection.BottomFrontLeft">
            <summary>
            Robot's left side bottom-front detection. Null if no obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetection.BottomFrontRight">
            <summary>
            Robot's right side bottom-front detection. Null if no obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetection.BottomFront">
            <summary>
            Robot's Bottom-front detection. Null if no obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetection.BottomBack">
            <summary>
            Robot's bottom-back detection. Null if no obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetection.TopFront">
            <summary>
            Robot's top-front detection. Null if no obstacle.
            </summary>
        </member>
        <member name="T:BlueQuark.QRCodeEntity">
            <summary>
            Represents a QRCode entity.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.Points">
            <summary>
            The points localisation of the QRCode.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.MatInFrame">
            <summary>
            Sub mat containing the detected entity.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.Content">
            <summary>
            Label, if applicable, of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.Confidence">
            <summary>
            Confidence of this entity. From 0 to 1.
            </summary>
        </member>
        <member name="T:BlueQuark.ShadeEntity">
            <summary>
            Represents a shade entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.Color">
            <summary>
            The color of the shade.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.NearestColor">
            <summary>
            The nearest color of the shade.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.MatInFrame">
            <summary>
            Sub mat containing the detected entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.Confidence">
            <summary>
            The confidence of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.RectInFrame">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="T:BlueQuark.UserManager">
            <summary>
            Represents the user manager class component.
            </summary>
        </member>
        <member name="M:BlueQuark.UserManager.GetLoggedUser">
            <summary>
            The current logged user.
            </summary>
            <returns>A UserAccount copy of the current logged user.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetUsers">
            <summary>
            Buddy's user list. It's a copy, so any modification won't be keeped.
            </summary>
            <returns>Copy of Buddy's users.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.IsCorrectRobotPassword(System.String)">
            <summary>
            Checks if the passed string is equals to the robot global password.
            </summary>
            <param name="iPassword">The password to check.</param>
            <returns>True if input is equals to robot password.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.SetRobotPassword(System.String)">
            <summary>
            Sets the robot password.
            </summary>
            <param name="iPassword">The password to set. Must be a 4 digits string.</param>
            <returns>True if the password was correctly setted.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetUserPhotographs(System.Boolean)">
            <summary>
            Gets all current user photographs saved by the running app.
            </summary>
            <param name="iLoadSprite">Tells if the picture sprite must be loaded. False to get a "spriteless" photograph.</param>
            <returns>Photographs taken by the running app concerning the current user.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetPhotographs(System.Boolean)">
            <summary>
            Gets all photographs saved by the running app.
            </summary>
            <param name="iLoadSprite">Tells if the picture sprite must be loaded. False to get a "spriteless" photograph.</param>
            <returns>Photographs taken by the running app.</returns>
        </member>
        <member name="T:BlueQuark.Gender">
            <summary>
            Gender type.
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.MALE">
            <summary>
            Male gender
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.FEMALE">
            <summary>
            Female gender
            </summary>
        </member>
        <member name="T:BlueQuark.SessionType">
            <summary>
            Session type of the user.
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.USER">
            <summary>
            User session type.
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.ADMIN">
            <summary>
            Administrator session type.
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.GUEST">
            <summary>
            Guest session type.
            </summary>
        </member>
        <member name="T:BlueQuark.UserAccount">
            <summary>
            User info, not used.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.ID">
            <summary>
            ID of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Email">
            <summary>
            Email of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.FirstName">
            <summary>
            First name of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.LastName">
            <summary>
            Last name of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Gender">
            <summary>
            Gender of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.BirthDate">
            <summary>
            Birthdate of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Password">
            <summary>
            Password of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Session">
            <summary>
            Session type of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Permissions">
            <summary>
            List of permisssions of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Preferences">
            <summary>
            User preferences link to this account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Tastes">
            <summary>
            Tastes.
            </summary>
            <seealso cref="T:BlueQuark.Internal.UserTastes"/>
        </member>
        <member name="P:BlueQuark.UserAccount.Occupation">
            <summary>
            Occupations.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.CityAddress">
            <summary>
            City address.
            </summary>
        </member>
        <member name="M:BlueQuark.UserAccount.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="T:BlueQuark.UserPref">
            <summary>
            This class represents user preferences.
            </summary>
        </member>
        <member name="T:BlueQuark.Resources">
            <summary>
            The module in charge of handling all application assets (sprites, raw files path, sounds ...).
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BFR_FONT_NAME">
            <summary>
            Shortcut const value to a font name. Use that with Font font = Buddy.Resources.Get[FONT](FONT_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.GOTHIC_FONT_NAME">
            <summary>
            Shortcut const value to a font name. Use that with Font font = Buddy.Resources.Get[FONT](FONT_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SPLASHSCREEN_BACKGROUND_IMG_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SMALL_CIRCLE_IMG_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.DEFAULT_APP_IMG_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BLUEFROG_LOGO_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.ASLEEP_BUDDY_IMG_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BLUE_STAR_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.GREY_STAR_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.ZOOM_IN_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.ZOOM_OUT_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WRENCH_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIND_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIFI_OFF_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIFI_0_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIFI_1_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIFI_2_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIFI_3_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.WIFI_4_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.VIDEO_ON_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.VIDEO_OFF_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.USERS_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.USER_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.TV_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.TRASH_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.HOURGLASS_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.THERMOMETER_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.STOP_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BIG_SPINNING_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.TABLET_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SOUND_ON_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SOUND_OFF_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.DOWN_TRIANGLE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.UP_TRIANGLE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.CART_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BAG_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SHIELD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SHARE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SEARCH_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.RELOAD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.REPEAT_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.REPLY_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.REDO_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SHUFFLE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.QRCODE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.PLUS_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.PLAY_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SEND_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.PICTURE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.CAMERA_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.PHONE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.PAUSE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.MUSIC_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.MOBILE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.MINUS_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.MICRO_ON_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.MICRO_OFF_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BURGER_MENU_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.MAIL_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.LOCK_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.SMALL_SPINNING_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.LANGUAGE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.INFO_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.HOME_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.HELP_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.FORWARD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.FOLDER_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.FILTER_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.FAST_FORWARD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.FAST_BACKWARD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.EYE_ON_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.EYE_OFF_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.EDIT_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.DOWNLOAD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.DOTS_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.DEFAULT_APP_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.COGS_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.COG_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.DEV_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.CLOSE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.VALIDATE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.CLOCK_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.INCOGNITO_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.AGENDA_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.ALARM_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.ARROW_LEFT_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.ARROW_RIGHT_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.FORBIDDEN_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BACKWARD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.BUBBLE_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.KEYBOARD_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="F:BlueQuark.Resources.HINT_ICON_NAME">
            <summary>
            Shortcut const value to a image name. Use that with Sprite sprite = Buddy.Resources.Get[Sprite](ICON_NAME);
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.Item(System.String)">
            <summary>
            Retrieves the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word.</param>
            <returns>The word in the current language, default value if not found.</returns>
        </member>
        <member name="P:BlueQuark.Resources.AppRawDataPath">
            <summary>
            Full path to the current Raw/ app directory.
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.AppSpritesPath">
            <summary>
            Full path to the current Sprites/ app directory.
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.AppSoundsPath">
            <summary>
            Full path to the current Sounds/ app directory.
            </summary>
        </member>
        <member name="M:BlueQuark.Resources.ContainsKey(System.String,BlueQuark.Context)">
            <summary>
            Checks if a specified key-value pair is contained in the dictionary.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word to check.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>True if the key is stored inside the dictionary.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetString(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding word from the input key word stored into the BASE (GUI) field. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>The word in the current language, empty if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetRandomString(System.String,BlueQuark.Context)">
            <summary>
            Retrieves a random word from the input key word stored into the RANDOM (TTS) field. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished random word.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>The word in the current language, empty if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetPhoneticStrings(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding list to the input iKey stored into the CLOSE_PHONETIC (STT) field. Useful for multiple response handling with the SpeechToText
            </summary>
            <param name="iKey">The key corresponding to the wished list.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>List of strings that must sound similar.</returns>
        </member>
        <member name="M:BlueQuark.Resources.ContainsPhonetic(System.String,System.String,BlueQuark.Context)">
            <summary>
            Proceed to a GetPhoneticsStrings(iKey, iContext = APP) and checks if one element on the closephonetic array is contained in iRef
            </summary>
            <param name="iRef">The sentence to compare to each word into the list.</param>
            <param name="iKey">The key corresponding to the wished list.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>True if the one element of the closephonetic array in contained in iRef sentence (not null and not empty), false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetRawFullPath(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the full path from the name of the raw file / directory
            </summary>
            <param name="iFilename">Name of the file / directory.</param>
            <param name="iContext">The context corresponding to the path to find.</param>
            <returns>Fullpath to the file (including the iFilename).</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetSpritesFullPath(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the full path from the name of the sprite file / directory
            </summary>
            <param name="iFilename">Name of the file / directory.</param>
            <param name="iContext">The context corresponding to the path to find.</param>
            <returns>Fullpath to the file (including the iFilename).</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetSoundsFullPath(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the full path from the name of the sound file / directory
            </summary>
            <param name="iFilename">Name of the file / directory.</param>
            <param name="iContext">The context corresponding to the path to find.</param>
            <returns>Fullpath to the file (including the iFilename).</returns>
        </member>
        <member name="M:BlueQuark.Resources.Get``1(System.String,BlueQuark.Context)">
            <summary>
            Load the resource from Resource/ or from downloaded bundles.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iFilename">Name (without path/extension) of the resource.</param>
            <param name="iContext">The context corresponding to the resource to load.</param>
            <returns>The loaded resource. Null if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetJIT``1(System.String)">
            <summary>
            Load the resource from Resource/ or from downloaded bundles. Does not store the retrieved resource.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iFilePath">Full absolute path of the resource.</param>
            <returns>The loaded resource. Null if not found.</returns>
        </member>
        <member name="P:BlueQuark.Resources.OSRawDataPath">
            <summary>
            Full path to OS Raw/ folder.
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.OSSpritesPath">
            <summary>
            Full path to OS Sprites/ folder.
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.OSSoundsPath">
            <summary>
            Full path to OS Sounds/ folder.
            </summary>
        </member>
        <member name="M:BlueQuark.Resources.LoadAppResources(BlueQuark.Internal.AppStorage)">
            <summary>
            Loads app resources into memory and current AppDomain. A BRE reboot must be done to unload any loaded DLL.
            </summary>
            <param name="iAppStorage">The storage containing reference to all resource to load.</param>
        </member>
        <member name="M:BlueQuark.Resources.UnloadAppResources">
            <summary>
            Unload all loaded assetbundle of the currently loaded app.
            </summary>
        </member>
        <member name="M:BlueQuark.Resources.SearchRawFileAnyWhere(System.String)">
            <summary>
            Search the input file is OS and current app Raw data directory with different cases.
            </summary>
            <param name="iFilename">File to look for. Cannot be null.</param>
            <returns>Fullpath of the first file matching in some case if the input iFilename</returns>
        </member>
        <member name="M:BlueQuark.Resources.SearchRawFileAnyWhere(System.String,System.String)">
            <summary>
            Search the input file is OS and current app Raw data directory with different cases.
            </summary>
            <param name="iParentFolder">Parent folder inside the Raw directory, will be concatained with iFilename.</param>
            <param name="iFilename">File to look for. Cannot be null.</param>
            <returns>Fullpath of the first file matching in some case if the input iFilename</returns>
        </member>
        <member name="M:BlueQuark.Resources.SearchRawFileAnyWhere(System.String,System.String,System.String)">
            <summary>
            Search the input file is OS and current app Raw data directory with different cases.
            </summary>
            <param name="iParentFolder">Parent folder inside the Raw directory, will be concatained with iFilename.</param>
            <param name="iFilename">File to look for. Cannot be null.</param>
            <param name="iExtension">Extension of the file to look for.</param>
            <returns>Fullpath of the first file matching in some case if the input iFilename</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetStreamingAssetFullPath(System.String)">
            <summary>
            Gets the absolute path of the file contained in the native StreamingAssets folder of the base APK.
            </summary>
            <param name="iFilename">The name of the file</param>
            <returns>The absolute path of the file</returns>
        </member>
        <member name="T:BlueQuark.Context">
            <summary>
            Represents the context where the method will search/retrieve/compute for.
            </summary>
        </member>
        <member name="F:BlueQuark.Context.OS">
            <summary>
            Context OS.
            </summary>
        </member>
        <member name="F:BlueQuark.Context.APP">
            <summary>
            Context APP.
            </summary>
        </member>
        <member name="T:BlueQuark.Battery">
            <summary>
            Battery component of the robot. Its autonomy is about 4-8 hours.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.OnLevelChange">
            <summary>
            Callback called when battery level changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.OnStatusChange">
            <summary>
            Callback called when charging status changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.Level">
            <summary>
            Battery value, between 0 (empty) and 1 (full).
            Returns 2.55 if not available
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.IsJackPlugged">
            <summary>
            Is the battery cable is currently plugged ?
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.Value">
            <summary>
            Current voltage of the battery. Value in milli volt.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.AverageValue">
            <summary>
            Average voltage of the battery. Value in milli volt.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.ChargingStatus">
            <summary>
            Charging state code of the battery.
            </summary>
        </member>
        <member name="T:BlueQuark.CliffSensor">
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.OnVoid">
            <summary>
            Called when a cliff is detected by this cliff sensor. Called once by detection.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.OnFull">
            <summary>
            Called when a full floor is detected after a cliff. Called once by detection.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.Value">
            <summary>
            Current value of the sensor. Value in millimeters.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.Error">
            <summary>
            Error code. 0 is no Error.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.Enable">
            <summary>
            Enables/Disables the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.CliffSensors">
            <summary>
            Set of 7 cliff sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontFreeWheel">
            <summary>
            The front free wheel cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontLeftWheel">
            <summary>
            The front left cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontRightWheel">
            <summary>
            The front right cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackLeftWheel">
            <summary>
            The back left cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackRightWheel">
            <summary>
            The back right cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackLeftFreeWheel">
            <summary>
            The Back left free wheel cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackRightFreeWheel">
            <summary>
            The back right free wheel cliff sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.InfraredCamera">
            <summary>
            The robot infrared camera component. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See InfraredCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.IsBusy">
            <summary>
            Returns true if the camera is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.InfraredCamera.Open(BlueQuark.InfraredCameraMode)">
            <summary>
            Opens the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.InfraredCamera.Close">
            <summary>
            Closes the device. May take a certain time.
            </summary>
        </member>
        <member name="M:BlueQuark.InfraredCamera.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.InfraredCamera.ForceClose">
            <summary>
            Force to close the device despite any other component or app is using it.
            </summary>
        </member>
        <member name="T:BlueQuark.RGBCamera">
            <summary>
            The robot Red-Green-Blue camera. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.IsBusy">
            <summary>
            Returns true if the camera is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.RGBCamera.Open(BlueQuark.RGBCameraMode)">
            <summary>
            Opens the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening.</param>
        </member>
        <member name="M:BlueQuark.RGBCamera.Close">
            <summary>
            Closes the device. May take a certain time.
            </summary>
        </member>
        <member name="M:BlueQuark.RGBCamera.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.RGBCamera.TakePhotograph(System.Action{BlueQuark.Photograph},System.Boolean,System.Boolean,BlueQuark.FlashLightMode)">
            <summary>
            Async take photo feature with an high definiton.
            </summary>
            <param name="iOnEndTakePhoto">The callback with the taken photo. The photo is null if the operation was not successful.</param>
            <param name="iMakeSound">Set as false to make a silent photo. Default to true.</param>
            <param name="iMirrored">Does the picture must be mirrored ?</param>
            <param name="iFlashMode">Set the flash mode. Will be supported on the next version.</param>
        </member>
        <member name="M:BlueQuark.RGBCamera.ForceClose">
            <summary>
            Force to close the device despite any other component or app is using it.
            </summary>
        </member>
        <member name="T:BlueQuark.RGBCameraMode">
            <summary>
            Resolution (width, height) of the RGB camera in pixels.
            </summary>
        </member>
        <member name="T:BlueQuark.DepthCamera">
            <summary>
            Depth camera device component of the robot. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See DepthCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.IsBusy">
            <summary>
            Returns true if the camera is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.IsOpen">
            <summary>
            Returns true if the device is opened. 
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.DepthCamera.Open(BlueQuark.DepthCameraMode)">
            <summary>
            Opens the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.DepthCamera.Close">
            <summary>
            Closes the device. May take a certain time.
            </summary>
        </member>
        <member name="M:BlueQuark.DepthCamera.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.DepthCamera.ForceClose">
            <summary>
            Force to close the device despite any other component or app is using it.
            </summary>
        </member>
        <member name="T:BlueQuark.IMU">
            <summary>
            Inertial mesure unit component of the robot. Presents in robot's body.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Accelerometer">
            <summary>
            Accelerometer values. Values in milli g (where g = 9,81 m/s^2).
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Gyroscope">
            <summary>
            Gyroscopic values. Values in degrees per seconds.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Temperature">
            <summary>
            Temperature inside the robot body. Value in degrees Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Error">
            <summary>
            The error code. 0 is no error.
            </summary>
        </member>
        <member name="M:BlueQuark.IMU.SetAccelerometerScale(System.Byte)">
            <summary>
            Set the range of the accelerometer.
            </summary>
            <param name="iRange">Value can be 3, 5, 8 or 12.</param>
        </member>
        <member name="M:BlueQuark.IMU.SetAccelerometerOutputDataRate(System.Byte)">
            <summary>
            Sets the output datarate of the accelerometer.
            </summary>
            <param name="iRate">Value can be from 1 to 12.</param>
        </member>
        <member name="M:BlueQuark.IMU.SetAccelerometerBandwith(System.Byte)">
            <summary>
            Sets the bandwith of the accelerometer.
            </summary>
            <param name="iBandwith">Value can be from 0 to 7.</param>
        </member>
        <member name="M:BlueQuark.IMU.SetGyroscopeScale(System.Byte)">
            <summary>
            Set the range of the gyroscope.
            </summary>
            <param name="iRange">Value can be from 0 to 4.</param>
        </member>
        <member name="M:BlueQuark.IMU.SetGyroscopeOutputDataRate(System.Byte)">
            <summary>
            Sets the output datarate of the gyroscope.
            </summary>
            <param name="iRate">Value can be from 6 to 13.</param>
        </member>
        <member name="M:BlueQuark.IMU.SetGyroscopeBandwith(System.Byte)">
            <summary>
            Sets the bandwith of the gyroscope.
            </summary>
            <param name="iBandwith">Value can be from 0 to 2.</param>
        </member>
        <member name="T:BlueQuark.InfraredSensor">
            <summary>
            Infra red sensor component at the bottom-back of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredSensor.Value">
            <summary>
            Current value of the sensor. Value in millimeters.
            </summary>
        </member>
        <member name="T:BlueQuark.Microphones">
            <summary>
            Set of 4 microphones at the top of the robot's head.
            </summary>
        </member>
        <member name="F:BlueQuark.Microphones.NO_SOUND_LOCALIZATION">
            <summary>
            Default value if no source sound is recorded.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.SamplingRate">
            <summary>
            Gets the sample rate in Hz of the robot's microphones.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.IsBusy">
            <summary>
            Returns true if the microphones are processing a change, like enable/disable an option or setting new parameters. False otherwise.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.AmbiantSound">
            <summary>
            Ambient sound level. Value in dB.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.SoundLocalization">
            <summary>
            Sound localization. Value in degrees. Set to NO_SOUND_LOCALIZATION if disable or no sound detected.
            </summary>
            <seealso cref="F:BlueQuark.Microphones.NO_SOUND_LOCALIZATION"/>>
        </member>
        <member name="P:BlueQuark.Microphones.Error">
            <summary>
            Error code. 0 is not error.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.IsRecording">
            <summary>
            Returns true if the device is currently recording. False otherwise.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.EnableSoundLocalization">
            <summary>
            Enables/Disables the sound localization, if enable => will disable echo cancellation.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.EnableBeamforming">
            <summary>
            Enables/Disables the sound beamforming, if enable => will disable echo cancellation.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.EnableEchoCancellation">
            <summary>
            Enables/Disables the echo cancellation, if enable => will disable soundlocalization and beamforming.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.EnableSoundDetection">
            <summary>
            Enables/Disables the noise detection.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.SoundLocalizationParameters">
            <summary>
            Source sound localization microphones parameters. Set null to restore default parameters.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.BeamformingParameters">
            <summary>
            Beamforming microphones parameters. Set null to restore default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Microphones.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Microphones.StartRecording">
            <summary>
            Starts recording microphones input until : StopRecording() is call OR 30sec are reached OR StartRecording() is call again (erase previous started record). Sampling rate at Microphones.SamplingRate.
            </summary>
        </member>
        <member name="M:BlueQuark.Microphones.StopRecording">
            <summary>
            Stops any current record and returns the recorded audioclip. Any other StopRecording() after the first StopRecording() will return null.
            </summary>
            <returns>The recorded audio clip. Null if no Start record or call after the first StopRecord().</returns>
        </member>
        <member name="M:BlueQuark.Microphones.ToString">
            <summary>
            Serializes in string the current microphones state.
            </summary>
            <returns>The current microphones state.</returns>
        </member>
        <member name="P:BlueQuark.Microphones.MicrophoneTypes">
            <summary>
            Type of the audio input device
            </summary>
        </member>
        <member name="M:BlueQuark.Microphones.SwitchMicrophone(System.String,System.Boolean)">
            <summary>
            Switch audio input device state
            </summary>
            <param name="iDeviceID">Device name</param>
            <param name="iStateTo">Turn on or off</param>
        </member>
        <member name="P:BlueQuark.Microphones.CurrentMicrophone">
            <summary>
            Currently active microphone
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.SoundOutputParameters">
            <summary>
            Source sound microphones parameters. Set null to restore default parameters.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.VocalTriggerParameters">
            <summary>
            Vocal trigger microphones parameters. Set null to restore default parameters.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.EnableVocalTrigger">
            <summary>
            Enables/Disables the vocal trigger "Okay Buddy". Cannot be done with echo cancellation.
            </summary>
        </member>
        <member name="T:BlueQuark.TimeOfFlightSensor">
            <summary>
            Time of flight sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Value">
            <summary>
            Current value of the sensor. Range [30, 1000]. Value in millimeters.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.FilteredValue">
            <summary>
            Current filtered value of the sensor. Range [30, 1000]. Value in millimeters. Returns -1 if cannot detect anything (too far).
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.VerticalFOV">
            <summary>
            The vertical field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Enable">
            <summary>
            Enables/Disables the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.TimeOfFlightSensors">
            <summary>
            Set of 6 Time of flight sensors component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Front">
            <summary>
            Bottom-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Back">
            <summary>
            Bottom-back TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Left">
            <summary>
            Bottom-left-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Right">
            <summary>
            Bottom-right-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Chin">
            <summary>
            Head-chin-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Forehead">
            <summary>
            Head-forehead-front TOF sensor component.
            </summary>
        </member>
        <member name="T:BlueQuark.HDCamera">
            <summary>
            The robot High Definition Red-Green-Blue camera. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See HDCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.IsBusy">
            <summary>
            Returns true if the camera is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Width">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Type">
            <summary>
            Current camera type
            </summary>
        </member>
        <member name="M:BlueQuark.HDCamera.Open(BlueQuark.HDCameraMode)">
            <summary>
            Opens the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.HDCamera.Open(BlueQuark.HDCameraMode,BlueQuark.HDCameraType)">
            <summary>
            Opens the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.HDCamera.Close">
            <summary>
            Closes the device. May take a certain time.
            </summary>
        </member>
        <member name="M:BlueQuark.HDCamera.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.HDCamera.TakePhotograph(System.Action{BlueQuark.Photograph},System.Boolean,System.Boolean,BlueQuark.FlashLightMode)">
            <summary>
            Async take photo feature with an high definiton.
            </summary>
            <param name="iOnEndTakePhoto">The callback with the taken photo. The photo is null if the operation was not successful</param>
            <param name="iMakeSound">Set as false to make a silent photo. Default to true</param>
            <param name="iMirrored">Does the photograph must be mirrored ?</param>
            <param name="iFlashMode">Set the flash mode. Will be supported on the next version</param>
        </member>
        <member name="M:BlueQuark.HDCamera.ForceClose">
            <summary>
            Force to close the device despite any other component or app is using it.
            </summary>
        </member>
        <member name="T:BlueQuark.HDCameraMode">
            <summary>
            Resolution (width, height) of the HD RGB camera in pixels.
            </summary>
        </member>
        <member name="T:BlueQuark.Sensors">
            <summary>
            Module containing all robot sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.Battery">
            <summary>
            Battery component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.CliffSensors">
            <summary>
            Set of 7 cliff sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.DepthCamera">
            <summary>
            Depth camera component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.HDCamera">
            <summary>
            High definition RGB camera of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.IMU">
            <summary>
            Inertial Mesure Unit component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.InfraredCamera">
            <summary>
            Infrared camera of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.InfraredSensor">
            <summary>
            Back infrared sensor component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.Microphones">
            <summary>
            Microphones of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.TimeOfFlightSensors">
            <summary>
            Set of 6 infrared sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.RGBCamera">
            <summary>
            RGB camera component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.ThermalCamera">
            <summary>
            Thermal camera component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.TouchSensors">
            <summary>
            Set of 6 close touch sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.UltrasonicSensors">
            <summary>
            Set of 2 ultra sonic sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.AstraCamera">
            <summary>
            Astra camera component. It contains Depth + RGB + Infrared camera components.
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalCamera">
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Frame">
            <summary>
            Current frame of the device. Begin at top-left. Left-right reading.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.AmbiantTemperature">
            <summary>
            Ambiant temperature. Value in degrees Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="T:BlueQuark.TouchSensor">
            <summary>
            Touch sensor component of the robot. Useful to detect if a user is currently grasping or touching the robot on the head or dangerous zones.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.Value">
            <summary>
            Current value of the sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.Threshold">
            <summary>
            Sensivity of the sensor. Between 0 and 1. A lower sensivity will trigger easier.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.OnTouch">
            <summary>
            Called when the sensor detect a touch.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="T:BlueQuark.TouchSensors">
            <summary>
            Set of 6 binary touch sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.RightShoulder">
            <summary>
            Right shoulder touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.LeftShoulder">
            <summary>
            Left shoulder touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.Heart">
            <summary>
            Heart touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.LeftHead">
            <summary>
            Top-head left touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.RightHead">
            <summary>
            Top-head right touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.BackHead">
            <summary>
            Back-head touch sensor component.
            </summary>
        </member>
        <member name="T:BlueQuark.UltrasonicSensor">
            <summary>
            Ultrasonic component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an TOF sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.Value">
            <summary>
            Current value of the sensor. Range [150, 7999]. Value in millimeters. 
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.FilteredValue">
            <summary>
            Current filtered value of the sensor. Range [150, 7999]. Value in millimeters. Returns -1 if cannot detect anything (too far).
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.VerticalFOV">
            <summary>
            The vertical field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="T:BlueQuark.UltrasonicSensors">
            <summary>
            Set of 2 ultra sonic sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensors.Left">
            <summary>
            Bottom-front-left ultrasounic sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensors.Right">
            <summary>
            Bottom-front-right ultrasounic sensor component.
            </summary>
        </member>
        <member name="T:BlueQuark.Explorer">
            <summary>
            Component handling the left sidebar menu of UI.
            </summary>
        </member>
        <member name="P:BlueQuark.Explorer.IsBusy">
            <summary>
            Returns true if the Explorer is displayed.
            </summary>
        </member>
        <member name="M:BlueQuark.Explorer.Open``1">
            <summary>
            Opens the wished section.
            </summary>
            <typeparam name="S">Type of the Session to open.</typeparam>
            <seealso cref="T:BlueQuark.AppsSection"/>>
            <seealso cref="!:CurrentUserSection"/>>
            <seealso cref="!:FilesSection"/>>
            <seealso cref="T:BlueQuark.ParametersSection"/>>
            <seealso cref="!:SecuritySection"/>>
            <seealso cref="!:UsersSection"/>>
        </member>
        <member name="M:BlueQuark.Explorer.ReloadCurrentSection">
            <summary>
            Reload curently opened section.
            </summary>
        </member>
        <member name="M:BlueQuark.Explorer.Close">
            <summary>
            Closes the Explorer.
            </summary>
        </member>
        <member name="M:BlueQuark.Explorer.ScrollTo(UnityEngine.RectTransform)">
            <summary>
            Scroll explorer panel to widget.
            </summary>
            <param name="iTarget"></param>
        </member>
        <member name="T:BlueQuark.Footer">
            <summary>
            The footer is a UI component handle bottom screen display. You can add custom widget or add builtin FWidgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Footer.Hide">
            <summary>
            Remove all added widgets and hide the Footer.
            </summary>
        </member>
        <member name="M:BlueQuark.Footer.AddOnLeft(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer left side.
            </summary>
            <param name="iCustomGameObject">Gameobject to add.</param>
        </member>
        <member name="M:BlueQuark.Footer.AddOnMiddle(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer middle side.
            </summary>
            <param name="iCustomGameObject">Gameobject to add.</param>
        </member>
        <member name="M:BlueQuark.Footer.AddOnRight(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer right side.
            </summary>
            <param name="iCustomGameObject">Gameobject to add.</param>
        </member>
        <member name="M:BlueQuark.Footer.Remove(UnityEngine.GameObject)">
            <summary>
            Remove an added gameobject.
            </summary>
            <param name="iGameObject">Gameobject to remove.</param>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnLeft``1">
            <summary>
            Create and add on the Footer left side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnMiddle``1">
            <summary>
            Create and add on the Footer middle side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnRight``1">
            <summary>
            Create and add on the Footer right side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="M:BlueQuark.Footer.Remove``1(``0)">
            <summary>
            Remove a footer widget.
            </summary>
            <typeparam name="FW">Type of the widget.</typeparam>
            <param name="iFooterWidget">Widget to remove.</param>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnAccount``1">
            <summary>
            Create and add on the Footer left side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="T:BlueQuark.FButton">
            <summary>
            Button widget for the Footer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.FButton.SetStroke(System.Boolean)">
            <summary>
            Displays (or not) a stroke around the icon.
            </summary>
            <param name="iVal">Set as true to display the stroke, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetStrokeColor(UnityEngine.Color)">
            <summary>
            Sets the color of the stroke.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon of the component.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets the color of the component.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets the background icon of the component.
            </summary>
            <param name="iSprite">The sprite to set. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background icon color.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="T:BlueQuark.FIcon">
            <summary>
            Icon for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.FIcon.SetStroke(System.Boolean)">
            <summary>
            Displays (or not) a stroke around the icon.
            </summary>
            <param name="iVal">Set as true to display the stroke, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetStrokeColor(UnityEngine.Color)">
            <summary>
            Sets the color of the stroke.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetIcon(UnityEngine.Texture2D)">
            <summary>
            Sets the icon of the component.
            </summary>
            <param name="iTexture2D">The texture to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon of the component.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets the color of the component.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets the background icon of the component.
            </summary>
            <param name="iSprite">The sprite to set. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background icon color.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="T:BlueQuark.FDropup">
            <summary>
            Drop up widget for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FDropup.OnSelect">
            <summary>
            Called when a dropup item is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.FDropup.SelectedOption">
            <summary>
            Index of the currently selected item.
            </summary>
        </member>
        <member name="M:BlueQuark.FDropup.Add(UnityEngine.Sprite,System.Object)">
            <summary>
            Adds a new item to the dropup.
            </summary>
            <param name="iImage">The sprite to display. Cannot be null.</param>
            <param name="iParameter">Optional parameter to store.</param>
        </member>
        <member name="M:BlueQuark.FDropup.Add(BlueQuark.FDropupInfo)">
            <summary>
            Adds a new item to the dropup.
            </summary>
            <param name="iInfo">The info to add.</param>
        </member>
        <member name="T:BlueQuark.FDropupInfo">
            <summary>
            Dropup data for Footer GUI component
            </summary>
        </member>
        <member name="P:BlueQuark.FDropupInfo.Image">
            <summary>
            The sprite to display.
            </summary>
        </member>
        <member name="P:BlueQuark.FDropupInfo.Parameter">
            <summary>
            Optional parameter to store.
            </summary>
        </member>
        <member name="T:BlueQuark.FVerticalSlider">
            <summary>
            Slider bar for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FVerticalSlider.OnSlide">
            <summary>
            Called when the value changed.
            </summary>
        </member>
        <member name="P:BlueQuark.FVerticalSlider.SlidingValue">
            <summary>
            The current sliding value.
            </summary>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button icon.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonIconColor(UnityEngine.Color)">
            <summary>
            Sets the color of the button icon.
            </summary>
            <param name="iColor">The color of the button icon</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets background icon of the button.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background color of the button.
            </summary>
            <param name="iColor">The color of the button background</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetSliderBackground(UnityEngine.Sprite)">
            <summary>
            Sets the background of the slider.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetSliderColor(UnityEngine.Color)">
            <summary>
            Sets the slider's color.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetFillBackground(UnityEngine.Sprite)">
            <summary>
            Sets the fill gauge background image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetFillColor(UnityEngine.Color)">
            <summary>
            Sets the fill gauge color.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="T:BlueQuark.Header">
            <summary>
            The footer is a UI component handle top screen display.
            </summary>
        </member>
        <member name="P:BlueQuark.Header.OnClickParameters">
            <summary>
            Callback called when the user clicks on the top right parameter button of an app.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.DisplayParametersButton(System.Boolean)">
            <summary>
            Activates/Deactivates the top right parameter app button. Active by default at app start.
            </summary>
            <param name="iVal">Activate or deactivate the object.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplaySpinningWheel(System.Boolean)">
            <summary>
            Activates/Deactivates the top right spinningwheel.
            </summary>
            <param name="iVal">Activate or deactivate the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayBoldTitle(System.String)">
            <summary>
            Activates and displays a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iText">Text to display, must not be null or empty.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayLightTitle(System.String)">
            <summary>
            Activates and display a tops text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iText">Text to display, must not be null or empty.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayComplexTitle(System.String,System.String)">
            <summary>
            Activates and displays a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iTopText">First part of the text (top-left). Can be null or empty but at least one argument must be consistent.</param>
            <param name="iBottomText">Third part of the text (bottom-left). Can be null or empty but at least one argument must be consistent.</param>
        </member>
        <member name="M:BlueQuark.Header.HideTitle">
            <summary>
            Hides any displayed title.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetCustomAppIcon(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets a custom top-left app icon.
            </summary>
            <param name="iIcon">Main icon. Keeps the previous icon if null.</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keeps the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomNotificationsButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Font)">
            <summary>
            Sets a custom top-right notification icon.
            </summary>
            <param name="iIcon">Main icon. Keeps the previous icon if null..</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keeps the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
            <param name="iNbNotificationFont">Font of the unread notifcation number.</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomParametersButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets a custom top-right parameter icon
            </summary>
            <param name="iIcon">Main icon. Keeps the previous icon if null.</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keeps the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomCloseButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets a custom top-right close icon
            </summary>
            <param name="iIcon">Main icon. Keeps the previous icon if null.</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keeps the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomLightTitle(UnityEngine.Font)">
            <summary>
            Sets a custom top-center light title.
            </summary>
            <param name="iFont">The text font.</param>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultAppIcon">
            <summary>
            Restores top-left app icon default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultNotificationsButton">
            <summary>
            Restores top-right notifications default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultParametersButton">
            <summary>
            Restores top-right notifications button default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultLightTitle">
            <summary>
            Restores top-center light title default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultCloseButton">
            <summary>
            Restores top-right close button default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.DisplayAppIcon(System.Boolean)">
            <summary>
            Activate/Deactivate the top left app icon. Active by default at app start.
            </summary>
            <param name="iVal">Activate or deactivate the object.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayAppLayout(BlueQuark.AppInfo)">
            <summary>
            Activate the header in app layout mode. Display close/parameter/appicon/.
            </summary>
            <param name="iApp">The app to setup.</param>
        </member>
        <member name="M:BlueQuark.Header.Hide">
            <summary>
            Hide all items. Except notification.
            </summary>
        </member>
        <member name="T:BlueQuark.AlertNotification">
            <summary>
            Represents a validation notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.AlertNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameters for alert notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnDelay">Callback function if the user click on delay.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="M:BlueQuark.AlertNotification.With(System.String,System.Action,System.Action,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameters for alert notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iIcon">Left side sprite icon.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnDelay">Callback function if the user click on delay.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="T:BlueQuark.ConfirmationNotification">
            <summary>
            Represents a confirmation notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.ConfirmationNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameter for a confirmation notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnRepeat">Delegate on repeat.</param>
            <param name="iTimer">Display time.</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="M:BlueQuark.ConfirmationNotification.With(System.String,System.Action,System.Action,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameter for a confirmation notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnCancel">Delegate on cancel.</param>
            <param name="iIcon">Left side icon.</param>
            <param name="iTimer">Display time.</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="T:BlueQuark.MessageNotification">
            <summary>
            Represents a message callback notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.MessageNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameters for a received message notifcation.
            </summary>
            <param name="iText">The text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnReply">Callback method if user click on response.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="T:BlueQuark.SimpleNotification">
            <summary>
            Represents a basic notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.SimpleNotification.With(System.String,System.Single)">
            <summary>
            Specify parameters for simple notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="M:BlueQuark.SimpleNotification.With(System.String,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameters for simple notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iIcon">Left side sprite icon.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="T:BlueQuark.Notifier">
            <summary>
            Display manager for notification on the top of the robot screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.IsBusy">
            <summary>
            Returns true if the notifier is processing/displaying something.
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.DisplayedNotificationID">
            <summary>
            Returns the ID of current displayed notification.
            -1 if no notification is displayed.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Display``1">
            <summary>
            Displays the typed notification. After this call, use immediately the With method to specify notification arguments.
            </summary>
            <typeparam name="N">Type of the notification. Meteo, timer, confirmation ...</typeparam>
            <returns>The not that will be displayed.</returns>
        </member>
        <member name="M:BlueQuark.Notifier.DisplayUnread">
            <summary>
            Displays all unread notifications.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.DisplayUnread(System.Int32)">
            <summary>
            Displays an unread notification given a particular ID. If the notification isn't found, nothing is displayed.
            </summary>
            <param name="iID">ID of the notification.</param>
        </member>
        <member name="M:BlueQuark.Notifier.RemoveUnread(System.Int32)">
            <summary>
            Removes an unread notification using its id.
            </summary>
            <param name="iID">ID of the notification.</param>
        </member>
        <member name="M:BlueQuark.Notifier.HideOrRemove(System.Int32)">
            <summary>
            Removes from unread an unread notification or hides it if currently displayed.
            </summary>
            <param name="iID">ID of the notification.</param>
        </member>
        <member name="M:BlueQuark.Notifier.Hide">
            <summary>
            Hides the current displayed notification(s).
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Select(BlueQuark.Internal.NBox)">
            <summary>
            Set the specified notification as selected and unselect any other notification.
            </summary>
            <param name="iNotification">Notification to select</param>
        </member>
        <member name="M:BlueQuark.Notifier.CloseCurrentNotification">
            <summary>
            Close the current selected notification.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.CloseAndRemoveCurrentNotification">
            <summary>
            Close and remove the current selected notification.
            </summary>
        </member>
        <member name="T:BlueQuark.Toaster">
            <summary>
            The Toaster component is the main tool to display GUI elements at the center of the screen in a unified way.
            These GUI elements are gathered inside a Toast.
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.IsBusy">
            <summary>
            Returns True if the Toaster is displaying.
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.DisplayedToastID">
            <summary>
            Returns the ID of current displayed toast.
            </summary>
        </member>
        <member name="M:BlueQuark.Toaster.Display``1">
            <summary>
            Queue the wished toast parameter. It will displayed as soon as possible after any previous queued toasts or slides. 
            Built in toast can be set by using the method With(args) like this : Display().With(toast_args).
            Toasts are displayed until Toaster.Hide() is called.
            </summary>
            <typeparam name="T">Type of toast.</typeparam>
            <returns>The toast info to argument with the method With(args).</returns>
            <seealso cref="M:BlueQuark.Toaster.Hide"/>>
        </member>
        <member name="M:BlueQuark.Toaster.DisplaySlide">
            <summary>
            Queue a slide set of toast. It will be displayed as soon as possible after any previous queued toasts or slides.
            Slides are displayed until Toaster.Hide() is called.
            </summary>
            <returns>Returns the SlideSet dislpayed</returns>*
            <seealso cref="T:BlueQuark.SlideSet"/>
        </member>
        <member name="M:BlueQuark.Toaster.Hide">
            <summary>
            Hide the displayed toast.
            </summary>
        </member>
        <member name="M:BlueQuark.Toaster.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.ParameterToast">
            <summary>
            Represents a toast composed by an horizontal capsule with many parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.String,System.Action,System.String)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.String,System.Action,System.String,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.String,System.Action,System.String,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,System.String,System.Action,System.String)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,System.String,System.Action,System.String,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,System.String,System.Action,System.String,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.CreateWidget``1">
            <summary>
            Creates and adds the wished capsule widget to the capsule (top -> down)
            </summary>
            <typeparam name="T">Type of the capsule widget</typeparam>
            <returns>The wished widget.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.RemoveWidget``1(``0)">
            <summary>
            Removes the specified widget from the running capsule
            </summary>
            <typeparam name="T">Type of the capsule widget</typeparam>
            <param name="iWidget">The widget to remove.</param>
            <returns>True if the widget has been correctly removed.</returns>
        </member>
        <member name="T:BlueQuark.TButton">
            <summary>
            Represents a button to add inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TButton.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="M:BlueQuark.TButton.SetLabel(System.String)">
            <summary>
            Sets the button label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TButton.SetCenteredLabel(System.Boolean)">
            <summary>
            Sets the text as centered.
            </summary>
            <param name="iVal">Set as true to center text, false to set to left alignment.</param>
        </member>
        <member name="M:BlueQuark.TButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="P:BlueQuark.TPasswordField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TPasswordField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.TPasswordField.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="M:BlueQuark.TPasswordField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TPasswordField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TSlider">
            <summary>
            Represents a gauge system for capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.MaxSlidingValue">
            <summary>
            The maximum allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.MinSlidingValue">
            <summary>
            The minimal allowed value of the slider.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.WholeSlidingValue">
            <summary>
            Should the value only be allowed to be whole numbers ?
            </summary>
        </member>
        <member name="M:BlueQuark.TSlider.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="T:BlueQuark.TTextBox">
            <summary>
            Same as TTextField toaster widget but for larger text. For capsule layout only.
            </summary>
            <seealso cref="T:BlueQuark.TTextField"/>>
        </member>
        <member name="P:BlueQuark.TTextBox.OnChangeValue">
            <summary>
            Called when the text value has changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TTextBox.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.TTextBox.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TTextBox.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TTextBox.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="T:BlueQuark.TTextField">
            <summary>
            Represents a text field to add inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TTextField.OnChangeValue">
            <summary>
            Called when the text value has changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TTextField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.TTextField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TTextField.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets text field image.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide.</param>
        </member>
        <member name="M:BlueQuark.TTextField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TTextField.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="T:BlueQuark.TText">
            <summary>
            Represents a simple text to display inside a capsule layout.
            </summary>
        </member>
        <member name="M:BlueQuark.TText.SetLabel(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TText.SetCenteredLabel(System.Boolean)">
            <summary>
            Sets the text as centered.
            </summary>
            <param name="iVal">Set as true to center text, false to set to left alignment.</param>
        </member>
        <member name="T:BlueQuark.TToggle">
            <summary>
            Represents a simple radio button to add inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TToggle.OnToggle">
            <summary>
            Called when the value of the toggle was changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TToggle.ToggleValue">
            <summary>
            Current value of the toggle.
            </summary>
        </member>
        <member name="M:BlueQuark.TToggle.SetLabel(System.String)">
            <summary>
            Sets the toggle label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TToggle.SetActive(System.Boolean)">
            <summary>
            Enables/Disables the button for interaction.
            </summary>
        </member>
        <member name="T:BlueQuark.GUI">
            <summary>
            Graphical User Interface module. Contains all UI and display components.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Screen">
            <summary>
            General purpose screen handling. Layer 10000.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Dialoger">
            <summary>
            Popup managing, display dialog box. Layer 500.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Notifier">
            <summary>
            Top screen notification manager. Layer 400.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Explorer">
            <summary>
            Left side menu. Layer 300.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Header">
            <summary>
            Top screen buttons. Layer 210.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Footer">
            <summary>
            Bottom screen buttons. Layer 210.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Toaster">
            <summary>
            Middle screen buttons and layouts. Layer 200.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.LoadingScreen">
            <summary>
            Loader GUI class which lock buddy usage. Layer 900.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.SplashScreen">
            <summary>
            Loader GUI class handle loading screen when an app must be loaded. Layer 800.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.FakeSpeecher">
            <summary>
            The FakeSpeecher is the input text bar to type a fake input speech text. Can be displayed/hide with Enter key. Layer 700.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Waver">
            <summary>
            Lateral face waves handler.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.MetricBoard">
            <summary>
            Board to manage operating system test suite. Layer 100.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Blurer">
            <summary>
            Background blur controller. Auto adaptative layer.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Unlocker">
            <summary>
            Most-foreground layer to display an unlock GUI.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackParamArray`1">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="T:BlueQuark.PulsePattern">
            <summary>
            Structure containing values representing a pulse pattern.
            </summary>
        </member>
        <member name="P:BlueQuark.PulsePattern.LowLevel">
            <summary>
            This is the minimum light in %. Relative to maximum light.
            </summary>
        </member>
        <member name="P:BlueQuark.PulsePattern.OnDuration">
            <summary>
            Duration when the led is on. Value in milliseconds
            </summary>
        </member>
        <member name="P:BlueQuark.PulsePattern.OffDuration">
            <summary>
            Duration when the led is off. Value in milliseconds.
            </summary>
        </member>
        <member name="P:BlueQuark.PulsePattern.UpSlope">
            <summary>
            Speed to on phase. Value in milliseconds / %.
            </summary>
        </member>
        <member name="P:BlueQuark.PulsePattern.DownSlope">
            <summary>
            Speed to off phase. Value in milliseconds / %.
            </summary>
        </member>
        <member name="M:BlueQuark.PulsePattern.op_Implicit(BlueQuark.LEDColor)~BlueQuark.PulsePattern">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.PulsePattern.op_Implicit(BlueQuark.LEDPulsePattern)~BlueQuark.PulsePattern">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iLEDPattern">The pattern to convert.</param>
        </member>
        <member name="M:BlueQuark.PulsePattern.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>HSV values.</returns>
        </member>
        <member name="T:BlueQuark.HSVColor16">
            <summary>
            Structure containing HSV values for a color.
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor16.H">
            <summary>
            The "Hue" value (between 0 and 359).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor16.S">
            <summary>
            The "Saturation" value (between 0 and 100).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor16.V">
            <summary>
            The "Brightness" value (between 0 and 100).
            </summary>
        </member>
        <member name="M:BlueQuark.HSVColor16.op_Implicit(BlueQuark.HSVColor)~BlueQuark.HSVColor16">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor16.op_Implicit(UnityEngine.Color32)~BlueQuark.HSVColor16">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor16.op_Implicit(UnityEngine.Color)~BlueQuark.HSVColor16">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor16.op_Implicit(BlueQuark.LEDColor)~BlueQuark.HSVColor16">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The LED color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor16.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>HSV values.</returns>
        </member>
        <member name="T:BlueQuark.HSVColor">
            <summary>
            Structure containing HSV values for a color.
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.H">
            <summary>
            The "Hue" value (between 0 and 1).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.S">
            <summary>
            The "Saturation" value (between 0 and 1).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.V">
            <summary>
            The "Brightness" value (between 0 and 1).
            </summary>
        </member>
        <member name="M:BlueQuark.HSVColor.op_Implicit(BlueQuark.HSVColor16)~BlueQuark.HSVColor">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor.op_Implicit(UnityEngine.Color32)~BlueQuark.HSVColor">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor.op_Implicit(UnityEngine.Color)~BlueQuark.HSVColor">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor.op_Implicit(BlueQuark.LEDColor)~BlueQuark.HSVColor">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iColor">The LED color to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor.op_Implicit(BlueQuark.Mood)~BlueQuark.HSVColor">
            <summary>
            Implicit cast operator.
            </summary>
            <param name="iMood">The Mood to convert.</param>
        </member>
        <member name="M:BlueQuark.HSVColor.ToString">
            <summary>
            To string overriding.
            </summary>
            <returns>HSV values.</returns>
        </member>
        <member name="T:BlueQuark.CallbackArray">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray.Add(System.Action)">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray.Remove(System.Action)">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray.FireEvent">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray`1">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray`1.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.Add(System.Action{`0})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.AddP(System.Predicate{`0})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.Remove(System.Action{`0})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.RemoveP(System.Predicate{`0})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.FireEvent(`0)">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray`2">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray`2.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.Add(System.Action{`0,`1})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.Remove(System.Action{`0,`1})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.FireEvent(`0,`1)">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray`3">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray`3.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.Add(System.Action{`0,`1,`2})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.Remove(System.Action{`0,`1,`2})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.FireEvent(`0,`1,`2)">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.LogInfo">
            <summary>
            Represents a kind of log error/event
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.BAD_ARGUMENT">
            <summary>
            The input argument is bad.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.BAD_FORMAT">
            <summary>
            The input argument has a bad format. Specific for parsing purposes.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.NULL_VALUE">
            <summary>
            The value is null. Use BAD_ARGMENT for input arguments.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.OUT_OF_BOUND">
            <summary>
            An out of bound problem arised.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ENABLED">
            <summary>
            The process is enabled.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DISABLED">
            <summary>
            The process is disabled.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.BUSY">
            <summary>
            The process cannot perform something immediately because it is busy.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.TIME_OUT">
            <summary>
            A time out problem arised.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RUNNING">
            <summary>
            Attempt to start an heavy process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.COMPILING">
            <summary>
            Attempt to start a compilation process
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.COMPUTING">
            <summary>
            Attempt to start an heavy computing process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.STOPPING">
            <summary>
            Stopping an heavy process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UPLOADING">
            <summary>
            Uploading a file to the WWW.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DOWNLOADING">
            <summary>
            Uploading a file from the WWW.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.SENDING">
            <summary>
            Sending a data through any communication mechanism.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.LOADING">
            <summary>
            Loading a resource.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UNLOADING">
            <summary>
            Unloading a resource.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RETRIEVING">
            <summary>
            Retrieving some info.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UPDATING">
            <summary>
            Updating a resoure.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RELEASING">
            <summary>
            Releasing a process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UNAUTHORIZED">
            <summary>
            Unauthorized to do this.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ALREADY_EXISTS">
            <summary>
            This element already exsist.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ACCESSING">
            <summary>
            Attempt to access a resource.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.NOT_FOUND">
            <summary>
            The resource was not found in that place.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.READING">
            <summary>
            Attempt to read something from solid drive.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.WRITING">
            <summary>
            Attempt to write something in solid drive.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DELETING">
            <summary>
            Attempt to delete something from solid drive.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.SYNCHRONIZING">
            <summary>
            Attempt to synchronize.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DESYNCHRONIZED">
            <summary>
            A desynchonization between many process has been detected.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.CONNECTING">
            <summary>
            Connecting to something.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RECEIVING">
            <summary>
            Receiving something.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ABORTING">
            <summary>
            Stopping an heavy process.
            </summary>
        </member>
        <member name="T:BlueQuark.LogStatus">
            <summary>
            Represents the status of the log situation
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.INFO">
            <summary>
            The log is just a basic info.
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.START">
            <summary>
            The log signals that a specific process is starting.
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.SUCCESS">
            <summary>
            The log signals that a started process has succeed.
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.FAILURE">
            <summary>
            The log signals that a process cannot be done due to some error.
            </summary>
        </member>
        <member name="T:BlueQuark.LogKind">
            <summary>
            Represents the status of the log situation
            </summary>
        </member>
        <member name="F:BlueQuark.LogKind.INFO">
            <summary>
            The log is just a basic info.
            </summary>
        </member>
        <member name="F:BlueQuark.LogKind.WARNING">
            <summary>
            The log signals that something is wrong, but passable.
            </summary>
        </member>
        <member name="F:BlueQuark.LogKind.ERROR">
            <summary>
            The log signals that a process cannot be done due to some error.
            </summary>
        </member>
        <member name="F:BlueQuark.LogKind.CRITICAL_ERROR">
            <summary>
            The log signals that a process cannot be done due to a critical error.
            </summary>
        </member>
        <member name="T:BlueQuark.ExtLogModule">
            <summary>
            Represents an external module from the OS.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.OPENCVUNITY">
            <summary>
            Inside the OpenCVUnity library.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.BLUEQUARK_EDITOR">
            <summary>
            Inside the BlueQuark Editor libraries.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.APP">
            <summary>
            Inside a running application.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.APP_EDITOR">
            <summary>
            Inside an app editor process.
            </summary>
        </member>
        <member name="T:BlueQuark.Utils">
            <summary>
            Common tools, serialization, mathematic functions and conversions.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_SCALAR_32">
            <summary>
            Buddy color (cyan like in 32 bits color).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_SCALAR">
            <summary>
            Buddy color (cyan like in floating point values).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_32">
            <summary>
            Buddy color (cyan like in 32 bits color).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR">
            <summary>
            Buddy color (cyan like in floating point values).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_COLOR_32">
            <summary>
            Gray color used in UI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_LIGHTER_COLOR2_32">
            <summary>
            Selection color used in UI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_COLOR">
            <summary>
            Gray color used in UI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.SECOND_IN_MILLISECONDS">
            <summary>
            1000.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.MINUTE_IN_MILLISECONDS">
            <summary>
            60 * 1000.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.MINUTE_IN_SECONDS">
            <summary>
            60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.HOUR_IN_SECONDS">
            <summary>
            60 * 60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.DAY_IN_SECONDS">
            <summary>
            24 * 60 * 60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.WEEK_IN_SECONDS">
            <summary>
            7 * 24 * 60 * 60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.PI">
            <summary>
            PI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.PI_D">
            <summary>
            PI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.DEFAULT_VALUE_FLOAT">
            <summary>
            DEFAULT_VALUE_FLOAT for error return
            </summary>
        </member>
        <member name="M:BlueQuark.Utils.EvaluateExpression(System.String)">
            <summary>
            Parse and evaluate the input expression. The parser can parse a mathematical expression into a simple custom
            expression tree.It can recognise methods and fields/contants which
            are user extensible.It can also contain expression parameters which
            are registrated automatically. An expression tree can be "converted"/
            into a delegate.
            Handle :
            - Elementary arithmetic [ + - * / ]
            - Power[ ^ ]
            - Brackets()
            - Most function from Math(abs, sin, round, floor, min...)
            - Constants(e, PI)
            - MultiValue return (quite slow, produce extra garbage each call)
            </summary>
            <param name="iArithmeticExpression">The expression to parse. Cannot be null or empty.</param>
            <returns>Mathematical result of the expression. 0 if problem occured.</returns>
        </member>
        <member name="M:BlueQuark.Utils.WaitParallelTask(System.Action)">
            <summary>
            Starts an async task (Cannot use Unity API) and wait until completed.
            </summary>
            <param name="iAction">Delegate to invoke async.</param>
            <returns>Enumerator to yield.</returns>
        </member>
        <member name="M:BlueQuark.Utils.WaitParallelTask(System.Action,System.Action)">
            <summary>
            Starts an async task (Cannot use Unity API) and wait until completed.
            </summary>
            <param name="iAction">Delegate to invoke async.</param>
            <param name="iOnEnd">Delegate to invoke at the end of the async task.</param>
            <returns>Enumerator to yield.</returns>
        </member>
        <member name="M:BlueQuark.Utils.WaitUntil(System.Func{System.Boolean},System.Single)">
            <summary>
            Yield until the func returns true.
            </summary>
            <param name="iFunc">The func to check at each frame.</param>
            <param name="iTimeOut">The max time before timeout. Value in second.</param>
            <returns>Enumerator to yield.</returns>
        </member>
        <member name="M:BlueQuark.Utils.WaitWhile(System.Func{System.Boolean},System.Single)">
            <summary>
            Yield while the func returns true.
            </summary>
            <param name="iFunc">The func to check at each frame.</param>
            <param name="iTimeOut">The max time before timeout. Value in second.</param>
            <returns>Enumerator to yield.</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsAmong``1(``0,``0,``0,``0[])">
            <summary>
            Check if a value is contained among provided numbers.
            </summary>
            <param name="iVal">The value to check.</param>
            <param name="iRangeVal1">Mandatory comparative value.</param>
            <param name="iRangeVal2">Mandatory comparative value.</param>
            <param name="iRange">Dynamic comparative values.</param>
            <returns>Returns true if the value is among the provided numbers.</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsInRange``1(``0,``0,``0)">
            <summary>
            Checks if a value is in range between two values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="iValue">The value to check.</param>
            <param name="iLowerRange">The lower range.</param>
            <param name="iUpperRange">The upper range.</param>
            <returns>Returns true if strictly lower than lower range or strictly highier than upper range</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsBitSet(System.Byte,System.Int32)">
            <summary>
            Check if the bit of the input byte in set to 1. Position 0 is least significant bit, position 7 is most.
            </summary>
            <param name="iByte">Byte containing the bit to check.</param>
            <param name="iIndex">Position of the bit to check. Position 0 is least significant bit, position 7 is most.</param>
            <returns>True if the bit is set to 1.</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsBitSet(System.Int16,System.Int32)">
            <summary>
            Check if the bit of the input byte in set to 1. Position 0 is least significant bit, position 15 is most.
            </summary>
            <param name="iShort">Short containing the bit to check.</param>
            <param name="iIndex">Position of the bit to check. Position 0 is least significant bit, position 15 is most.</param>
            <returns>True if the bit is set to 1.</returns>
        </member>
        <member name="P:BlueQuark.Utils.JCodecProgression">
            <summary>
            Percent of a Jcodec process.
            </summary>
            <seealso cref="M:BlueQuark.Utils.CreateJCodecVideoFromPictures(System.String,System.Int32,System.Collections.Generic.List{System.Byte[]},System.Action{System.Boolean,System.String})"/>
        </member>
        <member name="M:BlueQuark.Utils.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="iFolderPath">Path to the directory.</param>
        </member>
        <member name="M:BlueQuark.Utils.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory with its subdir.
            </summary>
            <param name="iFolderPath">Path to the directory.</param>
        </member>
        <member name="M:BlueQuark.Utils.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory content to another location.
            </summary>
            <param name="iSourceDirName">Path to the source directory.</param>
            <param name="iDestDirName">Path to the destination directory.</param>
            <param name="iCopySubDirs">True if it must copy sub directories.</param>
        </member>
        <member name="M:BlueQuark.Utils.CopyFile(System.String,System.String)">
            <summary>
            Copy a file to a dest location.
            </summary>
            <param name="iSourcePath">Origin path of the file.</param>
            <param name="iDestPath">Dest path of the file.</param>
            <returns>True of the process was good</returns>
        </member>
        <member name="M:BlueQuark.Utils.CreateFile(System.String)">
            <summary>
            Create or override a file at the given path.
            </summary>
            <param name="iPath">Full path to the file.</param>
            <returns>True if the process was good.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DeleteFile(System.String)">
            <summary>
            Delete the given file.
            </summary>
            <param name="iPath">Full path to the file.</param>
            <returns>True if the process was good.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ReadFromFile(System.String)">
            <summary>
            Retrieve the whole text from the file.
            </summary>
            <param name="iPath">Full path to the file.</param>
            <returns>Content of the file.</returns>
        </member>
        <member name="M:BlueQuark.Utils.WriteInFile(System.String,System.Byte[])">
            <summary>
            Write data into a new created/existing file.
            </summary>
            <param name="iPath">Full path to the file.</param>
            <param name="iData">Data to stored inside the file.</param>
            <returns>True if the process was good.</returns>
        </member>
        <member name="M:BlueQuark.Utils.WriteInFile(System.String,System.String)">
            <summary>
            Write data into a new created/existing file.
            </summary>
            <param name="iPath">Full path to the file.</param>
            <param name="iText">Text to stored inside the file.</param>
            <returns>True if the process was good.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetFiles(System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="iFolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="iFolderPath"></param>
            <param name="iSearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files (including their paths) in the specified directory.
            </summary>
            <param name="iFolderPath"></param>
            <param name="iSearchPattern"></param>
            <param name="iSearchOptions"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.GetDirectories(System.String)">
            <summary>
            
            </summary>
            <param name="iFolderPath"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.GetDirectories(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="iFolderPath"></param>
            <param name="iSearchPattern"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            
            </summary>
            <param name="iFolderPath"></param>
            <param name="iSearchPattern"></param>
            <param name="iSearchOption"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.EnumToArray``1">
            <summary>
            Gets an array of the given enum.
            </summary>
            <typeparam name="T">Type of the enum.</typeparam>
            <returns>Array containing all possible values of the enum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RandomAmong``1(``0[])">
            <summary>
            Gets a random elements among given input elements. Default value if no elements.
            </summary>
            <typeparam name="T">Type of the elements.</typeparam>
            <param name="iElements">Elements to shuffle.</param>
            <returns>A random elements.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetNearestColor(UnityEngine.Color32)">
            <summary>
            Gets the nearest color.
            </summary>
            <param name="iColor">The color.</param>
            <returns>The shade color.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetNearestColor(BlueQuark.ShadeColor)">
            <summary>
            Gets the nearest color.
            </summary>
            <param name="iColor">The shade color.</param>
            <returns>The nearest color.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringToBytes(System.String)">
            <summary>
            Converts a string to bytes.
            </summary>
            <param name="iStr">The string to convert.</param>
            <returns>The byte result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.BytesToString(System.Byte[])">
            <summary>
            Convert a byte array to a string.
            </summary>
            <param name="iBytes">The bytes array to convert.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Makes a sub array from a data list.
            </summary>
            <typeparam name="T">The type of the subarray.</typeparam>
            <param name="iData">The datas of each elements.</param>
            <param name="iIndex">The index start of the data list.</param>
            <param name="iLength">The lenght value of the data list.</param>
            <returns>The sub array.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringArrayToJavaObj(System.String[])">
            <summary>
            Converts a string array to a java object.
            </summary>
            <param name="iArray">The list of string.</param>
            <returns>The java object.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RemapDepthToRGB(OpenCVUnity.Mat,OpenCVUnity.Mat,System.Int16,System.Int16)">
            <summary>
            Remaps depth to rgb.
            </summary>
            <param name="iDepthFrame">The depth frame.</param>
            <param name="iRGBFrame">The rgb frame.</param>
            <param name="iMinRange">The minimal range.</param>
            <param name="iMaxRange">The maximal range.</param>
            <returns>The remaped depth to rgb.</returns>
        </member>
        <member name="M:BlueQuark.Utils.LoadTexture(System.Byte[])">
            <summary>
            Loads a byte array to a Texture2D.
            </summary>
            <param name="iData">The data of a picture.</param>
            <returns>The texture2D.</returns>
        </member>
        <member name="M:BlueQuark.Utils.LoadTexture(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Loads a byte array to a Texture2D.
            </summary>
            <param name="iData">The data of a picture.</param>
            <returns>The texture2D.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CreateSprite(System.Byte[],System.Single,UnityEngine.SpriteMeshType)">
            <summary>
            Creates a sprite from a byte array.
            </summary>
            <param name="iData">The byte array of the pic.</param>
            <param name="iPixelsPerUnit">The pixel per unit of the pic.</param>
            <param name="iSpriteType">The sprite type.</param>
            <returns>The sprite.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ScaleTexture2DFromMat(OpenCVUnity.Mat,UnityEngine.Texture2D)">
            <summary>
            Creates / scales the input texture accordingly from the input mat.
            </summary>
            <param name="iMat">Input matrix, only the size will be considered.</param>
            <param name="ioTexture">The created/resized texture.</param>
            <returns>The created/resized texture.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Save(System.String,OpenCVUnity.Mat[],System.Single)">
            <summary>
            Saves the video in the Data folder.
            </summary>
            <param name="iPath">name of the video file to save to.</param>
            <param name="iListMat">list of mat that will be stored in the video file.</param>
            <param name="iFps">framerate of the video file.</param>
        </member>
        <member name="M:BlueQuark.Utils.Save(System.String,UnityEngine.AudioClip)">
            <summary>
            Saves the audio clip into a wav file in the data directory.
            </summary>
            <param name="iPath">Full path name which will be used to save tha audio file.</param>
            <param name="iClip">audioclip that will be saved.</param>
            <returns>true if file saved.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TrimSilence(UnityEngine.AudioClip,System.Single)">
            <summary>
            Trims the beginning and end of an audioclip that can be considered as a silence.
            </summary>
            <param name="iClip">the audioclip to be trimmed.</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence.</param>
            <returns>the audioclip trimmed.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TrimSilence(System.Collections.Generic.List{System.Single},System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trims the beginning and end of an audioclip that can be considered as a silence.
            </summary>
            <param name="iSamples">samples of an audioclip.</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence.</param>
            <param name="iSpeakers">number of Speakers per frame.</param>
            <param name="iFrequency">sample frequency of clip.</param>
            <param name="iStreamed">true if clip is streamed.</param>
            <returns>the audioclip trimmed.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Combine(UnityEngine.AudioClip[])">
            <summary>
            Combines several audioclip into one.
            </summary>
            <param name="iClips">the array of audioclips.</param>
            <returns>the audioclip obtained from the comination of several audioclips.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeCSV(System.String,System.Object[])">
            <summary>
            Serializes objects inside the specified file.
            </summary>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeCSV(System.String,System.Char)">
            <summary>
            Loads the list of item from the specified csv file.
            </summary>
            <param name="iPath">File to load from.</param>
            <param name="iSeparator">Separator token, ';' by default.</param>
            <returns>The list of item. One string array per line.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeCSV(System.IO.StreamReader,System.Char)">
            <summary>
            Loads the list of item from the specified csv file.
            </summary>
            <param name="iStreamReader">Stream reader to load from.</param>
            <param name="iSeparator">Separator token, ';' by default.</param>
            <returns>The list of item. One string array per line.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeCSVString(System.String,System.Char)">
            <summary>
            Loads the list of item from the specified csv string.
            </summary>
            <param name="iData">String in CSV format.</param>
            <param name="iSeparator">Separator token, ';' by default.</param>
            <returns>The list of item. One string array per line.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeXML``1(``0,System.String)">
            <summary>
            Serializes an object. Auto add .xml extension at the end of the path.
            </summary>
            <typeparam name="T">Type of the object to serialize.</typeparam>
            <param name="iSerializableObject">Object to serialize. Cannot be NULL.</param>
            <param name="iPath">Path to the file. Cannot be empty.</param>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeXML``1(System.String)">
            <summary>
            Deserializes an xml file into an object. Auto add .xml extension at the end of the path.
            </summary>
            <typeparam name="T">Type of the objet to deserialize.</typeparam>
            <param name="iPath">Path to the file. Cannot be empty.</param>
            <returns>The created object from the XML. Null if unexisting/bad file format or bad filename.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeXML``1(System.IO.StreamReader)">
            <summary>
            Deserializes an xml stream into an object.
            </summary>
            <typeparam name="T">Type of the objet to deserialize.</typeparam>
            <param name="iStreamReader">Stream with xml content.</param>
            <returns>The created object from the XML. Null if unexisting/bad file format or bad filename.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeXMLString``1(System.String)">
            <summary>
            Deserializes an xml string into an object.
            </summary>
            <typeparam name="T">Type of the objet to deserialize.</typeparam>
            <param name="iData">String representation of the XML. Cannot be empty.</param>
            <returns>The created object from the XML. Null if unexisting/bad file format or bad filename.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializePartialXML``1(System.String,System.String)">
            <summary>
            Deserializes an xml file into an object. Auto add .xml extension at the end of the path.
            </summary>
            <typeparam name="T">Type of the objet to deserialize.</typeparam>
            <param name="iPath">Path to the file. Cannot be empty.</param>
            <param name="iNodeName">Name of the node to unserialize. Cannot be empty.</param>
            <returns>The created object from the XML. Null if unexisting/bad file format or bad filename.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeYAML(System.Object)">
            <summary>
            Serializes object to YAML.
            </summary>
            <param name="iSerializableObject">Object to serialize.</param>
            <returns>Serialized string.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeYAML``1(System.String)">
            <summary>
            Deserializes custom object from a YAML string.
            </summary>
            <typeparam name="T">Type of object to deserialize to.</typeparam>
            <param name="iData">YAML string.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeYAML``1(System.IO.StreamReader)">
            <summary>
            Deserializes custom object from a YAML stream.
            </summary>
            <typeparam name="T">Type of object to deserialize to.</typeparam>
            <param name="iStreamReader">YAML stream.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeYAMLtoObject(System.String)">
            <summary>
            Deserializes object from a YAML string.
            </summary>
            <param name="iData">YAML string.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeYAMLtoObject(System.IO.StreamReader)">
            <summary>
            Deserializes object from a YAML stream.
            </summary>
            <param name="iStreamReader">YAML stream.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uncompress(System.String,System.String)">
            <summary>
            Unzips the specified file to the specified location.
            </summary>
            <param name="iZipFilePath">Zip file location.</param>
            <param name="iLocation">Location to unzip.</param>
        </member>
        <member name="M:BlueQuark.Utils.UncompressAsync(System.String,System.String)">
            <summary>
            Unzips the specified file to the specified location using a thread.
            </summary>
            <param name="iZipFilePath">Zip file location.</param>
            <param name="iLocation">Location to unzip.</param>
        </member>
        <member name="M:BlueQuark.Utils.Compress(System.String,System.String[])">
            <summary>
            Creates a zip file with the specified files.
            </summary>
            <param name="iZipFileName">Zip file location.</param>
            <param name="iFilesAndFolder">File or folder path to add into the zip.</param>
        </member>
        <member name="M:BlueQuark.Utils.MoodToLEDColor(BlueQuark.Mood)">
            <summary>
            Conversion function
            </summary>
            <param name="iMood"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.MoodToFacialExp(BlueQuark.Mood)">
            <summary>
            Conversion function
            </summary>
            <param name="iMood"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.UpperFirst(System.String)">
            <summary>
            Makes the first character to upper case.
            </summary>
            <param name="iString">The input string to upper first.</param>
            <returns>The string with an upper first character.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String[])">
            <summary>
            Tells if iSpeech contains one of iListSpeech element.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iTexts">The list of speech.</param>
            <returns>True if the given speech is in the speech list.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String[],System.Boolean)">
            <summary>
            Tells if iSpeech contains one of iListSpeech element.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iTexts">The list of speech.</param>
            <param name="iUnicWordSecurity">If true, when the string in iKey has a unic word, check that the iText is equal to this word</param>
            <returns>True if the given speech is in the speech list.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Tells if given speech list contains one of iListSpeech element.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iTexts">The list of speech.</param>
            <returns>True if the given speech is in the speech list.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Tells if given speech list contains one of iListSpeech element.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iTexts">The list of speech.</param>
            <param name="iUnicWordSecurity">If true, when the string in iKey has a unic word, check that the iText is equal to this word</param>
            <returns>True if the given speech is in the speech list.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String)">
            <summary>
            Tells if iSpeech contains one of Phonetics from the dico value given by the key iKey.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iKey">The keyspeech.</param>
            <returns>True if the speech contains one of phonetics from the keyspeech.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Tells if iSpeech contains one of Phonetics from the dico value given by the key iKey.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iKey">The keyspeech.</param>
            <param name="iContext">Context for the dictionnary</param>
            <param name="iUnicWordSecurity">If true, when the string in iKey has a unic word, check that the iText is equal to this word</param>
            <returns>True if the speech contains one of phonetics from the keyspeech.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String,System.Boolean)">
            <summary>
            Tells if iSpeech contains one of Phonetics from the dico value given by the key iKey.
            </summary>
            <param name="iText">The speech.</param>
            <param name="iKey">The keyspeech.</param>
            <param name="iUnicWordSecurity">If true, when the string in iKey has a unic word, check that the iText is equal to this word</param>
            <returns>True if the speech contains one of phonetics from the keyspeech.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetRealStartRule(System.String)">
            <summary>
            Changes format of the StartRule (startrule#yes -> yes).
            </summary>
            <param name="iStartRuleVocon">Old format.</param>
            <returns>New format.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetRule(BlueQuark.SpeechInput)">
            <summary>
            Changes format of the StartRule (startrule#yes -> yes).
            </summary>
            <param name="iSpeechInput">Old format.</param>
            <returns>New format.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetRuleFromUtterance(System.String)">
            <summary>
            Compute rule from string
            </summary>
            <param name="iSpeech"></param>
            <returns>Rule</returns>
        </member>
        <member name="M:BlueQuark.Utils.WordIndexOfOneOf(System.String,System.String)">
            <summary>
            Returns the index of one of the words of iListSpeech keywords in the speech iSpeech
            </summary>
            <param name="iSpeech"></param>
            <param name="iKey"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.NL2Operator(System.String)">
            <summary>
            This function replaces Natural Language by operator symbol in a sentence.
            </summary>
            <param name="iSpeech">The speech.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringToEnum``1(System.String)">
            <summary>
            This function convert a string into an enum element.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="iText">The string.</param>
            <returns>The enum element.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringToDate(System.String)">
            <summary>
            Converts the string date into DateTime.
            Currently works for French and English.
            Returns default datetime if format not respected.
            </summary>
            <param name="iDate">The date.</param>
            <returns>The DateTime.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Month2Int(System.String)">
            <summary>
            Converts a month given as a string to an int.
            Currently works with French and English.
            </summary>
            <param name="iMonth">The month.</param>
            <returns>The month value. Returns 1 by default.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CollectionToString``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Converts an T element array to a string. Elements are separate with a coma (without space).
            </summary>
            <typeparam name="T">Type of element inside the array.</typeparam>
            <param name="iArray">The array.</param>
            <param name="iSeparator">Between element separator in the final string. Space by default.</param>
            <returns>the string value of the array.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetFolderPath(System.String)">
            <summary>
            Gets The absolute path of the input folder.
            </summary>
            <param name="iFolderToFind">The folder.</param>
            <returns>The absolute path of the folder from Application.dataPath.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StructureToByteArray``1(``0,System.Int32)">
            <summary>
            Converts a structure into bytes array with marshaling.
            </summary>
            <typeparam name="T">Type of the structure.</typeparam>
            <param name="iStructure">The structure to convert.</param>
            <param name="iLength">The size of the structure. Must be specified for a complex structure.</param>
            <returns>The data representation of the structure.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value.</param>
            <param name="iX2">Second value.</param>
            <param name="iAlpha">Must be between 0 and 1.</param>
            <returns>The interpolate value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value.</param>
            <param name="iX2">Second value.</param>
            <param name="iAlpha">Must be between 0 and 1.</param>
            <returns>The interpolate value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Gaussian(System.Single,System.Single,System.Single)">
            <summary>
            Computes the gaussian probability based on iMean with a iStd standart deviation.
            </summary>
            <param name="iMean">Mean of the gaussian.</param>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The gaussian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Gaussian(System.Double,System.Double,System.Double)">
            <summary>
            Computes the gaussian probability based on iMean with a iStd standart deviation.
            </summary>
            <param name="iMean">Mean of the gaussian.</param>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The gaussian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SimpleGaussian(System.Single,System.Single)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0 with a standart deviation of 1.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The simplified gausian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SimpleGaussian(System.Double,System.Double)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0 with a standart deviation of 1.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The simplified gausian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uniform(System.Single,System.Single,System.Single)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value.</param>
            <param name="iB">Upper value.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The uniform probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uniform(System.Double,System.Double,System.Double)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value.</param>
            <param name="iB">Upper value.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The uniform probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Hysteresis(System.Single,System.Single)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis.</param>
            <param name="iValue">Input value to be computed.</param>
            <returns>The delay value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Hysteresis(System.Double,System.Double)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis.</param>
            <param name="iValue">Input value to be computed.</param>
            <returns>The delay value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sigmoide(System.Single,System.Single,System.Single)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation.</param>
            <param name="iCenter">The centered value of the function.</param>
            <param name="iValue">The input value.</param>
            <returns>The Sigmoid value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sigmoide(System.Double,System.Double,System.Double)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation.</param>
            <param name="iCenter">The centered value of the function.</param>
            <param name="iValue">The input value.</param>
            <returns>The Sigmoid value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps between min and max.
            </summary>
            <typeparam name="T">The type of param.</typeparam>
            <param name="iValue">The value.</param>
            <param name="iMin">The min value.</param>
            <param name="iMax">The max value.</param>
            <returns>The camp result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Clamp``1(``0,``0)">
            <summary>
            Clamps between min and max.
            </summary>
            <typeparam name="T">The type of param.</typeparam>
            <param name="iValue">The value.</param>
            <param name="iMin">The min value.</param>
            <returns>The camp result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.AngleDeg(UnityEngine.Vector3)">
            <summary>
            Angle in degree.
            </summary>
            <param name="iVec">The vector.</param>
            <returns>The angle of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.AngleDeg(UnityEngine.Vector2)">
            <summary>
            Angle in degree.
            </summary>
            <param name="iV">The vector.</param>
            <returns>The angle of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Position(UnityEngine.Vector3)">
            <summary>
            Position (x,y) of the vector. 
            </summary>
            <param name="iVec">The vector.</param>
            <returns>x,y components of the vector</returns>
        </member>
        <member name="M:BlueQuark.Utils.Norm(UnityEngine.Vector2)">
            <summary>
            L2 norm of the vector.
            </summary>
            <param name="iVec">The vector.</param>
            <returns>The vector's L2 norm.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Average(System.Collections.Generic.List{OpenCVUnity.Point})">
            <summary>
            Makes an average of a point list.
            </summary>
            <param name="iPoints">The list of points.</param>
            <returns>The average point;</returns>
        </member>
        <member name="M:BlueQuark.Utils.AngleRad(UnityEngine.Vector3)">
            <summary>
            Angle in radian.
            </summary>
            <param name="iVec">The vector.</param>
            <returns>The radian of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(UnityEngine.Vector3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(UnityEngine.Vector2[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(OpenCVUnity.Point[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(OpenCVUnity.Point3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Single[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Double[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Single,System.Single)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate.</param>
            <param name="iY">Y value of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Double,System.Double)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate.</param>
            <param name="iY">Y value of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Single[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Double[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Single,System.Single)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate.</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Double,System.Double)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate.</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Int16)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Int32)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Single)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Double)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DegreesToRad(System.Single)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DegreesToRad(System.Double)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Texture2DToMat(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Converts the input Unity texture 2D into a OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture to convert.</param>
            <param name="iType">The type of the output mat.</param>
            <returns>The Mat of the texture 2D.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetMatFromFile(System.String,System.Int32)">
            <summary>
            Gets a Mat from a specific file (absolute path).
            Works with JPG and PNG.
            </summary>
            <param name="iFilename">The name of the file to convert.</param>
            <param name="iType">The type of the output Mat.</param>
            <returns>Mat of the file.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetTextureFromFile(System.String)">
            <summary>
            Gets a Texture 2D from a specific file (absolute path).
            Works with JPG and PNG
            </summary>
            <param name="iFilename">The name of the file to convert.</param>
            <returns>Texture 2D of the file.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SaveTextureToFile(UnityEngine.Texture2D,System.String)">
            <summary>
            Saves a texture to a file.
            </summary>
            <param name="iTexture">The texture2D to save.</param>
            <param name="iPath">The path where to save.</param>
        </member>
        <member name="M:BlueQuark.Utils.SaveSpriteToFile(UnityEngine.Sprite,System.String)">
            <summary>
            Saves a sprite to a file.
            </summary>
            <param name="iSprite">The sprite to save;</param>
            <param name="iPath">The path where to save.</param>
        </member>
        <member name="M:BlueQuark.Utils.SaveMatToFile(OpenCVUnity.Mat,System.String)">
            <summary>
            Saves a mat to a file.
            </summary>
            <param name="iMat">The mat to save.</param>
            <param name="iPath">The path where to save.</param>
        </member>
        <member name="M:BlueQuark.Utils.MatToColor32(OpenCVUnity.Mat,System.Byte[],UnityEngine.Color32[])">
            <summary>
            Gets an array of Color32 from a OpenCVUnity Mat.
            </summary>
            <param name="iMat">The original mat.</param>
            <param name="iBuff">The data buffer of the mat.</param>
            <param name="iData32">The output color32 array.</param>
        </member>
        <member name="M:BlueQuark.Utils.MatToTexture2D(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert.</param>
            <returns>The texture 2D of the mat.</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToColor32(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an array of Color32.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert.</param>
            <returns>The Color32 array of the mat.</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToTexture2D(OpenCVUnity.Mat,UnityEngine.Texture2D,UnityEngine.Color32[])">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            </summary>
            <param name="iMat">The mat to convert.</param>
            <param name="iTexture2D">The output texture2D.</param>
            <param name="iBufferColors">The colors32 array of the texture.</param>
        </member>
        <member name="M:BlueQuark.Utils.Texture2DToMat(UnityEngine.Texture2D,OpenCVUnity.Mat)">
            <summary>
            Converts an Unity Texture2D into an OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture 2D to convert.</param>
            <param name="iMat">The output OpenCVUnity Mat.</param>
        </member>
        <member name="M:BlueQuark.Utils.WebCamTextureToMat(UnityEngine.WebCamTexture,OpenCVUnity.Mat,UnityEngine.Color32[])">
            <summary>
            Converts an Unity WebcamTexture into an OpenCVUnity Mat.
            </summary>
            <param name="iWebCamTexture">The webcamtexture to convert.</param>
            <param name="iMat">The output OpenCVUnity Mat.</param>
            <param name="iBufferColors">The color32 array of the input texture2D.</param>
        </member>
        <member name="M:BlueQuark.Utils.RotateMat(OpenCVUnity.Mat,OpenCVUnity.Mat,System.Double,OpenCVUnity.Scalar)">
            <summary>
            Makes a rotation of iSrc to iDst of a iAngle.
            </summary>
            <param name="iSrc">Input mat.</param>
            <param name="iDst">Output mat.</param>
            <param name="iAngle">Angle in degrees.</param>
            <param name="iBackgroundColor">Background color.</param>
        </member>
        <member name="M:BlueQuark.Utils.DrawCustomRect(OpenCVUnity.Mat,OpenCVUnity.Rect,System.String,OpenCVUnity.Scalar)">
            <summary>
            Draws a fancy rect in the specified image.
            </summary>
            <param name="iImage">The image to draw in.</param>
            <param name="iRect">The rect (points) to draw.</param>
            <param name="iText">A no-mandatory text to draw above the rect.</param>
            <param name="iColor">Color of the rect and text.</param>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Rect)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iRect">The rect.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
        </member>
        <member name="M:BlueQuark.Utils.Center(UnityEngine.Vector2,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Point,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector2,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector3,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TriangleArea(System.Single,System.Single,System.Single)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length.</param>
            <param name="iB">Second side length.</param>
            <param name="iC">Third side length.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TriangleArea(System.Double,System.Double,System.Double)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length.</param>
            <param name="iB">Second side length.</param>
            <param name="iC">Third side length.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CounterClockWise(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Checks for counter clockwise style from points.
            </summary>
            <param name="iA">First point.</param>
            <param name="iB">Second point.</param>
            <param name="iC">Third point.</param>
        </member>
        <member name="M:BlueQuark.Utils.CounterClockWise(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks for counter clockwise style from points.
            </summary>
            <param name="iA">First point.</param>
            <param name="iB">Second point.</param>
            <param name="iC">Third point.</param>
        </member>
        <member name="M:BlueQuark.Utils.IsIntersect(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>True if there is an intersection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsIntersect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>True if there is an intersection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Intersection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the intersection point between two lines.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>The intersection point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Intersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the intersection point between two lines.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>The intersection point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Projection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB.
            </summary>
            <param name="iPoint">The point.</param>
            <param name="iA">Point of the line.</param>
            <param name="iB">Point of the line.</param>
            <returns>The projection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Projection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB.
            </summary>
            <param name="iPoint">The point.</param>
            <param name="iA">Point of the line.</param>
            <param name="iB">Point of the line.</param>
            <returns>The projection.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Int32,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Double,System.Double,System.Double)" -->
        <member name="M:BlueQuark.Utils.GetLocalIPAddress">
            <summary>
            Retrieves the local IP address.
            </summary>
            <returns>The local IP address.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetMACAddress">
            <summary>
            Retrieves the MAC address.
            </summary>
            <returns>The MAC address.</returns>
        </member>
        <member name="M:BlueQuark.Utils.OSFilePath(System.String)">
            <summary>
            Gets the OS file path version of a file.
            </summary>
            <param name="iFileName">The file name.</param>
            <returns>The file name with the OS path prefix on it.</returns>
        </member>
        <member name="M:BlueQuark.Utils.MD5(System.String)">
            <summary>
            Converts a input to MD5 Format.
            </summary>
            <param name="iInput">The input to convert.</param>
            <returns>The MD5 result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.XPathSearch(System.String,System.String)">
            <summary>
            Makes a research on a input.
            </summary>
            <param name="iInput">The input to read.</param>
            <param name="iExpression">The expression to find in the input.</param>
            <returns>The expression found.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringAtIndex(System.String[],System.Int32)">
            <summary>
            Gets the string element at a given index.
            </summary>
            <param name="iStrings">The string list.</param>
            <param name="iIndex">The index.</param>
            <returns>The element of the string list at the given index.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ElementAtIndex``1(``0[],System.Int32)">
            <summary>
            Gets an element at the given index.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="iElements">The element list.</param>
            <param name="iIndex">The index.</param>
            <returns>The element of the element list at the given index.</returns>
        </member>
        <member name="M:BlueQuark.Utils.EnumToKey(System.Enum)">
            <summary>
            Converts an enum element to string.
            </summary>
            <param name="iElement">The enum element.</param>
            <returns>The name of the enum element in a string.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SetTexture(UnityEngine.UI.RawImage,UnityEngine.Texture)">
            <summary>
            Destroys the old texture and sets a new texture to the raw image.
            </summary>
            <param name="iImage">The current raw image.</param>
            <param name="iTexture">The texture to assign.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Int32[])">
            <summary>
            Clears an int array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Single[])">
            <summary>
            Clears a float array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Double[])">
            <summary>
            Clears a double array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Byte[])">
            <summary>
            Clears a byte array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Int32[])">
            <summary>
            Gets the sum of an int array;
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Single[])">
            <summary>
            Gets the sum of a float array.
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Double[])">
            <summary>
            Gets the sum of a double array.
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Byte[])">
            <summary>
            Get the sum of a byte array.
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Int32[])">
            <summary>
            Makes an average of a given int array.
            </summary>
            <param name="iArray">The array/</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Byte[])">
            <summary>
            Makes an average of a given byte array.
            </summary>
            <param name="iArray">The array/</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Double[])">
            <summary>
            Makes an average of a given double array.
            </summary>
            <param name="iArray">The array</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Single[])">
            <summary>
            Makes an average of a given float array;
            </summary>
            <param name="iArray">The array.</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetEndPoint(UnityEngine.Vector3,System.Single)">
            <summary>
            Given a starting point and a distance, gets the theoretical end point.
            </summary>
            <param name="iStart">Starting point.</param>
            <param name="iDist">Distance in meter.</param>
            <returns>The theoretical end point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetCommand(UnityEngine.Vector3,UnityEngine.Vector3,System.Single@,System.Single@)">
            <summary>
            Gets a command to go from start to end point.
            </summary>
            <param name="iStart">The start vector.</param>
            <param name="iEnd">The end vector.</param>
            <param name="ioDist">Distance in meter.</param>
            <param name="ioAngle">Angle in degree.</param>
        </member>
        <member name="M:BlueQuark.Utils.FormatAngle(System.Single)">
            <summary>
            Makes angle between -180 and 180 degrees.
            </summary>
            <param name="iAngle">The angle to format.</param>
            <returns>The formated angle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StandardDeviation(System.Collections.Generic.List{System.Single})">
            <summary>
            Standard deviation
            </summary>
            <param name="iList">float values</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.StandardDeviation(System.Single[])">
            <summary>
            Standard deviation
            </summary>
            <param name="iList">float values</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.CreateJCodecVideoFromPictures(System.String,System.Int32,System.Collections.Generic.List{System.Byte[]},System.Action{System.Boolean,System.String})">
            <summary>
            Creates a video with given pictures. Uses the (android) JCodec library.
            Only one process can be started at time.
            The given pictures must all have the same size. The total size given to JCodec doesn't must exceed 115MB.
            Note : JCodec automaticaly resize the pictures to 640x480.
            </summary>
            <param name="iFPS">The fps.</param>
            <param name="iFilePath">The path where is stored the video.</param>
            <param name="iPictures">The list of pictures to assemble.</param>
            <param name="iOnFinish">Callback called on end. First param : True if the process succeed ; Second param : The path of the video.</param>
            <returns>
            Returns false 
            -if the total size given to JCodec exceed 115MB.
            -if the java module is not connected.
            -if the parameters are bad.
            -if the pictures don't have the same size
            -if the JCodec library is already processing.
            Returns true if the JCodec starts processing.
            </returns>
            <seealso cref="M:BlueQuark.Utils.AbortJCodecProcessing"/>
            <seealso cref="M:BlueQuark.Utils.IsJCodecProcessing"/>
            <seealso cref="P:BlueQuark.Utils.JCodecProgression"/>
        </member>
        <member name="M:BlueQuark.Utils.AbortJCodecProcessing">
            <summary>
            Sends an interrupt signal to the current JCodec process.
            It can take a while. Ensure that IsJCodecProcessing returns false before calling CreateJCodecVideoFromPictures().
            </summary>
            <seealso cref="M:BlueQuark.Utils.CreateJCodecVideoFromPictures(System.String,System.Int32,System.Collections.Generic.List{System.Byte[]},System.Action{System.Boolean,System.String})"/>
            <seealso cref="M:BlueQuark.Utils.IsJCodecProcessing"/>
        </member>
        <member name="M:BlueQuark.Utils.IsJCodecProcessing">
            <summary>
            Asks to JCodec library if there is already something processing.
            </summary>
            <returns>True if something is processing.</returns>
            <seealso cref="M:BlueQuark.Utils.CreateJCodecVideoFromPictures(System.String,System.Int32,System.Collections.Generic.List{System.Byte[]},System.Action{System.Boolean,System.String})"/>
            <seealso cref="M:BlueQuark.Utils.AbortJCodecProcessing"/>
        </member>
        <member name="M:BlueQuark.Utils.SerializeJSON(System.Object)">
            <summary>
            Serializes object to JSON string.
            </summary>
            <returns>JSON string.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeJSON``1(System.String)">
            <summary>
            Deserializes object from JSON string.
            </summary>
            <returns>Object of provided type.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeJSON``1(System.IO.StreamReader)">
            <summary>
            Deserializes JSON object from StreamReader.
            </summary>
            <returns>Object of provided type.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeJSONtoObject(System.String)">
            <summary>
            Deserializes JSON object from JSON string.
            </summary>
            <returns>Object of provided type.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeJSONtoObject(System.IO.StreamReader)">
            <summary>
            Deserializes JSON object from StreamReader.
            </summary>
            <returns>Object of provided type.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeJSONtoArray(System.String)">
            <summary>
            Deserializes JSON array from JSON string.
            </summary>
            <returns>Object of provided type.</returns>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeJSONtoArray(System.IO.StreamReader)">
            <summary>
            Deserializes JSON array from StreamReader.
            </summary>
            <returns>Object of provided type.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Divide(System.Int32,System.Int32)">
            <summary>
            Divide X by Y. If Y == 0, returns 0.
            </summary>
            <param name="iX">Dividend.</param>
            <param name="iY">Divider.</param>
            <returns>if Y != 0 => X / Y, else 0.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Divide(System.Single,System.Int32)">
            <summary>
            Divide X by Y. If Y == 0, returns 0.
            </summary>
            <param name="iX">Dividend.</param>
            <param name="iY">Divider.</param>
            <returns>if Y != 0 => X / Y, else 0.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Divide(System.Single,System.Single)">
            <summary>
            Divide X by Y. If Y == 0, returns 0.
            </summary>
            <param name="iX">Dividend.</param>
            <param name="iY">Divider.</param>
            <returns>if Y != 0 => X / Y, else 0.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Divide(System.Double,System.Double)">
            <summary>
            Divide X by Y. If Y == 0, returns 0.
            </summary>
            <param name="iX">Dividend.</param>
            <param name="iY">Divider.</param>
            <returns>if Y != 0 => X / Y, else 0.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Divide(System.Double,System.Int32)">
            <summary>
            Divide X by Y. If Y == 0, returns 0.
            </summary>
            <param name="iX">Dividend.</param>
            <param name="iY">Divider.</param>
            <returns>if Y != 0 => X / Y, else 0.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetBasePresenterFields(System.Object)">
            <summary>
            Retrieve object fields that extend from ABasePresenter.
            </summary>
            <param name="iObjectToReflect">The object to reflect.</param>
            <returns>Array of field info that extends from ABasePresenter.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StandartDeviation(System.Collections.Generic.List{System.Single})">
            <summary>
            Standard deviation
            </summary>
            <param name="iList">float values</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.FullName(BlueQuark.RESTMediaType)">
            <summary>
            Convert RESTMediaType.APP_FORM to 'application/x-www-form-urlencoded'
            </summary>
            <param name="iType">Media type.</param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.SpeechHotword">
            <summary>
            Represents an hotword recognition occurence.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechHotword.SoundLocalization">
            <summary>
            Sound localization of the hot word speaker.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechHotword.RecognitionScore">
            <summary>
            Recognition score of the hot word.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechHotword.ToString">
            <summary>
            Overrides the ToString method.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:BlueQuark.SpeechHotword.#ctor(System.Int32)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechHotword.#ctor(System.Int32,System.Int32)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechInputParameters">
            <summary>
            Parameters for a listening recognition (speech to text) purposes.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MIN_CONFIDENCE_THRESHOLD">
            <summary>
            Minimal tolerated confidence for grammar base recognition.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MAX_CONFIDENCE_THRESHOLD">
            <summary>
            Maximal tolerated confidence for grammar base recognition.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.DEFAULT_CONFIDENCE_THRESHOLD">
            <summary>
            Default confidence for grammar base recognition.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MIN_LEADING_SILENCE_TIME_OUT">
            <summary>
            Minimal silence time before timeout. Value in seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MAX_LEADING_SILENCE_TIME_OUT">
            <summary>
            Maximal silence time before timeout. Value in seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.DEFAULT_LEADING_SILENCE_TIME_OUT">
            <summary>
            Default silence time before timeout. Value in seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MIN_TRAILING_SILENCE_TIME_OUT">
            <summary>
            Minimal silence time before timeout. Value in seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MAX_TRAILING_SILENCE_TIME_OUT">
            <summary>
            Maximal silence time before timeout. Value in seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.DEFAULT_TRAILING_SILENCE_TIME_OUT">
            <summary>
            Default silence time at end of speech before timeout. Value in seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MIN_TIME_OUT">
            <summary>
            Minimal tolerated timeout in seconds for the whole listening speech process.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.MAX_TIME_OUT">
            <summary>
            Maximal tolerated time in seconds for the whole listening speech process.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechInputParameters.DEFAULT_TIME_OUT">
            <summary>
            Default tolerated time for the whole listening speech process.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.Grammars">
            <summary>
            Grammars for offline recognition.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.RecognitionMode">
            <summary>
            The speech input recognition mode.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.Credentials">
            <summary>
            Credentials used to activate API.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.AudioOutputPath">
            <summary>
            Path where the recorded audio will be saved (overwrite if already present).
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.RecognitionThreshold">
            <summary>
            If revelant (offline), the grammar recognition confidence. From 0 to 10000. Default is 4700.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.TrailingSilenceTimeOut">
            <summary>
            Tolerated silence time in seconds at end detected speech. If occured, the speech is considered as ended. Default is 1. 
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.LeadingSilenceTimeOut">
            <summary>
            Tolerated silence time in seconds before detected speech. If a record occured, the timeout is deprecated. Default is 3. 
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.TimeOut">
            <summary>
            Maximum time in seconds for listening. Cannot be inferior to LeadingSilenceTimeOut + 2. Default is 10.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechInputParameters.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechInputParameters.Clone">
            <summary>
            Make a shallow copy of the parameters.
            </summary>
            <returns>A Copy reference.</returns>
        </member>
        <member name="M:BlueQuark.SpeechInputParameters.Merge(BlueQuark.SpeechInputParameters)">
            <summary>
            Merges the input parameters with this. Only set fields will be considered.
            </summary>
            <param name="iOther">Parameters to merge.</param>
        </member>
        <member name="T:BlueQuark.SpeechGrammar">
            <summary>
            Speech grammar for speech to text recognition request.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.COMMON_1">
            <summary>
            Common 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.NUMBERS_1">
            <summary>
            Numbers 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.QUESTIONS_1">
            <summary>
            Question 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.COMMANDS_1">
            <summary>
            Commands 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.CITIES_1">
            <summary>
            Cities 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.WEATHER_1">
            <summary>
            Weather 1.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechOutputParameters">
            <summary>
            Parameters for a speech synthesis process (text to speech).
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechOutputParameters.MIN_SPEED">
            <summary>
            Minimal speed of any text to speech request. Normal speed is 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechOutputParameters.MAX_SPEED">
            <summary>
            Maximal speed of any text to speech request. Normal speed is 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechOutputParameters.DEFAULT_SPEED">
            <summary>
            Normal voice speed.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechOutputParameters.MIN_PITCH">
            <summary>
            Minimal pitch of any text to speech request. Normal pitch is 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechOutputParameters.MAX_PITCH">
            <summary>
            Maximal pitch of any text to speech request. Normal pitch is 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechOutputParameters.DEFAULT_PITCH">
            <summary>
            Normal voice pitch.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutputParameters.Speed">
            <summary>
            Speed of the speech. From 0.7 to 1.3.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutputParameters.Pitch">
            <summary>
            The pich of the speech. From 0.7 to 1.3.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechOutputParameters.#ctor">
            <summary>
            Creates a new output parameters set.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechOutputParameters.Clone">
            <summary>
            Make a shallow copy of the parameters.
            </summary>
            <returns>A Copy reference.</returns>
        </member>
        <member name="M:BlueQuark.SpeechOutputParameters.Merge(BlueQuark.SpeechOutputParameters)">
            <summary>
            Merges the input parameters with this. Only set fields will be considered.
            </summary>
            <param name="iOther">Parameters to merge.</param>
        </member>
        <member name="T:BlueQuark.SpeechOutput">
            <summary>
            Text to speech request.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutput.IsInterrupted">
            <summary>
            True if the talking process was interrupted.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutput.Utterance">
            <summary>
            If null, request will consider last speech.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutput.Parameters">
            <summary>
            The requested parameters for the speech output.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechOutput.#ctor(System.String)">
            <summary>
            Creates a new speech output (TTS).
            </summary>
            <param name="iUtterance">The text to say.</param>
        </member>
        <member name="M:BlueQuark.SpeechOutput.#ctor(System.String,BlueQuark.SpeechOutputParameters)">
            <summary>
            Creates a new speech output (TTS).
            </summary>
            <param name="iUtterance">The text to say.</param>
            <param name="iParameters">Speech parameters.</param>
        </member>
        <member name="M:BlueQuark.SpeechOutput.ToString">
            <summary>
            Overrides the ToString method.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="M:BlueQuark.SpeechOutput.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new speech output (TTS).
            </summary>
            <param name="iUtterance">The text to say.</param>
            <param name="iInterrupted">Is interrupted.</param>
        </member>
        <member name="T:BlueQuark.SpeechRecognitionStatus">
            <summary>
            Event type for speech recognition
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.BEGINNING_OF_SPEECH">
            <summary>
            User started to speak.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.MAYBE_SPEECH">
            <summary>
            Could be the beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.NO_SPEECH">
            <summary>
            The previously sent MAYBE_SPEECH event did not lead.
            To and actual beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.TIME_OUT">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.TRAILING_SILENCE">
            <summary>
            A trailing silence was detected.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.BAD_SIGNAL_NOISE_RATIO">
            <summary>
            The signal to noise ratio is too low.
            This event is generated if at the end of an utterance.
            The signal/noise ratio remains below 12dB.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.OVERLOAD">
            <summary>
            The speech level is too loud.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.TOO_QUIET">
            <summary>
            The speech level is too weak.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.NO_SIGNAL">
            <summary>
            No or very low input signal.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.POOR_MIC">
            <summary>
            This could mean that the microphone or the audio hardware is of poor quality. 
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.NO_LEADING_SILENCE">
            <summary>
            The recording apparantly does not start with leading silence.
            Possibly the speaker started speaking too soon, but because this detection is only energy based.
            Other noise events at the start of the utterance may also trigger this condition.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.ERROR_ON_START">
            <summary>
            Error on start.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechRecognitionMode">
             <summary>
             Speech recognition mode.
             </summary>
             <example>
             <code>
            Use the grammar based Vocal API like this : 
            Buddy.Vocal.Listen("my_grammar" /* from my_grammar_[fr/en].bin. The function will take the current language automatically */,
                  (iSpeechInputResult) => { /* Callback methods */
                     Debug.Log(iSpeechInputResult.Utterance); /* Display the speech input result */
                  },
                  SpeechRecognitionMode.GRAMMAR_ONLY /* Recognition mode, can be ignored (GRAMMAR_ONLY is default) or set at Buddy.Vocal.DefaultInputParameters */
            );
             </code>
             </example>
             <example>
             <code>
            Use the free speech Vocal API like this : 
            Buddy.Vocal.Listen((iSpeechInputResult) => { /* Callback methods */
                     Debug.Log(iSpeechInputResult.Utterance); /* Display the speech input result */
                  },
                  SpeechRecognitionMode.FREESPEECH_ONLY /* Recognition mode, can be set at Buddy.Vocal.DefaultInputParameters */
            );
             </code>
             </example>
             <example>
             <code>
            Use the hybrid Vocal API like this : 
            Buddy.Vocal.Listen("my_grammar" /* from my_grammar_[fr/en].bin. The function will take the current language automatically */,
                  (iSpeechInputResult) => { /* Callback methods */
                     Debug.Log(iSpeechInputResult.Utterance); /* Display the speech input result */
                  },
                  SpeechRecognitionMode.GRAMMAR_THEN_FREESPEECH /* Recognition mode, can be set at Buddy.Vocal.DefaultInputParameters */
            );
             </code>
             </example>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionMode.GRAMMAR_ONLY">
            <summary>
            Based on VoCon (Nuance) API. If no grammar is specified, default grammar will be used for the recognition. A grammar must be writen for each language.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionMode.FREESPEECH_ONLY">
            <summary>
            Based on Google Speech API. It is a non-free API reserved for exclusive BFR partners. It is not grammar based, so call a Listen method in that mode with grammar, the grammar won't be considered.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionMode.GRAMMAR_THEN_FREESPEECH">
            <summary>
            Based on VoCon grammar system. If no result, a Google Speech API request will be sent.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechInputStatus">
            <summary>
            Input speech event from user listened by the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputStatus.Type">
            <summary>
            Type of event.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputStatus.IsError">
            <summary>
            True if this event is an error.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechInputStatus.ToString">
            <summary>
            Overrides the ToString method.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:BlueQuark.SpeechInput">
            <summary>
            Input speech from user listened by the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.IsInterrupted">
            <summary>
            True if the listening process was interrupted.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Utterance">
            <summary>
            Input text.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Rule">
            <summary>
            If revelant (offline mode), the corresponding grammar.
            In hybrid mode, if null, it means that vocon hasn't recognize anything, and that google speech has been required.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Confidence">
            <summary>
            The confidence of the input speech recognition. Between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Parameters">
            <summary>
            The requested parameters for that speech input.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechInput.ToString">
            <summary>
            Overrides the ToString method.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:BlueQuark.Vocal">
            <summary>
            The module for vocal management (speak, hot word and listen). This is a FIFO process.
            The listening process can works with GoogleSpeech API for the free speech and VoCon for the grammar based system. Those mode are specified with the SpeechRecognitionMode.
            </summary>
            <seealso cref="T:BlueQuark.SpeechRecognitionMode"/>>
        </member>
        <member name="P:BlueQuark.Vocal.DefaultOutputParameters">
            <summary>
            Any default parameter setting will be considered before any Speak (TTS) request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.DefaultInputParameters">
            <summary>
            Any default parameter setting will be considered before any Listen (STT) request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.EnableTrigger">
            <summary>
            Enables/Disables the OKAY BUDDY vocal trigger. If enabled the OnTrigger callback will be called after detection.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.ListenOnTrigger">
            <summary>
            Enables/Disables the auto listening mode after the vocal trigger. Listening response can be retrieve via the OnEndListening callback.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastHeardInput">
            <summary>
            The last heard (STT) input.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastSaidOutput">
            <summary>
            The last said (TTS) output.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastListeningStatus">
            <summary>
            The last listening event.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsSpeaking">
            <summary>
            True if the vocal module is currently speaking anything.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsListening">
            <summary>
            True if the vocal module is currently listening anything.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnTrigger">
            <summary>
            Called as soon as possible after any trigger detection. EnableTrigger must be set to true. Starts also the Listen if ListenOnTrigger is true.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnCompleteTrigger">
            <summary>
            Called after any trigger detection with score detection and sound localization. Can be longer than OnTrigger. EnableTrigger must be set to true.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnEndSpeaking">
            <summary>
            Called after any end of TTS request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnEndListening">
            <summary>
            Called after any end of STT request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnListeningStatus">
            <summary>
            Called when any occurence of event/error during the listening process.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.Channel">
            <summary>
            The dedicated sound channel for vocal process. Equivalent to Buddy.Actuators.Speakers.Vocal.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsBusy">
            <summary>
            Does the vocal module is telling or listening something ?
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LocalGrammars">
            <summary>
            Returns OS provided grammars in the current InputLanguage.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.CompileGrammar(System.String)">
            <summary>
            Compiles a VoCon grammar file. It can be then used for vocal recognition (listen) process.
            </summary>
            <param name="iGrammar">Filename of the grammar.</param>
            <returns>True if the grammar is correctly compiled</returns>
        </member>
        <member name="M:BlueQuark.Vocal.CompileGrammars(System.String[])">
            <summary>
            Compiles VoCon grammar files. It can be then used for vocal recognition (listen) process.
            </summary>
            <param name="iGrammars">Filename of the grammar.</param>
            <returns>True if the grammar is correctly compiled</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeed">Speed of the synthesis, between 0.7 and 1.3. 1 is normal speed.</param>
            <param name="iPitch">Pitch of the synthesis, between 0.7 and 1.3. 1 is normal pitch.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Single,System.Single,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeed">Speed of the synthesis, between 0.7 and 1.3. 1 is normal speed.</param>
            <param name="iPitch">Pitch of the synthesis, between 0.7 and 1.3. 1 is normal pitch.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(BlueQuark.SpeechOutput,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOutput">The output speech to proceed.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOutput">The output speech to proceed.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeed">Speed of the synthesis, between 0.7 and 1.3. 1 is normal speed.</param>
            <param name="iPitch">Pitch of the synthesis, between 0.7 and 1.3. 1 is normal pitch.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Single,System.Single,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeed">Speed of the synthesis, between 0.7 and 1.3. 1 is normal speed.</param>
            <param name="iPitch">Pitch of the synthesis, between 0.7 and 1.3. 1 is normal pitch.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary> 
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>       
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check inside Resources.GetRandomString(key) storage only. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgain(System.Boolean)">
            <summary>
            Asks to repeat the last said sentence.
            </summary>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgain(System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks to repeat the last said sentence.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String[],System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">the VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">the VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Stop">
            <summary>
            Stops any speaking or listening process.
            Will trigger OnEndListening callback with confidence set to -1.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopAndClear">
            <summary>
            Stops any speaking or listening process and clear the queue of waiting requests.
            Will trigger OnEndListening callback with confidence set to -1.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopSpeaking">
            <summary>
            Stops the running speaking process (text to speech). Do nothing if not speaking.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopListening">
            <summary>
            Stops the running listening process (speech to text). Do nothing if not listening.
            Will trigger OnEndListening callback with confidence set to -1.
            </summary>
        </member>
        <member name="T:BlueQuark.OnJoinChannelSuccessHandler">
            Occurs when a user joins a channel.
            
            This callback notifies the application that a user joins a specified channel when the application calls the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method.
            
            The channel name assignment is based on `channelName` specified in the `JoinChannelByKey` method.
            
            If the `uid` is not specified in the `JoinChannelByKey` method, the server automatically assigns a `uid`.
            
            @param channelName The name of the channel that you join.
            @param uid The user ID of the user joining the channel.
            @param elapsed Time elapsed (ms) from the user calling the `JoinChannelByKey` method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnLeaveChannelHandler">
            Occurs when a user leaves the channel.
            
            This callback notifies the application that a user leaves the channel when the application calls the {@link agora_gaming_rtc.IRtcEngine.LeaveChannel LeaveChannel} method.
            
            The application retrieves information, such as the call duration and statistics.
            
            @param stats The statistics of the call: RtcStats.
        </member>
        <member name="T:BlueQuark.OnReJoinChannelSuccessHandler">
            Occurs when a user rejoins the channel after disconnection due to network problems.
            
            When a user loses connection with the server because of network problems, the SDK automatically tries to reconnect and triggers this callback upon reconnection.
            
            @param channelName The name of the channel that you rejoin.
            @param uid The user ID of the user rejoining the channel.
            @param elapsed The time elapsed (ms) from starting to reconnect until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnConnectionLostHandler">
            Occurs when the SDK cannot reconnect to Agora's edge server 10 seconds after its connection to the server is interrupted.
            
            The SDK triggers this callback when it cannot connect to the server 10 seconds after calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method, whether or not it is in the channel.
            
            This callback is different from {@link agora_gaming_rtc.OnConnectionInterruptedHandler OnConnectionInterruptedHandler}:
            - The SDK triggers the `OnConnectionInterruptedHandler` callback when it loses connection with the server for more than four seconds after it successfully joins the channel.
            - The SDK triggers the `OnConnectionLostHandler` callback when it loses connection with the server for more than 10 seconds, whether or not it joins the channel.
            
            If the SDK fails to rejoin the channel 20 minutes after being disconnected from Agora's edge server, the SDK stops rejoining the channel.
        </member>
        <member name="T:BlueQuark.OnConnectionInterruptedHandler">
            **DEPRECATED** Occurs when the connection between the SDK and the server is interrupted.
            
            Deprecated as of v2.3.2. Replaced by the {@link agora_gaming_rtc.OnConnectionStateChangedHandler OnConnectionStateChangedHandler} callback.
            
            The SDK triggers this callback when it loses connection with the server for more than four seconds after the connection is established.
            
            After triggering this callback, the SDK tries reconnecting to the server. You can use this callback to implement pop-up reminders.
            
            This callback is different from {@link agora_gaming_rtc.OnConnectionLostHandler OnConnectionLostHandler}:
            - The SDK triggers the `OnConnectionInterruptedHandler` callback when it loses connection with the server for more than four seconds after it successfully joins the channel.
            - The SDK triggers the `OnConnectionLostHandler` callback when it loses connection with the server for more than 10 seconds, whether or not it joins the channel.
            
            If the SDK fails to rejoin the channel 20 minutes after being disconnected from Agora's edge server, the SDK stops rejoining the channel.
        </member>
        <member name="T:BlueQuark.OnRequestTokenHandler">
            Occurs when the token expires.
            
            After a token is specified by calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method, if the SDK losses connection with the Agora server due to network issues, the token may expire after a certain period of time and a new token may be required to reconnect to the server.
            
            This callback notifies the application to generate a new token. Call the {@link agora_gaming_rtc.IRtcEngine.RenewToken RenewToken} method to renew the token.
        </member>
        <member name="T:BlueQuark.OnUserJoinedHandler">
            Occurs when a remote user (Communication)/ host (Live Broadcast) joins the channel.
            
            - Communication profile: This callback notifies the application that another user joins the channel. If other users are already in the channel, the SDK also reports to the application on the existing users.
            - Live-broadcast profile: This callback notifies the application that the host joins the channel. If other hosts are already in the channel, the SDK also reports to the application on the existing hosts. We recommend limiting the number of hosts to 17.
            
            The SDK triggers this callback under one of the following circumstances:
            - A remote user/host joins the channel by calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method.
            - A remote user switches the user role to the host by calling the {@link agora_gaming_rtc.IRtcEngine.SetClientRole SetClientRole} method after joining the channel.
            - A remote user/host rejoins the channel after a network interruption.
            - The host injects an online media stream into the channel by calling the {@link agora_gaming_rtc.IRtcEngine.AddInjectStreamUrl AddInjectStreamUrl} method.
            
            @note
            In the Live-broadcast profile:
            - The host receives this callback when another host joins the channel.
            - The audience in the channel receives this callback when a new host joins the channel.
            - When a web application joins the channel, the SDK triggers this callback as long as the web application publishes streams.
            
            @param uid The user ID of the user or host joining the channel.
            @param elapsed Time delay (ms) from the local user calling the `JoinChannelByKey` method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnUserOfflineHandler">
            Occurs when a remote user (Communication)/host (Live Broadcast) leaves the channel.
            
            Reasons why the user is offline:
            
            - Leave the channel: When the user/host leaves the channel, the user/host sends a goodbye message. When the message is received, the SDK assumes that the user/host leaves the channel.
            - Drop offline: When no data packet of the user or host is received for a certain period of time (20 seconds for the Communication profile, and more for the Live-broadcast profile), the SDK assumes that the user/host drops offline. Unreliable network connections may lead to false detections, so we recommend using a signaling system for more reliable offline detection.
            
            @param uid The user ID of the user leaving the channel or going offline.
            @param reason The reason why the user is offline: #USER_OFFLINE_REASON.
        </member>
        <member name="T:BlueQuark.OnVolumeIndicationHandler">
            Reports which users are speaking, the speakers' volume and whether the local user is speaking.
            
            This callback reports the IDs and volumes of the loudest speakers at the moment in the channel, and whether the local user is speaking.
            
            By default, this callback is disabled. You can enable it by calling the {@link agora_gaming_rtc.IRtcEngine.EnableAudioVolumeIndication EnableAudioVolumeIndication} method. Once enabled, this callback is triggered at the set interval, regardless of whether a user speaks or not.
            
            The SDK triggers two independent `OnVolumeIndicationHandler` callbacks at one time, which separately report the volume information of the local user and all the remote speakers. For more information, see the detailed parameter descriptions.
            
            @note
            - To enable the voice activity detection of the local user, ensure that you set `report_vad(true)` in the `EnableAudioVolumeIndication` method.
            - Calling the {@link agora_gaming_rtc.IRtcEngine.MuteLocalAudioStream MuteLocalAudioStream} method affects the SDK's behavior:
                  - If the local user calls the `MuteLocalAudioStream` method, the SDK stops triggering the local user's callback.
                  - 20 seconds after a remote speaker calls the `MuteLocalAudioStream` method, the remote speakers' callback excludes this remote user's information; 20 seconds after all remote users call the muteLocalAudioStream method, the SDK stops triggering the remote speakers' callback.
            - An empty `speakers` array in the `OnVolumeIndicationHandler` callback suggests that no remote user is speaking at the moment.
            
            @param speakers AudioVolumeInfo:
            - In the local user's callback, this struct contains the following members:
                  - uid = 0,
                  - volume = totalVolume, which reports the sum of the voice volume and audio-mixing volume of the local user, and
                  - vad, which reports the voice activity status of the local user.
            - In the remote speakers' callback, this array contains the following members:
                  - uid of the remote speaker,
                  - volume, which reports the sum of the voice volume and audio-mixing volume of each remote speaker, and
                  - vad = 0.
            An empty speakers array in the callback indicates that no remote user is speaking at the moment.
            @param speakerNumber Total number of speakers. The value range is [0, 3].
            - In the local user’s callback, `speakerNumber` = 1, regardless of whether the local user speaks or not.
            - In the remote speakers' callback, the callback reports the IDs and volumes of the three loudest speakers when there are more than three remote users in the channel, and speakerNumber = 3
            @param totalVolume Total volume after audio mixing. The value ranges between 0 (lowest volume) and 255 (highest volume).
            - In the local user’s callback, `totalVolume` is the sum of the voice volume and audio-mixing volume of the local user.
            - In the remote speakers' callback, `totalVolume` is the sum of the voice volume and audio-mixing volume of all the remote speakers.
        </member>
        <member name="T:BlueQuark.OnUserMutedAudioHandler">
            Occurs when a remote user's audio stream playback pauses/resumes.
            
            The SDK triggers this callback when the remote user stops or resumes sending the audio stream by calling the {@link agora_gaming_rtc.IRtcEngine.MuteLocalAudioStream MuteLocalAudioStream} method.
            
            @note This callback returns invalid when the number of users in a channel exceeds 20.
            
            @param uid The user ID of the remote user.
            @param muted Whether the remote user's audio stream is muted/unmuted:
            - true: Muted.
            - false: Unmuted.
        </member>
        <member name="T:BlueQuark.OnSDKWarningHandler">
            Reports a warning during SDK runtime.
            
            In most cases, the application can ignore the warning reported by the SDK because the SDK can usually fix the issue and resume running. For example, when losing connection with the server, the SDK may report `WARN_LOOKUP_CHANNEL_TIMEOUT(104)` and automatically try to reconnect.
            
            @param warn The warning code, see [Warning Code](./index.html#warn).
            @param msg The warning message.
        </member>
        <member name="T:BlueQuark.OnSDKErrorHandler">
            Reports an error during SDK runtime.
            
            In most cases, the SDK cannot fix the issue and resume running. The SDK requires the application to take action or informs the user about the issue.
            
            For example, the SDK reports an `ERR_START_CALL(1002)` error when failing to initialize a call. The application informs the user that the call initialization failed and invokes the {@link agora_gaming_rtc.IRtcEngine.LeaveChannel LeaveChannel} method to leave the channel.
            
            @param error The error code, see [Error Code](./index.html#error).
            @param msg The error message.
        </member>
        <member name="T:BlueQuark.OnRtcStatsHandler">
            Reports the statistics of the current call session once every two seconds.
            
             @param stats The RTC engine statistics: RtcStats.
        </member>
        <member name="T:BlueQuark.OnAudioMixingFinishedHandler">
            Occurs when the audio mixing file playback finishes.
            
            **DEPRECATED** use {@link agora_gaming_rtc.OnAudioMixingStateChangedHandler OnAudioMixingStateChangedHandler} instead.
            
            You can start an audio mixing file playback by calling the {@link agora_gaming_rtc.IRtcEngine.StartAudioMixing StartAudioMixing} method. The SDK triggers this callback when the audio mixing file playback finishes.
            
            If the `StartAudioMixing` method call fails, an error code returns in the {@link agora_gaming_rtc.OnSDKErrorHandler OnSDKErrorHandler} callback.
        </member>
        <member name="T:BlueQuark.OnAudioRouteChangedHandler">
            Occurs when the local audio route changes.
            
            The SDK triggers this callback when the local audio route switches to an earpiece, speakerphone, headset, or Bluetooth device.
            
            @note This callback is for Android and iOS only.
            
            @param route Audio output routing. See: AUDIO_ROUTE.
        </member>
        <member name="T:BlueQuark.OnFirstRemoteVideoDecodedHandler">
            Occurs when the first remote video frame is received and decoded.
            
            **DEPRECATED** Use the {@link agora_gaming_rtc.OnRemoteVideoStateChangedHandler OnRemoteVideoStateChangedHandler} callback with the following parameters instead:
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_STARTING REMOTE_VIDEO_STATE_STARTING(1)}
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_DECODING REMOTE_VIDEO_STATE_DECODING(2)}
            
            This callback is triggered in either of the following scenarios:
            - The remote user joins the channel and sends the video stream.
            - The remote user stops sending the video stream and re-sends it after 15 seconds. Reasons for such an interruption include:
                  - The remote user leaves the channel.
                  - The remote user drops offline.
                  - The remote user calls the {@link agora_gaming_rtc.IRtcEngine.MuteLocalVideoStream MuteLocalVideoStream} method to stop sending the video stream.
                  - The remote user calls the {@link agora_gaming_rtc.IRtcEngine.DisableVideo DisableVideo} method to disable video.
            The application can configure the user view settings in this callback.
            
            @param uid The user ID of the remote user sending the video stream.
            @param width The width (px) of the video stream.
            @param height The height (px) of the video stream.
            @param elapsed Time elapsed (ms) from the local user calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnVideoSizeChangedHandler">
            Occurs when the video size or rotation of a specified user changes.
            
             @param uid The user ID of the remote user or local user (0) whose video size or rotation changes.
             @param width The new width (pixels) of the video.
             @param height The new height (pixels) of the video.
             @param rotation The new rotation of the video [0 to 360).
        </member>
        <member name="T:BlueQuark.OnClientRoleChangedHandler">
            Occurs when the user role switches in a live broadcast. For example, from a host to an audience or vice versa.
            
            This callback notifies the application of a user role switch when the application calls the {@link agora_gaming_rtc.IRtcEngine.SetClientRole SetClientRole} method.
            
            The SDK triggers this callback when the local user switches the user role by calling the `SetClientRole` method after joining the channel.
            
            @param oldRole Role that the user switches from: #CLIENT_ROLE_TYPE.
            @param newRole Role that the user switches to: #CLIENT_ROLE_TYPE.
        </member>
        <member name="T:BlueQuark.OnUserMuteVideoHandler">
            Occurs when a remote user's video stream playback pauses/resumes.
            
            You can also use the {@link agora_gaming_rtc.OnRemoteVideoStateChangedHandler OnRemoteVideoStateChangedHandler} callback with the following parameters:
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_STOPPED REMOTE_VIDEO_STATE_STOPPED(0)} and {@link agora_gaming_rtc.REMOTE_VIDEO_STATE_REASON#REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED(5)}.
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_DECODING REMOTE_VIDEO_STATE_DECODING(2)} and {@link agora_gaming_rtc.REMOTE_VIDEO_STATE_REASON#REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED(6)}.
            The SDK triggers this callback when the remote user stops or resumes sending the video stream by calling the {@link agora_gaming_rtc.IRtcEngine.MuteLocalVideoStream MuteLocalVideoStream} method.
            
            @note This callback returns invalid when the number of users in a channel exceeds 20.
            
            @param uid The user ID of the remote user.
            @param muted Whether the remote user's video stream playback is paused/resumed:
            - true: Paused.
            - false: Resumed.
        </member>
        <member name="T:BlueQuark.OnMicrophoneEnabledHandler">
            **DEPRECATED** Occurs when the microphone is enabled/disabled.
            
            The `OnMicrophoneEnabledHandler` callback is deprecated. Use {@link agora_gaming_rtc.LOCAL_AUDIO_STREAM_STATE#LOCAL_AUDIO_STREAM_STATE_STOPPED LOCAL_AUDIO_STREAM_STATE_STOPPED(0)} or {@link agora_gaming_rtc.LOCAL_AUDIO_STREAM_STATE#LOCAL_AUDIO_STREAM_STATE_RECORDING LOCAL_AUDIO_STREAM_STATE_RECORDING(1)} in the {@link agora_gaming_rtc.OnLocalAudioStateChangedHandler OnLocalAudioStateChangedHandler} callback instead.
            
            The SDK triggers this callback when the local user resumes or stops capturing the local audio stream by calling the {@link agora_gaming_rtc.IRtcEngine.EnableLocalAudio EnableLocalAudio} method.
            
            @param isEnabled Whether the microphone is enabled/disabled:
            - true: Enabled.
            - false: Disabled.
        </member>
        <member name="T:BlueQuark.OnApiExecutedHandler">
            Occurs when a method is executed by the SDK.
            
            @param err The error code (ERROR_CODE_TYPE) returned by the SDK when a method call fails. If the SDK returns 0, then the method call is successful.
            @param api The method executed by the SDK.
            @param result The result of the method call.
        </member>
        <member name="T:BlueQuark.OnLastmileQualityHandler">
            Reports the last mile network quality of the local user once every two seconds before the user joins the channel.
            
            Last mile refers to the connection between the local device and Agora's edge server. After the application calls the {@link agora_gaming_rtc.IRtcEngine.EnableLastmileTest EnableLastmileTest} method, this callback reports once every two seconds the uplink and downlink last mile network conditions of the local user before the user joins the channel.
            
            @param quality The last mile network quality: #QUALITY_TYPE.
        </member>
        <member name="T:BlueQuark.OnFirstLocalAudioFrameHandler">
            Occurs when the engine sends the first local audio frame.
            
            @param elapsed The time elapsed (ms) from the local user calling {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnFirstRemoteAudioFrameHandler">
            Occurs when the engine receives the first audio frame from a specific remote user.
            
             @param userId The user ID of the remote user.
             @param elapsed The time elapsed (ms) from the remote user calling {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnAudioQualityHandler">
            **DEPRECATED** Reports the statistics of the audio stream from each remote user/host.
            
            Deprecated as of v2.3.2. Use the {@link agora_gaming_rtc.OnRemoteAudioStatsHandler OnRemoteAudioStatsHandler} callback instead.
            
            The SDK triggers this callback once every two seconds to report the audio quality of each remote user/host sending an audio stream. If a channel has multiple users/hosts sending audio streams, the SDK triggers this callback as many times.
            
            @param userId The user ID of the speaker.
            @param quality The audio quality of the user: #QUALITY_TYPE.
            @param delay The time delay (ms) of sending the audio packet from the sender to the receiver, including the time delay of audio sampling pre-processing, transmission, and the jitter buffer.
            @param lost The packet loss rate (%) of the audio packet sent from the sender to the receiver.
        </member>
        <member name="T:BlueQuark.OnStreamInjectedStatusHandler">
            Occurs when a voice or video stream URL address is added to a live broadcast.
            
            @param url The URL address of the externally injected stream.
            @param userId The user ID.
            @param status The state of the externally injected stream: #INJECT_STREAM_STATUS.
        </member>
        <member name="T:BlueQuark.OnStreamUnpublishedHandler">
            Reports the result of calling the {@link agora_gaming_rtc.IRtcEngine.RemovePublishStreamUrl RemovePublishStreamUrl} method. (CDN live only.)
                 - 
                 - This callback indicates whether you have successfully removed an RTMP stream from the CDN.
                 - 
                 - @param url The RTMP URL address.
        </member>
        <member name="T:BlueQuark.OnStreamPublishedHandler">
            Reports the result of calling the {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} method. (CDN live only.)
            
            @param url The RTMP URL address.
            @param error Error code: Main errors include:
            - `ERR_OK(0)`: The publishing succeeds.
            - `ERR_FAILED(1)`: The publishing fails.
            - `ERR_INVALID_ARGUMENT(2)`: Invalid argument used. If, for example, you did not call {@link agora_gaming_rtc.IRtcEngine.SetLiveTranscoding SetLiveTranscoding} to configure LiveTranscoding before calling `AddPublishStreamUrl`, the SDK reports `ERR_INVALID_ARGUMENT(2)`.
            - `ERR_TIMEDOUT(10)`: The publishing timed out.
            - `ERR_ALREADY_IN_USE(19)`: The chosen URL address is already in use for CDN live streaming.
            - `ERR_RESOURCE_LIMITED(22)`: The backend system does not have enough resources for the CDN live streaming.
            - `ERR_ENCRYPTED_STREAM_NOT_ALLOWED_PUBLISH(130)`: You cannot publish an encrypted stream.
            - `ERR_PUBLISH_STREAM_CDN_ERROR(151)`
            - `ERR_PUBLISH_STREAM_NUM_REACH_LIMIT(152)`
            - `ERR_PUBLISH_STREAM_NOT_AUTHORIZED(153)`
            - `ERR_PUBLISH_STREAM_INTERNAL_SERVER_ERROR(154)`
            - `ERR_PUBLISH_STREAM_FORMAT_NOT_SUPPORTED(156)`
        </member>
        <member name="T:BlueQuark.OnStreamMessageErrorHandler">
            Occurs when the local user does not receive the data stream from the remote user within five seconds.
            
            The SDK triggers this callback when the local user fails to receive the stream message that the remote user sends by calling the {@link agora_gaming_rtc.IRtcEngine.SendStreamMessage SendStreamMessage} method.
            
            @param userId The user ID of the remote user sending the message.
            @param streamId The stream ID.
            @param code The error code.
            @param missed The number of lost messages.
            @param cached The number of incoming cached messages when the data stream is interrupted.
        </member>
        <member name="T:BlueQuark.OnStreamMessageHandler">
            Occurs when the local user receives the data stream from the remote user within five seconds.
            
            The SDK triggers this callback when the local user receives the stream message that the remote user sends by calling the {@link agora_gaming_rtc.IRtcEngine.SendStreamMessage SendStreamMessage} method.
            
            @param userId The user ID of the remote user sending the message.
            @param streamId The stream ID.
            @param data The data received by the local user.
            @param length The length of the data in bytes.
        </member>
        <member name="T:BlueQuark.OnConnectionBannedHandler">
            **DEPRECATED** from v2.3.2. Replaced by the {@link agora_gaming_rtc.OnConnectionStateChangedHandler OnConnectionStateChangedHandler} callback.
            
            Occurs when your connection is banned by the Agora Server.
        </member>
        <member name="T:BlueQuark.OnConnectionStateChangedHandler">
            Occurs when the connection state between the SDK and the server changes.
            
            @param state See #CONNECTION_STATE_TYPE.
            @param reason See #CONNECTION_CHANGED_REASON_TYPE.
        </member>
        <member name="T:BlueQuark.OnTokenPrivilegeWillExpireHandler">
            Occurs when the token expires in 30 seconds.
            
            The user becomes offline if the token used in the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method expires. The SDK triggers this callback 30 seconds before the token expires to remind the application to get a new token. Upon receiving this callback, generate a new token on the server and call the {@link agora_gaming_rtc.IRtcEngine.RenewToken RenewToken} method to pass the new token to the SDK.
            
            @param token The token that expires in 30 seconds.
        </member>
        <member name="T:BlueQuark.OnActiveSpeakerHandler">
            Reports which user is the loudest speaker.
            
            If the user enables the audio volume indication by calling the {@link agora_gaming_rtc.IRtcEngine.EnableAudioVolumeIndication EnableAudioVolumeIndication} method, this callback returns the `uid` of the active speaker detected by the audio volume detection module of the SDK.
            
            @note
            - To receive this callback, you need to call the `EnableAudioVolumeIndication` method.
            - This callback returns the user ID of the user with the highest voice volume during a period of time, instead of at the moment.
            
            @param uid The user ID of the active speaker. A `uid` of 0 represents the local user.
        </member>
        <member name="T:BlueQuark.OnVideoStoppedHandler">
            **DEPRECATED** Occurs when the video stops playing.
            
            The application can use this callback to change the configuration of the view (for example, displaying other pictures in the view) after the video stops playing.
            
            Deprecated as of v2.4.1. Use {@link agora_gaming_rtc.LOCAL_VIDEO_STREAM_STATE#LOCAL_VIDEO_STREAM_STATE_STOPPED LOCAL_VIDEO_STREAM_STATE_STOPPED(0)} in the {@link agora_gaming_rtc.OnLocalVideoStateChangedHandler OnLocalVideoStateChangedHandler} callback instead.
        </member>
        <member name="T:BlueQuark.OnFirstLocalVideoFrameHandler">
            Occurs when the first local video frame is displayed/rendered on the local video view.
            
            @param width Width (px) of the first local video frame.
            @param height Height (px) of the first local video frame.
            @param elapsed Time elapsed (ms) from the local user calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method until the SDK triggers this callback. If you call the {@link agora_gaming_rtc.IRtcEngine.StartPreview StartPreview} method before calling the `JoinChannelByKey` method, then `elapsed` is the time elapsed from calling the `StartPreview` method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnFirstRemoteVideoFrameHandler">
            **DEPRECATED** Occurs when the first remote video frame is received and decoded.
            
            This callback is deprecated and replaced by the {@link agora_gaming_rtc.OnRemoteVideoStateChangedHandler OnRemoteVideoStateChangedHandler} callback with the following parameters:
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_STARTING REMOTE_VIDEO_STATE_STARTING(1)}
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_DECODING REMOTE_VIDEO_STATE_DECODING(2)}
            - 
            This callback is triggered in either of the following scenarios:
            - The remote user joins the channel and sends the video stream.
            - The remote user stops sending the video stream and re-sends it after 15 seconds. Reasons for such an interruption include:
              - The remote user leaves the channel.
              - The remote user drops offline.
              - The remote user calls the {@link agora_gaming_rtc.IRtcEngine.MuteLocalVideoStream MuteLocalVideoStream} method to stop sending the video stream.
              - The remote user calls the {@link agora_gaming_rtc.IRtcEngine.DisableVideo DisableVideo} method to disable video.
            The application can configure the user view settings in this callback.
            
            @param uid User ID of the remote user sending the video stream.
            @param width Width (px) of the video frame.
            @param height Height (px) of the video stream.
            @param elapsed Time elapsed (ms) from the local user calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnUserEnableVideoHandler">
            **DEPRECATED** Occurs when a specific remote user enables/disables the video module.
            
            This callback is deprecated and replaced by the {@link agora_gaming_rtc.OnRemoteVideoStateChangedHandler OnRemoteVideoStateChangedHandler} callback with the following parameters:
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_STOPPED REMOTE_VIDEO_STATE_STOPPED(0)} and {@link agora_gaming_rtc.REMOTE_VIDEO_STATE_REASON#REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED(5)}.
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_DECODING REMOTE_VIDEO_STATE_DECODING(2)} and {@link agora_gaming_rtc.REMOTE_VIDEO_STATE_REASON#REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED(6)}.
                    
            Once the video module is disabled, the remote user can only use a voice call. The remote user cannot send or receive any video from other users.
            
            The SDK triggers this callback when the remote user enables or disables the video module by calling the {@link agora_gaming_rtc.IRtcEngine.EnableVideo EnableVideo} or {@link agora_gaming_rtc.IRtcEngine.DisableVideo DisableVideo} method.
            
            @note This callback returns invalid when the number of users in a channel exceeds 20.
            
            @param uid User ID of the remote user.
            @param enabled Whether the specified remote user enables/disables the local video capturing function:
            - true: Enable. The remote user can enter a video session.
            - false: Disable. The remote user can only enter a voice session, and cannot send or receive any video stream.
        </member>
        <member name="T:BlueQuark.OnUserEnableLocalVideoHandler">
            **DEPRECATED** Occurs when a specified remote user enables/disables the local video capturing function.
            
            This callback is deprecated and replaced by the {@link agora_gaming_rtc.OnRemoteVideoStateChangedHandler OnRemoteVideoStateChangedHandler} callback with the following parameters:
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_STOPPED REMOTE_VIDEO_STATE_STOPPED(0)} and {@link agora_gaming_rtc.REMOTE_VIDEO_STATE_REASON#REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED(5)}.
            - {@link agora_gaming_rtc.REMOTE_VIDEO_STATE#REMOTE_VIDEO_STATE_DECODING REMOTE_VIDEO_STATE_DECODING(2)} and {@link agora_gaming_rtc.REMOTE_VIDEO_STATE_REASON#REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED(6)}.
            
            This callback is only applicable to the scenario when the user only wants to watch the remote video without sending any video stream to the other user.
            
            The SDK triggers this callback when the remote user resumes or stops capturing the video stream by calling the {@link agora_gaming_rtc.IRtcEngine.EnableLocalVideo EnableLocalVideo} method.
            
            @param uid User ID of the remote user.
            @param enabled Whether the specified remote user enables/disables the local video capturing function:
            - true: Enable. Other users in the channel can see the video of this remote user.
            - false: Disable. Other users in the channel can no longer receive the video stream from this remote user, while this remote user can still receive the video streams from other users.
        </member>
        <member name="T:BlueQuark.OnRemoteVideoStateChangedHandler">
            Occurs when the remote video state changes.
            
            @param uid The ID of the remote user whose video state changes.
            @param state The state of the remote video. See #REMOTE_VIDEO_STATE.
            @param reason The reason of the remote video state change. See #REMOTE_VIDEO_STATE_REASON.
            @param elapsed The time elapsed (ms) from the local user calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnLocalPublishFallbackToAudioOnlyHandler">
            Occurs when the locally published media stream falls back to an audio-only stream due to poor network conditions or switches back to the video after the network conditions improve.
            
            If you call {@link agora_gaming_rtc.IRtcEngine.SetLocalPublishFallbackOption SetLocalPublishFallbackOption} and set `option` as {@link agora_gaming_rtc.STREAM_FALLBACK_OPTIONS#STREAM_FALLBACK_OPTION_AUDIO_ONLY STREAM_FALLBACK_OPTION_AUDIO_ONLY(2)}, the SDK triggers this callback when the locally published stream falls back to audio-only mode due to poor uplink conditions, or when the audio stream switches back to the video after the uplink network condition improves.
            
            @param isFallbackOrRecover Whether the locally published stream falls back to audio-only or switches back to the video:
            - true: The locally published stream falls back to audio-only due to poor network conditions.
            - false: The locally published stream switches back to the video after the network conditions improve.
        </member>
        <member name="T:BlueQuark.OnRemoteSubscribeFallbackToAudioOnlyHandler">
            Occurs when the remote media stream falls back to audio-only stream due to poor network conditions or switches back to the video stream after the network conditions improve.
            
            If you call {@link agora_gaming_rtc.IRtcEngine.SetRemoteSubscribeFallbackOption SetRemoteSubscribeFallbackOption} and set `option` as {@link agora_gaming_rtc.STREAM_FALLBACK_OPTIONS#STREAM_FALLBACK_OPTION_AUDIO_ONLY STREAM_FALLBACK_OPTION_AUDIO_ONLY(2)}, the SDK triggers this callback when the remote media stream falls back to audio-only mode due to poor uplink conditions, or when the remote media stream switches back to the video after the uplink network condition improves.
            
            @note Once the remotely subscribed media stream switches to the low stream due to poor network conditions, you can monitor the stream switch between a high and low stream in the RemoteVideoStats of the {@link agora_gaming_rtc.OnRemoteVideoStatsHandler OnRemoteVideoStatsHandler} callback.
            
            @param uid ID of the remote user sending the stream.
            @param isFallbackOrRecover Whether the remotely subscribed media stream falls back to audio-only or switches back to the video:
            - true: The remotely subscribed media stream falls back to audio-only due to poor network conditions.
            - false: The remotely subscribed media stream switches back to the video stream after the network conditions improved.
        </member>
        <member name="T:BlueQuark.OnNetworkQualityHandler">
            Reports the last mile network quality of each user in the channel once every two seconds.
            
            Last mile refers to the connection between the local device and Agora's edge server. This callback reports once every two seconds the last mile network conditions of each user in the channel. If a channel includes multiple users, the SDK triggers this callback as many times.
            
            @param uid User ID. The network quality of the user with this `uid` is reported. If `uid` is 0, the local network quality is reported.
            @param txQuality Uplink transmission quality rating of the user in terms of the transmission bitrate, packet loss rate, average RTT (Round-Trip Time), and jitter of the uplink network. `txQuality` is a quality rating helping you understand how well the current uplink network conditions can support the selected VideoEncoderConfiguration. For example, a 1000 Kbps uplink network may be adequate for video frames with a resolution of 640 × 480 and a frame rate of 15 fps in the Live-broadcast profile, but may be inadequate for resolutions higher than 1280 × 720. See #QUALITY_TYPE.
            @param rxQuality Downlink network quality rating of the user in terms of the packet loss rate, average RTT, and jitter of the downlink network. See #QUALITY_TYPE.
        </member>
        <member name="T:BlueQuark.OnLocalVideoStatsHandler">
            Reports the statistics of the local video stream.
            
            The SDK triggers this callback once every two seconds for each user/host. If there are multiple users/hosts in the channel, the SDK triggers this callback as many times.
            
            @note
            If you have called the {@link agora_gaming_rtc.IRtcEngine.EnableDualStreamMode EnableDualStreamMode} method, the `OnLocalVideoStatsHandler` callback reports the statistics of the high-video stream (high bitrate, and high-resolution video stream).
            
            @param localVideoStats The statistics of the local video stream. See LocalVideoStats.
        </member>
        <member name="T:BlueQuark.OnRemoteVideoStatsHandler">
            Reports the statistics of the video stream from each remote user/host.
            
            The SDK triggers this callback once every two seconds for each remote user/host. If a channel includes multiple remote users, the SDK triggers this callback as many times.
            
            @param remoteVideoStats The statistics of the remote video stream. See RemoteVideoStats.
        </member>
        <member name="T:BlueQuark.OnRemoteAudioStatsHandler">
            Reports the statistics of the audio stream from each remote user/host.
            
            This callback replaces the {@link agora_gaming_rtc.OnAudioQualityHandler OnAudioQualityHandler} callback.
            
            The SDK triggers this callback once every two seconds for each remote user/host. If a channel includes multiple remote users, the SDK triggers this callback as many times.
            
            @param remoteAudioStats The statistics of the received remote audio streams. See RemoteAudioStats.
        </member>
        <member name="T:BlueQuark.OnAudioDeviceStateChangedHandler">
            Occurs when the audio device state changes.
            
            This callback notifies the application that the system's audio device state is changed. For example, a headset is unplugged from the device.
            
            @param deviceId The device ID.
            @param deviceType The device type: #MEDIA_DEVICE_TYPE.
            @param deviceState The device state: #MEDIA_DEVICE_STATE_TYPE.
        </member>
        <member name="T:BlueQuark.OnCameraReadyHandler">
            **DEPRECATED** Occurs when the camera turns on and is ready to capture the video.
            
            If the camera fails to turn on, fix the error reported in the {@link agora_gaming_rtc.OnSDKErrorHandler OnSDKErrorHandler} callback.
            
            Deprecated as of v2.4.1. Use {@link agora_gaming_rtc.LOCAL_VIDEO_STREAM_STATE#LOCAL_VIDEO_STREAM_STATE_CAPTURING LOCAL_VIDEO_STREAM_STATE_CAPTURING(1)} in the {@link agora_gaming_rtc.OnLocalVideoStateChangedHandler OnLocalVideoStateChangedHandler} callback instead.
        </member>
        <member name="T:BlueQuark.OnCameraFocusAreaChangedHandler">
            Occurs when the camera focus area changes.
            
            The SDK triggers this callback when the local user changes the camera focus position by calling the setCameraFocusPositionInPreview method.
            
            @note This callback is for Android and iOS only.
            
            @param x x coordinate of the changed camera focus area.
            @param y y coordinate of the changed camera focus area.
            @param width Width of the changed camera focus area.
            @param height Height of the changed camera focus area.
        </member>
        <member name="T:BlueQuark.OnCameraExposureAreaChangedHandler">
            Occurs when the camera exposure area changes.
            
            The SDK triggers this callback when the local user changes the camera exposure position by calling the setCameraExposurePosition method.
            
            @note This callback is for Android and iOS only.
            
            @param x x coordinate of the changed camera exposure area.
            @param y y coordinate of the changed camera exposure area.
            @param width Width of the changed camera exposure area.
            @param height Height of the changed camera exposure area.
        </member>
        <member name="T:BlueQuark.OnRemoteAudioMixingBeginHandler">
            Occurs when a remote user starts audio mixing.
            
            When a remote user calls {@link agora_gaming_rtc.IRtcEngine.StartAudioMixing StartAudioMixing} to play the background music, the SDK reports this callback.
        </member>
        <member name="T:BlueQuark.OnRemoteAudioMixingEndHandler">
            Occurs when a remote user finishes audio mixing.
        </member>
        <member name="T:BlueQuark.OnAudioEffectFinishedHandler">
            Occurs when the local audio effect playback finishes.
            
            The SDK triggers this callback when the local audio effect file playback finishes.
            
            @param soundId ID of the local audio effect. Each local audio effect has a unique ID.
        </member>
        <member name="T:BlueQuark.OnVideoDeviceStateChangedHandler">
            Occurs when the video device state changes.
            
            @note On a Windows device with an external camera for video capturing, the video disables once the external camera is unplugge
            
            @param deviceId The device ID of the video device that changes state.
            @param deviceType The device type: #MEDIA_DEVICE_TYPE.
            @param deviceState The device state: #MEDIA_DEVICE_STATE_TYPE.
        </member>
        <member name="T:BlueQuark.OnRemoteVideoTransportStatsHandler">
            **DEPRECATED** Reports the transport-layer statistics of each remote video stream.
            
            This callback is deprecated and replaced by the {@link agora_gaming_rtc.OnRemoteVideoStatsHandler OnRemoteVideoStatsHandler} callback.
            
            This callback reports the transport-layer statistics, such as the packet loss rate and network time delay, once every two seconds after the local user receives a video packet from a remote user.
            
            @param uid User ID of the remote user sending the video packet.
            @param delay Network time delay (ms) from the remote user sending the video packet to the local user.
            @param lost Packet loss rate (%) of the video packet sent from the remote user.
            @param rxKBitRate Received bitrate (Kbps) of the video packet sent from the remote user.
        </member>
        <member name="T:BlueQuark.OnRemoteAudioTransportStatsHandler">
            Reports the transport-layer statistics of each remote audio stream.
            
            This callback is deprecated and replaced by the {@link agora_gaming_rtc.OnRemoteAudioStatsHandler OnRemoteAudioStatsHandler} callback.
            
            This callback reports the transport-layer statistics, such as the packet loss rate and network time delay, once every two seconds after the local user receives an audio packet from a remote user.
            
            @param uid  User ID of the remote user sending the audio packet.
            @param delay Network time delay (ms) from the remote user sending the audio packet to the local user.
            @param lost Packet loss rate (%) of the audio packet sent from the remote user.
            @param rxKBitRate  Received bitrate (Kbps) of the audio packet sent from the remote user.
        </member>
        <member name="T:BlueQuark.OnTranscodingUpdatedHandler">
            Occurs when the publisher's transcoding is updated.
            
            When the LiveTranscoding class in the {@link agora_gaming_rtc.IRtcEngine.SetLiveTranscoding SetLiveTranscoding} method updates, the SDK triggers the `OnTranscodingUpdatedHandler` callback to report the update information to the local host.
            
            @note If you call the `SetLiveTranscoding` method to set the `LiveTranscoding` class for the first time, the SDK does not trigger the `OnTranscodingUpdatedHandler` callback.
        </member>
        <member name="T:BlueQuark.OnAudioDeviceVolumeChangedHandler">
            Occurs when the volume of the playback device, microphone, or application changes.
            
            @param deviceType Device type: #MEDIA_DEVICE_TYPE.
            @param volume Volume of the device. The value ranges between 0 and 255.
            @param muted
            - true: The audio device is muted.
            - false: The audio device is not muted.
        </member>
        <member name="T:BlueQuark.OnMediaEngineStartCallSuccessHandler">
            Occurs when the media engine call starts.
        </member>
        <member name="T:BlueQuark.OnMediaEngineLoadSuccessHandler">
            Occurs when the media engine loads.
        </member>
        <member name="T:BlueQuark.OnAudioMixingStateChangedHandler">
            Occurs when the state of the local user's audio mixing file changes.
            
            - When the audio mixing file plays, pauses playing, or stops playing, this callback returns 710, 711, or 713 in `state`, and 0 in `errorCode`.
            - When exceptions occur during playback, this callback returns 714 in `state` and an error in `errorCode`.
            - If the local audio mixing file does not exist, or if the SDK does not support the file format or cannot access the music file URL, the SDK returns `WARN_AUDIO_MIXING_OPEN_ERROR(701)`.
            
            @param state The state code. See #AUDIO_MIXING_STATE_TYPE.
            @param errorCode The error code. See #AUDIO_MIXING_ERROR_TYPE.
        </member>
        <member name="T:BlueQuark.OnFirstRemoteAudioDecodedHandler">
            Occurs when the SDK decodes the first remote audio frame for playback.
            
            This callback is triggered in either of the following scenarios:
            - The remote user joins the channel and sends the audio stream.
            - The remote user stops sending the audio stream and re-sends it after 15 seconds. Reasons for such an interruption include:
               - The remote user leaves channel.
               - The remote user drops offline.
               - The remote user calls the {@link agora_gaming_rtc.IRtcEngine.MuteLocalAudioStream MuteLocalAudioStream} method to stop sending the local audio stream.
               - The remote user calls the {@link agora_gaming_rtc.IRtcEngine.DisableAudio DisableAudio} method to disable audio.
            
            @param uid User ID of the remote user sending the audio stream.
            @param elapsed Time elapsed (ms) from the local user calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnLocalVideoStateChangedHandler">
            Occurs when the local video stream state changes.
            
            @note This callback indicates the state of the local video stream, including camera capturing and video encoding, and allows you to troubleshoot issues when exceptions occur.
            
            @param localVideoState State type #LOCAL_VIDEO_STREAM_STATE. When the state is {@link agora_gaming_rtc.LOCAL_VIDEO_STREAM_STATE#LOCAL_VIDEO_STREAM_STATE_FAILED LOCAL_VIDEO_STREAM_STATE_FAILED(3)}, see the error parameter for details.
            @param error The detailed error information. code #LOCAL_VIDEO_STREAM_ERROR.
        </member>
        <member name="T:BlueQuark.OnRtmpStreamingStateChangedHandler">
            Occurs when the state of the RTMP streaming changes.
            
            The SDK triggers this callback to report the result of the local user calling the {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} or {@link agora_gaming_rtc.IRtcEngine.RemovePublishStreamUrl RemovePublishStreamUrl} method.
            
            This callback indicates the state of the RTMP streaming. When exceptions occur, you can troubleshoot issues by referring to the detailed error descriptions in the `errCode` parameter.
            
            @param url The RTMP URL address.
            @param state The RTMP streaming state. See: #RTMP_STREAM_PUBLISH_STATE.
            @param errCode The detailed error information for streaming. See: #RTMP_STREAM_PUBLISH_ERROR.
        </member>
        <member name="T:BlueQuark.OnNetworkTypeChangedHandler">
            Occurs when the local network type changes.
            
            When the network connection is interrupted, this callback indicates whether the interruption is caused by a network type change or poor network conditions.
            
            @param type See #NETWORK_TYPE.
        </member>
        <member name="T:BlueQuark.OnLastmileProbeResultHandler">
            Reports the last-mile network probe result.
            
            The SDK triggers this callback within 30 seconds after the app calls the {@link agora_gaming_rtc.IRtcEngine.StartLastmileProbeTest StartLastmileProbeTest} method.
            
            @param result The uplink and downlink last-mile network probe test result. See LastmileProbeResult.
        </member>
        <member name="T:BlueQuark.OnLocalUserRegisteredHandler">
            Occurs when the local user successfully registers a user account by calling the {@link agora_gaming_rtc.IRtcEngine.RegisterLocalUserAccount RegisterLocalUserAccount} method or joins a channel by calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method.This callback reports the user ID and user account of the local user.
            
            @param uid The ID of the local user.
            @param userAccount The user account of the local user.
        </member>
        <member name="T:BlueQuark.OnUserInfoUpdatedHandler">
            Occurs when the SDK gets the user ID and user account of the remote user.
            
            After a remote user joins the channel, the SDK gets the UID and user account of the remote user, caches them in a mapping table object (`userInfo`), and triggers this callback on the local client.
            
            @param uid The ID of the remote user.
            @param userInfo The UserInfo object that contains the user ID and user account of the remote user.
        </member>
        <member name="T:BlueQuark.OnLocalAudioStateChangedHandler">
            Occurs when the local audio state changes.
            
            This callback indicates the state change of the local audio stream, including the state of the audio recording and encoding, and allows you to troubleshoot issues when exceptions occur.
            
            @note When the state is {@link agora_gaming_rtc.LOCAL_AUDIO_STREAM_STATE#LOCAL_AUDIO_STREAM_STATE_FAILED LOCAL_AUDIO_STREAM_STATE_FAILED(3)}, see the `error` parameter for details.
            
            @param state The state of the local audio. See #LOCAL_AUDIO_STREAM_STATE.
            @param error The error information of the local audio. See #LOCAL_AUDIO_STREAM_ERROR.
        </member>
        <member name="T:BlueQuark.OnRemoteAudioStateChangedHandler">
            Occurs when the remote audio state changes.
            
            This callback indicates the state change of the remote audio stream.
            
            @param uid The ID of the remote user whose audio state changes.
            @param state The state of the remote audio. See #REMOTE_AUDIO_STATE.
            @param reason The reason of the remote audio state change. See #REMOTE_AUDIO_STATE_REASON.
            @param elapsed Time elapsed (ms) from the local user calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method until the SDK triggers this callback.
        </member>
        <member name="T:BlueQuark.OnLocalAudioStatsHandler">
            Reports the statistics of the local audio stream.
            
            The SDK triggers this callback once every two seconds.
            
            @param localAudioStats The statistics of the local audio stream. See LocalAudioStats.
        </member>
        <member name="T:BlueQuark.OnChannelMediaRelayStateChangedHandler">
            Occurs when the state of the media stream relay changes.
            
            The SDK returns the state of the current media relay with any error message.
            
            @param state The state code in #CHANNEL_MEDIA_RELAY_STATE.
            @param code The error code in #CHANNEL_MEDIA_RELAY_ERROR.
        </member>
        <member name="T:BlueQuark.OnChannelMediaRelayEventHandler">
            Reports events during the media stream relay.
            
            @param events The event code in #CHANNEL_MEDIA_RELAY_EVENT.
        </member>
        <member name="T:BlueQuark.VIDEO_RENDER_MODE">
            Video display mode. 
        </member>
        <member name="F:BlueQuark.VIDEO_RENDER_MODE.RENDER_RAWDATA">
            100: (Default) RawData.
        </member>
        <member name="F:BlueQuark.VIDEO_RENDER_MODE.REDNER_OPENGL_ES2">
            101: OpenGLES 2. 
        </member>
        <member name="F:BlueQuark.VIDEO_RENDER_MODE.RENDER_UNITY_LOW_LEVEL_INTERFACE">
            102: Unity low level interface. 
        </member>
        <member name="T:BlueQuark.ERROR_CODE">
            Error code.
        </member>
        <member name="F:BlueQuark.ERROR_CODE.ERROR_NOT_INIT_ENGINE">
            -7: The SDK is not initialized before calling this method. 
        </member>
        <member name="F:BlueQuark.ERROR_CODE.ERROR_OK">
            0: No error occurs. 
        </member>
        <member name="F:BlueQuark.ERROR_CODE.ERROR_INVALID_ARGUMENT">
            -2: An invalid parameter is used. For example, the specific channel name includes illegal characters. 
        </member>
        <member name="F:BlueQuark.ERROR_CODE.ERROR_NO_DEVICE_PLUGIN">
            -100: No device is plugged.
        </member>
        <member name="T:BlueQuark.REMOTE_VIDEO_STREAM_TYPE">
            Remote video stream types. 
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STREAM_TYPE.REMOTE_VIDEO_STREAM_HIGH">
            0: High-stream video. 
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STREAM_TYPE.REMOTE_VIDEO_STREAM_LOW">
            1: Low-stream video. 
        </member>
        <member name="T:BlueQuark.REMOTE_VIDEO_STATE">
            The state of the remote video. 
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_STOPPED">
            0: The remote video is in the default state, probably due to `REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED(3)`, `REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED(5)`, or `REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE(7)`.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_STARTING">
            1: The first remote video packet is received.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_DECODING">
            2: The remote video stream is decoded and plays normally, probably due to `REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY(2)`, `REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED(4)`, `REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED(6)`, or `REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY(9)`.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_FROZEN">
            3: The remote video is frozen, probably due to `REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION(1)` or `REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK(8)`.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE.REMOTE_VIDEO_STATE_FAILED">
            4: The remote video fails to start, probably due to `REMOTE_VIDEO_STATE_REASON_INTERNAL(0)`.
        </member>
        <member name="T:BlueQuark.USER_OFFLINE_REASON">
            Reasons for a user being offline. 
        </member>
        <member name="F:BlueQuark.USER_OFFLINE_REASON.QUIT">
            0: The user quits the call. 
        </member>
        <member name="F:BlueQuark.USER_OFFLINE_REASON.DROPPED">
            1: The SDK times out and the user drops offline because no data packet is received within a certain period of time. If the user quits the call and the message is not passed to the SDK (due to an unreliable channel), the SDK assumes the user dropped offline. 
        </member>
        <member name="F:BlueQuark.USER_OFFLINE_REASON.BECOME_AUDIENCE">
            2: (Live broadcast only.) The client role switched from the host to the audience. 
        </member>
        <member name="T:BlueQuark.LOG_FILTER">
            Output log filter level. 
        </member>
        <member name="F:BlueQuark.LOG_FILTER.OFF">
            0: Do not output any log information. 
        </member>
        <member name="F:BlueQuark.LOG_FILTER.DEBUG">
            0x80f: Output all log information. Set your log filter as debug if you want to get the most complete log file. 
        </member>
        <member name="F:BlueQuark.LOG_FILTER.INFO">
            0x0f: Output CRITICAL, ERROR, WARNING, and INFO level log information. We recommend setting your log filter as this level. 
        </member>
        <member name="F:BlueQuark.LOG_FILTER.WARNING">
            0x0e: Outputs CRITICAL, ERROR, and WARNING level log information. 
        </member>
        <member name="F:BlueQuark.LOG_FILTER.ERROR">
            0x0c: Outputs CRITICAL and ERROR level log information. 
        </member>
        <member name="F:BlueQuark.LOG_FILTER.CRITICAL">
            0x08: Outputs CRITICAL level log information. 
        </member>
        <member name="T:BlueQuark.CHANNEL_PROFILE">
            The channel profile of the Agora IRtcEngine. 
        </member>
        <member name="F:BlueQuark.CHANNEL_PROFILE.CHANNEL_PROFILE_COMMUNICATION">
            0: (Default) The Communication profile. Use this profile in one-on-one calls or group calls, where all users can talk freely. 
        </member>
        <member name="F:BlueQuark.CHANNEL_PROFILE.CHANNEL_PROFILE_LIVE_BROADCASTING">
            1: The Live-Broadcast profile. Users in a live-broadcast channel have a role as either broadcaster or audience. 
            A broadcaster can both send and receive streams; an audience can only receive streams.
        </member>
        <member name="F:BlueQuark.CHANNEL_PROFILE.CHANNEL_PROFILE_GAME">
            2: The Gaming profile. This profile uses a codec with a lower bitrate and consumes less power. Applies to the gaming scenario, where all game players can talk freely.
        </member>
        <member name="T:BlueQuark.CLIENT_ROLE">
            Client roles in a live broadcast. 
        </member>
        <member name="F:BlueQuark.CLIENT_ROLE.BROADCASTER">
            1: Host 
        </member>
        <member name="F:BlueQuark.CLIENT_ROLE.AUDIENCE">
            2: Audience 
        </member>
        <member name="T:BlueQuark.AUDIO_RECORDING_QUALITY_TYPE">
            Audio recording qualities. 
        </member>
        <member name="F:BlueQuark.AUDIO_RECORDING_QUALITY_TYPE.AUDIO_RECORDING_QUALITY_LOW">
            0: Low quality. The sample rate is 32 kHz, and the file size is around 1.2 MB after 10 minutes of recording. 
        </member>
        <member name="F:BlueQuark.AUDIO_RECORDING_QUALITY_TYPE.AUDIO_RECORDING_QUALITY_MEDIUM">
            1: Medium quality. The sample rate is 32 kHz, and the file size is around 2 MB after 10 minutes of recording. 
        </member>
        <member name="F:BlueQuark.AUDIO_RECORDING_QUALITY_TYPE.AUDIO_RECORDING_QUALITY_HIGH">
            2: High quality. The sample rate is 32 kHz, and the file size is around 3.75 MB after 10 minutes of recording. 
        </member>
        <member name="T:BlueQuark.AUDIO_ROUTE">
            Audio output routing. 
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_DEFAULT">
            -1: Default.
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_HEADSET">
            0: Headset.
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_EARPIECE">
            1: Earpiece.
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_HEADSET_NO_MIC">
            2: Headset with no microphone.
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_SPEAKERPHONE">
            3: Speakerphone.
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_LOUDSPEAKER">
            4: Loudspeaker.
        </member>
        <member name="F:BlueQuark.AUDIO_ROUTE.AUDIO_ROUTE_BLUETOOTH">
            5: Bluetooth headset.
        </member>
        <member name="T:BlueQuark.CONNECTION_STATE_TYPE">
            Connection states. 
        </member>
        <member name="F:BlueQuark.CONNECTION_STATE_TYPE.CONNECTION_STATE_DISCONNECTED">
            1: The SDK is disconnected from Agora's edge server.
            - This is the initial state before calling the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method.
            - The SDK also enters this state when the application calls the {@link agora_gaming_rtc.IRtcEngine.LeaveChannel LeaveChannel} method.
        </member>
        <member name="F:BlueQuark.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTING">
            2: The SDK is connecting to Agora's edge server.
            - When the application calls the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method, the SDK starts to establish a connection to the specified channel, triggers the {@link agora_gaming_rtc.OnConnectionStateChangedHandler OnConnectionStateChangedHandler} callback, and switches to the `CONNECTION_STATE_CONNECTING(2)` state.
            - When the SDK successfully joins the channel, it triggers the `OnConnectionStateChangedHandler` callback and switches to the `CONNECTION_STATE_CONNECTED(3)` state.
            - After the SDK joins the channel and when it finishes initializing the media engine, the SDK triggers the {@link agora_gaming_rtc.OnJoinChannelSuccessHandler OnJoinChannelSuccessHandler} callback.
        </member>
        <member name="F:BlueQuark.CONNECTION_STATE_TYPE.CONNECTION_STATE_CONNECTED">
            3: The SDK is connected to Agora's edge server and has joined a channel. You can now publish or subscribe to a media stream in the channel.
            If the connection to the channel is lost because, for example, if the network is down or switched, the SDK automatically tries to reconnect and triggers:
            - The {@link agora_gaming_rtc.OnConnectionInterruptedHandler OnConnectionInterruptedHandler} callback (deprecated).
            - The {@link agora_gaming_rtc.OnConnectionStateChangedHandler OnConnectionStateChangedHandler} callback and switches to the `CONNECTION_STATE_RECONNECTING(4)` state.
        </member>
        <member name="F:BlueQuark.CONNECTION_STATE_TYPE.CONNECTION_STATE_RECONNECTING">
            4: The SDK keeps rejoining the channel after being disconnected from a joined channel because of network issues.
            - If the SDK cannot rejoin the channel within 10 seconds after being disconnected from Agora's edge server, the SDK triggers the {@link agora_gaming_rtc.OnConnectionLostHandler OnConnectionLostHandler} callback, stays in the `CONNECTION_STATE_RECONNECTING(4)` state, and keeps rejoining the channel.
            - If the SDK fails to rejoin the channel 20 minutes after being disconnected from Agora's edge server, the SDK triggers the {@link agora_gaming_rtc.OnConnectionStateChangedHandler OnConnectionStateChangedHandler} callback, switches to the `CONNECTION_STATE_FAILED(5)` state, and stops rejoining the channel.
        </member>
        <member name="F:BlueQuark.CONNECTION_STATE_TYPE.CONNECTION_STATE_FAILED">
            5: The SDK fails to connect to Agora's edge server or join the channel.
            
            You must call the {@link agora_gaming_rtc.IRtcEngine.LeaveChannel LeaveChannel} method to leave this state, and call the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method again to rejoin the channel.
            
            If the SDK is banned from joining the channel by Agora's edge server (through the RESTful API), the SDK triggers the {@link agora_gaming_rtc.OnConnectionBannedHandler OnConnectionBannedHandler} (deprecated) and {@link agora_gaming_rtc.OnConnectionStateChangedHandler OnConnectionStateChangedHandler} callbacks.
        </member>
        <member name="T:BlueQuark.CONNECTION_CHANGED_REASON_TYPE">
            Reasons for a connection state change. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_CONNECTING">
            0: The SDK is connecting to Agora's edge server. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_JOIN_SUCCESS">
            1: The SDK has joined the channel successfully. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_INTERRUPTED">
            2: The connection between the SDK and Agora's edge server is interrupted. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_BANNED_BY_SERVER">
            3: The connection between the SDK and Agora's edge server is banned by Agora's edge server. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_JOIN_FAILED">
            4: The SDK fails to join the channel for more than 20 minutes and stops reconnecting to the channel. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_LEAVE_CHANNEL">
            5: The SDK has left the channel. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_INVALID_APP_ID">
            6: The connection failed since Appid is not valid. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_INVALID_CHANNEL_NAME">
            7: The connection failed since channel name is not valid. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_INVALID_TOKEN">
            8: The connection failed since token is not valid, possibly because:
            - The App Certificate for the project is enabled in Dashboard, but you do not use Token when joining the channel. If you enable the App Certificate, you must use a token to join the channel.
            - The `uid` that you specify in the {@link agora_gaming_rtc.IRtcEngine.JoinChannelByKey JoinChannelByKey} method is different from the `uid` that you pass for generating the token.
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_TOKEN_EXPIRED">
            9: The connection failed since token is expired. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_REJECTED_BY_SERVER">
            10: The connection is rejected by server. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_SETTING_PROXY_SERVER">
            11: The connection changed to reconnecting since SDK has set a proxy server. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_RENEW_TOKEN">
            12: When SDK is in connection failed, the renew token operation will make it connecting. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_CLIENT_IP_ADDRESS_CHANGED">
            13: The IP Address of SDK client has changed. i.e., Network type or IP/Port changed by network operator might change client IP address. 
        </member>
        <member name="F:BlueQuark.CONNECTION_CHANGED_REASON_TYPE.CONNECTION_CHANGED_KEEP_ALIVE_TIMEOUT">
            14: Timeout for the keep-alive of the connection between the SDK and Agora's edge server. The connection state changes to `CONNECTION_STATE_RECONNECTING(4)`. 
        </member>
        <member name="T:BlueQuark.STREAM_FALLBACK_OPTIONS">
            Stream fallback options. 
        </member>
        <member name="F:BlueQuark.STREAM_FALLBACK_OPTIONS.STREAM_FALLBACK_OPTION_DISABLED">
            0: No fallback behavior for the local/remote video stream when the uplink/downlink network conditions are poor. The quality of the stream is not guaranteed. 
        </member>
        <member name="F:BlueQuark.STREAM_FALLBACK_OPTIONS.STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW">
            1: Under poor downlink network conditions, the remote video stream, to which you subscribe, falls back to the low-stream (low resolution and low bitrate) video. You can set this option only in the {@link agora_gaming_rtc.IRtcEngine.SetRemoteSubscribeFallbackOption SetRemoteSubscribeFallbackOption} method. Nothing happens when you set this in the {@link agora_gaming_rtc.IRtcEngine.SetLocalPublishFallbackOption SetLocalPublishFallbackOption} method. 
        </member>
        <member name="F:BlueQuark.STREAM_FALLBACK_OPTIONS.STREAM_FALLBACK_OPTION_AUDIO_ONLY">
            2: Under poor uplink network conditions, the locally published video stream falls back to audio only.
            
            Under poor downlink network conditions, the remote video stream, to which you subscribe, first falls back to the low-stream (low resolution and low bitrate) video; and then to an audio-only stream if the network conditions worsen.
        </member>
        <member name="T:BlueQuark.VideoContentHint">
            Content hints for screen sharing.
        </member>
        <member name="F:BlueQuark.VideoContentHint.CONTENT_HINT_NONE">
            (Default) No content hint.
        </member>
        <member name="F:BlueQuark.VideoContentHint.CONTENT_HINT_MOTION">
            Motion-intensive content. Choose this option if you prefer smoothness or when you are sharing a video clip, movie, or video game.
        </member>
        <member name="F:BlueQuark.VideoContentHint.CONTENT_HINT_DETAILS">
            Motionless content. Choose this option if you prefer sharpness or when you are sharing a picture, PowerPoint slide, or text.
        </member>
        <member name="T:BlueQuark.REMOTE_VIDEO_STATE_REASON">
            The reason of the remote video state change. 
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_INTERNAL">
            0: Internal reasons.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_NETWORK_CONGESTION">
            1: Network congestion.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_NETWORK_RECOVERY">
            2: Network recovery.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_LOCAL_MUTED">
            3: The local user stops receiving the remote video stream or disables the video module.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_LOCAL_UNMUTED">
            4: The local user resumes receiving the remote video stream or enables the video module.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_REMOTE_MUTED">
            5: The remote user stops sending the video stream or disables the video module.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_REMOTE_UNMUTED">
            6: The remote user resumes sending the video stream or enables the video module.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_REMOTE_OFFLINE">
            7: The remote user leaves the channel.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK">
            8: The remote media stream falls back to the audio-only stream due to poor network conditions.
        </member>
        <member name="F:BlueQuark.REMOTE_VIDEO_STATE_REASON.REMOTE_VIDEO_STATE_REASON_AUDIO_FALLBACK_RECOVERY">
            9: The remote media stream switches back to the video stream after the network conditions improve.
        </member>
        <member name="T:BlueQuark.LOCAL_VIDEO_STREAM_STATE">
            Local video state types.
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_STATE.LOCAL_VIDEO_STREAM_STATE_STOPPED">
            0: Initial state. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_STATE.LOCAL_VIDEO_STREAM_STATE_CAPTURING">
            1: The capturer starts successfully. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_STATE.LOCAL_VIDEO_STREAM_STATE_ENCODING">
            2: The first video frame is successfully encoded. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_STATE.LOCAL_VIDEO_STREAM_STATE_FAILED">
            3: The local video fails to start. 
        </member>
        <member name="T:BlueQuark.LOCAL_VIDEO_STREAM_ERROR">
            Local video state error codes
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_OK">
            0: The local video is normal. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_FAILURE">
            1: No specified reason for the local video failure. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_DEVICE_NO_PERMISSION">
            2: No permission to use the local video device. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_DEVICE_BUSY">
            3: The local video capturer is in use. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_CAPTURE_FAILURE">
            4: The local video capture fails. Check whether the capturer is working properly. 
        </member>
        <member name="F:BlueQuark.LOCAL_VIDEO_STREAM_ERROR.LOCAL_VIDEO_STREAM_ERROR_ENCODE_FAILURE">
            5: The local video encoding fails. 
        </member>
        <member name="T:BlueQuark.CLIENT_ROLE_TYPE">
            Client roles in a live broadcast. 
        </member>
        <member name="F:BlueQuark.CLIENT_ROLE_TYPE.CLIENT_ROLE_BROADCASTER">
            1: Host 
        </member>
        <member name="F:BlueQuark.CLIENT_ROLE_TYPE.CLIENT_ROLE_AUDIENCE">
            2: Audience 
        </member>
        <member name="T:BlueQuark.MEDIA_DEVICE_TYPE">
            Media device types. 
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_TYPE.UNKNOWN_AUDIO_DEVICE">
            -1: Unknown device type. 
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_TYPE.AUDIO_PLAYOUT_DEVICE">
            0: Audio playback device. 
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_TYPE.AUDIO_RECORDING_DEVICE">
            1: Audio recording device. 
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_TYPE.VIDEO_RENDER_DEVICE">
            2: Video renderer. 
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_TYPE.VIDEO_CAPTURE_DEVICE">
            3: Video capturer. 
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_TYPE.AUDIO_APPLICATION_PLAYOUT_DEVICE">
            4: Application audio playback device. 
        </member>
        <member name="T:BlueQuark.RAW_AUDIO_FRAME_OP_MODE_TYPE">
            Use modes of the {@link agora_gaming_rtc.AudioRawDataManager.OnRecordAudioFrameHandler OnRecordAudioFrameHandler} callback. 
        </member>
        <member name="F:BlueQuark.RAW_AUDIO_FRAME_OP_MODE_TYPE.RAW_AUDIO_FRAME_OP_MODE_READ_ONLY">
            0: Read-only mode: Users only read the AudioFrame data without modifying anything. For example, when users acquire the data with the Agora SDK, then push the RTMP streams. 
        </member>
        <member name="F:BlueQuark.RAW_AUDIO_FRAME_OP_MODE_TYPE.RAW_AUDIO_FRAME_OP_MODE_WRITE_ONLY">
            1: Write-only mode: Users replace the AudioFrame data with their own data and pass the data to the SDK for encoding. For example, when users acquire the data. 
        </member>
        <member name="F:BlueQuark.RAW_AUDIO_FRAME_OP_MODE_TYPE.RAW_AUDIO_FRAME_OP_MODE_READ_WRITE">
            2: Read and write mode: Users read the data from AudioFrame, modify it, and then play it. For example, when users have their own sound-effect processing module and perform some voice pre-processing, such as a voice change. 
        </member>
        <member name="T:BlueQuark.AUDIO_PROFILE_TYPE">
            Audio profiles.
            
            Sets the sample rate, bitrate, encoding mode, and the number of channels.
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_DEFAULT">
            0: Default audio profile.
            - In the Communication profile, the default value is `AUDIO_PROFILE_SPEECH_STANDARD(1)`;
            - In the Live-broadcast profile, the default value is `AUDIO_PROFILE_MUSIC_STANDARD(2)`.
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_SPEECH_STANDARD">
            1: A sample rate of 32 kHz, audio encoding, mono, and a bitrate of up to 18 Kbps. 
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_STANDARD">
            2: A sample rate of 48 kHz, music encoding, mono, and a bitrate of up to 48 Kbps. 
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_STANDARD_STEREO">
            3: A sample rate of 48 kHz, music encoding, stereo, and a bitrate of up to 56 Kbps. 
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY">
            4: A sample rate of 48 kHz, music encoding, mono, and a bitrate of up to 128 Kbps. 
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_MUSIC_HIGH_QUALITY_STEREO">
            5: A sample rate of 48 kHz, music encoding, stereo, and a bitrate of up to 192 Kbps. 
        </member>
        <member name="F:BlueQuark.AUDIO_PROFILE_TYPE.AUDIO_PROFILE_IOT">
            6: A sample rate of 16 kHz, audio encoding, mono, and Acoustic Echo Cancellation (AES) enabled.  
        </member>
        <member name="T:BlueQuark.AUDIO_SCENARIO_TYPE">
            Audio application scenarios.
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_DEFAULT">
            0: Default. 
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_CHATROOM_ENTERTAINMENT">
            1: Entertainment scenario, supporting voice during gameplay. 
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_EDUCATION">
            2: Education scenario, prioritizing fluency and stability. 
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_GAME_STREAMING">
            3: Live gaming scenario, enabling the gaming audio effects in the speaker mode in a live broadcast scenario. Choose this scenario for high-fidelity music playback. 
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_SHOWROOM">
            4: Showroom scenario, optimizing the audio quality with external professional equipment. 
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_CHATROOM_GAMING">
            5: Gaming scenario. 
        </member>
        <member name="F:BlueQuark.AUDIO_SCENARIO_TYPE.AUDIO_SCENARIO_IOT">
            6: Applicable to the IoT scenario. 
        </member>
        <member name="T:BlueQuark.VIDEO_CODEC_PROFILE_TYPE">
            Video codec profile types. 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_PROFILE_TYPE.VIDEO_CODEC_PROFILE_BASELINE">
            66: Baseline video codec profile. Generally used in video calls on mobile phones. 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_PROFILE_TYPE.VIDEO_CODEC_PROFILE_MAIN">
            77: Main video codec profile. Generally used in mainstream electronics such as MP4 players, portable video players, PSP, and iPads. 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_PROFILE_TYPE.VIDEO_CODEC_PROFILE_HIGH">
             100: (Default) High video codec profile. Generally used in high-resolution broadcasts or television. 
        </member>
        <member name="T:BlueQuark.AUDIO_SAMPLE_RATE_TYPE">
            Audio-sample rates. 
        </member>
        <member name="F:BlueQuark.AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_32000">
            32000: 32 kHz 
        </member>
        <member name="F:BlueQuark.AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_44100">
            44100: 44.1 kHz 
        </member>
        <member name="F:BlueQuark.AUDIO_SAMPLE_RATE_TYPE.AUDIO_SAMPLE_RATE_48000">
            48000: 48 kHz 
        </member>
        <member name="T:BlueQuark.AUDIO_MIXING_STATE_TYPE">
            The states of the local user's audio mixing file. 
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_STATE_TYPE.AUDIO_MIXING_STATE_PLAYING">
            710: The audio mixing file is playing.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_STATE_TYPE.AUDIO_MIXING_STATE_PAUSED">
            711: The audio mixing file pauses playing.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_STATE_TYPE.AUDIO_MIXING_STATE_STOPPED">
            713: The audio mixing file stops playing.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_STATE_TYPE.AUDIO_MIXING_STATE_FAILED">
            714: An exception occurs when playing the audio mixing file. See #AUDIO_MIXING_ERROR_TYPE.
        </member>
        <member name="T:BlueQuark.AUDIO_MIXING_ERROR_TYPE">
            The error codes of the local user's audio mixing file.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_ERROR_TYPE.AUDIO_MIXING_ERROR_CAN_NOT_OPEN">
            701: The SDK cannot open the audio mixing file.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_ERROR_TYPE.AUDIO_MIXING_ERROR_TOO_FREQUENT_CALL">
            702: The SDK opens the audio mixing file too frequently.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_ERROR_TYPE.AUDIO_MIXING_ERROR_INTERRUPTED_EOF">
            703: The opening of the audio mixing file is interrupted.
        </member>
        <member name="F:BlueQuark.AUDIO_MIXING_ERROR_TYPE.AUDIO_MIXING_ERROR_OK">
            0: The SDK can open the audio mixing file.
        </member>
        <member name="T:BlueQuark.RTMP_STREAM_PUBLISH_STATE">
            States of the RTMP streaming.
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_IDLE">
            0: The RTMP streaming has not started or has ended.
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_CONNECTING">
            1: The SDK is connecting to Agora's streaming server and the RTMP server. This state is triggered after you call the {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} method.
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_RUNNING">
            2: The RTMP streaming publishes. The SDK successfully publishes the RTMP streaming and returns this state.
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_RECOVERING">
            3: The RTMP streaming is recovering. When exceptions occur to the CDN, or the streaming is interrupted, the SDK tries to resume RTMP streaming and returns this state.
            - If the SDK successfully resumes the streaming, `RTMP_STREAM_PUBLISH_STATE_RUNNING(2)` returns.
            - If the streaming does not resume within 60 seconds or server errors occur, `RTMP_STREAM_PUBLISH_STATE_FAILURE(4)` returns. You can also reconnect to the server by calling the {@link agora_gaming_rtc.IRtcEngine.RemovePublishStreamUrl RemovePublishStreamUrl} and {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} methods.
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_STATE.RTMP_STREAM_PUBLISH_STATE_FAILURE">
            4: The RTMP streaming fails. See the errCode parameter for the detailed error information. You can also call the {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} method to publish the RTMP streaming again.
        </member>
        <member name="T:BlueQuark.RTMP_STREAM_PUBLISH_ERROR">
            Error codes of the RTMP streaming.
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_OK">
            0: The RTMP streaming publishes successfully. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_INVALID_ARGUMENT">
            1: Invalid argument used. If, for example, you do not call the {@link agora_gaming_rtc.IRtcEngine.SetLiveTranscoding SetLiveTranscoding} method to configure the LiveTranscoding parameters before calling the addPublishStreamUrl method, the SDK returns this error. Check whether you set the parameters in the *setLiveTranscoding* method properly. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_ENCRYPTED_STREAM_NOT_ALLOWED">
            2: The RTMP streaming is encrypted and cannot be published. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_CONNECTION_TIMEOUT">
            3: Timeout for the RTMP streaming. Call the {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} method to publish the streaming again. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_INTERNAL_SERVER_ERROR">
            4: An error occurs in Agora's streaming server. Call the {@link agora_gaming_rtc.IRtcEngine.AddPublishStreamUrl AddPublishStreamUrl} method to publish the streaming again. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_RTMP_SERVER_ERROR">
            5: An error occurs in the RTMP server. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_TOO_OFTEN">
            6: The RTMP streaming publishes too frequently. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_REACH_LIMIT">
            7: The host publishes more than 10 URLs. Delete the unnecessary URLs before adding new ones. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_NOT_AUTHORIZED">
            8: The host manipulates other hosts' URLs. Check your app logic. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_STREAM_NOT_FOUND">
            9: Agora's server fails to find the RTMP streaming. 
        </member>
        <member name="F:BlueQuark.RTMP_STREAM_PUBLISH_ERROR.RTMP_STREAM_PUBLISH_ERROR_FORMAT_NOT_SUPPORTED">
            10: The format of the RTMP streaming URL is not supported. Check whether the URL format is correct. 
        </member>
        <member name="T:BlueQuark.NETWORK_TYPE">
            Network type. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_UNKNOWN">
            -1: The network type is unknown. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_DISCONNECTED">
            0: The SDK disconnects from the network. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_LAN">
            1: The network type is LAN. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_WIFI">
            2: The network type is Wi-Fi. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_MOBILE_2G">
            3: The network type is mobile 2G. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_MOBILE_3G">
            4: The network type is mobile 3G. 
        </member>
        <member name="F:BlueQuark.NETWORK_TYPE.NETWORK_TYPE_MOBILE_4G">
            5: The network type is mobile 4G. 
        </member>
        <member name="T:BlueQuark.VOICE_CHANGER_PRESET">
            Local voice changer options. 
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_OFF">
            0: The original voice (no local voice change).
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_OLDMAN">
            1: An old man's voice.
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_BABYBOY">
            2: A little boy's voice.
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_BABYGIRL">
            3: A little girl's voice.
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_ZHUBAJIE">
            4: The voice of a growling bear.
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_ETHEREAL">
            5: Ethereal vocal effects.
        </member>
        <member name="F:BlueQuark.VOICE_CHANGER_PRESET.VOICE_CHANGER_HULK">
            6: Hulk's voice.
        </member>
        <member name="T:BlueQuark.AUDIO_REVERB_PRESET">
            Local voice reverberation presets. 
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_OFF">
            0: The original voice (no local voice reverberation).
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_POPULAR">
            1: Pop music.
        </member>
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_RNB" -->
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_ROCK">
            3: Rock music.
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_HIPHOP">
            4: Hip-hop.
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_VOCAL_CONCERT">
            5: Pop concert.
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_KTV">
            6: Karaoke.
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_PRESET.AUDIO_REVERB_STUDIO">
            7: Recording studio.
        </member>
        <member name="T:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY">
            Audio equalization band frequencies. 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_31">
            0: 31 Hz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_62">
            1: 62 Hz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_125">
            2: 125 Hz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_250">
            3: 250 Hz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_500">
            4: 500 Hz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_1K">
            5: 1 kHz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_2K">
            6: 2 kHz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_4K">
            7: 4 kHz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_8K">
            8: 8 kHz 
        </member>
        <member name="F:BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY.AUDIO_EQUALIZATION_BAND_16K">
            9: 16 kHz 
        </member>
        <member name="T:BlueQuark.QUALITY_ADAPT_INDICATION">
            Quality change of the local video in terms of target frame rate and target bit rate since last count.
        </member>
        <member name="F:BlueQuark.QUALITY_ADAPT_INDICATION.ADAPT_NONE">
            The quality of the local video stays the same. 
        </member>
        <member name="F:BlueQuark.QUALITY_ADAPT_INDICATION.ADAPT_UP_BANDWIDTH">
            The quality improves because the network bandwidth increases. 
        </member>
        <member name="F:BlueQuark.QUALITY_ADAPT_INDICATION.ADAPT_DOWN_BANDWIDTH">
            The quality worsens because the network bandwidth decreases. 
        </member>
        <member name="T:BlueQuark.AUDIO_REVERB_TYPE">
            Audio reverberation types. 
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_TYPE.AUDIO_REVERB_DRY_LEVEL">
            0: The level of the dry signal (db). The value is between -20 and 10. 
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_TYPE.AUDIO_REVERB_WET_LEVEL">
            1: The level of the early reflection signal (wet signal) (dB). The value is between -20 and 10. 
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_TYPE.AUDIO_REVERB_ROOM_SIZE">
            2: The room size of the reflection. The value is between 0 and 100. 
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_TYPE.AUDIO_REVERB_WET_DELAY">
            3: The length of the initial delay of the wet signal (ms). The value is between 0 and 200. 
        </member>
        <member name="F:BlueQuark.AUDIO_REVERB_TYPE.AUDIO_REVERB_STRENGTH">
            4: The reverberation strength. The value is between 0 and 100. 
        </member>
        <member name="T:BlueQuark.AUDIO_CODEC_PROFILE_TYPE">
            Audio codec profile types. The default value is LC_ACC. 
        </member>
        <member name="F:BlueQuark.AUDIO_CODEC_PROFILE_TYPE.AUDIO_CODEC_PROFILE_LC_AAC">
            0: LC-AAC, which is the low-complexity audio codec type. 
        </member>
        <member name="F:BlueQuark.AUDIO_CODEC_PROFILE_TYPE.AUDIO_CODEC_PROFILE_HE_AAC">
            1: HE-AAC, which is the high-efficiency audio codec type. 
        </member>
        <member name="T:BlueQuark.VIDEO_CODEC_TYPE">
            Video codec types 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_TYPE.VIDEO_CODEC_VP8">
            1: Standard VP8. 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_TYPE.VIDEO_CODEC_H264">
            2: Standard H264. 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_TYPE.VIDEO_CODEC_EVP">
            3: Enhanced VP8. 
        </member>
        <member name="F:BlueQuark.VIDEO_CODEC_TYPE.VIDEO_CODEC_E264">
            4: Enhanced H264. 
        </member>
        <member name="T:BlueQuark.RtcStats">
            Statistics of the channel. 
        </member>
        <member name="F:BlueQuark.RtcStats.duration">
            Call duration (s), represented by an aggregate value. 
        </member>
        <member name="F:BlueQuark.RtcStats.txBytes">
            Total number of bytes transmitted, represented by an aggregate value.
        </member>
        <member name="F:BlueQuark.RtcStats.rxBytes">
            Total number of bytes received, represented by an aggregate value.
        </member>
        <member name="F:BlueQuark.RtcStats.txAudioBytes">
            Total number of audio bytes sent (bytes), represented
            by an aggregate value.
        </member>
        <member name="F:BlueQuark.RtcStats.txVideoBytes">
            Total number of video bytes sent (bytes), represented
            by an aggregate value.
        </member>
        <member name="F:BlueQuark.RtcStats.rxAudioBytes">
            Total number of audio bytes received (bytes) before
            network countermeasures, represented by an aggregate value.
        </member>
        <member name="F:BlueQuark.RtcStats.rxVideoBytes">
            Total number of video bytes received (bytes),
            represented by an aggregate value.
        </member>
        <member name="F:BlueQuark.RtcStats.txKBitRate">
            Transmission bitrate (Kbps), represented by an instantaneous value.
        </member>
        <member name="F:BlueQuark.RtcStats.rxKBitRate">
            Receive bitrate (Kbps), represented by an instantaneous value.
        </member>
        <member name="F:BlueQuark.RtcStats.rxAudioKBitRate">
            Audio receive bitrate (Kbps), represented by an instantaneous value.
        </member>
        <member name="F:BlueQuark.RtcStats.txAudioKBitRate">
            Audio transmission bitrate (Kbps), represented by an instantaneous value.
        </member>
        <member name="F:BlueQuark.RtcStats.rxVideoKBitRate">
            Video receive bitrate (Kbps), represented by an instantaneous value.
        </member>
        <member name="F:BlueQuark.RtcStats.txVideoKBitRate">
            Video transmission bitrate (Kbps), represented by an instantaneous value.
        </member>
        <member name="F:BlueQuark.RtcStats.lastmileDelay">
            Client-server latency (ms)
        </member>
        <member name="F:BlueQuark.RtcStats.txPacketLossRate">
            The packet loss rate (%) from the local client to Agora's edge server,
            before using the anti-packet-loss method.
        </member>
        <member name="F:BlueQuark.RtcStats.rxPacketLossRate">
            The packet loss rate (%) from Agora's edge server to the local client,
            before using the anti-packet-loss method.
        </member>
        <member name="F:BlueQuark.RtcStats.userCount">
            Number of users in the channel.
            - Communication profile: The number of users in the channel.
            - Live broadcast profile:
              -  If the local user is an audience: The number of users in the channel = The number of hosts in the channel + 1.
              -  If the user is a host: The number of users in the channel = The number of hosts in the channel.
        </member>
        <member name="F:BlueQuark.RtcStats.cpuAppUsage">
            Application CPU usage (%).
        </member>
        <member name="F:BlueQuark.RtcStats.cpuTotalUsage">
            System CPU usage (%).
        </member>
        <member name="T:BlueQuark.AudioVolumeInfo">
            Properties of the audio volume information.
            
             An array containing the user ID and volume information for each speaker.
        </member>
        <member name="F:BlueQuark.AudioVolumeInfo.uid">
            User ID of the speaker. The `uid` of the local user is 0.
        </member>
        <member name="F:BlueQuark.AudioVolumeInfo.volume">
            The volume of the speaker. The `volume` ranges between 0 (lowest volume) and 255 (highest volume).
        </member>
        <member name="F:BlueQuark.AudioVolumeInfo.vad">
            Voice activity status of the local user.
            - 0: The local user is not speaking.
            - 1: The local user is speaking.
            
            @note
            - The `vad` parameter cannot report the voice activity status of the remote users. In the remote users' callback, `vad` = 0.
            - Ensure that you set `report_vad`(true) in the {@link agora_gaming_rtc.IRtcEngine.EnableAudioVolumeIndication EnableAudioVolumeIndication} method to enable the voice activity detection of the local user.
        </member>
        <member name="T:BlueQuark.LocalVideoStats">
            Statistics of the local video stream. 
        </member>
        <member name="F:BlueQuark.LocalVideoStats.sentBitrate">
            Bitrate (Kbps) sent in the reported interval, which does not include
            the bitrate of the retransmission video after packet loss.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.sentFrameRate">
            Frame rate (fps) sent in the reported interval, which does not include
            the frame rate of the retransmission video after packet loss.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.encoderOutputFrameRate">
            The encoder output frame rate (fps) of the local video.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.rendererOutputFrameRate">
            The render output frame rate (fps) of the local video.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.targetBitrate">
            The target bitrate (Kbps) of the current encoder. This value is estimated by the SDK based on the current network conditions.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.targetFrameRate">
            The target frame rate (fps) of the current encoder.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.qualityAdaptIndication">
            Quality change of the local video in terms of target frame rate and
            target bit rate in this reported interval. See #QUALITY_ADAPT_INDICATION.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.encodedBitrate">
            The encoding bitrate (Kbps), which does not include the bitrate of the
            re-transmission video after packet loss.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.encodedFrameWidth">
            The width of the encoding frame (px).
        </member>
        <member name="F:BlueQuark.LocalVideoStats.encodedFrameHeight">
            The height of the encoding frame (px).
        </member>
        <member name="F:BlueQuark.LocalVideoStats.encodedFrameCount">
            The value of the sent frames, represented by an aggregate value.
        </member>
        <member name="F:BlueQuark.LocalVideoStats.codecType">
            The codec type of the local video:
            - VIDEO_CODEC_VP8 = 1: VP8.
            - VIDEO_CODEC_H264 = 2: (Default) H.264.
        </member>
        <member name="T:BlueQuark.RemoteVideoStats">
            Statistics of the remote video stream. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.uid">
            User ID of the remote user sending the video streams. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.delay">
            **DEPRECATED** Time delay (ms). 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.width">
            Width (pixels) of the video stream. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.height">
            Height (pixels) of the video stream. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.receivedBitrate">
            Bitrate (Kbps) received since the last count. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.decoderOutputFrameRate">
            The decoder output frame rate (fps) of the remote video. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.rendererOutputFrameRate">
            The render output frame rate (fps) of the remote video. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.rxStreamType">
            The remote video stream type, see #REMOTE_VIDEO_STREAM_TYPE.
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.packetLossRate">
            Packet loss rate (%) of the remote video stream after using the anti-packet-loss method. 
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.totalFrozenTime">
            The total freeze time (ms) of the remote video stream after the remote user joins the channel.
            In a video session where the frame rate is set to no less than 5 fps, video freeze occurs when the time interval between two adjacent renderable video frames is more than 500 ms.
        </member>
        <member name="F:BlueQuark.RemoteVideoStats.frozenRate">
            The total video freeze time as a percentage (%) of the total time when the video is available. 
        </member>
        <member name="T:BlueQuark.RemoteAudioStats">
            Audio statistics of a remote user 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.uid">
            User ID of the remote user sending the audio streams. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.quality">
            Audio quality received by the user. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.networkTransportDelay">
            Network delay (ms) from the sender to the receiver. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.jitterBufferDelay">
            Network delay (ms) from the receiver to the jitter buffer. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.audioLossRate">
            The audio frame loss rate in the reported interval. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.numChannels">
            The number of channels. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.receivedSampleRate">
            The sample rate (Hz) of the received audio stream in the reported interval. 
        </member>
        <member name="F:BlueQuark.RemoteAudioStats.receivedBitrate">
            The average bitrate (Kbps) of the received audio stream in the reported interval. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.RemoteAudioStats.totalFrozenTime" -->
        <member name="F:BlueQuark.RemoteAudioStats.frozenRate">
            The total audio freeze time as a percentage (%) of the total time when the audio is available. 
        </member>
        <member name="T:BlueQuark.WatermarkOptions">
            The options of the watermark image to be added. 
        </member>
        <member name="F:BlueQuark.WatermarkOptions.visibleInPreview">
            Sets whether or not the watermark image is visible in the local video preview: 
            - true: The watermark image is visible in preview.
            - false: The watermark image is not visible in preview. 
        </member>
        <member name="F:BlueQuark.WatermarkOptions.positionInLandscapeMode">
            The watermark position in the landscape mode. See Rectangle.
            For detailed information on the landscape mode, see *Rotate the video*.
        </member>
        <member name="F:BlueQuark.WatermarkOptions.positionInPortraitMode">
            The watermark position in the portrait mode. See Rectangle.
            For detailed information on the portrait mode, see *Rotate the video*.
        </member>
        <member name="T:BlueQuark.LocalAudioStats">
            Audio statistics of the local user. 
        </member>
        <member name="F:BlueQuark.LocalAudioStats.numChannels">
            The number of channels.
        </member>
        <member name="F:BlueQuark.LocalAudioStats.sentSampleRate">
            The sample rate (Hz).
        </member>
        <member name="F:BlueQuark.LocalAudioStats.sentBitrate">
            The average sending bitrate (Kbps).
        </member>
        <member name="T:BlueQuark.VideoEncoderConfiguration">
            Video encoder configurations. 
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.dimensions">
            The video frame dimension used to specify the video quality and measured by the total number of pixels along a frame's width and height: VideoDimensions.
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.frameRate">
            The frame rate of the video: #FRAME_RATE.
            
             Note that we do not recommend setting this to a value greater than 30.
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.minFrameRate">
            The minimum frame rate of the video. The default value is -1.
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.bitrate">
            The video encoding bitrate (Kbps).
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.minBitrate">
            The minimum encoding bitrate (Kbps).
            
            The SDK automatically adjusts the encoding bitrate to adapt to the network conditions. Using a value greater than the default value forces the video encoder to output high-quality images but may cause more packet loss and hence sacrifice the smoothness of the video transmission. That said, unless you have special requirements for image quality, Agora does not recommend changing this value.
            
            @note This parameter applies only to the Live-broadcast profile.
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.orientationMode">
            The video orientation mode of the video: #ORIENTATION_MODE.
        </member>
        <member name="F:BlueQuark.VideoEncoderConfiguration.degradationPreference">
            The video encoding degradation preference under limited bandwidth: #DEGRADATION_PREFERENCE.
        </member>
        <member name="T:BlueQuark.VideoDimensions">
            Video dimensions. 
        </member>
        <member name="F:BlueQuark.VideoDimensions.width">
            Width (pixels) of the video. 
        </member>
        <member name="F:BlueQuark.VideoDimensions.height">
            Height (pixels) of the video. 
        </member>
        <member name="T:BlueQuark.TranscodingUser">
            The video properties of the user displaying the video in the CDN live. Agora supports a maximum of 17 transcoding users in a CDN streaming channel. 
        </member>
        <member name="F:BlueQuark.TranscodingUser.uid">
            User ID of the user displaying the video in the CDN live.
        </member>
        <member name="F:BlueQuark.TranscodingUser.x">
            Horizontal position from the top left corner of the video frame.
        </member>
        <member name="F:BlueQuark.TranscodingUser.y">
            Vertical position from the top left corner of the video frame.
        </member>
        <member name="F:BlueQuark.TranscodingUser.width">
            Width of the video frame. The default value is 360.
        </member>
        <member name="F:BlueQuark.TranscodingUser.height">
            Height of the video frame. The default value is 640.
        </member>
        <member name="F:BlueQuark.TranscodingUser.zOrder">
            Layer position of the video frame. The value ranges between 0 and 100.
            - 0: (Default) Lowest
            - 100: Highest
            
            @note
            - If zOrder is beyond this range, the SDK reports `ERR_INVALID_ARGUMENT(2)`.
            - As of v2.3, the SDK supports zOrder = 0.
        </member>
        <member name="F:BlueQuark.TranscodingUser.alpha">
             Transparency of the video frame in CDN live. The value ranges between 0 and 1.0:
            - 0: Completely transparent
            - 1.0: (Default) Opaque
        </member>
        <member name="F:BlueQuark.TranscodingUser.audioChannel">
            The audio channel of the sound. The default value is 0:
            - 0: (Default) Supports dual channels at most, depending on the upstream of the broadcaster.
            - 1: The audio stream of the broadcaster uses the FL audio channel. If the upstream of the broadcaster uses multiple audio channels, these channels will be mixed into mono first.
            - 2: The audio stream of the broadcaster uses the FC audio channel. If the upstream of the broadcaster uses multiple audio channels, these channels will be mixed into mono first.
            - 3: The audio stream of the broadcaster uses the FR audio channel. If the upstream of the broadcaster uses multiple audio channels, these channels will be mixed into mono first.
            - 4: The audio stream of the broadcaster uses the BL audio channel. If the upstream of the broadcaster uses multiple audio channels, these channels will be mixed into mono first.
            - 5: The audio stream of the broadcaster uses the BR audio channel. If the upstream of the broadcaster uses multiple audio channels, these channels will be mixed into mono first.
            
            @note If your setting is not 0, you may need a specialized player.
        </member>
        <member name="T:BlueQuark.RtcImage">
            Image properties.
            
            The properties of the watermark and background images.
        </member>
        <member name="F:BlueQuark.RtcImage.url">
            HTTP/HTTPS URL address of the image on the broadcasting video. The maximum length of this parameter is 1024 bytes. 
        </member>
        <member name="F:BlueQuark.RtcImage.x">
            Horizontal position of the image from the upper left of the broadcasting video. 
        </member>
        <member name="F:BlueQuark.RtcImage.y">
            Vertical position of the image from the upper left of the broadcasting video. 
        </member>
        <member name="F:BlueQuark.RtcImage.width">
            Width of the image on the broadcasting video. 
        </member>
        <member name="F:BlueQuark.RtcImage.height">
            Height of the image on the broadcasting video. 
        </member>
        <member name="T:BlueQuark.LiveTranscoding">
            A struct for managing CDN live audio/video transcoding settings. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.LiveTranscoding.width" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.LiveTranscoding.height" -->
        <member name="F:BlueQuark.LiveTranscoding.videoBitrate">
            Bitrate of the CDN live output video stream. The default value is 400 Kbps.
            
            Set this parameter according to the Video Bitrate Table. If you set a bitrate beyond the proper range, the SDK automatically adapts it to a value within the range.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.videoFramerate">
            Frame rate of the output video stream set for the CDN live broadcast. The default value is 15 fps, and the value range is (0,30].
            
            @note Agora adjusts all values over 30 to 30.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.lowLatency">
            **DEPRECATED** Latency mode:
            - true: Low latency with unassured quality.
            - false: (Default) High latency with assured quality.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.videoGop">
            Video GOP in frames. The default value is 30 fps.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.videoCodecProfile">
            Self-defined video codec profile: #VIDEO_CODEC_PROFILE_TYPE.
            
            @note If you set this parameter to other values, Agora adjusts it to the default value of 100.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.backgroundColor">
            The background color in RGB hex value. Value only, do not include a #. For example, 0xFFB6C1 (light pink). The default value is 0x000000 (black).
        </member>
        <member name="F:BlueQuark.LiveTranscoding.userCount">
            The number of users in the live broadcast.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.transcodingUsers">
            TranscodingUser.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.transcodingExtraInfo">
            Reserved property. Extra user-defined information to send SEI for the H.264/H.265 video stream to the CDN live client. Maximum length: 4096 Bytes.
            
             For more information on SEI frame, see [SEI-related questions](https://docs.agora.io/en/faq/sei).
        </member>
        <member name="F:BlueQuark.LiveTranscoding.metadata">
            **DEPRECATED** The metadata sent to the CDN live client defined by the RTMP or FLV metadata.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.watermark">
            The watermark image added to the CDN live publishing stream.
            
             Ensure that the format of the image is PNG. Once a watermark image is added, the audience of the CDN live publishing stream can see the watermark image. See RtcImage.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.backgroundImage">
            The background image added to the CDN live publishing stream.
            
            Once a background image is added, the audience of the CDN live publishing stream can see the background image. See RtcImage.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.audioSampleRate">
            Self-defined audio-sample rate: #AUDIO_SAMPLE_RATE_TYPE.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.audioBitrate">
            Bitrate of the CDN live audio output stream. The default value is 48 Kbps, and the highest value is 128.
        </member>
        <member name="F:BlueQuark.LiveTranscoding.audioChannels">
            Agora's self-defined audio-channel types. We recommend choosing option 1 or 2. A special player is required if you choose option 3, 4, or 5:
            - 1: (Default) Mono
            - 2: Two-channel stereo
            - 3: Three-channel stereo
            - 4: Four-channel stereo
            - 5: Five-channel stereo
        </member>
        <member name="F:BlueQuark.LiveTranscoding.audioCodecProfile">
            Self-defined audio codec profile: #AUDIO_CODEC_PROFILE_TYPE.
        </member>
        <member name="T:BlueQuark.FRAME_RATE">
            Video frame rates. 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_1">
            1: 1 fps 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_7">
            7: 7 fps 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_10">
            10: 10 fps 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_15">
            15: 15 fps 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_24">
            24: 24 fps 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_30">
            30: 30 fps 
        </member>
        <member name="F:BlueQuark.FRAME_RATE.FRAME_RATE_FPS_60">
            60: 60 fps (Windows and macOS only) 
        </member>
        <member name="T:BlueQuark.ORIENTATION_MODE">
            Video output orientation modes.
        </member>
        <member name="F:BlueQuark.ORIENTATION_MODE.ORIENTATION_MODE_ADAPTIVE">
            0: (Default) Adaptive mode.
            
            The video encoder adapts to the orientation mode of the video input device.
            - If the width of the captured video from the SDK is greater than the height, the encoder sends the video in landscape mode. The encoder also sends the rotational information of the video, and the receiver uses the rotational information to rotate the received video.
            - When you use a custom video source, the output video from the encoder inherits the orientation of the original video. If the original video is in portrait mode, the output video from the encoder is also in portrait mode. The encoder also sends the rotational information of the video to the receiver.
        </member>
        <member name="F:BlueQuark.ORIENTATION_MODE.ORIENTATION_MODE_FIXED_LANDSCAPE">
            1: Landscape mode.
            
            The video encoder always sends the video in landscape mode. The video encoder rotates the original video before sending it and the rotational infomation is 0. This mode applies to scenarios involving CDN live streaming.
        </member>
        <member name="F:BlueQuark.ORIENTATION_MODE.ORIENTATION_MODE_FIXED_PORTRAIT">
            2: Portrait mode.
            
            The video encoder always sends the video in portrait mode. The video encoder rotates the original video before sending it and the rotational infomation is 0. This mode applies to scenarios involving CDN live streaming.
        </member>
        <member name="T:BlueQuark.DEGRADATION_PREFERENCE">
            Video degradation preferences when the bandwidth is a constraint. 
        </member>
        <member name="F:BlueQuark.DEGRADATION_PREFERENCE.MAINTAIN_QUALITY">
            0: (Default) Degrade the frame rate in order to maintain the video quality. 
        </member>
        <member name="F:BlueQuark.DEGRADATION_PREFERENCE.MAINTAIN_FRAMERATE">
            1: Degrade the video quality in order to maintain the frame rate. 
        </member>
        <member name="F:BlueQuark.DEGRADATION_PREFERENCE.MAINTAIN_BALANCED">
            2: (For future use) Maintain a balance between the frame rate and video quality. 
        </member>
        <member name="T:BlueQuark.ExternalVideoFrame">
            The external video frame. 
        </member>
        <member name="T:BlueQuark.ExternalVideoFrame.VIDEO_BUFFER_TYPE">
            The video buffer type.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.VIDEO_BUFFER_TYPE.VIDEO_BUFFER_RAW_DATA">
            1: The video buffer in the format of raw data.
        </member>
        <member name="T:BlueQuark.ExternalVideoFrame.VIDEO_PIXEL_FORMAT">
            The video pixel format.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_UNKNOWN">
            0: The video pixel format is unknown.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_I420">
            1: The video pixel format is I420.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_BGRA">
            2: The video pixel format is BGRA.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_NV12">
            8: The video pixel format is NV12.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.VIDEO_PIXEL_FORMAT.VIDEO_PIXEL_I422">
            16: The video pixel format is I422.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.type">
            The buffer type. See #VIDEO_BUFFER_TYPE.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.format">
            The pixel format. See #VIDEO_PIXEL_FORMAT.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.buffer">
            The video buffer.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.stride">
            Line spacing of the incoming video frame, which must be in pixels instead of bytes. For textures, it is the width of the texture.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.height">
            Height of the incoming video frame.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.cropLeft">
            [Raw data related parameter] The number of pixels trimmed from the left. The default value is 0.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.cropTop">
            [Raw data related parameter] The number of pixels trimmed from the top. The default value is 0.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.cropRight">
            [Raw data related parameter] The number of pixels trimmed from the right. The default value is 0.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.cropBottom">
            [Raw data related parameter] The number of pixels trimmed from the bottom. The default value is 0.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.rotation">
            [Raw data related parameter] The clockwise rotation of the video frame. You can set the rotation angle as 0, 90, 180, or 270. The default value is 0.
        </member>
        <member name="F:BlueQuark.ExternalVideoFrame.timestamp">
            Timestamp of the incoming video frame (ms). An incorrect timestamp results in frame loss or unsynchronized audio and video.
        </member>
        <member name="T:BlueQuark.VIDEO_FRAME_TYPE">
            The video frame type. 
        </member>
        <member name="F:BlueQuark.VIDEO_FRAME_TYPE.FRAME_TYPE_YUV420">
            0: YUV420. 
        </member>
        <member name="F:BlueQuark.VIDEO_FRAME_TYPE.FRAME_TYPE_RGBA">
            1: RGBA. 
        </member>
        <member name="T:BlueQuark.VideoFrame">
            Video frame containing the Agora SDK's encoded video data. 
        </member>
        <member name="F:BlueQuark.VideoFrame.type">
            The video frame type: #VIDEO_FRAME_TYPE. 
        </member>
        <member name="F:BlueQuark.VideoFrame.width">
            Width (pixel) of the video frame.
        </member>
        <member name="F:BlueQuark.VideoFrame.height">
            Height (pixel) of the video frame. 
        </member>
        <member name="F:BlueQuark.VideoFrame.yStride">
            Line span of the Y buffer within the video data. 
        </member>
        <member name="F:BlueQuark.VideoFrame.buffer">
            The buffer of the RGBA data. 
        </member>
        <member name="F:BlueQuark.VideoFrame.rotation">
            Set the rotation of this frame before rendering the video. Supports 0, 90, 180, 270 degrees clockwise.
        </member>
        <member name="F:BlueQuark.VideoFrame.renderTimeMs">
            The timestamp of the external audio frame. It is mandatory. You can use this parameter for the following purposes:
             - Restore the order of the captured audio frame.
             - Synchronize audio and video frames in video-related scenarios, including scenarios where external video sources are used.
            
             @note This timestamp is for rendering the video stream, and not for capturing the video stream.
        </member>
        <member name="F:BlueQuark.VideoFrame.avsync_type">
            Reserved parameter. 
        </member>
        <member name="T:BlueQuark.AUDIO_FRAME_TYPE">
            The audio frame type. 
        </member>
        <member name="F:BlueQuark.AUDIO_FRAME_TYPE.FRAME_TYPE_PCM16">
            0: PCM16. 
        </member>
        <member name="T:BlueQuark.AudioFrame">
            Definition of AudioFrame. 
        </member>
        <member name="F:BlueQuark.AudioFrame.type">
            The type of the audio frame. See #AUDIO_FRAME_TYPE
        </member>
        <member name="F:BlueQuark.AudioFrame.samples">
            The number of samples per channel in the audio frame.
        </member>
        <member name="F:BlueQuark.AudioFrame.bytesPerSample">
            The number of bytes per audio sample, which is usually 16-bit (2-byte).
        </member>
        <member name="F:BlueQuark.AudioFrame.channels">
            The number of audio channels.
            - 1: Mono
            - 2: Stereo (the data is interleaved)
        </member>
        <member name="F:BlueQuark.AudioFrame.samplesPerSec">
            The sample rate.
        </member>
        <member name="F:BlueQuark.AudioFrame.buffer">
            The data buffer of the audio frame. When the audio frame uses a stereo channel, the data buffer is interleaved. 
            The size of the data buffer is as follows: `buffer` = `samples` × `channels` × `bytesPerSample`.
        </member>
        <member name="F:BlueQuark.AudioFrame.renderTimeMs">
            The timestamp of the external audio frame. You can use this parameter for the following purposes:
            - Restore the order of the captured audio frame.
            - Synchronize audio and video frames in video-related scenarios, including where external video sources are used.
        </member>
        <member name="F:BlueQuark.AudioFrame.avsync_type">
            Reserved parameter.
        </member>
        <member name="T:BlueQuark.MEDIA_SOURCE_TYPE">
            **DEPRECATED** Type of audio device.
        </member>
        <member name="F:BlueQuark.MEDIA_SOURCE_TYPE.AUDIO_PLAYOUT_SOURCE">
            0: Audio playback device.
        </member>
        <member name="F:BlueQuark.MEDIA_SOURCE_TYPE.AUDIO_RECORDING_SOURCE">
            1: Microphone.
        </member>
        <member name="T:BlueQuark.LASTMILE_PROBE_RESULT_STATE">
            States of the last-mile network probe test. 
        </member>
        <member name="F:BlueQuark.LASTMILE_PROBE_RESULT_STATE.LASTMILE_PROBE_RESULT_COMPLETE">
            1: The last-mile network probe test is complete. 
        </member>
        <member name="F:BlueQuark.LASTMILE_PROBE_RESULT_STATE.LASTMILE_PROBE_RESULT_INCOMPLETE_NO_BWE">
            2: The last-mile network probe test is incomplete and the bandwidth estimation is not available, probably due to limited test resources. 
        </member>
        <member name="F:BlueQuark.LASTMILE_PROBE_RESULT_STATE.LASTMILE_PROBE_RESULT_UNAVAILABLE">
            3: The last-mile network probe test is not carried out, probably due to poor network conditions. 
        </member>
        <member name="T:BlueQuark.LastmileProbeOneWayResult">
            The uplink or downlink last-mile network probe test result. 
        </member>
        <member name="F:BlueQuark.LastmileProbeOneWayResult.packetLossRate">
            The packet loss rate (%). 
        </member>
        <member name="F:BlueQuark.LastmileProbeOneWayResult.jitter">
            The network jitter (ms). 
        </member>
        <member name="F:BlueQuark.LastmileProbeOneWayResult.availableBandwidth">
            The estimated available bandwidth (Kbps). 
        </member>
        <member name="T:BlueQuark.LastmileProbeResult">
            The uplink and downlink last-mile network probe test result. 
        </member>
        <member name="F:BlueQuark.LastmileProbeResult.state">
            The state of the probe test. 
        </member>
        <member name="F:BlueQuark.LastmileProbeResult.uplinkReport">
            The uplink last-mile network probe test result. 
        </member>
        <member name="F:BlueQuark.LastmileProbeResult.downlinkReport">
            The downlink last-mile network probe test result. 
        </member>
        <member name="F:BlueQuark.LastmileProbeResult.rtt">
            The round-trip delay time (ms). 
        </member>
        <member name="T:BlueQuark.CAMERA_DIRECTION">
            The camera direction: #CAMERA_DIRECTION. 
        </member>
        <member name="F:BlueQuark.CAMERA_DIRECTION.CAMERA_REAR">
            0: The rear camera. 
        </member>
        <member name="F:BlueQuark.CAMERA_DIRECTION.CAMERA_FRONT">
            1: The front camera. 
        </member>
        <member name="T:BlueQuark.CameraCapturerConfiguration">
            Camera capturer configuration.
        </member>
        <member name="F:BlueQuark.CameraCapturerConfiguration.preference">
            Camera capturer preference settings.See: #CAPTURER_OUTPUT_PREFERENCE. 
        </member>
        <member name="F:BlueQuark.CameraCapturerConfiguration.cameraDirection">
            Camera direction settings (for Android/iOS only). See: #CAMERA_DIRECTION. 
        </member>
        <member name="T:BlueQuark.CAPTURER_OUTPUT_PREFERENCE">
            Camera capturer configuration.
        </member>
        <member name="F:BlueQuark.CAPTURER_OUTPUT_PREFERENCE.CAPTURER_OUTPUT_PREFERENCE_AUTO">
            0: (Default) self-adapts the camera output parameters to the system performance and network conditions to balance CPU consumption and video preview quality.
        </member>
        <member name="F:BlueQuark.CAPTURER_OUTPUT_PREFERENCE.CAPTURER_OUTPUT_PREFERENCE_PERFORMANCE">
            1: Prioritizes the system performance. The SDK chooses the dimension and frame rate of the local camera capture closest to those set by {@link agora_gaming_rtc.IRtcEngine.SetVideoEncoderConfiguration SetVideoEncoderConfiguration}.
        </member>
        <member name="F:BlueQuark.CAPTURER_OUTPUT_PREFERENCE.CAPTURER_OUTPUT_PREFERENCE_PREVIEW">
            2: Prioritizes the local preview quality. The SDK chooses higher camera output parameters to improve the local video preview quality. This option requires extra CPU and RAM usage for video pre-processing.
        </member>
        <member name="T:BlueQuark.QUALITY_TYPE">
            Network quality types. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_UNKNOWN">
            0: The network quality is unknown. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_EXCELLENT">
             1: The network quality is excellent. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_GOOD">
            2: The network quality is quite good, but the bitrate may be slightly lower than excellent. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_POOR">
            3: Users can feel the communication slightly impaired. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_BAD">
            4: Users cannot communicate smoothly. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_VBAD">
            5: The network is so bad that users can barely communicate. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_DOWN">
            6: The network is down and users cannot communicate at all. 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_UNSUPPORTED">
            7: Users cannot detect the network quality. (Not in use.) 
        </member>
        <member name="F:BlueQuark.QUALITY_TYPE.QUALITY_DETECTING">
            8: Detecting the network quality. 
        </member>
        <member name="T:BlueQuark.MEDIA_DEVICE_STATE_TYPE">
            Media device states.
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_STATE_TYPE.MEDIA_DEVICE_STATE_ACTIVE">
            1: The device is active.
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_STATE_TYPE.MEDIA_DEVICE_STATE_DISABLED">
            2: The device is disabled.
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_STATE_TYPE.MEDIA_DEVICE_STATE_NOT_PRESENT">
            4: The device is not present.
        </member>
        <member name="F:BlueQuark.MEDIA_DEVICE_STATE_TYPE.MEDIA_DEVICE_STATE_UNPLUGGED">
            8: The device is unplugged.
        </member>
        <member name="T:BlueQuark.INJECT_STREAM_STATUS">
            States of importing an external video stream in a live broadcast. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_START_SUCCESS">
            0: The external video stream imported successfully. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_START_ALREADY_EXISTS">
            1: The external video stream already exists. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_START_UNAUTHORIZED">
            2: The external video stream to be imported is unauthorized. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_START_TIMEDOUT">
            3: Import external video stream timeout. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_START_FAILED">
            4: Import external video stream failed. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_STOP_SUCCESS">
            5: The external video stream stopped importing successfully. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_STOP_NOT_FOUND">
            6: No external video stream is found. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_STOP_UNAUTHORIZED">
            7: The external video stream to be stopped importing is unauthorized. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_STOP_TIMEDOUT">
            8: Stop importing external video stream timeout. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_STOP_FAILED">
            9: Stop importing external video stream failed. 
        </member>
        <member name="F:BlueQuark.INJECT_STREAM_STATUS.INJECT_STREAM_STATUS_BROKEN">
            10: The external video stream is corrupted. 
        </member>
        <member name="T:BlueQuark.PRIORITY_TYPE">
            The priority of the remote user.
        </member>
        <member name="F:BlueQuark.PRIORITY_TYPE.PRIORITY_HIGH">
            50: The user's priority is high.
        </member>
        <member name="F:BlueQuark.PRIORITY_TYPE.PRIORITY_NORMAL">
            100: (Default) The user's priority is normal.
        </member>
        <member name="T:BlueQuark.LastmileProbeConfig">
            Configurations of the last-mile network probe test. 
        </member>
        <member name="F:BlueQuark.LastmileProbeConfig.probeUplink">
            Sets whether or not to test the uplink network. Some users, for example, the audience in a Live-broadcast channel, do not need such a test:
            - true: test.
            - false: do not test.
        </member>
        <member name="F:BlueQuark.LastmileProbeConfig.probeDownlink">
            Sets whether or not to test the downlink network:
            - true: test.
            - false: do not test. 
        </member>
        <member name="F:BlueQuark.LastmileProbeConfig.expectedUplinkBitrate">
            The expected maximum sending bitrate (Kbps) of the local user. The value ranges between 100 and 5000. We recommend setting this parameter according to the bitrate value set by {@link agora_gaming_rtc.IRtcEngine.SetVideoEncoderConfiguration SetVideoEncoderConfiguration}. 
        </member>
        <member name="F:BlueQuark.LastmileProbeConfig.expectedDownlinkBitrate">
            The expected maximum receiving bitrate (Kbps) of the local user. The value ranges between 100 and 5000. 
        </member>
        <member name="T:BlueQuark.PublisherConfiguration">
            **DEPRECATED** 
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.width">
            Width of the CDN live output video stream. The default value is 360.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.height">
            Height of the CDN live output video stream. The default value is 640.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.framerate">
            Frame rate of the CDN live output video stream. The default value is 15 fps.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.bitrate">
            Bitrate of the CDN live output video stream. The default value is 500 Kbps.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.defaultLayout">
            Default layout:
            - 0: Tile horizontally
            - 1: Layered windows
            - 2: Tile vertically
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.lifecycle">
            Video stream lifecycle of CDN live.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.owner">
            Whether or not the current user is the owner of the RTMP stream:
            - true: (Default) Yes. The push-stream configuration takes effect.
            - false: No. The push-stream configuration does not work.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.injectStreamWidth">
            Width of the injected stream. N/A. Set it as 0.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.injectStreamHeight">
            Height of the injected stream. N/A. Set it as 0.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.injectStreamUrl">
            URL address of the injected stream in the channel. N/A.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.publishUrl">
            Push-stream URL address for the picture-in-picture layout. The default value is NULL.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.rawStreamUrl">
            The push-stream URL address of the original stream that does not require picture-blending. The default value is NULL.
        </member>
        <member name="F:BlueQuark.PublisherConfiguration.extraInfo">
            Reserved field. The default value is NULL.
        </member>
        <member name="T:BlueQuark.Packet">
            Definition of Packet. 
        </member>
        <member name="F:BlueQuark.Packet.buffer">
            Buffer address of the sent or received data.
            @note Agora recommends that the value of buffer is more than 2048 bytes, otherwise, you may meet undefined behaviors such as a crash.
        </member>
        <member name="F:BlueQuark.Packet.size">
            Buffer size of the sent or received data.
        </member>
        <member name="T:BlueQuark.LOCAL_AUDIO_STREAM_STATE">
            Local audio state types.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_STATE.LOCAL_AUDIO_STREAM_STATE_STOPPED">
            0: The local audio is in the initial state.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_STATE.LOCAL_AUDIO_STREAM_STATE_RECORDING">
            1: The recording device starts successfully.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_STATE.LOCAL_AUDIO_STREAM_STATE_ENCODING">
            2: The first audio frame encodes successfully.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_STATE.LOCAL_AUDIO_STREAM_STATE_FAILED">
            3: The local audio fails to start.
        </member>
        <member name="T:BlueQuark.LOCAL_AUDIO_STREAM_ERROR">
            Local audio state error codes.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_OK">
            0: The local audio is normal.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_FAILURE">
            1: No specified reason for the local audio failure.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_DEVICE_NO_PERMISSION">
            2: No permission to use the local audio device.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_DEVICE_BUSY">
            3: The microphone is in use.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_RECORD_FAILURE">
            4: The local audio recording fails. Check whether the recording device
            is working properly.
        </member>
        <member name="F:BlueQuark.LOCAL_AUDIO_STREAM_ERROR.LOCAL_AUDIO_STREAM_ERROR_ENCODE_FAILURE">
            5: The local audio encoding fails.
        </member>
        <member name="T:BlueQuark.REMOTE_AUDIO_STATE">
            Remote audio states.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_STOPPED">
            0: The remote audio is in the default state, probably due to
            `REMOTE_AUDIO_REASON_LOCAL_MUTED(3)`,
            `REMOTE_AUDIO_REASON_REMOTE_MUTED(5)`, or
            `REMOTE_AUDIO_REASON_REMOTE_OFFLINE(7)`.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_STARTING">
            1: The first remote audio packet is received.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_DECODING">
            2: The remote audio stream is decoded and plays normally, probably
            due to `REMOTE_AUDIO_REASON_NETWORK_RECOVERY(2)`,
            `REMOTE_AUDIO_REASON_LOCAL_UNMUTED`(4)`, or
            `REMOTE_AUDIO_REASON_REMOTE_UNMUTED(6)`.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_FROZEN">
            3: The remote audio is frozen, probably due to
            `REMOTE_AUDIO_REASON_NETWORK_CONGESTION(1)`.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE.REMOTE_AUDIO_STATE_FAILED">
            4: The remote audio fails to start, probably due to
            `REMOTE_AUDIO_REASON_INTERNAL(0)`.
        </member>
        <member name="T:BlueQuark.REMOTE_AUDIO_STATE_REASON">
            Remote audio state reasons.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_INTERNAL">
            0: Internal reasons.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_NETWORK_CONGESTION">
            1: Network congestion.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_NETWORK_RECOVERY">
            2: Network recovery.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_LOCAL_MUTED">
            3: The local user stops receiving the remote audio stream or
            disables the audio module.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_LOCAL_UNMUTED">
            4: The local user resumes receiving the remote audio stream or
            enables the audio module.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_REMOTE_MUTED">
            5: The remote user stops sending the audio stream or disables the
            audio module.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_REMOTE_UNMUTED">
            6: The remote user resumes sending the audio stream or enables the
            audio module.
        </member>
        <member name="F:BlueQuark.REMOTE_AUDIO_STATE_REASON.REMOTE_AUDIO_REASON_REMOTE_OFFLINE">
            7: The remote user leaves the channel.
        </member>
        <member name="T:BlueQuark.BeautyOptions">
            Image enhancement options. 
        </member>
        <member name="T:BlueQuark.BeautyOptions.LIGHTENING_CONTRAST_LEVEL">
            The contrast level, used with the @p lightening parameter.
        </member>
        <member name="F:BlueQuark.BeautyOptions.LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_LOW">
            Low contrast level. 
        </member>
        <member name="F:BlueQuark.BeautyOptions.LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_NORMAL">
            (Default) Normal contrast level. 
        </member>
        <member name="F:BlueQuark.BeautyOptions.LIGHTENING_CONTRAST_LEVEL.LIGHTENING_CONTRAST_HIGH">
            High contrast level. 
        </member>
        <member name="F:BlueQuark.BeautyOptions.lighteningContrastLevel">
            The contrast level, used with the `lightening` parameter.
        </member>
        <member name="F:BlueQuark.BeautyOptions.lighteningLevel">
            The brightness level. The value ranges from 0.0 (original) to 1.0. 
        </member>
        <member name="F:BlueQuark.BeautyOptions.smoothnessLevel">
            The sharpness level. The value ranges between 0 (original) and 1. This parameter is usually used to remove blemishes.
        </member>
        <member name="F:BlueQuark.BeautyOptions.rednessLevel">
            The redness level. The value ranges between 0 (original) and 1. This parameter adjusts the red saturation level.
        </member>
        <member name="T:BlueQuark.Rectangle">
            The relative location of the region to the screen or window. 
        </member>
        <member name="F:BlueQuark.Rectangle.x">
            The horizontal offset from the top-left corner.
        </member>
        <member name="F:BlueQuark.Rectangle.y">
            The vertical offset from the top-left corner.
        </member>
        <member name="F:BlueQuark.Rectangle.width">
            The width of the region.
        </member>
        <member name="F:BlueQuark.Rectangle.height">
            The height of the region.
        </member>
        <member name="T:BlueQuark.ScreenCaptureParameters">
            Screen sharing encoding parameters.
        </member>
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.ScreenCaptureParameters.dimensions" -->
        <member name="F:BlueQuark.ScreenCaptureParameters.frameRate">
            The frame rate (fps) of the shared region.
            
            The default value is 5. We do not recommend setting this to a value greater than 15.
        </member>
        <member name="F:BlueQuark.ScreenCaptureParameters.bitrate">
            The bitrate (Kbps) of the shared region.
            
            The default value is 0 (the SDK works out a bitrate according to the dimensions of the current screen).
        </member>
        <member name="F:BlueQuark.ScreenCaptureParameters.captureMouseCursor">
            Sets whether or not to capture the mouse for screen sharing:
            - true: (Default) Capture the mouse.
            - false: Do not capture the mouse.
        </member>
        <member name="T:BlueQuark.InjectStreamConfig">
            Configuration of the imported live broadcast voice or video stream.
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.width">
            Width of the added stream in the live broadcast. The default value is 0 (same width as the original stream).
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.height">
            Height of the added stream in the live broadcast. The default value is 0 (same height as the original stream).
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.videoGop">
            Video GOP of the added stream in the live broadcast in frames. The default value is 30 fps.
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.videoFramerate">
            Video frame rate of the added stream in the live broadcast. The default value is 15 fps.
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.videoBitrate">
            Video bitrate of the added stream in the live broadcast. The default value is 400 Kbps.
            
             @note The setting of the video bitrate is closely linked to the resolution. If the video bitrate you set is beyond a reasonable range, the SDK sets it within a reasonable range.
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.audioSampleRate">
            Audio-sample rate of the added stream in the live broadcast: #AUDIO_SAMPLE_RATE_TYPE. The default value is 48000 Hz.
            
             @note We recommend setting the default value.
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.audioBitrate">
            Audio bitrate of the added stream in the live broadcast. The default value is 48.
            
             @note We recommend setting the default value.
        </member>
        <member name="F:BlueQuark.InjectStreamConfig.audioChannels">
            Audio channels in the live broadcast.
             - 1: (Default) Mono
             - 2: Two-channel stereo
            
             @note We recommend setting the default value.
        </member>
        <member name="T:BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION">
            Audio session restriction. 
        </member>
        <member name="F:BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION.AUDIO_SESSION_OPERATION_RESTRICTION_NONE">
            No restriction, the SDK has full control of the audio session operations. 
        </member>
        <member name="F:BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION.AUDIO_SESSION_OPERATION_RESTRICTION_SET_CATEGORY">
            The SDK does not change the audio session category. 
        </member>
        <member name="F:BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION.AUDIO_SESSION_OPERATION_RESTRICTION_CONFIGURE_SESSION">
            The SDK does not change any setting of the audio session (category, mode, categoryOptions). 
        </member>
        <member name="F:BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION.AUDIO_SESSION_OPERATION_RESTRICTION_DEACTIVATE_SESSION">
            The SDK keeps the audio session active when leaving a channel. 
        </member>
        <member name="F:BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION.AUDIO_SESSION_OPERATION_RESTRICTION_ALL">
            The SDK does not configure the audio session anymore. 
        </member>
        <member name="T:BlueQuark.ChannelMediaRelayConfiguration">
            The definition of ChannelMediaRelayConfiguration.
        </member>
        <member name="F:BlueQuark.ChannelMediaRelayConfiguration.srcInfo">
            the information of the source channel: ChannelMediaInfo. It contains the following members:
            - `channelName`: The name of the source channel. The default value is `NULL`, which means the SDK applies the name of the current channel.
            - `uid`: ID of the broadcaster whose media stream you want to relay. The default value is 0, which means the SDK generates a random UID. You must set it as 0.
            - `token`: The token for joining the source channel. It is generated with the `channelName` and `uid` you set in `srcInfo`.
              - If you have not enabled the App Certificate, set this parameter as the default value `NULL`, which means the SDK applies the App ID.
              - If you have enabled the App Certificate, you must use the `token` generated with the `channelName` and `uid`, and the `uid` must be set as 0.
        </member>
        <member name="F:BlueQuark.ChannelMediaRelayConfiguration.destInfos">
            the information of the destination channel: ChannelMediaInfo. It contains the following members:
            - `channelName`: The name of the destination channel.
            - `uid`: ID of the broadcaster in the destination channel. The value ranges from 0 to (2<sup>32</sup>-1). To avoid UID conflicts, this `uid` must be different from any other UIDs in the destination channel. The default value is 0, which means the SDK generates a random UID.
            - `token`: The token for joining the destination channel. It is generated with the `channelName` and `uid` you set in `destInfos`.
              - If you have not enabled the App Certificate, set this parameter as the default value `NULL`, which means the SDK applies the App ID.
              - If you have enabled the App Certificate, you must use the `token` generated with the `channelName` and `uid`.
        </member>
        <member name="F:BlueQuark.ChannelMediaRelayConfiguration.destCount">
            The number of destination channels. The default value is 0, and the
            value range is [0,4). Ensure that the value of this parameter
            corresponds to the number of ChannelMediaInfo structs you define in
            `destInfos`.
        </member>
        <member name="T:BlueQuark.ChannelMediaInfo">
            The definition of ChannelMediaInfo.
        </member>
        <member name="F:BlueQuark.ChannelMediaInfo.channelName">
            The channel name. 
        </member>
        <member name="F:BlueQuark.ChannelMediaInfo.token">
            The token that enables the user to join the channel.
        </member>
        <member name="F:BlueQuark.ChannelMediaInfo.uid">
            The user ID.
        </member>
        <member name="T:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT">
            The event code in CHANNEL_MEDIA_RELAY_EVENT. 
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_NETWORK_DISCONNECTED">
            0: The user disconnects from the server due to poor network
            connections.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_NETWORK_CONNECTED">
            1: The network reconnects.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_JOINED_SRC_CHANNEL">
            2: The user joins the source channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_JOINED_DEST_CHANNEL">
            3: The user joins the destination channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_SENT_TO_DEST_CHANNEL">
            4: The SDK starts relaying the media stream to the destination channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_RECEIVED_VIDEO_FROM_SRC">
            5: The server receives the video stream from the source channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_RECEIVED_AUDIO_FROM_SRC">
            6: The server receives the audio stream from the source channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL">
            7: The destination channel is updated.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_REFUSED">
            8: The destination channel update fails due to internal reasons.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_NOT_CHANGE">
            9: The destination channel does not change, which means that the
            destination channel fails to be updated.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_PACKET_UPDATE_DEST_CHANNEL_IS_NULL">
            10: The destination channel name is NULL.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_EVENT.RELAY_EVENT_VIDEO_PROFILE_UPDATE">
            11: The video profile is sent to the server.
        </member>
        <member name="T:BlueQuark.CHANNEL_MEDIA_RELAY_STATE">
            The state code in CHANNEL_MEDIA_RELAY_STATE. 
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_IDLE">
            0: The SDK is initializing.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_CONNECTING">
            1: The SDK tries to relay the media stream to the destination channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_RUNNING">
            2: The SDK successfully relays the media stream to the destination
            channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_STATE.RELAY_STATE_FAILURE">
            3: A failure occurs. See the details in code.
        </member>
        <member name="T:BlueQuark.VIDEO_PROFILE_TYPE">
            **DEPRECATED** Video profiles. 
        </member>
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_120P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_120P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_180P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_180P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_180P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_240P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_240P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_240P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_6" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_7" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_8" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_9" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_10" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_360P_11" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_6" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_8" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_9" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_480P_10" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P_5" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_720P_6" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1080P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1080P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1080P_5" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1440P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_1440P_2" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_4K" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_LANDSCAPE_4K_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_120P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_120P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_180P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_180P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_180P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_240P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_240P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_240P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_6" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_7" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_8" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_9" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_10" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_360P_11" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P_4" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P_6" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P_8" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P_9" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_480P_10" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_720P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_720P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_720P_5" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_720P_6" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_1080P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_1080P_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_1080P_5" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_1440P" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_1440P_2" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_4K" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_PORTRAIT_4K_3" -->
        <!-- Badly formed XML comment ignored for member "F:BlueQuark.VIDEO_PROFILE_TYPE.VIDEO_PROFILE_DEFAULT" -->
        <member name="T:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR">
            The definition of #CHANNEL_MEDIA_RELAY_ERROR. 
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_OK">
            0: The state is normal.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_SERVER_ERROR_RESPONSE">
            1: An error occurs in the server response.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_SERVER_NO_RESPONSE">
            2: No server response. You can call the
            {@link agora_gaming_rtc.IRtcEngine.LeaveChannel LeaveChannel} method to
            leave the channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_NO_RESOURCE_AVAILABLE">
            3: The SDK fails to access the service, probably due to limited
            resources of the server.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_FAILED_JOIN_SRC">
            4: The server fails to join the source channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_FAILED_JOIN_DEST">
            5: The server fails to join the destination channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_FAILED_PACKET_RECEIVED_FROM_SRC">
            6: The server fails to receive the data from the source channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_FAILED_PACKET_SENT_TO_DEST">
            7: The source channel fails to transmit data.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_SERVER_CONNECTION_LOST">
            8: The SDK disconnects from the server due to poor network
            connections. You can call the {@link agora_gaming_rtc.IRtcEngine.LeaveChannel LeaveChannel} method to leave the channel.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_INTERNAL_ERROR">
            9: An internal error occurs in the server.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_SRC_TOKEN_EXPIRED">
            10: The token of the source channel has expired.
        </member>
        <member name="F:BlueQuark.CHANNEL_MEDIA_RELAY_ERROR.RELAY_ERROR_DEST_TOKEN_EXPIRED">
            11: The token of the destination channel has expired.
        </member>
        <member name="T:BlueQuark.METADATA_TYPE">
            Metadata type of the observer.
            @note We only support video metadata for now.
        </member>
        <member name="F:BlueQuark.METADATA_TYPE.UNKNOWN_METADATA">
            -1: The metadata type is unknown.
        </member>
        <member name="F:BlueQuark.METADATA_TYPE.VIDEO_METADATA">
            0: The metadata type is video.
        </member>
        <member name="T:BlueQuark.Metadata">
            The definition of Metadata. 
        </member>
        <member name="F:BlueQuark.Metadata.uid">
            The User ID.
            - For the receiver: The ID of the user who sent the metadata.
            - For the sender: Ignore it.
        </member>
        <member name="F:BlueQuark.Metadata.size">
            The buffer size of the sent or received metadata.
        </member>
        <member name="F:BlueQuark.Metadata.buffer">
            The buffer address of the sent or received metadata.
        </member>
        <member name="F:BlueQuark.Metadata.timeStampMs">
            Time statmp of the frame following the metadata.
        </member>
        <member name="T:BlueQuark.VideoCanvas">
            Video display settings of the VideoCanvas class.
        </member>
        <member name="F:BlueQuark.VideoCanvas.hwnd">
            Video display window (view).
        </member>
        <member name="F:BlueQuark.VideoCanvas.renderMode">
            The rendering mode of the video view. See RENDER_MODE_TYPE.
        </member>
        <member name="F:BlueQuark.VideoCanvas.uid">
            The user ID. 
        </member>
        <member name="T:BlueQuark.RENDER_MODE_TYPE">
            Video display modes. 
        </member>
        <member name="F:BlueQuark.RENDER_MODE_TYPE.RENDER_MODE_HIDDEN">
            1: Uniformly scale the video until it fills the visible boundaries (cropped). One dimension of the video may have clipped contents.
        </member>
        <member name="F:BlueQuark.RENDER_MODE_TYPE.RENDER_MODE_FIT">
            2: Uniformly scale the video until one of its dimension fits the boundary (zoomed to fit). Areas that are not filled due to disparity in the aspect ratio are filled with black.
        </member>
        <member name="F:BlueQuark.RENDER_MODE_TYPE.RENDER_MODE_ADAPTIVE">
            **DEPRECATED** 3: This mode is deprecated.
        </member>
        <member name="T:BlueQuark.VIDEO_MIRROR_MODE_TYPE">
            Video mirror modes. 
        </member>
        <member name="F:BlueQuark.VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_AUTO">
            0: (Default) The SDK enables the mirror mode.  
        </member>
        <member name="F:BlueQuark.VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_ENABLED">
            1: Enable mirror mode. 
        </member>
        <member name="F:BlueQuark.VIDEO_MIRROR_MODE_TYPE.VIDEO_MIRROR_MODE_DISABLED">
            2: Disable mirror mode. 
        </member>
        <member name="T:BlueQuark.IRtcEngine">
            The definition of IRtcEngine.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetSdkVersion">
            Gets the SDK version.
            
             @return The version of the current SDK in the string format. For example, 2.9.1.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetChannelProfile(BlueQuark.CHANNEL_PROFILE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetClientRole(BlueQuark.CLIENT_ROLE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLogFilter(BlueQuark.LOG_FILTER)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLogFile(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.JoinChannel(System.String,System.String,System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.JoinChannelByKey(System.String,System.String,System.String,System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.RenewToken(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.LeaveChannel" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetParameters(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetCallId" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.Rate(System.String,System.Int32,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.Complain(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableAudio" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.DisableAudio" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.MuteLocalAudioStream(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.MuteAllRemoteAudioStreams(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.MuteRemoteAudioStream(System.UInt32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetEnableSpeakerphone(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetDefaultAudioRouteToSpeakerphone(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.IsSpeakerphoneEnabled" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SwitchCamera" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetVideoProfile(BlueQuark.VIDEO_PROFILE_TYPE,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.MuteLocalVideoStream(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.MuteAllRemoteVideoStreams(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.MuteRemoteVideoStream(System.UInt32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableDualStreamMode(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetEncryptionMode(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetEncryptionSecret(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.CreateDataStream(System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SendStreamMessage(System.Int32,System.String)" -->
        <member name="M:BlueQuark.IRtcEngine.SetSpeakerphoneVolume(System.Int32)">
            **DEPRECATED** Set the volume of the speaker.
            
            Please use {@link agora_gaming_rtc.IRtcEngine.AdjustRecordingSignalVolume AdjustRecordingSignalVolume} and {@link agora_gaming_rtc.IRtcEngine.AdjustPlaybackSignalVolume AdjustPlaybackSignalVolume} instead.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetVideoQualityParameters(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartEchoTest" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartEchoTest(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopEchoTest" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartLastmileProbeTest(BlueQuark.LastmileProbeConfig)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopLastmileProbeTest" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AddVideoWatermark(BlueQuark.RtcImage)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AddVideoWatermark(System.String,BlueQuark.WatermarkOptions)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.ClearVideoWatermarks" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetRemoteVideoStreamType(System.UInt32,BlueQuark.REMOTE_VIDEO_STREAM_TYPE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetMixedAudioFrameParameters(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetAudioMixingPosition(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableAudioVolumeIndication(System.Int32,System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AdjustRecordingSignalVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AdjustPlaybackSignalVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartAudioMixing(System.String,System.Boolean,System.Boolean,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopAudioMixing" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.PauseAudioMixing" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.ResumeAudioMixing" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AdjustAudioMixingVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetAudioMixingDuration" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetAudioMixingCurrentPosition" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartAudioRecording(System.String,BlueQuark.AUDIO_RECORDING_QUALITY_TYPE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartAudioRecording(System.String,System.Int32,BlueQuark.AUDIO_RECORDING_QUALITY_TYPE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopAudioRecording" -->
        <member name="M:BlueQuark.IRtcEngine.GetAudioEffectManager">
            Retrieves the AudioEffectManager object.
            
            @return The AudioEffectManager object.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetAudioRecordingDeviceManager">
            Retrieves the AudioRecordingDeviceManager object.
            
            @return The AudioRecordingDeviceManager object.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetAudioPlaybackDeviceManager">
            Retrieves the AudioPlaybackDeviceManager object.
            
            @return The AudioPlaybackDeviceManager object.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetVideoDeviceManager">
            Retrieves the VideoDeviceManager object.
            
            @return The VideoDeviceManager object.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetAudioRawDataManager">
            Retrieves the AudioRawDataManager object.
            
            @return The AudioRawDataManager object.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetVideoRawDataManager">
            Retrieves the VideoRawDataManager object.
            
            @return The VideoRawDataManager object.
        </member>
        <member name="M:BlueQuark.IRtcEngine.GetVideoRender">
            Retrieves the VideoRender object.
            
            @return The VideoRender object.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableVideo" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.DisableVideo" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableLocalVideo(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableLocalAudio(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartPreview" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopPreview" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableVideoObserver" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.DisableVideoObserver" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetDefaultMuteAllRemoteAudioStreams(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetDefaultMuteAllRemoteVideoStreams(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableLastmileTest" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.DisableLastmileTest" -->
        <member name="M:BlueQuark.IRtcEngine.GetConnectionState">
            Retrieves the connection state of the SDK.
            
            @return #CONNECTION_STATE_TYPE.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetAudioProfile(BlueQuark.AUDIO_PROFILE_TYPE,BlueQuark.AUDIO_SCENARIO_TYPE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetVideoEncoderConfiguration(BlueQuark.VideoEncoderConfiguration)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AdjustAudioMixingPlayoutVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AdjustAudioMixingPublishVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetVolumeOfEffect(System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetRecordingAudioFrameParameters(System.Int32,System.Int32,BlueQuark.RAW_AUDIO_FRAME_OP_MODE_TYPE,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetPlaybackAudioFrameParameters(System.Int32,System.Int32,BlueQuark.RAW_AUDIO_FRAME_OP_MODE_TYPE,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLocalPublishFallbackOption(BlueQuark.STREAM_FALLBACK_OPTIONS)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetRemoteSubscribeFallbackOption(BlueQuark.STREAM_FALLBACK_OPTIONS)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetRemoteDefaultVideoStreamType(BlueQuark.REMOTE_VIDEO_STREAM_TYPE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AddPublishStreamUrl(System.String,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.RemovePublishStreamUrl(System.String)" -->
        <member name="M:BlueQuark.IRtcEngine.GetErrorDescription(System.Int32)">
            Retrieves the description of a warning or error code.
            
             @param code The warning or error code that the {@link agora_gaming_rtc.OnSDKWarningHandler OnSDKWarningHandler} or {@link agora_gaming_rtc.OnSDKErrorHandler OnSDKErrorHandler} callback returns.
              
             @return [Warning Code](./index.html#warn) or [Error Code](./index.html#error).
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableWebSdkInteroperability(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLiveTranscoding(BlueQuark.LiveTranscoding)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.PushVideoFrame(BlueQuark.ExternalVideoFrame)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetExternalVideoSource(System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetExternalAudioSource(System.Boolean,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.PushAudioFrame(BlueQuark.AudioFrame)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetAudioMixingPlayoutVolume" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetAudioMixingPublishVolume" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableSoundPositionIndication(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLocalVoiceChanger(BlueQuark.VOICE_CHANGER_PRESET)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLocalVoiceReverbPreset(BlueQuark.AUDIO_REVERB_PRESET)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLocalVoicePitch(System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLocalVoiceEqualization(BlueQuark.AUDIO_EQUALIZATION_BAND_FREQUENCY,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLocalVoiceReverb(BlueQuark.AUDIO_REVERB_TYPE,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetCameraCapturerConfiguration(BlueQuark.CameraCapturerConfiguration)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetRemoteUserPriority(System.UInt32,BlueQuark.PRIORITY_TYPE)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetLogFileSize(System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetExternalAudioSink(System.Boolean,System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.RegisterLocalUserAccount(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.JoinChannelWithUserAccount(System.String,System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetUserInfoByUserAccount(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.GetUserInfoByUid(System.UInt32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetBeautyEffectOptions(System.Boolean,BlueQuark.BeautyOptions)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartScreenCaptureByDisplayId(System.UInt32,BlueQuark.Rectangle,BlueQuark.ScreenCaptureParameters)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartScreenCaptureByScreenRect(BlueQuark.Rectangle,BlueQuark.Rectangle,BlueQuark.ScreenCaptureParameters)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetScreenCaptureContentHint(BlueQuark.VideoContentHint)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.UpdateScreenCaptureParameters(BlueQuark.ScreenCaptureParameters)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.UpdateScreenCaptureRegion(BlueQuark.Rectangle)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopScreenCapture" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.AddInjectStreamUrl(System.String,BlueQuark.InjectStreamConfig)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.RemoveInjectStreamUrl(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableLoopbackRecording(System.Boolean,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetAudioSessionOperationRestriction(BlueQuark.AUDIO_SESSION_OPERATION_RESTRICTION)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartChannelMediaRelay(BlueQuark.ChannelMediaRelayConfiguration)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.UpdateChannelMediaRelay(BlueQuark.ChannelMediaRelayConfiguration)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StopChannelMediaRelay" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SwitchChannel(System.String,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetMirrorApplied(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.SetInEarMonitoringVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.StartScreenCaptureByWindowId(System.Int32,BlueQuark.Rectangle,BlueQuark.ScreenCaptureParameters)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.IRtcEngine.EnableInEarMonitoring(System.Boolean)" -->
        <member name="M:BlueQuark.IRtcEngine.GetEngine(System.String)">
            Initializes the IRtcEngine.
            
             @param appId The App ID of your project.
             
             @return The IRtcEngine instance.
        </member>
        <member name="M:BlueQuark.IRtcEngine.getEngine(System.String)">
            **DEPRECATED** Uses {@link agora_gaming_rtc.IRtcEngine.GetEngine GetEngine} instead.
            
            @param appId The App ID of your project.
            
            @return The IRtcEngine instance.
        </member>
        <member name="M:BlueQuark.IRtcEngine.Destroy">
            Destroys the IRtcEngine instance and releases all resources used by the Agora SDK.
            
            This method is useful for apps that occasionally make voice or video calls, to free up resources for other operations when not making calls.
            
            @note
            - Call this method in the subthread.
            - Once the app calls `Destroy` to destroy the created IRtcEngine instance, you cannot use any method or callback in the SDK.
        </member>
        <member name="T:BlueQuark.Agoraio">
            <summary>
            
            </summary>
        </member>
        <member name="T:BlueQuark.AudioEffectManagerImpl">
            The definition of AudioEffectManagerImpl. 
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.GetEffectsVolume" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.SetEffectsVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.PlayEffect(System.Int32,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.StopEffect(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.StopAllEffects" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.PreloadEffect(System.Int32,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.UnloadEffect(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.PauseEffect(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.PauseAllEffects" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.ResumeEffect(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.ResumeAllEffects" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.SetVoiceOnlyMode(System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.SetRemoteVoicePosition(System.UInt32,System.Double,System.Double)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioEffectManagerImpl.SetLocalVoicePitch(System.Double)" -->
        <member name="T:BlueQuark.AudioPlaybackDeviceManager">
            The definition of AudioPlaybackDeviceManager. 
        </member>
        <member name="M:BlueQuark.AudioPlaybackDeviceManager.CreateAAudioPlaybackDeviceManager">
            Create an AudioPlaybackDeviceManager instance.
            
             @note Ensure that you call {@link agora_gaming_rtc.AudioPlaybackDeviceManager.ReleaseAAudioPlaybackDeviceManager ReleaseAAudioPlaybackDeviceManager} to release this instance after calling this method.
             
             @return 
             - true: Success.
             - false: Failure.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.ReleaseAAudioPlaybackDeviceManager" -->
        <member name="M:BlueQuark.AudioPlaybackDeviceManager.GetAudioPlaybackDeviceCount">
            Retrieves the total number of the indexed audio playback devices in the system.
            
            @return Total number of the indexed audio playback devices.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.GetAudioPlaybackDevice(System.Int32,System.String@,System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.GetCurrentPlaybackDevice(System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.SetAudioPlaybackDevice(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.SetAudioPlaybackDeviceVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.GetAudioPlaybackDeviceVolume" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.SetAudioPlaybackDeviceMute(System.Boolean)" -->
        <member name="M:BlueQuark.AudioPlaybackDeviceManager.IsAudioPlaybackDeviceMute">
            Retrieves the status of the current audio playback device.
            
            @return Whether the current audio playback device stops audio playback.
            -true: Stops.
            -false: Doesn't stop.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.StartAudioPlaybackDeviceTest(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.StopAudioPlaybackDeviceTest" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioPlaybackDeviceManager.GetCurrentPlaybackDeviceInfo(System.String@,System.String@)" -->
        <member name="T:BlueQuark.AudioRawDataManager">
            The definition of AudioRawDataManager. 
        </member>
        <member name="T:BlueQuark.AudioRawDataManager.OnRecordAudioFrameHandler">
            Retrieves the recorded audio frame.
            
            The SDK triggers this callback once every 10 ms.
            
            @param audioFrame See AudioFrame.
        </member>
        <member name="T:BlueQuark.AudioRawDataManager.OnPlaybackAudioFrameHandler">
            Retrieves the audio playback frame.
            
            The SDK triggers this callback once every 10 ms.
            
            @param audioFrame See AudioFrame.
        </member>
        <member name="T:BlueQuark.AudioRawDataManager.OnMixedAudioFrameHandler">
            Retrieves the mixed recorded and playback audio frame.
            
            The SDK triggers this callback once every 10 ms.
            
            @param audioFrame See AudioFrame.
        </member>
        <member name="T:BlueQuark.AudioRawDataManager.OnPlaybackAudioFrameBeforeMixingHandler">
            Retrieves the audio frame of a specified user before mixing.
            
            The SDK triggers this callback once every 10 ms.
            
            @param uid The user ID.
            @param audioFrame See AudioFrame.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.SetOnRecordAudioFrameCallback(BlueQuark.AudioRawDataManager.OnRecordAudioFrameHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.SetOnPlaybackAudioFrameCallback(BlueQuark.AudioRawDataManager.OnPlaybackAudioFrameHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.SetOnMixedAudioFrameCallback(BlueQuark.AudioRawDataManager.OnMixedAudioFrameHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.SetOnPlaybackAudioFrameBeforeMixingCallback(BlueQuark.AudioRawDataManager.OnPlaybackAudioFrameBeforeMixingHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.RegisterAudioRawDataObserver" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.UnRegisterAudioRawDataObserver" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRawDataManager.PullAudioFrame(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int64,System.Int32)" -->
        <member name="T:BlueQuark.AudioRecordingDeviceManager">
            The definition of AudioRecordingDeviceManager. 
        </member>
        <member name="M:BlueQuark.AudioRecordingDeviceManager.CreateAAudioRecordingDeviceManager">
            Create an AudioRecordingDeviceManager instance.
            
             @note Ensure that you call {@link agora_gaming_rtc.AudioRecordingDeviceManager.ReleaseAAudioRecordingDeviceManager ReleaseAAudioRecordingDeviceManager} to release this instance after calling this method.
             
             @return 
             - true: Success.
             - false: Failure.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.ReleaseAAudioRecordingDeviceManager" -->
        <member name="M:BlueQuark.AudioRecordingDeviceManager.GetAudioRecordingDeviceCount">
            Retrieves the total number of the indexed audio recording devices in the system.
            
            @return Total number of the indexed audio recording devices.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.GetAudioRecordingDevice(System.Int32,System.String@,System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.GetCurrentRecordingDevice(System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.SetAudioRecordingDeviceVolume(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.GetAudioRecordingDeviceVolume" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.SetAudioRecordingDeviceMute(System.Boolean)" -->
        <member name="M:BlueQuark.AudioRecordingDeviceManager.IsAudioRecordingDeviceMute">
            Gets the status of the current audio recording device.
            
            @return Whether the current audio recording device stops audio recording.
            -true: Stops.
            -false: Doesn't stop.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.SetAudioRecordingDevice(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.StartAudioRecordingDeviceTest(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.StopAudioRecordingDeviceTest" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.AudioRecordingDeviceManager.GetCurrentRecordingDeviceInfo(System.String@,System.String@)" -->
        <member name="T:BlueQuark.IRtcEngineNative.EngineEventOnCaptureVideoFrame">
                    EngineEvent is only for engine, not for user,Please do not call this function.
        </member>
        <member name="T:BlueQuark.VideoDeviceManager">
            The definition of the VideoDeviceManager. 
        </member>
        <member name="M:BlueQuark.VideoDeviceManager.CreateAVideoDeviceManager">
            Create a VideoDeviceManager instance.
            
             @note Ensure that you call {@link agora_gaming_rtc.VideoDeviceManager.ReleaseAVideoDeviceManager ReleaseAVideoDeviceManager} to release this instance after calling this method.
             
             @return 
             - true: Success.
             - false: Failure.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoDeviceManager.ReleaseAVideoDeviceManager" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoDeviceManager.StartVideoDeviceTest(System.IntPtr)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoDeviceManager.StopVideoDeviceTest" -->
        <member name="M:BlueQuark.VideoDeviceManager.GetVideoDeviceCount">
            Retrieves the total number of the indexed video recording devices in the system.
            
            @return Total number of the indexed video recording devices.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoDeviceManager.GetVideoDevice(System.Int32,System.String@,System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoDeviceManager.GetCurrentVideoDevice(System.String@)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoDeviceManager.SetVideoDevice(System.String)" -->
        <member name="T:BlueQuark.VideoRawDataManager">
            The definition of VideoRawDataManager. 
        </member>
        <member name="T:BlueQuark.VideoRawDataManager.OnCaptureVideoFrameHandler">
            Occurs each time the SDK receives a video frame captured by the local camera.
            
            After you successfully register the video frame observer, the SDK triggers this callback each time a video frame is received. In this callback, you can get the video data captured by the local camera. You can then pre-process the data according to your scenarios.
            
            @param videoFrame See VideoFrame.
        </member>
        <member name="T:BlueQuark.VideoRawDataManager.OnRenderVideoFrameHandler">
            Occurs each time the SDK receives a video frame sent by the remote user.
            
            After you successfully register the video frame observer, the SDK triggers this callback each time a video frame is received. In this callback, you can get the video data sent by the remote user. You can then post-process the data according to your scenarios.
            
            @param uid ID of the remote user who sends the current video frame.
            @param videoFrame See VideoFrame.
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoRawDataManager.SetOnCaptureVideoFrameCallback(BlueQuark.VideoRawDataManager.OnCaptureVideoFrameHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoRawDataManager.SetOnRenderVideoFrameCallback(BlueQuark.VideoRawDataManager.OnRenderVideoFrameHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoRawDataManager.RegisterVideoRawDataObserver" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.VideoRawDataManager.UnRegisterVideoRawDataObserver" -->
        <member name="M:BlueQuark.IVideoRender.SetVideoRenderMode(BlueQuark.VIDEO_RENDER_MODE)">
            		 * choose the rendreMode of video.
            		 * 1:  VIDEO_RENDER_MODE.RENDER_RAWDATA
                     * this way can support any Unity Graphic API
                     *
                     * 2: VIDEO_RENDER_MODE.REDNER_OPENGL_ES2
                     * this way only support openGLES2 and do not support multiTherad Rendering.
                     *
                     * 3: VIDEO_RENDER_MODE.RENDER_UNITY_LOW_LEVEL_INTERFACE
                     * this way use Unity Low level native Interface to render video.
                     *
            		 * @return return effect volume
        </member>
        <member name="M:BlueQuark.IVideoRender.GenerateNativeTexture">
            create Native texture and return textureId.
        </member>
        <member name="M:BlueQuark.IVideoRender.DeleteTexture(System.Int32)">
            Delete native texture according to the textureId.
        </member>
        <member name="T:BlueQuark.AgoraVideoSurfaceType">
            The definition of AgoraVideoSurfaceType.
        </member>
        <member name="F:BlueQuark.AgoraVideoSurfaceType.Renderer">
            0: (Default) The renderer for rendering 3D GameObject, such as Cube、Cylinder and Plane.
        </member>
        <member name="F:BlueQuark.AgoraVideoSurfaceType.RawImage">
            1: The renderer for rendering Raw Image of the UI components. 
        </member>
        <member name="T:BlueQuark.VideoSurface">
            The definition of VideoSurface. 
        </member>
        <member name="M:BlueQuark.VideoSurface.SetGameFps(System.UInt32)">
            Sets the video rendering frame rate.
            
            @note 
            - Ensure that you call this method in the main thread.
            - Ensure that you call this method before binding VideoSurface.cs.
            
            @param fps The real video refreshing frame rate of the program.
        </member>
        <member name="M:BlueQuark.VideoSurface.SetForUser(System.UInt32)">
            Sets the local/remote video.
            
            @note 
            - Ensure that you call this method in the main thread.
            - Ensure that you call this method before binding VideoSurface.cs.
            
            @param uid The ID of the remote user, which is retrieved from {@link agora_gaming_rtc.OnUserJoinedHandler OnUserJoinedHandler}. The default value is 0, which means you can see the local video.
        </member>
        <member name="M:BlueQuark.VideoSurface.EnableFilpTextureApply(System.Boolean,System.Boolean)">
            Enables/Disables the mirror mode when renders the Texture.
            
            @note 
            - Ensure that you call this method in the main thread.
            - Ensure that you call this method before binding VideoSurface.cs.
            
            @param enableFlipHorizontal Whether to enable the horizontal mirror mode of Texture.
            - true: Enable.
            - false: (Default) Disable.
            @param enableFlipVertical Whether to enable the vertical mirror mode of Texture.
            - true: Enable.
            - false: (Default) Disable.
        </member>
        <member name="M:BlueQuark.VideoSurface.SetVideoSurfaceType(BlueQuark.AgoraVideoSurfaceType)">
            Set the video renderer type.
            
            @param agoraVideoSurfaceType The renderer type, see AgoraVideoSurfaceType.
        </member>
        <member name="M:BlueQuark.VideoSurface.SetEnable(System.Boolean)">
            Starts/Stops the video rendering.
            
            @param enable Whether to start/stop the video rendering.
            - true: (Default) Start.
            - false: Stop.
        </member>
        <member name="M:BlueQuark.VideoSurface.ApplyTexture(UnityEngine.Texture2D)">
            <summary>
               nativeTexture at the calling point should have created with image data.  This method
               apply this reference to the surface renderer.
            </summary>
        </member>
        <member name="T:BlueQuark.EMailCrawler">
            <summary>
            Email box retriever component.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailCrawler.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailCrawler.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailCrawler.IsBusy">
            <summary>
            Is busy if the class is already fetching a box email.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(System.String,System.String,System.String,BlueQuark.EMailCrawlerFilter,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetches a email box with his address, password, imap and mask.
            </summary>
            <param name="iFromAddress">Mail address of the mail to fetch.</param>
            <param name="iFromPassword">Password of the mail address to fetch.</param>
            <param name="iIMAP">Imap server of the mail address to fetch.</param>
            <param name="iMask">Mask represent the fetch option.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(System.String,System.String,System.String,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetches a email box with his address, password, imap.
            </summary>
            <param name="iFromAddress">Mail address of the mail to fetch.</param>
            <param name="iFromPassword">Password of the mail address to fetch.</param>
            <param name="iIMAP">Imap server of the mail address to fetch.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(BlueQuark.EMailFetchParameters,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetches a email box with a EMailFetchParameters which must contain at least adderss, password, and imap server.
            </summary>
            <param name="iParameters">Represent the parameters of the fetch.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Delete(BlueQuark.EMailFetchParameters,System.Int32)">
            <summary>
            Delete email by ID.
            </summary>
            <param name="iParameters">Represent the parameters of the fetch.</param>
            <param name="iID">Message ID.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Stop">
            <summary>
            Stop any processing email fetch.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailCrawler.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(BlueQuark.EMailCrawlerFilter,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetches emails with parameters and callback from the robot's default address.
            </summary>
            <param name="iMask">Mask represent the fetch option.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Delete(System.Int32)">
            <summary>
            Delete email by ID from the robots's default address.
            </summary>
            <param name="iID">Message ID.</param>
        </member>
        <member name="T:BlueQuark.EMailAttachment">
            <summary>
            Class which represent an email attachment.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailAttachment.Name">
            <summary>
            Name of the attachment.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailAttachment.Size">
            <summary>
            Size of the attachment in byte.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailAttachment.Content">
            <summary>
            Content of the attachment in byte.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailAttachment.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="iName">The name of attachment.</param>
            <param name="iSize">The size of attachment.</param>
            <param name="iContent">The content of attachment.</param>
        </member>
        <member name="T:BlueQuark.EMailFetchParameters">
            <summary>
            Class which represent the parameters of the fetch.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailFetchParameters.DEFAULT_PORT">
            <summary>
            Default port which will use for the imap server.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.EMailMask">
            <summary>
            Mail crawler mask. You can use it if you want only read, unread mail, or only mail with attachment.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.Address">
            <summary>
            Mail address to fetch.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.Password">
            <summary>
            Password of the Mail address to fetch.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.IMAP">
            <summary>
            Imap serveur of the email.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.Port">
            <summary>
            Port of the imap server. See also DEFAULT_PORT.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailFetchParameters.#ctor(BlueQuark.EMailCrawlerFilter)">
            <summary>
            Various constructor.
            </summary>
            <param name="iMask">Mask represent the fetch option.</param>
        </member>
        <member name="M:BlueQuark.EMailFetchParameters.#ctor(System.String,System.String,System.String,System.Int32,BlueQuark.EMailCrawlerFilter)">
            <summary>
            Various constructor.
            </summary>
            <param name="iAddress">Mail address of the mail to fetch.</param>
            <param name="iPassword">Password of the mail address to fetch.</param>
            <param name="iIMAP">Imap server of the mail address to fetch.</param>
            <param name="iPort">Port of the imap server.</param>
            <param name="iMask">Mask represent the fetch option.</param>
        </member>
        <member name="T:BlueQuark.EMailCrawlerFilter">
            <summary>
            Enum which contain the different filter for a fetch.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailCrawlerFilter.UNREAD">
            <summary>
            Unread mask represent mail which are not read.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailCrawlerFilter.READ">
            <summary>
            Read mask represent mail which are read.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailCrawlerFilter.ONLY_WITH_ATTACHMENT">
            <summary>
            Only with attachment will fetch read, unread or both, but only those with attachments.
            </summary>
        </member>
        <member name="T:BlueQuark.SMTP">
            <summary>
            Enum of the different smtp that can be used to send mail.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.GMAIL">
            <summary>
            Gmail SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.YAHOO">
            <summary>
            Yahoo SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.HOTMAIL">
            <summary>
            Hotmail SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.BFR">
            <summary>
            BFR SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.ORANGE">
            <summary>
            Orange SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.FREE">
            <summary>
            Free SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.OUTLOOK">
            <summary>
            Outlook SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.SFR">
            <summary>
            SFR SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.WANADOO">
            <summary>
            Wanadoo SMTP.
            </summary>
        </member>
        <member name="T:BlueQuark.EMailSender">
            <summary>
            Wrapper that connects to an smtp server to send a mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailSender.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailSender.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailSender.IsBusy">
            <summary>
            Returns true if a message is sending.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,BlueQuark.SMTP,BlueQuark.EMail,System.Action{System.Boolean})">
            <summary>
            Creates an smtp client with the user's address and sends the mail. This method will do nothing if a previous mail has not been sent yet.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMail">Mail that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,System.String,BlueQuark.EMail,System.Action{System.Boolean})">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMail">Mail that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,System.String,BlueQuark.EMail[],System.Action{System.Boolean})">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMails">Mails that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,BlueQuark.SMTP,BlueQuark.EMail[],System.Action{System.Boolean})">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMails">Mails that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Radio">
            <summary>
            Radio stream searcher and player.
            Every radio is identified by a permalink.
            </summary>
        </member>
        <member name="P:BlueQuark.Radio.IsBusy">
            <summary>
            True if a request is occuring.
            </summary>
        </member>
        <member name="P:BlueQuark.Radio.PendingCount">
            <summary>
            Size of the inner queue.
            </summary>
        </member>
        <member name="P:BlueQuark.Radio.IsSomethingPending">
            <summary>
            True if there is at least one query in the inner queue.
            </summary>
        </member>
        <member name="M:BlueQuark.Radio.Stop">
            <summary>
            Stop the radio stream actually played.
            </summary>
        </member>
        <member name="M:BlueQuark.Radio.Play(System.String)">
            <summary>
            Play an audio stream.
            </summary>
            <param name="iURL">Url of the audio stream</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchStations(System.String,System.Action{BlueQuark.RadioStation[]},System.Boolean)">
            <summary>
            Search the radio station giving its name.
            It will call the callback with an array of radios whose names are the closest to the one entered.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iOnRadiosFound">Callback called when the radios are found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchStations(System.String,System.Action{BlueQuark.RadioStation[]},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Search the radio station giving its name.
            It will call the callback with an array of radios whose names are the closest to the one entered.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iOnRadiosFound">Callback called when the radios are found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.GetStation(System.String,System.Action{BlueQuark.RadioStation},System.Boolean)">
            <summary>
            Call the callback with the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioFound">Callback called when the radios are found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.GetStation(System.String,System.Action{BlueQuark.RadioStation},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Call the callback with the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioFound">Callback called when the radios are found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.GetStreams(System.String,System.Action{BlueQuark.RadioStationStream[]},System.Boolean)">
            <summary>
            Call the callback with the available streams of the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioStreams">Callback called when the radios streams are found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.GetStreams(System.String,System.Action{BlueQuark.RadioStationStream[]},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Call the callback with the available streams of the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioStreams">Callback called when the radios streams are found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.GetCurrentProgram(System.String,System.Action{BlueQuark.RadioStationProgram},System.Boolean)">
            <summary>
            Call the callback with the current program broadcasted on the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioProgram">Callback called when the current program broadcasted is found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.GetCurrentProgram(System.String,System.Action{BlueQuark.RadioStationProgram},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Call the callback with the current program broadcasted on the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioProgram">Callback called when the current program broadcasted is found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchAndPlay(System.String,System.Boolean)">
            <summary>
            Search the radio which name is the closest to the one entered then plays its stream.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchAndPlay(System.String,System.Action{BlueQuark.RadioStation},System.Boolean)">
            <summary>
            Search the radio which name is the closest to the one entered then plays its stream.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iOnRadioStation">Callback called when the searched radio is found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchAndPlay(System.String,System.Action{BlueQuark.RadioStation},System.Action{BlueQuark.RadioStationStream},System.Boolean)">
            <summary>
            Search the radio which name is the closest to the one entered then plays its stream.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iOnRadioStation">Callback called when the searched radio is found</param>
            <param name="iOnRadioStream">Callback called when the radio stream to play is found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchAndPlay(System.String,System.Action{BlueQuark.RadioStation},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Search the radio which name is the closest to the one entered then plays its stream.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iOnRadioStation">Callback called when the searched radio is found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.SearchAndPlay(System.String,System.Action{BlueQuark.RadioStation},System.Action{BlueQuark.RadioStationStream},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Search the radio which name is the closest to the one entered then plays its stream.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iName">Name of the radio to search</param>
            <param name="iOnRadioStation">Callback called when the searched radio is found</param>
            <param name="iOnRadioStream">Callback called when the radio stream to play is found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.PlayFromLink(System.String,System.Boolean)">
            <summary>
            Plays the first stream found of the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.PlayFromLink(System.String,System.Action{BlueQuark.RadioStation},System.Boolean)">
            <summary>
            Plays the first stream found of the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioStation">Callback called whith the associated radio</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.PlayFromLink(System.String,System.Action{BlueQuark.RadioStation},System.Action{BlueQuark.RadioStationStream},System.Boolean)">
            <summary>
            Plays the first stream found of the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioStation">Callback called whith the associated radio</param>
            <param name="iOnRadioStream">Callback called when the radio stream to play is found</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.PlayFromLink(System.String,System.Action{BlueQuark.RadioStation},System.Action{BlueQuark.RadioStationStream},System.Action{BlueQuark.RadioError},System.Boolean)">
            <summary>
            Plays the first stream found of the radio associated with the permalink.
            Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iPermalink">Identifier of the radio</param>
            <param name="iOnRadioStation">Callback called whith the associated radio</param>
            <param name="iOnRadioStream">Callback called when the radio stream to play is found</param>
            <param name="iOnError">Callback called when an error occurs</param>
            <param name="iEnqueue">If false, the queue will be cleared and the current query will be immediately considered.</param>
        </member>
        <member name="M:BlueQuark.Radio.ClearPending">
            <summary>
            Clear the inner queue.
            </summary>
        </member>
        <member name="T:BlueQuark.RadioError">
            <summary>
            Represents the error that can occur when using one of the Radio methods.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.NONE">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.INVALID_CLIENT">
            <summary>
            The client used is invalid.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.INVALID_OAUTH_REQUEST">
            <summary>
            The webrequest failed.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.RADIO_NOT_FOUND">
            <summary>
            The radio has not been found.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.STREAM_NOT_FOUND">
            <summary>
            The radio stream link has not been found.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.TIME_OUT">
            <summary>
            The time limit for the request has expired.
            </summary>
        </member>
        <member name="F:BlueQuark.RadioError.NO_CONNECTION">
            <summary>
            There is no connection.
            </summary>
        </member>
        <member name="T:BlueQuark.RadioStation">
            <summary>
            Represents a radio station.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStation.Permalink">
            <summary>
            Identifier of a radio.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStation.Name">
            <summary>
            The name of the radio.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStation.Description">
            <summary>
            The description of the radio.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStation.LogoURL">
            <summary>
            The url of the radio logo.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStation.Country">
            <summary>
            The country of the radio station.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStation.Language">
            <summary>
            The language in which the radio is broadcasted.
            </summary>
        </member>
        <member name="M:BlueQuark.RadioStation.ToString">
            <summary>
            Returns a string with all the attributes values.
            </summary>
            <returns>the string</returns>
        </member>
        <member name="T:BlueQuark.RadioStationProgram">
            <summary>
            Represents a program that is broadcasted on a radio.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationProgram.Name">
            <summary>
            Name of the program.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationProgram.Start">
            <summary>
            Start time of the program.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationProgram.End">
            <summary>
            End time of the program.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationProgram.LogoUrl">
            <summary>
            The url of the program logo.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationProgram.Singer">
            <summary>
            When available the singer of the song broadcasted.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationProgram.Song">
            <summary>
            When available the name of the song broadcasted.
            </summary>
        </member>
        <member name="M:BlueQuark.RadioStationProgram.ToString">
            <summary>
            Returns a string with all the attributes values.
            </summary>
            <returns>the string</returns>
        </member>
        <member name="T:BlueQuark.RadioStationStream">
            <summary>
            Represents a radio stream link.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Url">
            <summary>
            The url to the radio stream.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Protocol">
            <summary>
            The protocal of the stream.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Port">
            <summary>
            The port to access the stream.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Format">
            <summary>
            The format of the stream.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Codec">
            <summary>
            The codec of the stream.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Bitrate">
            <summary>
            The bitrate of the stream.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Frequency">
            <summary>
            The frequency in which the stream is broadcasted.
            </summary>
        </member>
        <member name="P:BlueQuark.RadioStationStream.Channels">
            <summary>
            The number of channels of the stream.
            </summary>
        </member>
        <member name="M:BlueQuark.RadioStationStream.ToString">
            <summary>
            Returns a string with all the attributes values
            </summary>
            <returns>the string</returns>
        </member>
        <member name="T:BlueQuark.REST">
            <summary>
            Base toolkit to get or send data via HTTP
            </summary>
        </member>
        <member name="T:BlueQuark.REST.Method">
            <summary>
            
            </summary>
        </member>
        <member name="F:BlueQuark.REST.Method.GET">
            <summary>
            
            </summary>
        </member>
        <member name="F:BlueQuark.REST.Method.POST">
            <summary>
            
            </summary>
        </member>
        <member name="F:BlueQuark.REST.Method.DELETE">
            <summary>
            
            </summary>
        </member>
        <member name="F:BlueQuark.REST.Method.PUT">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlueQuark.REST.IsBusy">
            <summary>
            Returns true if data is being sent.
            </summary>
        </member>
        <member name="M:BlueQuark.REST.Get(BlueQuark.RESTRequest,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send GET request to download file or get other data
            </summary>
            <param name="iRequest">Web request. You can also use a simple string to get from URL or a tuple of two strings to download data.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Get(System.String,System.String,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send GET request to download file or get other data
            </summary>
            <param name="iURL">URL to get</param>
            <param name="iSavePath">Where file will be written to</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.GetBatch(BlueQuark.RESTRequest[],System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send GET request to download file or get other data
            </summary>
            <param name="iRequests">Web requests. You can also use simple strings to get from URLs or tuples of two strings to download data.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Post(System.String,BlueQuark.RESTForm,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send POST request to download file or get other data
            </summary>
            <param name="iURL">URL to send request to.</param>
            <param name="iForm">Form with request data.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Post(System.String,System.Byte[],System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send POST request to download file or get other data
            </summary>
            <param name="iURL">URL to send request to.</param>
            <param name="iBytes">Raw byte array.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Post(System.String,System.String,BlueQuark.RESTForm,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send POST request to download file or get other data
            </summary>
            <param name="iURL">URL to send request to.</param>
            <param name="iForm">Form with request data.</param>
            <param name="iSavePath">Where file will be written to</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Post(BlueQuark.RESTRequest,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send POST request to download file or get other data
            </summary>
            <param name="iRequest">Web request with URL, form and optional download path. You can use a tuple of string and form.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.PostBatch(BlueQuark.RESTRequest[],System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send GET request to download file or get other data
            </summary>
            <param name="iRequests">Web requests. You can also use tuples of string and form.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Send(BlueQuark.RESTRequest,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send custom request to download file or get other data.
            </summary>
            <param name="iRequest">Web request.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.SendBatch(BlueQuark.RESTRequest[],System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send multiple custom requests to download file or get other data.
            </summary>
            <param name="iRequests">Web requests.</param>
            <param name="iCallback">Action that will be called when file is downloaded or if an error occurs.</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Delete(BlueQuark.RESTRequest,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send DELETE request to remote server
            </summary>
            <param name="iRequest">Web request.</param>
            <param name="iCallback">Action that will be called when request is finished or if an error occurs</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.Delete(System.String,System.Action{BlueQuark.RESTResponse},System.Func{BlueQuark.RESTResponse,System.String})">
            <summary>
            Send DELETE request to remote server
            </summary>
            <param name="iURL">URL to get</param>
            <param name="iCallback">Action that will be called when request is finished or if an error occurs</param>
            <param name="iProgressTitle">What will be written on progress bar. If null (by default), progress bar will not be shown.</param>
        </member>
        <member name="M:BlueQuark.REST.LoadAppCertificate(System.String)">
            <summary>
            Register a new SSL certificate in App keychain.
            </summary>
            <param name="iName">Name of the certificate .pem file without extension.</param>
        </member>
        <member name="M:BlueQuark.REST.UnloadAppCertificate(System.String)">
            <summary>
            Unregister SSL certificate from App keychain.
            </summary>
            <param name="iName">Name of the certificate .pem file without extension.</param>
        </member>
        <member name="P:BlueQuark.REST.LocalIp">
            <summary>
            Local IP address of the machine
            </summary>
        </member>
        <member name="M:BlueQuark.REST.LoadAppCertificates">
            <summary>
            Register all SSL certificates found in local Certificates folder to App keychain.
            </summary>
        </member>
        <member name="M:BlueQuark.REST.UnloadAppCertificates">
            <summary>
            Unregister all SSL certificates from App keychain.
            </summary>
        </member>
        <member name="M:BlueQuark.REST.LoadOSCertificate(System.String)">
            <summary>
            Register a new SSL certificate in OS keychain.
            </summary>
            <param name="iName">Name of the certificate .pem file without extension.</param>
        </member>
        <member name="M:BlueQuark.REST.UnloadOSCertificate(System.String)">
            <summary>
            Unregister SSL certificate from OS keychain.
            </summary>
            <param name="iName">Name of the certificate .pem file without extension.</param>
        </member>
        <member name="T:BlueQuark.RESTError">
            <summary>
            Types of errors that can happen during the network exchange.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTError.NONE">
            <summary>
            Empty or unknown error handler.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTError.NO_CONNECTION">
            <summary>
            Could not connect to the internet or was interrupted.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTError.FILE_CORRUPT">
            <summary>
            Final file size is not equal to the expected.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTError.RESPONSE_EMPTY">
            <summary>
            Response received does not contain any data.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTError.TIMEOUT">
            <summary>
            Response is being fetched too long.
            </summary>
        </member>
        <member name="T:BlueQuark.RESTForm">
            <summary>
            HTTP form data holder. Can contain strings or byte arrays.
            </summary>
        </member>
        <member name="T:BlueQuark.RESTFormContent">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlueQuark.RESTFormContent.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlueQuark.RESTFormContent.Filename">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlueQuark.RESTFormContent.HTTPContent">
            <summary>
            
            </summary>
        </member>
        <member name="T:BlueQuark.RESTHeader">
            <summary>
            Header for HTTP request.
            </summary>
        </member>
        <member name="M:BlueQuark.RESTHeader.#ctor">
            <summary>
            Header for HTTP request. Use static methods to create different types of headers.
            </summary>
        </member>
        <member name="M:BlueQuark.RESTHeader.Custom(System.String,System.String)">
            <summary>
            Custom HTTP header.
            </summary>
            <param name="iName">Header title.</param>
            <param name="iValue">Header text content.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.Content(BlueQuark.RESTMediaType,System.String)">
            <summary>
            ContentType HTTP header.
            </summary>
            <param name="iType">Media type.</param>
            <param name="iValue">Optional value (e.g., encoding).</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.Accept(BlueQuark.RESTMediaType)">
            <summary>
            Accept HTTP header.
            </summary>
            <param name="iType">Media type.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.Authorization(System.String)">
            <summary>
            Authorization HTTP header.
            </summary>
            <param name="iValue">Header text content.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.Bearer(System.String)">
            <summary>
            Authorization HTTP header with bearer token.
            </summary>
            <param name="iValue">Bearer token.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.UserAgent(System.String)">
            <summary>
            User agent HTTP header.
            </summary>
            <param name="iValue">User agent info.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.UserAgent(System.String,System.String)">
            <summary>
            User agent HTTP header.
            </summary>
            <param name="iName">Name of user agent.</param>
            <param name="iVersion">User agent version.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.Cookies(System.String)">
            <summary>
            Cookies HTTP header.
            </summary>
            <param name="iValue">Collection of cookies.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RESTHeader.ApplyTo(System.Net.Http.HttpRequestMessage)">
            <summary>
            Add header to request message.
            </summary>
            <param name="iMessage">Message to add to.</param>
        </member>
        <member name="M:BlueQuark.RESTHeader.GetMediaTypeName(BlueQuark.RESTMediaType)">
            <summary>
            Convert RESTMediaType.APP_FORM to 'application/x-www-form-urlencoded'
            </summary>
            <param name="iType">Media type.</param>
            <returns></returns>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_JAVA">
            <summary>
            application/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_JAVASCRIPT">
            <summary>
            application/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_OCTET">
            <summary>
            application/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_OGG">
            <summary>
            application/ogg
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_PDF">
            <summary>
            application/pdf
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_XHTML">
            <summary>
            application/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_JSON">
            <summary>
            application/json
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_LDJSON">
            <summary>
            application/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_XML">
            <summary>
            application/xml
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_ZIP">
            <summary>
            application/zip
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.APP_FORM">
            <summary>
            application/x-www-form-urlencoded
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.AUDIO_MPEG">
            <summary>
            audio/mpeg
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.AUDIO_WMA">
            <summary>
            audio/wma
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.AUDIO_WAV">
            <summary>
            audio/wav
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.IMG_GIF">
            <summary>
            image/gif
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.IMG_JPEG">
            <summary>
            image/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.IMG_PNG">
            <summary>
            image/png
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.IMG_TIFF">
            <summary>
            image/tiff
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.IMG_ICON">
            <summary>
            image/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.IMG_SVG">
            <summary>
            image/svg
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.MULTI_MIXED">
            <summary>
            multipart/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.MULTI_ALT">
            <summary>
            multipart/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.MULTI_RELATED">
            <summary>
            multipart/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.MULTI_FORM">
            <summary>
            multipart/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.TEXT_CSS">
            <summary>
            text/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.TEXT_CSV">
            <summary>
            text/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.TEXT_HTML">
            <summary>
            text/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.TEXT_JAVASCRIPT">
            <summary>
            text/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.TEXT_PLAIN">
            <summary>
            text/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.TEXT_XML">
            <summary>
            text/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.VIDEO_MPEG">
            <summary>
            video/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.VIDEO_MP4">
            <summary>
            video/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.VIDEO_WMV">
            <summary>
            video/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.VIDEO_MSV">
            <summary>
            video/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.VIDEO_FLV">
            <summary>
            video/
            </summary>
        </member>
        <member name="F:BlueQuark.RESTMediaType.VIDEO_WEBM">
            <summary>
            video/
            </summary>
        </member>
        <member name="T:BlueQuark.RESTRequest">
            <summary>
            Collection of REST request parameters.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.URL">
            <summary>
            Remote path to send request to.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.SavePath">
            <summary>
            Local path to save result to.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.Form">
            <summary>
            Web multipart form.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.RawContent">
            <summary>
            Raw content, e.g. byte array.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.ByteContent">
            <summary>
            Raw byte array to send.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.IsCritical">
            <summary>
            To stop batch request if this piece is missing.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.Headers">
            <summary>
            Headers of the request.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.InternetAccessTimeout">
            <summary>
            How long to wait for internet. Default is 10s.
            If 0, there will be no check.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTRequest.Priority">
            <summary>
            Query priority in the queue. Default is 0.
            </summary>
        </member>
        <member name="M:BlueQuark.RESTRequest.GETRequest(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="iURL"></param>
            <param name="iSavePath"></param>
            <param name="iIsCritical"></param>
        </member>
        <member name="M:BlueQuark.RESTRequest.POSTRequest(System.String,BlueQuark.RESTForm,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="iURL"></param>
            <param name="iForm"></param>
            <param name="iSavePath"></param>
            <param name="iIsCritical"></param>
        </member>
        <member name="M:BlueQuark.RESTRequest.POSTRequest(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="iURL"></param>
            <param name="iBytes"></param>
            <param name="iSavePath"></param>
            <param name="iIsCritical"></param>
        </member>
        <member name="P:BlueQuark.RESTRequest.Content">
            <summary>
            
            </summary>
        </member>
        <member name="T:BlueQuark.RESTResponse">
            <summary>
            The result of the finished web request.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTResponse.ProgressUpload">
            <summary>
            Progress of query, 0 - 1
            </summary>
        </member>
        <member name="P:BlueQuark.RESTResponse.FilePath">
            <summary>
            
            </summary>
        </member>
        <member name="P:BlueQuark.RESTResponse.State">
            <summary>
            State of the parent request.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTResponse.Error">
            <summary>
            Reason why exchange has failed or None
            </summary>
        </member>
        <member name="P:BlueQuark.RESTResponse.ErrorDescription">
            <summary>
            Detailed description of an error, if any.
            </summary>
        </member>
        <member name="P:BlueQuark.RESTResponse.Stream">
            <summary>
            File or Memory stream assotiated with response.
            </summary>
        </member>
        <member name="M:BlueQuark.RESTResponse.#ctor(System.IO.Stream)">
            <summary>
            Response for REST request.
            </summary>
            <param name="iStream">Stream to use.</param>
        </member>
        <member name="M:BlueQuark.RESTResponse.#ctor(BlueQuark.RESTResponse,System.IO.Stream)">
            <summary>
            Response for REST request.
            </summary>
            <param name="iResponse">Other response to copy data from.</param>
            <param name="iStream">Optional stream to use. If not provided, using stream from other response.</param>
        </member>
        <member name="P:BlueQuark.RESTResponse.CurrentProgress">
            <summary>
            Progress of query, 0 - 1
            </summary>
        </member>
        <member name="P:BlueQuark.RESTResponse.Bytes">
            <summary>
            Raw received byte array
            </summary>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsText">
            <summary>
            Get text from bytes
            </summary>
            <returns>String data from stream.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsJSON``1">
            <summary>
            Convert bytes to JSON and try to unserialize it to a custom type.
            </summary>
            <typeparam name="T">Custom type to unserialize to.</typeparam>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsJSONObject">
            <summary>
            Convert bytes to JSON and try to unserialize it to object.
            </summary>
            <returns>Deserialized JSON object.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsJSONArray">
            <summary>
            Convert bytes to JSON and try to unserialize it to array.
            </summary>
            <returns>Deserialized JSON array.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsXML``1">
            <summary>
            Convert bytes to XML and try to unserialize it.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Deserialized XML object.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsCSV(System.Char)">
            <summary>
            Convert bytes to CSV and try to unserialize it.
            </summary>
            <param name="iSeparator">Separator token, ';' by default.</param>
            <returns>Deserialized CSV list.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsYAML``1">
            <summary>
            Convert bytes to YAML and try to unserialize it.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsYAMLObject">
            <summary>
            Convert bytes to YAML object.
            </summary>
            <returns>Deserialized YAML object.</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.AsTexture">
            <summary>
            Convert bytes to Texture.
            </summary>
            <returns>Texture2D</returns>
        </member>
        <member name="M:BlueQuark.RESTResponse.DoUsingStreamReader``1(System.Func{System.IO.StreamReader,``0})">
            <summary>
            Perform
            </summary>
            <typeparam name="T">Optional generic return type.</typeparam>
            <param name="iAction">Action that uses StreamReader to return something.</param>
            <returns>Result of provided action.</returns>
        </member>
        <member name="T:BlueQuark.RESTState">
            <summary>
            Current state of the REST request.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.IDLE">
            <summary>
            Request has not started.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.WAITING_INTERNET">
            <summary>
            Request is waiting for retry.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.READY">
            <summary>
            Request is ready to start.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.SENDING">
            <summary>
            Sending request or uploading data to the network.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.RECEIVING">
            <summary>
            Downloading data from the network.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.FINISHED">
            <summary>
            Finished processing current query.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.SUCCEEDED">
            <summary>
            Request has finished without known errors.
            </summary>
        </member>
        <member name="F:BlueQuark.RESTState.FAILED">
            <summary>
            Request has encountered some error. Check Error member.
            </summary>
        </member>
        <member name="T:BlueQuark.Weather">
            <summary>
            Weather API of the wished location.
            </summary>
        </member>
        <member name="P:BlueQuark.Weather.IsBusy">
            <summary>
            Returns true if a request is currently processed.
            </summary>
        </member>
        <member name="M:BlueQuark.Weather.At(System.String,System.Action{BlueQuark.WeatherInfo[],BlueQuark.WeatherError},System.Int32)">
            <summary>
            Search for the weather of the current day. Can provide information up to the next week.
            </summary>
            <param name="iLocation">Asked location.</param>
            <param name="iOnEndRequest">Callback with Weather info.</param>
            <param name="iNumberOfInfos">Number of information to be retrieved. Use a value of around 60 to get weather for a week after.</param>
        </member>
        <member name="M:BlueQuark.Weather.HourlyAt(System.String,System.Action{BlueQuark.WeatherInfo[],BlueQuark.WeatherError},System.Int32,System.Boolean)">
            <summary>
            Weather forecast at 8am, 12pm, 4pm and 8pm.
            </summary>
            <param name="iLocation">Target location.</param>
            <param name="iOnEndRequest">Callback with weather information.</param>
            <param name="iNumberOfInfos">Number of informations to be retrieved.</param>
            <param name="iHourlyFilter">Should hourly filters be applied or not ? If true, only 8am, 12pm, 4pm and 8pm are returned.</param>
        </member>
        <member name="T:BlueQuark.WeatherLoc">
            <summary>
            Represents the weather location.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.City">
            <summary>
            City location.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.State">
            <summary>
            State location.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.Country">
            <summary>
            Country loaction.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.APICode">
            <summary>
            API Code.
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherInfo">
            <summary>
            This class represents the weather at a specific hour.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Location">
            <summary>
            Location of the weather info.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Hour">
            <summary>
            Hour of the day.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Day">
            <summary>
            Day of the month.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Date">
            <summary>
            Day with format YYYY-MM-DD.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Type">
            <summary>
            Weather type (Sunny, overcast, cloudy ...).
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.MinTemperature">
            <summary>
            The maximum expected temperature in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.MaxTemperature">
            <summary>
            The minimum expected temperature in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.AverageWindSpeed">
            <summary>
            The speed of the wind in km/h.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.GustWindSpeed">
            <summary>
            The speed of the gust of wind in km/h.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.DegreeWind">
            <summary>
            The direction of the wind in degree.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Rain">
            <summary>
            The QPF (Quantitative Preciptation Forecast).
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherError">
            <summary>
            Error that may happen during a Weather request.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.NONE">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.UNKNOWN_LOCATION">
            <summary>
            Unable to find latitude and longitude of provided location.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.MANY_LOCATIONS">
            <summary>
            At least 2 cities exist with the same name.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.GEOLOCALIZATION_FAILED">
            <summary>
            Localization of device failed.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.GEOLOCALIZATION_DISABLED">
            <summary>
            No location was provided and localization was disabled.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.REQUEST_FAILED">
            <summary>
            Weather request timed-out or returned an error.
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherType">
            <summary>
            Different weather type.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.UNKNOWN">
            <summary>
            Not sure about the weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SUNNY">
            <summary>
            Sunny weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CLEAR">
            <summary>
            Clear weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.OVERCAST">
            <summary>
            Overcast weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CLOUDY">
            <summary>
            Cloudy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.PARTLY_CLOUDY">
            <summary>
            Partly Cloudy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.RAIN">
            <summary>
            Rainy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_OF_RAIN">
            <summary>
            Chance of rain.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SNOW">
            <summary>
            Snowy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_FLURRIES">
            <summary>
            Chance of flurries.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_SLEET">
            <summary>
            Chance of sleet.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_SNOW">
            <summary>
            Chance of snow.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_STORMS">
            <summary>
            Chance of storms.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.FLURRIES">
            <summary>
            Chance of flurries.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.FOG">
            <summary>
            Foggy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.HAZY">
            <summary>
            Hazy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.MOSTLY_CLOUDY">
            <summary>
            Mostly cloudy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.MOSTLY_SUNNY">
            <summary>
            Mostly sunny weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.PARTLY_SUNNY">
            <summary>
            Some sun.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SLEET">
            <summary>
            Sleet.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.THUNDERSTORMS">
            <summary>
            Thunderstorms.
            </summary>
        </member>
        <member name="T:BlueQuark.WebServices">
            <summary>
            Module that contains all web API (Email, Twitter, Facebook...).
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.HasInternetAccess">
            <summary>
            Returns true if a internet access is available.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.InternetConnectionType">
            <summary>
            Returns internet connection network type
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.EMailSender">
            <summary>
            Tool to send emails.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.EMailCrawler">
            <summary>
            Tool to fetch emails.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Weather">
            <summary>
            Weather API of the wished location.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Wikipedia">
            <summary>
            Wikipedia data base API.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Radio">
            <summary>
            Radio API.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Agoraio">
            <summary>
            Agoraio API.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.RobotEmail">
            <summary>
            Email address of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.RobotEmailPassword">
            <summary>
            Email password of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.REST">
            <summary>
            Base toolkit to get or send data via HTTP
            </summary>
        </member>
        <member name="T:BlueQuark.Wikipedia">
            <summary>
            Wikipedia data base API access;
            </summary>
        </member>
        <member name="P:BlueQuark.Wikipedia.IsBusy">
            <summary>
            Returns true if a request is processing.
            </summary>
        </member>
        <member name="M:BlueQuark.Wikipedia.Search(System.String,System.Action{BlueQuark.WikiItem[]})">
            <summary>
            Search Wikipedia for the corresponding word and get all results.
            </summary>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.Search(BlueQuark.ISO6391Code,System.String,System.Action{BlueQuark.WikiItem[]})">
            <summary>
            Search Wikipedia for the corresponding word and get all results.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.Search(BlueQuark.ISO6391Code,System.String,System.Boolean,System.Boolean,System.Action{BlueQuark.WikiItem[]})">
            <summary>
            Search Wikipedia for the corresponding word and get all results.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iTitleOnly">Search only in article titles.</param>
            <param name="iIsStrict">Search exactly the query provided.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.Search(System.String,System.Action{BlueQuark.WikiItem})">
            <summary>
            Search Wikipedia for the corresponding word and get the first result.
            </summary>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.Search(BlueQuark.ISO6391Code,System.String,System.Action{BlueQuark.WikiItem})">
            <summary>
            Search Wikipedia for the corresponding word and get the first result.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.Search(BlueQuark.ISO6391Code,System.String,System.Boolean,System.Boolean,System.Action{BlueQuark.WikiItem})">
            <summary>
            Search Wikipedia for the corresponding word and get the first result.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iTitleOnly">Search only in article titles.</param>
            <param name="iIsStrict">Search exactly the query provided.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.GetDefinition(System.String,System.Action{System.String})">
            <summary>
            Get a short definition of the corresponding word.
            </summary>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.GetDefinition(BlueQuark.ISO6391Code,System.String,System.Action{System.String})">
            <summary>
            Get a short definition of the corresponding word.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.GetExtract(System.String,System.Action{System.String})">
            <summary>
            Get a description extract for the corresponding word.
            </summary>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.GetExtract(BlueQuark.ISO6391Code,System.String,System.Action{System.String})">
            <summary>
            Get a description extract for the corresponding word.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.GetImage(System.String,System.Action{UnityEngine.Texture2D})">
            <summary>
            Get a main image of the wikipedia search result for the corresponding word.
            Null if word is not found or has no images.
            </summary>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="M:BlueQuark.Wikipedia.GetImage(BlueQuark.ISO6391Code,System.String,System.Action{UnityEngine.Texture2D})">
            <summary>
            Get a main image of the wikipedia search result for the corresponding word.
            Null if word is not found or has no images.
            </summary>
            <param name="iLanguage">Language of the search.</param>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="T:BlueQuark.EMail">
            <summary>
            Class which contains the message, the subject and the list of attachements that will be sent by using MailSender.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.FilePaths">
            <summary>
            List of file path attached to the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Addresses">
            <summary>
            List of adresses to send the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Attachments">
            <summary>
            Attachments list of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Subject">
            <summary>
            Subject of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Date">
            <summary>
            Date of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Body">
            <summary>
            Body of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.IsRead">
            <summary>
            Is email read?
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.ID">
            <summary>
            Email inbox ID.
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[],System.String[])">
            <summary>
            Creates a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
            <param name="iToAddresses">Email target addresses.</param>
            <param name="iFilePaths">Attachments path.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[],BlueQuark.EMailAttachment[])">
            <summary>
            Creates a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
            <param name="iToAddresses">Email target addresses.</param>
            <param name="iAttachments">Attachments path.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[])">
            <summary>
            Creates a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
            <param name="iToAddresses">.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String)">
            <summary>
            Creates a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor">
            <summary>
            Creates a mail with default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.AddTexture2D(UnityEngine.Texture2D,System.String)">
            <summary>
            Saves a texture 2d as a png in the folder then adds it to the mail.
            </summary>
            <param name="iTexture">Texture to add to save and add to the mail.</param>
            <param name="iFilePath">File path.</param>
        </member>
        <member name="M:BlueQuark.EMail.AddFile(System.String)">
            <summary>
            Adds file in the streaming asset folder.
            </summary>
            <param name="iFilePath">File path.</param>
        </member>
        <member name="M:BlueQuark.EMail.AddTo(System.String)">
            <summary>
            Adds a receiver af the mail.
            </summary>
            <param name="iAddress">Adress to send to.</param>
        </member>
        <member name="M:BlueQuark.EMail.ClearRecipient">
            <summary>
            Clears the list of adress to send to.
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.ClearFileAttachment">
            <summary>
            Clears the list of file attached to the mail.
            </summary>
        </member>
        <member name="T:BlueQuark.WikiItem">
            <summary>
            Wikipedia search result.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.PageID">
            <summary>
            Article ID in wiki database.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.URL">
            <summary>
            URL of the article.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.Title">
            <summary>
            Title of the article.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.Definition">
            <summary>
            Short definition.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.Extract">
            <summary>
            First paragraph of the article.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.Image">
            <summary>
            URL of the main image of the article, if exists.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.Language">
            <summary>
            The language of the containing wiki.
            </summary>
        </member>
        <member name="P:BlueQuark.WikiItem.Index">
            <summary>
            Index in search results.
            </summary>
        </member>
    </members>
</doc>
