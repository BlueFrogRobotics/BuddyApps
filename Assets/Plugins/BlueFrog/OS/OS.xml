<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OS</name>
    </assembly>
    <members>
        <member name="T:BlueQuark.Internal.AComponent">
            <summary>
            Most abstract class of the BlueQuark inner system. A component is a logical class that can subcribe to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.EnableLoop">
            <summary>
            Subscribe the component to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the subscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.DisableLoop">
            <summary>
            Unsubscribe the component from the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the unsubscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.IsInvokedFromMSCoreLib(System.Reflection.Assembly)">
            <summary>
            Check if the input assembly is mscorlib
            </summary>
            <param name="iCtorCallAssembly">The assembly to check</param>
            <returns>True if the assembly is mscorlib.dll</returns>
        </member>
        <member name="P:BlueQuark.Internal.AComponent.IsLooping">
            <summary>
            True if the component is registered to Looper.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AComponent.Parent">
            <summary>
            The parent transform of the current component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Initialize">
            <summary>
            Must be called once after Ctor.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Initialize(System.Object,System.Object[])">
            <summary>
            Must be called once after Ctor. Allow to set parameters.
            </summary>
            <param name="iArg">Any argument</param>
            <param name="iArgs">Any argument</param>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Loop">
            <summary>
            Called automatically at each frame when the component has subscribe to the Looper via EnableLoop().
            Can be disable via DisableLoop().
            </summary>
            <seealso cref="M:BlueQuark.Internal.AComponent.EnableLoop"/>
            <seealso cref="M:BlueQuark.Internal.AComponent.DisableLoop"/>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Reset">
            <summary>
            Called automatically when an app is leaving.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Reshape">
            <summary>
            Called automatically when the component is set as a child component in a new transform.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.Dispose">
            <summary>
            Called automatically when the component must be destroyed.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ABindedComponent">
            <summary>
            A binded component can subscribe to the EventBus system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.EventBus"/>
        </member>
        <member name="F:BlueQuark.Internal.ABindedComponent.mEventbus">
            <summary>
            The event bus system. Allow to subscribe and unsubscribe from events. Also used to fire events.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ABindedComponent.mHandlerRegistrations">
            <summary>
            All event registrations.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.RegisterHandler(System.String)">
            <summary>
            Register an handler (subscribtion id).
            </summary>
            <param name="iHandlerID">The subscribtion id</param>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.Bind">
            <summary>
            Suscribe your method listener to the wished event.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AEvent"/>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.Unbind">
            <summary>
            Unsubscribe to all events.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IAvailable">
            <summary>
            An IAvailable component can be considered as busy or available.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IAvailable.IsBusy">
            <summary>
            Returns true if the component is currently busy (displayed or processing something).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IStoppable">
            <summary>
            This component can be stopped.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IStoppable.Stop">
            <summary>
            Stop the running process.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AModule`2">
            <summary>
            Base class for operating system module. A module is a unique main component handling major features.
            All modules are accessibles through Buddy static class.
            </summary>
            <seealso cref="T:BlueQuark.Buddy"/>
            <typeparam name="U">Type of the Presenter's ULink.</typeparam>
            <typeparam name="M">Type of the metric suite.</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AMetricSuite">
            <summary>
            A metric suite class is used by each ABasePresenter class to test itself.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.RunUnitTests``2(BlueQuark.Internal.ABasePresenter{``0,``1})">
            <summary>
            Run the test suite of the component.
            </summary>
            <returns>IEnumerator for yield instruction</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.RunMetric``2(BlueQuark.Internal.ABasePresenter{``0,``1})">
            <summary>
            Run the metric suite of the component class.
            </summary>
            <returns>IEnumerator for yield instruction</returns>
        </member>
        <member name="T:BlueQuark.Internal.ABasePresenter`2">
            <summary>
            A Base presenter class is a Presenter class with a dedicated metric test suite. It also can use the Require/Release system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AULink"/>
            <seealso cref="T:BlueQuark.Internal.AMetricSuite"/>
            <typeparam name="U">Type of the Presenter's ULink</typeparam>
            <typeparam name="M">Type of the metric suite</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.ABasePresenter`2.IsRequired">
            <summary>
            Gets the required state of the current component (this). True if at least one external component is using this.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.Require(System.Object)">
            <summary>
            Sets a flag that the current component (this) is used by the calling component (owner). 
            An app can require a component only one time. Multiple components in OS can require a same component.
            MUST be call from Impl side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.Release">
            <summary>
            Free the current component (this) by the calling component. 
            MUST be call from Impl side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.ForceRelease">
            <summary>
            Free all 'require' flags
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ABasePresenter`2.TaskOwners">
            <summary>
            Gets all components that are currently using this component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.RunTests">
            <summary>
            Runs the test suite of the component.
            </summary>
            <returns>IEnumerator for yield instruction.</returns>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.RunMetric">
            <summary>
            Runs the metric suite of the component class.
            </summary>
            <returns>IEnumerator for yield instruction.</returns>
        </member>
        <member name="T:BlueQuark.Internal.APresenter`1">
            <summary>
            A presenter class is linked to a Unity MonoBehaviour (called ULink). 
            ULink are not directly accessible and must be managed by the presenter.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AULink"/>
            <typeparam name="U">Type of the Presenter's ULink.</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.APresenter`1.mULink">
            <summary>
            Unity link (MonoBehaviour) of the Presenter object. Use it for platform dependant purposes and/or display and/or Unity callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponentInChildren``1">
            <summary>
            Returns the Unity component of Type type in the GameObject or any of its children using depth first search.
            An Unity component is returned only if it is found on an active GameObject.
            </summary>
            <typeparam name="T">The type of the Unity component to retrieve</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponentInParent``1">
            <summary>
            Returns the component of Type type in the GameObject or any of its parents.
            Recurses upwards until it finds a valid component.Returns null if no component found. Only components on active GameObjects are returned.
            </summary>
            <typeparam name="T">The type of the Unity component to retrieve</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponent``1">
            <summary>
            Returns the Unity component of Type type if the game object has one attached, null if it doesn't.
            </summary>
            <typeparam name="T">The type of Unity component to retrieve.</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponents``1">
            <summary>
            Returns Unity components of Type type if the game object has one attached, null if it doesn't.
            </summary>
            <typeparam name="T">The type of Unity component to retrieve.</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.AddComponent``1">
            <summary>
            Adds a Unity component class corresponding to the requested type to the game object.
            </summary>
            <typeparam name="T">The type of the Unity component to add</typeparam>
            <returns>The added Unity component</returns>
        </member>
        <member name="P:BlueQuark.Internal.APresenter`1.Parent">
            <summary>
            Parent transform of the presenter.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement. The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator.</param>
            <returns>The new started coroutine.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopAllCoroutines">
            <summary>
            Stop all started coroutines in this presenter.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AIndexableULink">
            <summary>
            ULink that are enumerable like multiple sensors or motors. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AIndexableULink.Index">
            <summary>
            Index of the component. The Presenter must be a regular behaviour
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AHeadHinge`2">
            <summary>
            Hinge component of the robot neck. 
            </summary>
            <summary>
            Hinge component of the robot neck. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.IsBusy">
            <summary>
            Returns true if the hinge is currently moving.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Error">
            <summary>
            Error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Angle">
            <summary>
            Current angle of the hinge. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Speed">
            <summary>
            Current speed of the hinge. Value in meter by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.AngularVelocity">
            <summary>
            Current angular velocity of the hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.AngularVelocityPercent">
            <summary>
            Current angular velocity in percent, relative to the max reachable velocity.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AHeadHinge`2.Locked">
            <summary>
            Lock the hinge. A locked hinge cannot move until unlocking.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.Stop">
            <summary>
            Stops any running hinge command.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AHeadHinge`2.SetPIDs(System.Single,System.Single,System.Single)">
            <summary>
            Set the proportional–integral–derivative controller. It is a control loop feedback mechanism.
            </summary>
            <param name="iKp">Term P is proportional to the current value of the SP − PV error e(t).</param>
            <param name="iKi">Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.</param>
            <param name="Lin">erm D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.</param>
        </member>
        <member name="T:BlueQuark.Internal.LocalBehaviourAlgorithmVariable">
            <summary>
            Represents a named variable declared during a Behaviour algorithm. 
            </summary>
            <seealso cref="T:BlueQuark.ABehaviourAlgorithmVariable"/>
        </member>
        <member name="T:BlueQuark.Internal.IdleFaceState">
            <summary>
            Base class for state machine's state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IdleFaceState.OnStateEnter(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target comes in the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="M:BlueQuark.Internal.IdleFaceState.OnStateExit(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target leaves the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="T:BlueQuark.Internal.LabialExpression">
            <summary>
            Represents different labial expressions that Buddy can show.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.LabialExpression.NEUTRAL">
            <summary>
            Neutral way to talk.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.LabialExpression.ANGRY">
            <summary>
            Angry way to talk.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.LabialExpression.HAPPY">
            <summary>
            Happy way to talk.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ActionManager">
            <summary>
            The action manager class defines high level function to control Buddy action.
            It also contains some function for decision making based on situation (state), mood and desire.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CompanionState">
            <summary>
            Different states of Companion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CompanionAction">
            <summary>
            Enum of actions that Buddy can perform
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.NONE">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.WANDER">
            <summary>
            Wander.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.DANCE">
            <summary>
            Dance.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.FOLLOW">
            <summary>
            Follow.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.GAME">
            <summary>
            Game.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.EDUTAINMENT">
            <summary>
            Edutainment.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.SERVICE">
            <summary>
            Service.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.JOKE">
            <summary>
            Joke.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.CHAT">
            <summary>
            Chat.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.TOUCH_INTERACT">
            <summary>
            Touch interact.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.LOOK_FOR_USER">
            <summary>
            Look for user.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.ASK_USER_PROFILE">
            <summary>
            Ask user profile.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.INFORM">
            <summary>
            Inform.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.EXPRESS_MOOD">
            <summary>
            Express mood.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.NOTIFY">
            <summary>
            Notify.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.MONITOR_APP">
            <summary>
            Monitor app.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.CompanionAction.ASK_NOTIFY">
            <summary>
            Ask notify.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LookingToNotifyState">
            <summary>
            This state is called when Buddy is looking for a/any user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskNotifyState">
            <summary>
            This state is used to ask the name of the current user
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AskNotifyState.OnEndListen(BlueQuark.SpeechInput)">
            <summary>
            This function is called when an answer is received from the user
            </summary>
            <param name="iInput">User speech input</param>
        </member>
        <member name="T:BlueQuark.Internal.FDotNavigationDot">
            <summary>
            Dot navigation bullet for dot navigation bar Footer component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FDotNavigationDot.OnClick">
            <summary>
            Called when the dot is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FDotNavigationDot.Index">
            <summary>
            Index of the dot.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.FDotNavigationDot.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets a custom image to the dot element.
            </summary>
            <param name="iSprite">The sprite to set</param>
        </member>
        <member name="M:BlueQuark.Internal.FDotNavigationDot.SetColor(UnityEngine.Color)">
            <summary>
            Sets a custom color to the dot element.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="M:BlueQuark.Internal.FDotNavigationDot.Select(System.Boolean)">
            <summary>
            Sets the dot as selected or not.
            </summary>
            <param name="iVal">The value of the selection.</param>
        </member>
        <member name="T:BlueQuark.Internal.CommandHistory`1">
            <summary>
            Records a fixed number of recent commands. Default size is 6.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BlueQuark.Internal.CommandHistory`1.Size">
            <summary>
            Number of commands
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Velocity">
            <summary>
            Linear and angular velocities of the robot
            Can be used with Wheels.SetVelocities
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Velocity.Linear">
            <summary>
            Linear velocity m/s
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Velocity.Angular">
            <summary>
            Angular velocity deg/s counterclockwise
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Velocity.PIDControl(BlueQuark.Internal.Velocity)">
            <summary>
            Naive controler
            </summary>
            <param name="iCommand"></param>
        </member>
        <member name="T:BlueQuark.Internal.AttentionState">
            <summary>
            States for two(multi)-human situation
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AttentionState.IDLE">
            <summary>
            No human present
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AttentionState.TRACKING">
            <summary>
            Tracking one human
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AttentionState.GLANCING">
            <summary>
            When another human entered while tracking, glance breifly
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AttentionState.ALTERNATING">
            <summary>
            Alternating between two humans
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Attention">
            <summary>
            Areas of attention to look at based on perception.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TopoNavigationSubStrategy">
            <summary>
            Class that commands the navigation movement of the robot.
            Main functions:
            1. Localization
            2. Find Orientation during navigation
            3. Advance with obstacle detection / obstacle avoidance
            4. Navigation controller
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mCurrentLandmark">
            <summary>
            Current landmark identified by odometry
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mCurrentStep">
            <summary>
            Current step in path identified by odometry
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mCurrentDist">
            <summary>
            Distance advanced in current step
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mIdxPath">
            <summary>
            Current path
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopoNavigationSubStrategy.CurrentRoom">
            <summary>
            Current room after identification
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mCurrentRoom">
            <summary>
            Property cannot be used as out parameter!
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mGoalRoom">
            <summary>
            Goal room
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mVisionStep">
            <summary>
            Step in path identified by vision
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mVisionStepmax">
            <summary>
            The max step vision till now
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mStepsAfterTurning">
            <summary>
            How many times the robot has been turning
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mConfidence">
            <summary>
            The confidence of orientation
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mLastPosition">
            <summary>
            Position of the last learned landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mVerificationCountdown">
            <summary>
            Vision verification of landmark transition countdown
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mOdometryNeedVerify">
            <summary>
            If odometry determined landmark transition needs verified
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.TopoNavigationSubStrategy.mTotalSteps">
            <summary>
            Total navigation steps
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.Initialize">
            <summary>
            Initialize variables used in navigation
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.Loop">
            <summary>
            Check obstalce using infrared sensors each frame
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.SaveRecord">
            <summary>
            Save diagnostic data
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.GetOrientationToLandmark">
            <summary>
            Take camera image to determine orientation on path (the angle to turn)
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.NavigateAsync(BlueQuark.Room)">
            <summary>
            Navigation function
            </summary>
            <param name="iRoom">The destination room</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.AdvanceStep">
            <summary>
            Navigation function to turn and advance a step
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.FindLandmarkAsync">
            <summary>
            Localization by first finding the room then the landmark
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.FindInitialPositonAndPath(BlueQuark.Room)">
            <summary>
            Coroutine to find the room, the landmark and finds a path to goal
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.DetermineAngle(System.Single)">
            <summary>
            Determine angle only from IR detections
            </summary>
            <param name="iAngle"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.RunNavigation(BlueQuark.Room)">
            <summary>
            Navigation function called by #Unity#
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.StopAllMovements">
            <summary>
            Stop all movements
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.StartMv">
            <summary>
            Test a movement command
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.TestOneMeter">
            <summary>
            Test movement command
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.Watcher(UnityEngine.Vector3,System.Single)">
            <summary>
            Monitor the termination of AdvanceIntelligent()
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.AdvanceIntelligent(System.Single,System.Single)">
            <summary>
            Advance to goal with obstacle avoidance
            Adjust direction by re-calculating command after detours
            </summary>
            <param name="iSpeed">Speed</param>
            <param name="iDist">Distance to be traveled</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.AdvanceWithObstacleDetection(System.Single,System.Single,System.Boolean)">
            <summary>
            Advance a certain distance with obstacle detection 
            </summary>
            <param name="iDist">Distance in m</param>
            <param name="iSpeed">Speed in m/s</param>
            <param name="iDetour">When encoutnered obstalce, advance or stop</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.UpdatePathProgress(System.Int32,System.Int32)">
            <summary>
            Update progress in the path (which landmarks to search)
            SetActive iStep et iStep + 1
            When starting, iStep = 0
            </summary>
            <param name="iPath"></param>
            <param name="iStep"></param>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.GetLandmarkAtStep(System.Int32,System.Int32)">
            <summary>
            Get the landmark corresponding to iStep in iPath   
            </summary>
            <param name="iPath"></param>
            <param name="iStep"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.FindLandmarkInPath(System.Int32,System.Int32)">
            <summary>
            Find at which step is the landmark in a path
            If not found, return 0
            </summary>
            <param name="iPath"></param>
            <param name="iLandmark"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.GetOrientation(OpenCVUnity.Mat,System.Int32,System.Int32,System.Single,System.Int32@,System.Int32@)">
            <summary>
            Get orientation by comparing the current image with images learned
            In the model.
            </summary>
            <param name="iRGBFrame">Image</param>
            <param name="iPath">In which path</param>
            <param name="iStep">At which step in path</param>
            <param name="iOdo">Odometry info</param>
            <param name="oConfidence">The confidence in the orientation result</param>
            <param name="oVisualStep">(for testing purpose) vision-identified step</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.FindPathToRoom(System.Int32,BlueQuark.Room)">
            <summary>
            Find a path leading to the room in the topological map.
            Dijkstra's algorithm is used to find the shortest-length path.
            The path index is returned.
            </summary>
            <param name="iStart">Index of start landmark</param>
            <param name="iRoom">Destination room</param>
            <returns>Path index</returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.FindRoomThenLandmark(OpenCVUnity.Mat,BlueQuark.Room@,System.Int32)">
            <summary>
            Using vision find first the room then the nearest landmark in room
            The robot will turn on itself to take [iNumImages] photos
            Once finished, oRoom is assigned the room result.
            </summary>
            <param name="iRGBFrame"></param>
            <param name="oRoom"></param>
            <param name="iNumImages"></param>
            <returns>Landmark index</returns>
        </member>
        <member name="M:BlueQuark.Internal.TopoNavigationSubStrategy.FinishedPath(System.Int32,System.Int32)">
            <summary>
            Return if a step of the path has finished during navigation.
            </summary>
            <param name="iPath">Path index</param>
            <param name="iStep">Step</param>
            <returns>If path has finished</returns>
        </member>
        <member name="T:BlueQuark.Internal.IRDetection">
            <summary>
            Distance data given by infrared sensors
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Wall">
            <summary>
            Detection results of walls
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ObstacleAvoidance.#ctor">
            <summary>
            Create a new obstacle avoidance class
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ObstacleAvoidance.IRDetectWall">
            <summary>
            Wall detection using infrared sensors
            Front, left, right or clear
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.ObstacleAvoidance.ObstacleDetected(System.Single@)">
            <summary>
            Ported from old SDK. Detect an obstacle and calculate the angle to turn.
            </summary>
            <param name="oAngleToTurn"></param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Internal.TopologicalMappingNativeLibrary">
            <summary>
            Class for native DLL of topological navigation.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TopologocalMappingNativeObj">
            <summary>
            Native C++ topo navigation class
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologocalMappingNativeObj.Instance">
            <summary>
            Get instance
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologocalMappingNativeObj.Localizer">
            <summary>
            The localizer object
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologocalMappingNativeObj.JITInitialize(System.Boolean)">
            <summary>
            Initialize C++ object.
            TODO: Unity is single threaded? no need for thread safe?
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologocalMappingNativeObj.SaveObj">
            <summary>
            Save C++ object
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TopologicalMapPersistentData">
            <summary>
            Class for persistent data:
            The positions and angles of landmarks, etc
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.LandmarkPositions">
            <summary>
            Landmarks' positions by odometry
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.OrientationToNext">
            <summary>
            Landmarks' orientation on the path to the next landmark
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.Landmarks">
            <summary>
            Landmarks organized in rooms
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.LandmarkCount">
            <summary>
            Total number of landmarks
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.CurrentLandmark">
            <summary>
            Current Landmark to be added
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TopologicalMapPersistentData.Rooms">
            <summary>
            Room Names
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologicalMapPersistentData.Clear">
            <summary>
            Clear saved data.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TopologicalMapPersistentData.Save(System.String)">
            <summary>
            Save data
            </summary>
            <param name="iPath">Path to be saved</param>
        </member>
        <member name="T:BlueQuark.Internal.Reporter">
            <summary>
            Loads, unloads apps and store transited data.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MapperULink">
            <summary>
            ULink
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Waypoint.ID">
            <summary>
            Identifier of waypoint
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Waypoint.Position">
            <summary>
            Global coordianation by odometry
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.OLD.NetworkBroadcastResult">
            <summary>
            Structure for broadcast messages
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.OLD.NetworkBroadcastResult.serverAddress">
            <summary>
            The address of the server that sent the broadcast
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.OLD.NetworkBroadcastResult.broadcastData">
            <summary>
            Content of the broadcast
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.OLD.NetDiscovery">
            <summary>
            Unity Networking NetworkDiscovery added in this dll for namespace separation in dll reasons
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.OLD.NetDiscovery.StartAsClient">
            <summary>
            Starts the service as client and listens for broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Internal.OLD.NetDiscovery.StartAsServer">
            <summary>
            Starts the service as server and emits a broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Internal.OLD.NetDiscovery.StopBroadcast">
            <summary>
            Stops the broadcast service
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.OLD.NetDiscovery.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Callback called when a broadcast is received
            </summary>
            <param name="iFromAddress">Address that sent the broadcast</param>
            <param name="iData">Body data of the broadcast</param>
        </member>
        <member name="T:BlueQuark.Internal.OLD.LocalListener">
            <summary>
            This class handles the Local Broadcast Listener and messages with the Smartphone app to launch local remote control
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.OLD.LaunchTelepresence">
            <summary>
            Behaviour for starting RemoteControlApp
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.OLD.BroadcastListener">
            <summary>
            This is to create a Broadcast client to let
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.OLD.BroadcastListener.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Own method to configure what to do when receiving a Broadcast
            </summary>
            <param name="iFromAddress">The address that send the broadcast</param>
            <param name="iData">Data contained in the broadcast</param>
        </member>
        <member name="T:BlueQuark.Internal.DesireManager">
            <summary>
            Manager class that controls the desire values
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DetectionManager">
            <summary>
            Manager class that have reference to the differents stimuli and subscribes to their callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.OnThermalDetected(BlueQuark.ObjectEntity[])">
            <summary>
            Called when fire has been detected
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.OnKidnappingDetected">
            <summary>
            Called when buddy is being kidnapped
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.LinkDetectorsEvents">
            <summary>
            Subscribe to the detectors callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DetectionManager.UnlinkDetectorsEvents">
            <summary>
            Unsubscibe to the detectors callbacks
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ACompanionState">
            <summary>
            Base class for Companion state machine's state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ACompanionState.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement.The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator</param>
            <returns>The new started coroutine</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACompanionState.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.Internal.ACompanionState.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop</param> 
        </member>
        <member name="T:BlueQuark.Internal.ChargingState">
            <summary>
            This state is used when the robot is charging
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DanceState">
            <summary>
            This state is used when Buddy wants to move and decides to dance
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GotoChargeState">
            <summary>
            This Navigating state is used to go back to charging station
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IdleState">
            <summary>
            This class is used when the robot is in default mode
            It will then go wander, interact, look for someone or charge according to the stimuli
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LookingForSomeoneState">
            <summary>
            This state is called when Buddy is looking for a/any user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NapState">
            <summary>
            This class is used when the robot is in default mode
            It will then go wander, interact, look for someone or charge according to the stimuli
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.WanderState">
            <summary>
            This state is call when Buddy wants to move
            it will roam around the house
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskInfoState">
            <summary>
            This state is used to ask a personal info to the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskJokeState">
            <summary>
            This state is used to ask for a joke to the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AskNameState">
            <summary>
            This state is used to ask the name of the current user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ColourRecoState">
            <summary>
            This state is used to recognize the colour perceived by Buddy
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ConnectionState">
            <summary>
            This state is used to test the connection
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.CopyUserState">
            <summary>
            This state is used to mimic user head position + facial emotion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.InformState">
            <summary>
            When Buddy wants to teach, it can also
            inform the user of some of its knowledge
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.InformState.GetRandomUserFact(BlueQuark.Internal.UserProfile)">
            <summary>
            TODO: move this function in profiling?
            </summary>
            <param name="iUserProfile"></param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Internal.ListenJokeState">
            <summary>
            This state is used when Buddy listens to a joke from the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MirrorState">
            <summary>
            This state is to show the camera feedback
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ProposeEdutainementState">
            <summary>
            This state is used to propose an edutainement app when
            Buddy feels like teaching
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ProposeGameState">
            <summary>
            Buddy wants to play and will propose some game to the user.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ProposeServiceState">
            <summary>
            Buddy will propose a service to the user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RobotTouchedState">
            <summary>
            This state is called when the robot is touched
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TellJokeState">
            <summary>
            This state is called when Buddy wants to tell a joke
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VocalCommandState">
            <summary>
            This state is to manage all type of vocal commands from user
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Internal.VocalCommandState.SortQuestionType(System.String,System.String)" -->
        <member name="M:BlueQuark.Internal.VocalCommandState.GiveHourInEnglish">
            <summary>
            Give The Hour in English
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.VerbalizeHour(System.String)">
            <summary>
            Harder way to tell what time it is
            </summary>
            <param name="iSentence">Sentence to say</param>
            <returns>Sentence to say</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.GiveHourMeridiem(System.String)">
            <summary>
             Simple way to tell what time it is
            </summary>
            <param name="iSentence">Sentence to say</param>
            <returns>Sentence to say</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.GetTime(System.String)">
            <summary>
            Recover Time In Seconds
            </summary>
            <param name="iSpeech">Speech</param>
            <returns>Time in Seconds</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.SecondsToHour(System.Int32)">
            <summary>
            Recover the Time in (Hour, Minutes, Seconds)
            </summary>
            <param name="iTimeInSeconds">time in seconds</param>
            <returns>Array of int with 0 : hour, 1 : minutes, 2 : seconds</returns>
        </member>
        <member name="M:BlueQuark.Internal.VocalCommandState.IsWifiEnabledAndConnectedAsync(System.Action{System.Boolean})">
            <summary>
            Verify if the wifi is enabled in Buddy and check after if Buddy is connected to a wifi
            </summary>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Internal.BuddyInArmsState">
            <summary>
            This state is used when Buddy is in the arm of a user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ExpressMoodState">
            <summary>
            This state is used when Buddy wants to express its emotion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.FollowState">
            <summary>
            This state is used when Buddy needs to follow a user
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LandingState">
            <summary>
            State used when we come back to Companion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MonitorAppState">
            <summary>
            This is the state we use when an app is launched.
            Buddy shouldn't behave anymore....
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NotifyState">
            <summary>
            This state is used when Buddy needs to inform the user of a notification
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserDetectedState">
            <summary>
            This state is called when a user is detected but not engaged (yet).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserDisengagedState">
            <summary>
            This state is used when the user explicitly ask Buddy to go away
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.WaitStartState">
            <summary>
            This state is just to wait for everything to be up in OS
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.SportList">
            <summary>
            Represent a sport.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.BASKETBALL">
            <summary>
            Basketball.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.FOOTBALL">
            <summary>
            Football.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.HANDBALL">
            <summary>
            Handball.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.RUGBY">
            <summary>
            Rugby.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.TENNIS">
            <summary>
            Tennis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.TABLETENNIS">
            <summary>
            Tabletennis.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.CRICKET">
            <summary>
            Cricket.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.SWIMMING">
            <summary>
            Swimming.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.RUNNING">
            <summary>
            Running.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.ARCHERY">
            <summary>
            Archery.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.FENCING">
            <summary>
            Fencing.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.CURLING">
            <summary>
            Curling.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.SportList.CLIMBING">
            <summary>
            Climbing.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MusicStyle">
            <summary>
            Represents a music style.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.CLASSICAL">
            <summary>
            Classical.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.JAZZ">
            <summary>
            Jazz.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.BLUES">
            <summary>
            Blues.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.ROCK">
            <summary>
            Rock.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.METAL">
            <summary>
            Metal.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.RAP">
            <summary>
            Rap.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.HIP_HOP">
            <summary>
            Hip hop.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.R_AND_B">
            <summary>
            RnB.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.ELECTRO">
            <summary>
            Electro.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.COUNTRY">
            <summary>
            Country.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.POP">
            <summary>
            Pop.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.MusicStyle.UNKNOWN">
            <summary>
            Unknown.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserProfile">
            <summary>
            Class that represent a user profile.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.FirstName">
            <summary>
            First name.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.LastName">
            <summary>
            Last name.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.BirthDate">
            <summary>
            Birth date. Format : "YYYY-MM-DD"
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.Gender">
            <summary>
            Gender.
            </summary>
            <seealso cref="P:BlueQuark.Internal.UserProfile.Gender"/>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.Tastes">
            <summary>
            Tastes.
            </summary>
            <seealso cref="T:BlueQuark.Internal.UserTastes"/>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.Occupation">
            <summary>
            Occupations.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserProfile.CityAddress">
            <summary>
            City address.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.UserProfile.#ctor">
            <summary>
            Create a user profile object.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.UserTastes">
            <summary>
            Class that represent the tastes of a user.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserTastes.Colour">
            <summary>
            Colour.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserTastes.Sport">
            <summary>
            Sport.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.UserTastes.MusicBand">
            <summary>
            Name of a Music band.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.UserTastes.#ctor">
            <summary>
            Create a user tastes object.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TGraphPlot">
            <summary>
            Represents a full screen data plot that can be displayed in a monolith layout.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TGraphPlot.OnClick">
            <summary>
            Called when the plot is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TGraphPlot.SetUpdates(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}})">
            <summary>
            Set the graph callback methods.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph points. Cannot be null</param>
            <param name="iOnUpdateOrdinates">Function called to update graph points. Cannot be null</param>
        </member>
        <member name="T:BlueQuark.Internal.TVideoStream">
            <summary>
            Represents a full screen stream that can be displayed in a monolith layout.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TVideoStream.OnClick">
            <summary>
            Called when the main image is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TVideoStream.SetTexture(UnityEngine.Texture2D)">
            <summary>
            Set the main image.
            </summary>
            <param name="iTexture">The sprite to display. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.Internal.AUIFactory`2">
            <summary>
            UI factory provides UI widgets.
            </summary>
            <typeparam name="W">Kind of supported widget by the factory</typeparam>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="M:BlueQuark.Internal.AUIFactory`2.Provide``1">
            <summary>
            Provides an instantiate widget. Provided widgets must be placed in their respective transform parent and Reshape().
            </summary>
            <typeparam name="T">Type of widget to provide.</typeparam>
            <returns>The built widget.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AUIFactory`2.Provide(System.Type)">
            <summary>
            Provides an instantiate widget. Provided widgets must be placed in their respective transform parent and Reshape().
            </summary>
            <param name="iType">Type of widget to provide.</param>
            <returns>The built widget.</returns>
        </member>
        <member name="T:BlueQuark.Internal.IWidget">
            <summary>
            Widget are very base element for UI display. Every Widget are a Presenter.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Loader">
            <summary>
            Loader GUI class handle loading screen when an app must be loaded.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Loader.IsBusy">
            <summary>
            Returns true if the Loader is currently displaying something.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Sprite)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null or empty.</param>
            <seealso cref="M:BlueQuark.Internal.Loader.Hide"/>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Sprite,UnityEngine.Sprite)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Font,UnityEngine.Sprite)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iTitleFont">Font of the title text.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Font,UnityEngine.Sprite,UnityEngine.Sprite)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iTitleFont">Font of the title text.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Sprite,System.String,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iSpinText">Text of the spinning wheel.</param>
            <param name="iSpinColor">Color of the spinning wheel text.</param>
            <param name="iSpinImage">Image of the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Sprite,UnityEngine.Sprite,System.String,UnityEngine.Sprite)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
            <param name="iSpinText">Text of the spinning wheel.</param>
            <param name="iSpinImage">Image of the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Internal.Loader.Display(System.String,UnityEngine.Font,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Sprite,System.String,UnityEngine.Font,UnityEngine.Color,UnityEngine.Sprite)">
            <summary>
            Display the loading screen until Hide();
            </summary>
            <param name="iTitle">Text to display as title. Cannot be null or empty.</param>
            <param name="iTitleFont">Font of the title text.</param>
            <param name="iTitleColor">Color of the title text.</param>
            <param name="iLogoImage">Main image to display. Cannot be null.</param>
            <param name="iBackgroundImage">Background image.</param>
            <param name="iSpinText">Text of the spinning wheel.</param>
            <param name="iSpinFont">Font of the spinning wheel text.</param>
            <param name="iSpinColor">Color of the spinning wheel text.</param>
            <param name="iSpinImage">Image of the spinning wheel.</param>
        </member>
        <member name="T:BlueQuark.Internal.FakeSpeecher">
            <summary>
            The FakeSpeecher is the input text bar to type a fake input speech text. Can be displayed/hide with Enter key.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FakeSpeecher.IsBusy">
            <summary>
            Returns true if displayed.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ASlideToast">
            <summary>
            Represents a toast that can be slide (left/right) to another slide toast.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ASlideToast.ParentSlideSet">
            <summary>
            The slide set gathering all other slide toasts
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMonolithToast">
            <summary>
            Toast that includes only an only central GUI element.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMonolithToast.SetMainWidget``1(``0)">
            <summary>
            Set the solo widget inside the monolith layout of the toast.
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="iWidget">The widget that will be the main item of the layout</param>
        </member>
        <member name="M:BlueQuark.Internal.AMonolithToast.SetMainWidget(UnityEngine.GameObject)">
            <summary>
            Set the solo gameobject inside the monolith layout of the toast.
            </summary>
            <param name="iGameObject">The gameobject that will be the main item of the layout</param>
        </member>
        <member name="T:BlueQuark.Internal.TMonolithLayout">
            <summary>
            Represents a one block layout able to store only one big sealed widget or custom gameobject.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetMainWidget``1(``0)">
            <summary>
            Sets the main widget. 
            </summary>
            <typeparam name="T">Type of the widget</typeparam>
            <param name="iWidget">The widget to display. Must be a monolith widget</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetMainWidget(UnityEngine.GameObject)">
            <summary>
            Sets the main widget. 
            </summary>
            <param name="iGameObject">The custom game object to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.AppearFromLeft">
            <summary>
            Plays an animation to make the layout appeared from the right side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.AppearFromRight">
            <summary>
            Plays an animation to make the layout appeared from the left side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SlideToRight">
            <summary>
            Plays an animation to make the layout disappeared to the left side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SlideToLeft">
            <summary>
            Plays an animation to make the layout disappeared to the right side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetActiveRightArrow(System.Boolean)">
            <summary>
            Active or inactive the right arrow.
            </summary>
            <param name="iActive">True to enable the rigth arrow</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.SetActiveLeftArrow(System.Boolean)">
            <summary>
            Active or inactive the left arrow.
            </summary>
            <param name="iActive">True to enable the left arrow</param>
        </member>
        <member name="M:BlueQuark.Internal.TMonolithLayout.Clear">
            <summary>
            Remove the main widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.THorizontalLayout">
            <summary>
            Represents an horizontal carousel containing many sealed widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.THorizontalLayout.Add``1(``0)">
            <summary>
            Adds a widgets at the right a already added widgets.
            </summary>
            <typeparam name="T">Type of the widget to add</typeparam>
            <param name="iWidget">The widget to add. Must be an horizontal widget</param>
        </member>
        <member name="M:BlueQuark.Internal.THorizontalLayout.Remove``1(``0)">
            <summary>
            Removes the given widget.
            </summary>
            <typeparam name="T">Type of the widget to remove</typeparam>
            <param name="iWidget">True if the remove was effective</param>
        </member>
        <member name="T:BlueQuark.Internal.TVerticalLayout">
            <summary>
            Represents a vertical list of sealed widget.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Add(UnityEngine.GameObject)">
            <summary>
            Adds a custom gameobject inside the list.
            </summary>
            <param name="iCustomGameObject">The game object to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Remove(UnityEngine.GameObject)">
            <summary>
            Removes a custom gameobject from the list.
            </summary>
            <param name="iCustomGameObject">The gameobject to add</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Select(UnityEngine.GameObject)">
            <summary>
            Makes the gameobject as selected. Does not unselect selected other elements.
            </summary>
            <param name="iCustomGameObject">The gameobject to select.</param>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Add(BlueQuark.TVerticalListBox)">
            <summary>
            Adds a vertical list widget inside the list.
            </summary>
            <param name="iWidget">The widget to add. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Remove(BlueQuark.TVerticalListBox)">
            <summary>
            Removes a vertical list widget from the list.
            </summary>
            <param name="iWidget">The widget to remove.</param>
            <returns>True if the remove was effective.</returns>
        </member>
        <member name="M:BlueQuark.Internal.TVerticalLayout.Select(BlueQuark.TVerticalListBox)">
            <summary>
            Makes the vertical widget as selected. Does not unselect selected other elements.
            </summary>
            <param name="iWidget">The box to select.</param>
        </member>
        <member name="T:BlueQuark.Internal.ICapsuleToasterWidget">
            <summary>
            Base interface for typed capsule toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATCapsuleWidget`1">
            <summary>
            Base class for a capsule toast widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.ATHorizontalWidget`1">
            <summary>
            Base class for a horizontal toast widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IHorizontalToasterWidget">
            <summary>
            Base interface for typed horizontal toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATMonolithWidget`1">
            <summary>
            Base class for a monolith toast widget. Only one monolith widget can be displayed at the same time.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IMonolithToasterWidget">
            <summary>
            Base interface for typed monolith toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TCalendar">
            <summary>
            TODO: WIP. Represents a calendar to setup dates.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TCountdown">
            <summary>
            Represents a countdown widget to display hours, minutes and seconds.
            </summary>
            <seealso cref="T:BlueQuark.CountdownToast"/>>
        </member>
        <member name="P:BlueQuark.Internal.TCountdown.OnClick">
            <summary>
            Called when the countdown is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TCountdown.OnTic">
            <summary>
            Called on each second tic.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TCountdown.Playing">
            <summary>
            Play/Pause the clock.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TCountdown.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Set the background color.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="M:BlueQuark.Internal.TCountdown.SetTime(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the start countdown time.
            </summary>
            <param name="iSeconds">Seconds remaining. From 0 to 59.</param>
            <param name="iMinutes">Minutes remaining. From 0 to 59.</param>
            <param name="iHours">Hours remaining. From to 99.</param>
        </member>
        <member name="M:BlueQuark.Internal.TCountdown.Pulse(System.Boolean)">
            <summary>
            Makes the background pulse.
            </summary>
            <param name="iVal">True to make the background pulse, false otherwise.</param>
        </member>
        <member name="T:BlueQuark.Internal.TPicture">
            <summary>
            Represents a full screen image that can be displayed in a monolith layout.
            </summary>
            <seealso cref="T:BlueQuark.PictureToast"/>>
        </member>
        <member name="P:BlueQuark.Internal.TPicture.OnClick">
            <summary>
            Called when the main image is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TPicture.SetImage(UnityEngine.Sprite)">
            <summary>
            Set the main image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.Internal.TIcon">
            <summary>
            Represents a small icon to display.
            </summary>
            <seealso cref="T:BlueQuark.IconToast"/>>
        </member>
        <member name="P:BlueQuark.Internal.TIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetCircle(System.Boolean)">
            <summary>
            Displays or hides a circle around the icon.
            </summary>
            <param name="iVal">True to display the circle, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetIcon(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Sets the main image of the icon.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iColor">The color icon.</param>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetDiskIcon(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Displays the icon inside a circle.
            </summary>
            <param name="iSprite">The sprite to display.</param>
            <param name="iColor">The color icon.</param>
        </member>
        <member name="M:BlueQuark.Internal.TIcon.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background color.
            </summary>
            <param name="iColor">The colo to apply.</param>
        </member>
        <member name="T:BlueQuark.Internal.IVerticalToasterWidget">
            <summary>
            Base interface for typed vertical toast widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATVerticalWidget`1">
            <summary>
            Base class for a vertical toast widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.Waver">
            <summary>
            GUI component handling the lateral wave of the face.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Waver.IsBusy">
            <summary>
            Returns true if displayed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Waver.Display(BlueQuark.FacialExpression)">
            <summary>
            Shows the lateral waves with the wished expression color.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Waver.Hide">
            <summary>
            Hides the lateral waves.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMainNavigationStrategy">
            <summary>
            Base class for navigation strategy. Only one main navigation strategy can run at the same time.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ASubNavigationStrategy">
            <summary>
            A sub navigation strategy is a navigation strategy that can be started by another strategy (main or sub).
            Some main navigation strategies can rely only on substrategy use.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ASubNavigationStrategy.Stop">
            <summary>
            Stops the current sub strategy. Call this method when the job is done. Cannot be undone.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ANavigationStrategy">
            <summary>
            Base class for navigation strategy. A navigation strategy can starts sub navigation strategies.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ANavigationStrategy.mCurrentSubStrategy">
            <summary>
            The running sub strategy of the current (this) strategy. Must be null if not sub strategy is running.
            </summary>
            <seealso cref="M:BlueQuark.Internal.ANavigationStrategy.StartSubStrategy``1"/>>
            <seealso cref="M:BlueQuark.Internal.ANavigationStrategy.StopSubStrategy"/>>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StartSubStrategy``1">
            <summary>
            Stops any running sub strategy and starts a new one. Only one sub strategy can be started by the current (this) strategy at a time.
            </summary>
            <typeparam name="S">Type of the sub strategy to start</typeparam>
            <returns>The new created sub strategy to parametrize</returns>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StopSubStrategy">
            <summary>
            Stops the running sub strategy of the current (this) strategy.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement.The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator</param>
            <returns>The new started coroutine</returns>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator">The coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.StopCoroutine(UnityEngine.Coroutine)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iRoutine">The coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.Internal.ANavigationStrategy.Stop">
            <summary>
            Stops the whole navigation process. Must be automatically called at the end of any main strategy.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.MoveSubStrategy">
            <summary>
            Sub navigation strategy to move forward or backward until a reached distance or a specific condition.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RotateToSubStrategy">
            <summary>
            Sub navigation strategy to turn to an absolute angle.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RotateSubStrategy">
            <summary>
            Sub navigation strategy to turn until a reached angle or a specific condition.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.BroadcastListener.StartAsClient">
            <summary>
            Starts the service as client and listens for broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Internal.BroadcastListener.StartAsServer">
            <summary>
            Starts the service as server and emits a broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Internal.BroadcastListener.StopBroadcast">
            <summary>
            Stops the broadcast service
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.BroadcastListener.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Own method to configure what to do when receiving a Broadcast
            </summary>
            <param name="iFromAddress">The address that send the broadcast</param>
            <param name="iData">Data contained in the broadcast</param>
        </member>
        <member name="T:BlueQuark.Internal.LocalNetworkListener">
            <summary>
            This class handles the Local Broadcast Listener and messages with the Smartphone app to launch local remote control
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListenerULink.OnMessageReceived(System.String)">
            <summary>
            Used by Android plugin when chat message is received through WebRTC and send it back to user
            </summary>
            <param name="iChatMessage">Chat message received through WebRTC</param>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListenerULink.OnConnectionRequest(System.String)">
            <summary>
            Called by Android plugin when message is received from the PubSub of Crossbar
            </summary>
            <param name="iMessage"></param>
        </member>
        <member name="T:BlueQuark.Internal.AEContentWidget`1">
            <summary>
            Base class for content (right opened window) widget for Explorer.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AELayoutContentWidget`1">
            <summary>
            Base class for Explorer layout widget. Layout widget can contains many sealed widgets.
            </summary>
            <typeparam name="U">The widget</typeparam>
        </member>
        <member name="M:BlueQuark.Internal.AELayoutContentWidget`1.CreateWidget``1(System.Int32)">
            <summary>
            Creates and addes the wished widget inside the specified column.
            </summary>
            <typeparam name="W">Type of the widget to create.</typeparam>
            <param name="iColumnIdx">Index of the column to add the component.</param>
            <returns>The just created widget.</returns>
        </member>
        <member name="M:BlueQuark.Internal.AELayoutContentWidget`1.RemoveWidgets``1(System.Collections.Generic.List{``0})">
            <summary>
            Remove the specified widgets.
            </summary>
            <typeparam name="W">The type of widget to remove.</typeparam>
            <param name="iWidgets">The widgets to removes.</param>
        </member>
        <member name="M:BlueQuark.Internal.AELayoutContentWidget`1.RemoveWidgets``1(``0[])">
            <summary>
            Remove the specified widgets.
            </summary>
            <typeparam name="W">The type of widget to remove.</typeparam>
            <param name="iWidgets">The widgets to removes.</param>
        </member>
        <member name="T:BlueQuark.Internal.AESealedContentWidget`1">
            <summary>
            Base class for Explorer sealed widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ISealedExplorerWidget">
            <summary>
            Base interface for typed Explorer sealed widget.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AEMenuWidget`1">
            <summary>
            Base class for menu (left side) widget for Explorer.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AEWidget`1">
            <summary>
            Base class for Explorer widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AUIPresenter`1">
            <summary>
            Base class for any UI widget element.
            </summary>
            <typeparam name="U">ULink.</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.EFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Injector">
            <summary>
            Instantiation system for the operating system. Based on Factory DP. Use this to make a Top-Down architecture. 
            For GUI widget, use UIFactory instead.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Injector.UniqueComponents">
            <summary>
            All instanciate Unique components.
            </summary>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="M:BlueQuark.Internal.Injector.Provide``1">
            <summary>
            Provides an instance of the wished type. UniqueComponent can be instantiate ONLY ONCE. 
            Any request to a already intantiate UniqueComponent will returns a null.
            </summary>
            <typeparam name="C">Type of the component to instantiate</typeparam>
            <returns>The new component, null if already instantiate or error</returns>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="M:BlueQuark.Internal.Injector.Provide``1(System.Int32)">
            <summary>
            Provides an instance of th wished type. A ULink must be present in the scene. Regular component can be instantiate many times.
            Use this method to create indexable regular component. For GUI Widget, use UIFactory instead.
            </summary>
            <typeparam name="C">Type of the component to instantiate</typeparam>
            <param name="iIndex">Index of the component to retrieve in the scene</param>
            <returns>The new component, null if error</returns>
            <seealso cref="T:BlueQuark.Internal.IRegularComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.EventBus">
            <summary>
            Event bus system. Allow to store, listen and fire event through all the operating system assembly.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EventBus.Subscribe``1(System.Action{``0})">
            <summary>
            Stores callback and call it when associed event is fired.
            </summary>
            <typeparam name="T">Type of the event</typeparam>
            <param name="iCallback">The callback to store</param>
            <returns>The subscription id to register</returns>
        </member>
        <member name="M:BlueQuark.Internal.EventBus.Unsubscribe(System.String)">
            <summary>
            Remove a subscription.
            </summary>
            <param name="iHandlerID"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.EventBus.FireEvent``1(``0)">
            <summary>
            Fire a T event to all T subscribers 
            </summary>
            <typeparam name="T">Type of the event</typeparam>
            <param name="iFiredEvent">The event to fire</param>
        </member>
        <member name="T:BlueQuark.Internal.AVisionAlgorithm`2">
            <summary>
            Base class for computer vision algorithms.
            </summary>
            <summary>
            Base class for computer vision algorithms.
            <typeparam name="U">ULink type.</typeparam>
            <typeparam name="M">Metric type.</typeparam>
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mRGBHeight">
            <summary>
            Height of the last retrieved RGB frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mRGBWidth">
            <summary>
            With of the last retrieved RGB frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mDepthHeight">
            <summary>
            Height of the last retrieved Depth frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mDepthWidth">
            <summary>
            With of the last retrieved Depth frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mThermalHeight">
            <summary>
            Height of the last retrieved Thermal frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mThermalWidth">
            <summary>
            With of the last retrieved Thermal frame
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AVisionAlgorithm`2.OnNewFrame(OpenCVUnity.Mat,OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Called at each valuable frame.
            Write your computer vision algorithm inside this method.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AVisionAlgorithm`2.IsBusy">
            <summary>
            Returns true if the algorithm is active.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GCVLikelihood">
            <summary>
            Rate likelihood
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.UNKNOWN">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.VERY_UNLIKELY">
            <summary>
            Very low rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.UNLIKELY">
            <summary>
            Low rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.POSSIBLE">
            <summary>
            Medium rate 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.LIKELY">
            <summary>
            Correct rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.VERY_LIKELY">
            <summary>
            Very credible
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GCVLandmarkType">
            <summary>
            Kind of landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.UNKNOWN_LANDMARK">
            <summary>
            Unknown landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE">
            <summary>
            Left eye
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE">
            <summary>
            Right eye
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_OF_LEFT_EYEBROW">
            <summary>
            Left of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_OF_LEFT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_OF_RIGHT_EYEBROW">
            <summary>
            Left of right eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_OF_RIGHT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MIDPOINT_BETWEEN_EYES">
            <summary>
            Space between eyes
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_TIP">
            <summary>
            Nose tip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.UPPER_LIP">
            <summary>
            Upper lip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LOWER_LIP">
            <summary>
            Lower lip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_LEFT">
            <summary>
            Mouse left side
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_RIGHT">
            <summary>
            Mouse right side
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_CENTER">
            <summary>
            Center of the mouse
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_RIGHT">
            <summary>
            Bottom right side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_LEFT">
            <summary>
            Bottom left side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_CENTER">
            <summary>
            Bottom center side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_TOP_BOUNDARY">
            <summary>
            Left eye top boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_RIGHT_CORNER">
            <summary>
            Left eye right corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Left eye bottom boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_LEFT_CORNER">
            <summary>
            Left eye left corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_TOP_BOUNDARY">
            <summary>
            Right eye top boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_RIGHT_CORNER">
            <summary>
            RIght eye right corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Right eye bottom boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_LEFT_CORNER">
            <summary>
            Right eye left corner 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Left eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Right eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EAR_TRAGION">
            <summary>
            Left ear tragion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EAR_TRAGION">
            <summary>
            Right eear tragion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_PUPIL">
            <summary>
            Left eye pupil
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_PUPIL">
            <summary>
            Right eye pupil
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.FOREHEAD_GLABELLA">
            <summary>
            Glabella
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_GNATHION">
            <summary>
            Chin gnathion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_LEFT_GONION">
            <summary>
            Chin left gonion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_RIGHT_GONION">
            <summary>
            Chin right gonion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Looper">
            <summary>
            Looper manages all update system through the operating system assembly. Replace the Unity Update() system at each frame.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Looper.OnUpdate(BlueQuark.Internal.AComponent)">
            <summary>
            Adds a component to update at each frame.
            </summary>
            <param name="iToUpdate">The component to subscribe for an update system.</param>
            <returns>True if the subscription is effective, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Looper.RemoveOnUpdate(BlueQuark.Internal.AComponent)">
            <summary>
            Removes a component to update.
            </summary>
            <param name="iToUpdate">The component to subscribe for an update system.</param>
            <returns>True if the unsubscription is effective, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Looper.OnUpdate(BlueQuark.Internal.AULink)">
            <summary>
            Adds a component to update at each frame.
            </summary>
            <param name="iToUpdate">The ULink to subscribe for an update system.</param>
            <returns>True if the subscription is effective, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Internal.Looper.RemoveOnUpdate(BlueQuark.Internal.AULink)">
            <summary>
            Removes a component to update.
            </summary>
            <param name="iToUpdate">The ULink to subscribe for an update system.</param>
            <returns>True if the unsubscription is effective, false otherwise.</returns>
        </member>
        <member name="T:BlueQuark.Internal.IRegularComponent">
            <summary>
            The opposite of the IUniqueComponent. Can be wield and disposed easily. Mainly used for UI purposes or multiple sensors.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.IUniqueComponent">
            <summary>
            A unique component can be instanciated via Injector only once time and cannot be disposed.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.IRegularComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.UnitTestAttribute">
            <summary>
            Attribute that allow the metric suite to retrieve test method
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AULink">
            <summary>
            Unity Link is the BlueQuark interface between logical classes (Presenter) 
            and Unity for display, Editor interaction, plugin or callback purposes.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mEventBus">
            <summary>
            The event bus system. Allows to fire events.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mPresenter">
            <summary>
            Presenter logical class of the current Unity Link. Use it to forward Unity callbacks
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AULink.IsLooping">
            <summary>
            True if the ULink is registered to Looper.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Setup(BlueQuark.Internal.AComponent,BlueQuark.Internal.EventBus)">
            <summary>
            Called after ctor to setup base dependencies.
            </summary>
            <param name="iPresenter">The assigned presenter</param>
            <param name="iEventBus">The eventbus system</param>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Initialize">
            <summary>
            Called after ctor and setup
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Loop">
            <summary>
            Called automatically at each frame when the component has subscribe to the Looper via EnableLoop().
            Can be disable via DisableLoop().
            </summary>
            <seealso cref="M:BlueQuark.Internal.AULink.EnableLoop"/>
            <seealso cref="M:BlueQuark.Internal.AULink.DisableLoop"/>
        </member>
        <member name="M:BlueQuark.Internal.AULink.Dispose">
            <summary>
            Called automatically when the component must be destroyed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.SetLayer(System.Int32)">
            <summary>
            Set the canvas layer if findable.
            </summary>
            <param name="iLayerIdx"></param>
        </member>
        <member name="M:BlueQuark.Internal.AULink.AddComponent``1">
            <summary>
            Adds a Unity component class corresponding to the requested type to the game object.
            </summary>
            <typeparam name="T">The type of the Unity component to add</typeparam>
            <returns>The added Unity component</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.EnableLoop">
            <summary>
            Subscribe the ULink to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the subscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.DisableLoop">
            <summary>
            Unsubscribe the ULink from the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the unsubscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.ForwardUnityCallback(System.Object)">
            <summary>
            Calls a method in the presenter part with the same name of the calling method with the suffix "Impl". Use that method to forward an Unity event to the Presenter Impl side.
            </summary>
            <param name="iArg">Optional arg that will be forward to the Presenter method</param>
        </member>
        <member name="T:BlueQuark.Internal.IMotor">
            <summary>
            Base interface for robot motors.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IMotor.Angle">
            <summary>
            Can represent the angle of the motor or the main axe of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IMotor.Speed">
            <summary>
            Current speed of the component, the unit depends on the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IMotor.Locked">
            <summary>
            Enable/Disable the lock of the component. A locked motor cannot move.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AppSandbox">
            <summary>
            Loads, unloads apps and store transited data.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AppUpdater">
            <summary>
            This class retrieves online apps and updates local apps
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.Main">
            <summary>
            Entry point of the BlueQuark operating system. Initialization order : Looper > EventBus > Injector > Main 
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <seealso cref="T:BlueQuark.Internal.EventBus"/>
            <seealso cref="T:BlueQuark.Buddy"/>
        </member>
        <member name="T:BlueQuark.Internal.HDMI">
            <summary>
            HDMI output management.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HDMI.IsConnected">
            <summary>
            True if the HDMI port is connected to an HDMI cable and a correct connexion is established.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TimeStamp">
            <summary>
            Represents a timestamp data
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.HardwareCom">
            <summary>
            Hardware communication with the Hemise board.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewDataFrame">
            <summary>
            Called on each new spontaneous data frame from the Hemise board. About every 50 milliseconds.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewErrSysFrame">
            <summary>
            Called when a new error system frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewSyncDataFrame">
            <summary>
            Called when a new synchronization data frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewDebugFrame">
            <summary>
            Called when a new debug frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewFixDataFrame">
            <summary>
            Called when a new system data frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewEEPFrame">
            <summary>
            Called when a new EEP frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnNewAckFrame">
            <summary>
            Called when a new acknowledge frame is received from the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnSendCommand">
            <summary>
            Called when a command is sended to the Hemise board. Payload only.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnPlug">
            <summary>
            Called when the cable is plugged. Should never happened on real circumstances.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.HardwareCom.OnUnplug">
            <summary>
            Called when the cable is unplugged. Should never happened on real circumstances.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte[])">
            <summary>
            Send the specified full payload (with command code) to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iPayload">The payload to send</param>
            <returns>The error code. 0 if no error</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code</param>
            <param name="iVal0">First value to store</param>
            <param name="iVal1">Second value to store</param>
            <param name="iVal2">Third value to store</param>
            <param name="iVal3">Fourths value to store</param>
            <returns>The error code. 0 if no error</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.SendCommand(System.Byte,System.Byte[])">
            <summary>
            Send the specified payload to the Hemise board. Commands are queued and proceed one by one. 
            If commands with same code are queued simultaneously, the parameters of the last queued command will be copied into the first queued command.
            </summary>
            <param name="iCode">The command code</param>
            <param name="iPayload">The payload to send</param>
            <returns>The error code. 0 if no error</returns>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.AbortAllCommands">
            <summary>
            Remove from the queue all no processed commands.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.AbortCommand">
            <summary>
            The current command won't be acknowledge anymore.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.HardwareCom.AbortCommand(System.Byte)">
            <summary>
            Abort a not sended command matching with the command code.
            </summary>
            <param name="iCode"></param>
            <returns>True if a matching command has been correctly removed from the queue</returns>
        </member>
        <member name="T:BlueQuark.Internal.GPIO">
            <summary>
            Global Purpose Input Output management.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GPIO.OnHigh">
            <summary>
            Called when a GPIO is set on high value after a low value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GPIO.OnLow">
            <summary>
            Called when a GPIO is set on low value after a high value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.IsLow(System.Int32)">
            <summary>
            Returns true if the specified GPIO is on low value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
            <returns>True if the GPIO is on low</returns>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.IsHigh(System.Int32)">
            <summary>
            Returns true if the specified GPIO is on high value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
            <returns>True if the GPIO is on high</returns>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetAsInput(System.Int32)">
            <summary>
            Sets the specified GPIO as input.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetAsOutput(System.Int32)">
            <summary>
            Sets the specified GPIO as output.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetHigh(System.Int32)">
            <summary>
            Set the output specified GPIO on high value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="M:BlueQuark.Internal.GPIO.SetLow(System.Int32)">
            <summary>
            Set the output specified GPIO on low value.
            </summary>
            <param name="iGPIOIdx">Index of the GPIO</param>
        </member>
        <member name="T:BlueQuark.Internal.UserManagerMetric">
            <summary>
            This class represents user preferences
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LocalRobotPref">
            <summary>
            Represents the robot preferences
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LocalRobotPref.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableAppAutoUpdate">
            <summary>
            Does the robot have to auto check for apps updates
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableDLBuiltinApps">
            <summary>
            Does the robot have to download builtin apps
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableSystemAutoUpdate">
            <summary>
            Does the robot have to auto check for system updates
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.AutoLockScreen">
            <summary>
            Does the robot authorize the auto lock screen
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LockScreenTimer">
            <summary>
            The time in seconds user have to type pin
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.Pwd">
            <summary>
            Password of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastLoggedAccount">
            <summary>
            Last account which was logged on the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastOdometryPosition">
            <summary>
            Last odometry position of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastComputedPosition">
            <summary>
            Last computed position of the robot
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LanguageThesaurus">
            <summary>
            Language dictionary storage. Contains key-value entries for one language
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LanguageThesaurus.Entries">
            <summary>
            All key-value entries of the thesaurus
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LanguageThesaurus.#ctor">
            <summary>
            Represents all the dictionary entries
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LanguageThesaurus.ContainsKey(System.String)">
            <summary>
            Check existing key in existing entries
            </summary>
            <param name="iKey">Key to check</param>
            <returns>True if the key already exists in Entries</returns>
        </member>
        <member name="F:BlueQuark.Internal.DictionaryEntryType.BASE">
            <summary>
            Unique value for UI display purpose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.DictionaryEntryType.CLOSE_PHONETIC">
            <summary>
            Dictionary entry for STT purpose mainly
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.DictionaryEntryType.RANDOM">
            <summary>
            Dictionary entry for TTS purpose mainly
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DictionaryEntry">
            <summary>
            Key-value dictionary base entry
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.Key">
            <summary>
            Key of the value
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.BaseValue">
            <summary>
            Display value
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.ClosePhoneticValues">
            <summary>
            Listen list for STT input processing
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.RandomValues">
            <summary>
            Say list containing value that will be choosen randomly 
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.StringDictionary.Contains(System.String,BlueQuark.Context)">
            <summary>
            Checks if a specified key-value pair is contained in the dictionary.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word to check</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>True if the key is stored inside the dictionary</returns>
        </member>
        <member name="M:BlueQuark.Internal.StringDictionary.Get(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, empty if not found</returns>
        </member>
        <member name="M:BlueQuark.Internal.StringDictionary.GetRandom(System.String,BlueQuark.Context)">
            <summary>
            Retrieves a random word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished random word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, empty if not found</returns>
        </member>
        <member name="M:BlueQuark.Internal.StringDictionary.GetPhonetics(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding list to the input iKey. Useful for multiple response handling with the SpeechToText
            </summary>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>List of strings that must sound similar</returns>
        </member>
        <member name="M:BlueQuark.Internal.StringDictionary.ContainsPhonetic(System.String,System.String,BlueQuark.Context)">
            <summary>
            Proceed to a GetPhoneticsStrings(iKey, iContext = APP) and checks if one element on the closephonetic array is contained in iRef
            </summary>
            <param name="iRef">The sentence to compare to each word into the list</param>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>True if the one element of the closephonetic array in contained in iRef sentence (not null and not empty), false otherwise</returns>
        </member>
        <member name="T:BlueQuark.Internal.IBinarySensor">
            <summary>
            Base interface for sensor that returns a binary value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IBinarySensor.Value">
            <summary>
            Current value of the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ICamera`1">
            <summary>
            Base interface for camera sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ICamera`1.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.INonBinarySensor">
            <summary>
            Base interface for sensor that returns a linear value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.INonBinarySensor.Value">
            <summary>
            Current value of the sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IClosableCamera`1">
            <summary>
            Base interface for camera sensor that can be closed.
            </summary>
            <typeparam name="T">Type of the mode</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IClosableCamera`1.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IClosableCamera`1.Open(`0)">
            <summary>
            Open the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.Internal.IClosableCamera`1.Close">
            <summary>
            Close the device. May take a certain time.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IApertureSensor">
            <summary>
            Base interface for sensor with a notable field of view.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IApertureSensor.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IApertureSensor.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IOrientedSensor">
            <summary>
            Base interface for sensor that is not fully in the front of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IOrientedSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IPlugabble">
            <summary>
            Pluggable component which can be connected or disconnected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IPlugabble.IsConnected">
            <summary>
            Return true if the component is plugged to the correct hardware port.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IThrowable">
            <summary>
            A throwable component handles error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IThrowable.Error">
            <summary>
            The last recorded error id.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AstraCamera">
            <summary>
            Astra Mini camera from Orbbec. <see cref="!:https://orbbec3d.com/astra-mini/"/>>
            It contains RGB + Depth + Infrared camera components.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AstraCamera.IsBusy">
            <summary>
            Returns true if the camera is used in any mode.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AstraCamera.SubscribeStream``1(System.EventHandler{Astra.FrameReadyEventArgs})">
            <summary>
            Subscribe to a camera input stream.
            </summary>
            <typeparam name="S">Type of the stream to retrieve</typeparam>
            <param name="iOnNewFrame">The event handler to subscribe to the camera</param>
            <returns>Stream to open / close</returns>
        </member>
        <member name="M:BlueQuark.Internal.AstraCamera.UnsubscribeStream``1(System.EventHandler{Astra.FrameReadyEventArgs})">
            <summary>
            Remove a subscription from a stream.
            </summary>
            <typeparam name="S">Type of the stream</typeparam>
            <param name="iOnNewFrame">The event handler to remove</param>
            <returns>True if the unsubscription was effective</returns>
        </member>
        <member name="T:BlueQuark.Internal.ILayoutExplorerWidget">
            <summary>
            Base interface for typed Explorer layout widget. Layout widget can contains many sealed widgets.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IExplorerWidget">
            <summary>
            Base interface for typed Explorer widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledAdder">
            <summary>
            Add button sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledAdder.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledAdder.SetLabel(System.String)">
            <summary>
            Set the button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledDropdown">
            <summary>
            Dropdown sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.OnSelect">
            <summary>
            Called when a dropdown item is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.SelectedOption">
            <summary>
            Index of the currently selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.SelectedOptionIdx">
            <summary>
            Index of the currently selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledDropdown.SelectedOptionInfo">
            <summary>
            Info of the currently selected item.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.SetLabel(System.String)">
            <summary>
            Set the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Add(System.String,System.Object)">
            <summary>
            Add a new item to the dropdown.
            </summary>
            <param name="iLabel">The text to display. Cannot be null or empty</param>
            <param name="iParameter">Optional parameter to store</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Add(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Add a new item to the dropdown.
            </summary>
            <param name="iInfo">The info to add</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledDropdown.Clear">
            <summary>
            Close and remove all options.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EDropdownOption">
            <summary>
            Dropdown option for Dropup widget for Explorer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownOption.OnClick">
            <summary>
            Called when option is clicked and selected.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EDropdownOption.SetInfo(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Set the data to be stored for further callback.
            </summary>
            <param name="iInfo">The data to store</param>
        </member>
        <member name="T:BlueQuark.Internal.EDropdownInfo">
            <summary>
            Dropdown data for Explorer GUI component
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownInfo.Label">
            <summary>
            The text to display
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdownInfo.Parameter">
            <summary>
            Optional parameter to store
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledButton">
            <summary>
            Button sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledButton.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledButton.SetLabel(System.String)">
            <summary>
            Sets the left button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledButton.SetText(System.String)">
            <summary>
            Sets the inner button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Display an optional icon of the button.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledPasswordField">
            <summary>
            Password text field sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledPasswordField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledPasswordField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledPasswordField.SetLabel(System.String)">
            <summary>
            Sets the left password label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledPasswordField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledPasswordField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledSliderToggle">
            <summary>
            Toggable slider sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSliderToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledSliderToggle.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledSlider">
            <summary>
            Slider sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledSlider.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledSlider.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.EDropdown">
            <summary>
            Dropdown sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.OnSelect">
            <summary>
            Called when a dropdown item is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.SelectedOption">
            <summary>
            Label of the currently selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.SelectedOptionIdx">
            <summary>
            Index of the currently selected item.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EDropdown.SelectedOptionInfo">
            <summary>
            Info of the currently selected item.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Add(System.String,System.Object)">
            <summary>
            Add a new item to the dropdown.
            </summary>
            <param name="iLabel">The text to display. Cannot be null or empty</param>
            <param name="iParameter">Optional parameter to store</param>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Add(BlueQuark.Internal.EDropdownInfo)">
            <summary>
            Add a new item to the dropdown.
            </summary>
            <param name="iInfo">The info to add</param>
        </member>
        <member name="M:BlueQuark.Internal.EDropdown.Clear">
            <summary>
            Close and remove all options.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EPasswordField">
            <summary>
            Password text field sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EPasswordField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EPasswordField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EPasswordField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.EPasswordField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledTextField">
            <summary>
            Text field sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledTextField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledTextField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetLabel(System.String)">
            <summary>
            Sets the left password label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledTextField.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets text field image.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.ELabeledToggle">
            <summary>
            Toggle sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ELabeledToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ELabeledToggle.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="T:BlueQuark.Internal.ETextField">
            <summary>
            Text field sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ETextField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ETextField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ETextField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ETextField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.ETextField.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets text field image.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.EAppIcon">
            <summary>
            App icon sealed widget for Explorer GUI component. Stores data to be called when the icon is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EAppIcon.AppInfo">
            <summary>
            The stored app info.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EAppIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EAppIcon.SetAppInfo(BlueQuark.AppInfo)">
            <summary>
            Sets to store the app data.
            </summary>
            <param name="iInfo">The app data</param>
        </member>
        <member name="T:BlueQuark.Internal.EButton">
            <summary>
            Button sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetLabel(System.String)">
            <summary>
            Sets the button label.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetLeftIcon(UnityEngine.Sprite)">
            <summary>
            Display an optional icon on the left side of the button.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="M:BlueQuark.Internal.EButton.SetRightIcon(UnityEngine.Sprite)">
            <summary>
            Display an optional icon on the right side of the button.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide</param>
        </member>
        <member name="T:BlueQuark.Internal.EText">
            <summary>
            Text sealed widget for Explorer GUI component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EText.SetLabel(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.EGridLayout">
            <summary>
            Grid layout that can contains many sealed widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EGridLayout.SetLabel(System.String)">
            <summary>
            Sets the top text label of the layout group.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.EFanfoldLayout">
            <summary>
            One column layout for Explorer GUI component. This layout can be maximized and minimized to display or hide.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnShare">
            <summary>
            Called when the Share button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnDelete">
            <summary>
            Called when the Delete button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnMaximize">
            <summary>
            Called when the Maximize button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.OnMinimize">
            <summary>
            Called when the Minimize button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplaySelectAll">
            <summary>
            Display the select all button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplayShare">
            <summary>
            Display the Share button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.EFanfoldLayout.DisplayTrash">
            <summary>
            Display the delete button.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.EFanfoldLayout.SetLabel(System.String)">
            <summary>
            Sets the top text label of the layout group.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.Internal.ETwoColumnsLayout">
            <summary>
            Two columns layout for Explorer GUI component.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EOneColumnLayout">
            <summary>
            One column layout for Explorer GUI component. This is the base layout for Explorer content.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ESideButton">
            <summary>
            Left side button of the Explorer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ESideButton.OnClick">
            <summary>
            Callback when the button is clicked
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetEmpty(System.Boolean)">
            <summary>
            Specifies if the button must be considered as a blank place. Button wont be interactable anymore.
            </summary>
            <param name="iEmpty">True to make it empty, false otherwise</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetIndex(System.Int32)">
            <summary>
            Set the inde of the button
            </summary>
            <param name="iIndex">Index to store. Cannot be negative</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetMaskIcon(UnityEngine.Sprite)">
            <summary>
            Set the mask icon to display.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Set the icon to display.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.ESideButton.RotateIcon(System.Single)">
            <summary>
            Starts rotate the button.
            </summary>
            <param name="iVal">Should the button must rotate ?</param>
        </member>
        <member name="T:BlueQuark.Internal.ETopIcon">
            <summary>
            Top right icon for Explorer GUI component
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ETopIcon.SetIcon(UnityEngine.Sprite)">
            <summary>
            Set the icon to display.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="T:BlueQuark.Internal.FFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IFooterWidget">
            <summary>
            Base interface for typed Footer widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AFWidget`1">
            <summary>
            Base class for Footer widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.FDropupOption">
            <summary>
            Dropup option for Dropup widget for Footer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.FDropupOption.OnClick">
            <summary>
            Called when option is clicked and selected.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.FDropupOption.Select(System.Boolean)">
            <summary>
            Set the option as select or not.
            </summary>
            <param name="iVal">True to set the option as select, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.Internal.FDropupOption.SetInfo(BlueQuark.FDropupInfo)">
            <summary>
            Set the data to be stored for further callback.
            </summary>
            <param name="iInfo">The data to store.</param>
        </member>
        <member name="T:BlueQuark.Internal.NFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ANotification.ID">
            <summary>
            ID of the notification.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ANWidget`1">
            <summary>
            Base class for Notifier widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.NBox">
            <summary>
            Base box for Notifier GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.NBox.ID">
            <summary>
            ID of the stored notification.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.NBox.Info">
            <summary>
            The stored notification info.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NBox.Select(System.Boolean,System.Boolean)">
            <summary>
            Sets the box as selected or not.
            </summary>
            <param name="iVal">Does the box is selected ?</param>
            <param name="iWithSides">Does the side wave must be displayed ? Effect only if iVal is true.</param>
        </member>
        <member name="M:BlueQuark.Internal.NBox.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.NBox.SetText(System.String)">
            <summary>
            Sets the text into the notification.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.Internal.NBox.DisplayValidate">
            <summary>
            Display the validation button.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NBox.DisplayReply">
            <summary>
            Display the reply button.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NBox.DisplayRepeat">
            <summary>
            Display the repeat button.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.INotifierWidget">
            <summary>
            Base interface for typed Notifier widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ACapsuleToast">
            <summary>
            Toast that is displayed as a horizontal capsule with two lateral button.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ACapsuleToast.LeftAction">
            <summary>
            Called when the left button is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ACapsuleToast.RightAction">
            <summary>
            Called when the right button is clicked.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AToast">
            <summary>
            Base class for any toast. A toast is only a storage system waiting for its display.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mLayoutType">
            <summary>
            Type of the layout of the toast.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mOnSideClick">
            <summary>
            Callback called when the user click on the side of the current displayed toast.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mOnDisplay">
            <summary>
            Callback called when the toast is displayed.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AToast.mOnHide">
            <summary>
            Callback called when the toast is hidden.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.ID">
            <summary>
            ID of the toast.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.OnSideClick">
            <summary>
            Called when the current toast is displayed and a side click happened.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.OnDisplay">
            <summary>
            Called when the current toast is displayed.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.OnHide">
            <summary>
            Called when the current toast is hidden.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AToast.LayoutType">
            <summary>
            Type of the layout (Presenter) to display.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AToast.Dispose">
            <summary>
            Called when the toast must be revoked.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATWidget`1">
            <summary>
            Base class for Toaster widget.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.IToasterWidget">
            <summary>
            Base interface for typed Toaster widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATLayoutWidget`2">
            <summary>
            Base class for a toast layout widget. A layout will display the content stored in the toast (PictureToast, IconToast, ParameterToast...). Can only contains sealed elements.
            </summary>
            <typeparam name="T">Type of toast managed by the layout</typeparam>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.ATLayoutWidget`2.mToastInfo">
            <summary>
            The toast info container, contains info that must be displayed
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ATLayoutWidget`2.mWidgets">
            <summary>
            Displayed widgets. Must be cleared on layout dispose
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ILayoutToasterWidget">
            <summary>
            Base interface for typed Toaster layout widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TCapsuleLayout">
            <summary>
            Display a capsule layout with two lateral buttons for. The capsule element can store many sealed widgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetTopIcon(UnityEngine.Sprite)">
            <summary>
            Sets an optional top icon.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetRightIcon(UnityEngine.Sprite)">
            <summary>
            Set the icon of the right button.
            </summary>
            <param name="iSprite">The sprite to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetLeftIcon(UnityEngine.Sprite)">
            <summary>
            Set the icon of the left button.
            </summary>
            <param name="iSprite">The sprite to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetLeftLabel(System.String)">
            <summary>
            Sets the label of the left button.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.SetRightLabel(System.String)">
            <summary>
            Sets the label of the right button.
            </summary>
            <param name="iText">The text to display</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.AddHorizontally``1(``0)">
            <summary>
            Add the given widget as a column element.
            </summary>
            <typeparam name="T">Type of the widget to add</typeparam>
            <param name="iWidget">The widget to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.AddVertically``1(``0)">
            <summary>
            Adds the given widget as a row element.
            </summary>
            <typeparam name="T">Type of the widget to add</typeparam>
            <param name="iWidget">The widget to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.Internal.TCapsuleLayout.Remove``1(``0)">
            <summary>
            Removes the given widget.
            </summary>
            <typeparam name="T">Type of the widget to remove</typeparam>
            <param name="iWidget">The widget to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="T:BlueQuark.Internal.ISealedToasterWidget">
            <summary>
            Base interface for typed Explorer sealed widget
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ATSealedWidget`1">
            <summary>
            Base class for sealed Toaster widget. A sealed are small elements contained in layout or other sealed elements.
            </summary>
            <typeparam name="U">ULink</typeparam>
        </member>
        <member name="T:BlueQuark.Internal.AState">
            <summary>
            Base class for state machine's state.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AState.mStateMachine">
            <summary>
            State machine of the state.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AState.mEventBus">
            <summary>
            The event bus system. Allows to fire events.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AState.Name">
            <summary>
            Name of the state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.Setup(BlueQuark.Internal.StateMachine,BlueQuark.Internal.EventBus)">
            <summary>
            Called after ctor to setup base dependencies.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.Initialize">
            <summary>
            Called after ctor and setup.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateEnter">
            <summary>
            Called when the state machine target comes in the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateUpdate">
            <summary>
            Called at each frame when the state machine target is in the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateExit">
            <summary>
            Called when the state machine target leaves the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.Dispose">
            <summary>
            Called automatically when the master component must be destroyed.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateEnter(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target comes in the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateUpdate(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called at each frame when the state machine target is in the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="M:BlueQuark.Internal.AState.OnStateExit(UnityEngine.Animator,UnityEngine.AnimatorStateInfo,System.Int32)">
            <summary>
            Called when the state machine target leaves the current state.
            </summary>
            <param name="iAnimator">The state machine</param>
            <param name="iStateInfo">The state info</param>
            <param name="iLayerIndex">The state layer index</param>
        </member>
        <member name="T:BlueQuark.Internal.StateMachine">
            <summary>
            State machine data structure. Composed of AStates.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AState"/>>
        </member>
        <member name="T:BlueQuark.Internal.GoogleSpeech">
            <summary>
            Google Speech API interface component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.IsBusy">
            <summary>
            Returns true if a request is currently processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.OnEndListening">
            <summary>
            Called at the end of any request.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.OnPartialListening">
            <summary>
            Called during an input speech processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.GoogleSpeech.Language">
            <summary>
            Language currently detected by the component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.Stop">
            <summary>
            Stop the current request.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.Listen(System.Boolean)">
            <summary>
            Starts a listening request.
            </summary>
            <param name="iListenUntilSilence"></param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Starts a listening request.
            </summary>
            <param name="iOnStartListening">Callback called at the start of a sentence</param>
            <param name="iOnEndListening">Callback called at the end of a sentence</param>
            <param name="iListenUntilSilence"></param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.RecognizeFromFile(System.Action{BlueQuark.SpeechInput},System.String)">
            <summary>
            Audio format must be in FLAC or WAV.
            </summary>
            <param name="iOnEndRecognition"></param>
            <param name="iPath"></param>
        </member>
        <member name="M:BlueQuark.Internal.GoogleSpeech.SetAPICredentialAndStart(System.String)">
            <summary>
            Set the credential api string
            </summary>
            <param name="iCredential"></param>
        </member>
        <member name="T:BlueQuark.Internal.VocalTrigger">
            <summary>
            Trigger used to detect if the sentence "OKAY BUDDY" has been said.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VocalTrigger.HOT_WORD">
            <summary>
            Detected hot word.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.IsBusy">
            <summary>
            Returns true if the component is currently listening the trigger.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.OnDetect">
            <summary>
            Called when the hot word has been detected.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.SoundLocalization">
            <summary>
            Sound localization of the hot word speaker.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.RecognitionScore">
            <summary>
            Recognition score of the hot word.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VocalTrigger.Language">
            <summary>
            Language currently detected by the component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalTrigger.Stop">
            <summary>
            Stops the hot word listening.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VocalTrigger.Listen">
            <summary>
            Starts the hot word listening.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VoConSpeech">
            <summary>
            VoCon API interface component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.IsBusy">
            <summary>
            Returns true if a request is currently processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OnEndListening">
            <summary>
            Called at the end of any request.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OnBestEndListening">
            <summary>
            Called at the end of any request.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.OnListeningStatus">
            <summary>
            Called on any vocal input event.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConSpeech.Language">
            <summary>
            Language currently detected by the component.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.Int32)">
            <summary>
            Starts a listening request.
            </summary>
            <param name="iConfidenceThreshold">Confidence threshold for acceptance. From 1 to 9999</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConStatus},System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iOnEndListening">Callback called at the end of the request</param>
            <param name="iOnListeningEvent">Callback called at any input speech event</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String,System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammar">The grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String,System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConStatus},System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammar">The grammar that will be used.</param>
            <param name="iOnEndListening">Callback called at the end of the request</param>
            <param name="iOnListeningEvent">Callback called at any input speech event</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String[],System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammars">The grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String[],System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConStatus},System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammars">The grammar that will be used.</param>
            <param name="iOnEndListening">Callback called at the end of the request</param>
            <param name="iOnListeningEvent">Callback called at any input speech event</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Stop">
            <summary>
            Stop the current request.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Compile(System.String)">
            <summary>
            Compile the grammar txt or bnf into a bin file. Output file will be at the same location of the input txt or bnf file.
            </summary>
            <param name="iGrammar">The grammar to compile</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Compile(System.String[])">
            <summary>
            Compile the grammar txt or bnf into a bin file. Output file will be at the same location of the input txt or bnf file.
            </summary>
            <param name="iGrammars">The grammar to compile</param>
        </member>
        <member name="M:BlueQuark.Internal.EmbeddedVoConSpeechULink.OnEndReco(System.String)">
            <summary>
            Callback when recognition is finished.
            This is the callback called from the android plugin. Its name shouldn't be changed.
            </summary>
            <param name="iResult">Result of the recognition.</param>
        </member>
        <member name="M:BlueQuark.Internal.EmbeddedVoConSpeechULink.OnError(System.String)">
            <summary>
            Error thrown during the recognition process.
            This is the callback called from the android plugin. Its name shouldn't be changed.
            </summary>
            <param name="iError">Error thrown during recognition.</param>
        </member>
        <member name="M:BlueQuark.Internal.EmbeddedVoConSpeechULink.OnAudioEvent(System.String)">
            <summary>
            Audio event detected by the Vocon recognition.
            This is the callback called from the android plugin. Its name shouldn't be changed.
            </summary>
            <param name="iEvent">Audio event detected by Vocon.</param>
        </member>
        <member name="T:BlueQuark.Internal.WindowsVoConSpeechULink">
            <summary>
            WIP : fake timer
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VoConStatus">
            <summary>
            All the possible audio events that can be detected by Vocon.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.BEGINNING_OF_SPEECH">
            <summary>
            User started to speak.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.MAYBE_SPEECH">
            <summary>
            Could be the beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.NO_SPEECH">
            <summary>
            The previously sent MAYBE_SPEECH event did not lead
            to and actual beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.TIMEOUT">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.TRAILING_SILENCE">
            <summary>
            A trailing silence was detected.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.BAD_SIGNAL_NOISE_RATIO">
            <summary>
            The signal to noise ratio is too low.
            This event is generated if at the end of an utterance
            the signal/noise ratio remains below 12dB.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.OVERLOAD">
            <summary>
            The speech level is too loud.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.TOO_QUIET">
            <summary>
            The speech level is too weak.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.NO_SIGNAL">
            <summary>
            No or very low input signal.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.POOR_MIC">
            <summary>
            This could mean that the microphone or the audio hardware is of poor quality. 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConStatus.NO_LEADING_SILENCE">
            <summary>
            The recording apparantly does not start with leading silence.
            Possibly the speaker started speaking too soon,
            but because this detection is only energy based,
            other noise events at the start of the utterance may also trigger this condition.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.Confidence">
            <summary>
            The confidence level of the result. Values are between 1 (low confidence) and 9999 (high confidence).
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.Utterance">
            <summary>
            The text of the result from the recognition process.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.StartRule">
            <summary>
            The name of the 'start rule' which produced the result. The format is 'grammarName#startRuleName'.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TextToSpeech">
            <summary>
            Text to speech allows you to make Buddy talks an input System.String.
            The Windows version uses SAPI, the Android version uses Google API.
            So, available methods have not the same behaviour on difference devices.
            </summary>
            <summary>
            Text to speech allows to make Buddy talks an input System.String.
            Available methods have not the same behaviour on difference devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.IsBusy">
            <summary>
            Returns true if a request is currently processing.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.OnEndSpeaking">
            <summary>
            Called at the end of any output speech.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Language">
            <summary>
            Output language of the component.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Pitch">
            <summary>
            Sets the pitch. From 0 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Speed">
            <summary>
            Sets the speech rate. From 0 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.Stop">
            <summary>
            Stop the current output speech.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.Say(System.String,System.Action)">
            <summary>
            Makes the robot speak the input utterance
            </summary>
            <param name="iUtterance">The text to say</param>
            <param name="iOnEnSpeaking">callback called on end of output speech</param>
        </member>
        <member name="T:BlueQuark.Internal.WebRTCListener">
            <summary>
            This part listens on the Crossbar server to know if there is any incoming call.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListener.PublishNotification(System.String)">
            <summary>
            Format of the notification is the following : BuddyID / Title @ Message
            </summary>
            <param name="iMessage">Notification message to send</param>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListener.StartListener(System.String,System.String)">
            <summary>
            Initialize the Java Android Object that handles PubSub messages from Crossbar
            </summary>
            <param name="iUri">Crossbar uri</param>
            <param name="iRealm">Name of the realm</param>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListener.WaitSTTFinished(System.String)">
            <summary>
            Wait until STT has finished listening and is free to use
            </summary>
            <param name="iChatMessage">The Chat message received to process</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListener.PublishConnectionRequest(System.String)">
            <summary>
            Use this to make a call towards another Buddy.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListener.SendNotification(System.String,System.String)">
            <summary>
            Send notification as Crossbar published event.
            </summary>
            <param name="iTitle">Title of the notification. Cannot be null or empty.</param>
            <param name="iMessage">Body message of the notification. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.Internal.WebRTCListener.ProcessAnswer(System.String)">
            <summary>
            Use this to send back the answer to the user.
            </summary>
            <param name="iAnswer">The text to send. Cannot be null or empty.</param>
        </member>
        <member name="T:BlueQuark.TaskOwner">
            <summary>
            Represents any OS component or App behaviour that is using an OS component.
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Type">
            <summary>
            Type of the user component (the owner).
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Parameter">
            <summary>
            Optional parameter of the called method.
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Name">
            <summary>
            Simplified name of the user component (the owner).
            </summary>
        </member>
        <member name="T:BlueQuark.Accessories">
            <summary>
            Accessories gave control to lateral actuators.
            </summary>
        </member>
        <member name="T:BlueQuark.Head">
            <summary>
            Head gave control to Yes and No head hinges.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.HIGH_SPEED">
            <summary>
            High speed for head movement in dregrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.NORMAL_SPEED">
            <summary>
            Normal speed for head movement in dregrees per second.
            </summary>
        </member>
        <member name="F:BlueQuark.Head.LOW_SPEED">
            <summary>
            Low speed for head movement in dregrees per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Head.IsBusy">
            <summary>
            Returns true if any head hinge is moving.
            </summary>
        </member>
        <member name="P:BlueQuark.Head.Yes">
            <summary>
            The Yes (pitch) hinge of the robot head.
            </summary>
        </member>
        <member name="P:BlueQuark.Head.No">
            <summary>
            The No (Yaw) hinge of the robot head.
            </summary>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single)">
            <summary>
            Makes the head targets the wished position. 
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + left, - right.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(System.Single,System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iYesTargetAngle">Target angle for Yes axis in degrees. + up, - down.</param>
            <param name="iNoTargetAngle">Target angle for No axis in degrees. + up, - down.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
            <param name="iAccDecMode">Accelration mode.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
        </member>
        <member name="M:BlueQuark.Head.SetPosition(BlueQuark.GazePosition,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Makes the head targets the wished position.
            </summary>
            <param name="iLookAt">The position to target.</param>
            <param name="iAngularVelocity">The velocity that will be applied to the move. Value in degrees per second.</param>
            <param name="iAccDecMode">Accelration mode.</param>
        </member>
        <member name="M:BlueQuark.Head.ResetPosition">
            <summary>
            Resets both hinges position to the original Buddy's position.
            </summary>
        </member>
        <member name="M:BlueQuark.Head.Stop">
            <summary>
            Stops any running hinge command.
            </summary>
        </member>
        <member name="T:BlueQuark.NoHeadHinge">
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe)
            </summary>
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe).
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.MAX_LEFT_ANGLE">
            <summary>
            Max reachable angle for this hinge. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.MAX_RIGHT_ANGLE">
            <summary>
            Min reachable angle for this hinge. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.DEFAULT_ANGLE">
            <summary>
            Default hinge angle. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.MAX_ANG_VELOCITY">
            <summary>
            Max reachable speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.DEFAULT_ANG_VELOCITY">
            <summary>
            Default speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="F:BlueQuark.NoHeadHinge.DEFAULT_TOLERANCE">
            <summary>
            Default Tolerance allowed during control. Value in degrees.
            </summary>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. Value in degrees.</param>
            <param name="iAngle">Position to target, In range of [-100, 100] degrees.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. In range of [-100, 100] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
        </member>
        <member name="M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to move head upwards, negative downwards.
            </summary>
            <param name="iAngle">Position to target. In range of [-100, 100] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.NoHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode,System.Single)" -->
        <member name="M:BlueQuark.NoHeadHinge.ResetPosition">
            <summary>
            Resets the hinge position to DEFAULT_ANGLE.
            </summary>
            <seealso cref="F:BlueQuark.NoHeadHinge.DEFAULT_ANGLE"/>>
        </member>
        <member name="T:BlueQuark.YesHeadHinge">
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe)
            </summary>
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe).
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.MAX_UP_ANGLE">
            <summary>
            Max reachable angle for this hinge in up position. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.MAX_DOWN_ANGLE">
            <summary>
            Max reachable angle for this hinge in down position. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.DEFAULT_ANGLE">
            <summary>
            Default hinge angle. Value in degrees.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.MAX_ANG_VELOCITY">
            <summary>
            Max reachable speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.DEFAULT_ANG_VELOCITY">
            <summary>
            Default speed for this hinge. Value in degrees by second.
            </summary>
        </member>
        <member name="F:BlueQuark.YesHeadHinge.DEFAULT_TOLERANCE">
            <summary>
            Default tolerance allowed during control. Value in degrees.
            </summary>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. In range of [-50, 40] degrees.</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.SetPosition(System.Single,System.Single,BlueQuark.AccDecMode,System.Single)">
            <summary>
            Requests to move the hinge at the wished angle position.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Position to target. Value in degrees in range [-50, 40].</param>
            <param name="iAngularVelocity">Speed to target. Value in degrees per second.</param>
            <param name="iAccDecMode">Acceleration mode.</param>
            <param name="iTolerance">Allowed tolerance for this command.</param>
        </member>
        <member name="M:BlueQuark.YesHeadHinge.ResetPosition">
            <summary>
            Resets the hinge position to DEFAULT_ANGLE.
            </summary>
            <seealso cref="F:BlueQuark.YesHeadHinge.DEFAULT_ANGLE"/>
        </member>
        <member name="T:BlueQuark.AccDecMode">
            <summary>
            Acceleration and deceleration mode for motor slaving.
            </summary>
        </member>
        <member name="F:BlueQuark.AccDecMode.SMOOTH">
            <summary>
            Smooth speed mode.
            </summary>
        </member>
        <member name="F:BlueQuark.AccDecMode.NORMAL">
            <summary>
            Normal speed mode.
            </summary>
        </member>
        <member name="F:BlueQuark.AccDecMode.MAX">
            <summary>
            Max speed mode.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDColor">
            <summary>
            Color enumeration corresponding to the mood of the robot.
            Can be easily combine with de Face. SetMood(FaceMood) component.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.RED_ANGRY">
            <summary>
            Will set the LED in red.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PURPLE_GRUMPY">
            <summary>
            Will set the LED in soft purple.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.ORANGE_HAPPY">
            <summary>
            Will set the LED in orange.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.WHITE_LISTENING">
            <summary>
            Will set the LED in soft white.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BLUE_NEUTRAL">
            <summary>
            Will set the LED in soft blue.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PINK_SAD">
            <summary>
            Will set the LED in hard purple.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BROWN_SCARED">
            <summary>
            Will set the LED in hard orange.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.YELLOW_SICK">
            <summary>
            Will set the LED in soft green.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.YELLOW_SURPRISED">
            <summary>
            Will set the LED in hard yellow.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREEN_THINKING">
            <summary>
            Will set the LED in green.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREY_TIRED">
            <summary>
            Will set the LED in grey.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PINK_LOVE">
            <summary>
            Will set the LED in pink.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.WHITE_HEARING">
            <summary>
            Will set the LED to intense white.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDPulsePattern">
            <summary>
            Represents different LED blinking patterns that Buddy can display.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.BASIC_BLINK">
            <summary>
            Basic blink.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.HEART_BEAT">
            <summary>
            Heart Beat.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.BREATHING">
            <summary>
            breathing impression.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.DYNAMIC">
            <summary>
            Dynamic behaviour.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.LISTENING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.PEACEFUL">
            <summary>
            Peaceful.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.RECHARGE">
            <summary>
            battery recharging.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.DEFAULT">
            <summary>
            Default light behaviour.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDPulsePattern.NOBLINK">
            <summary>
            no blinking light behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.MediaChannel">
            <summary>
            Sound channel for music purposes.
            </summary>
        </member>
        <member name="T:BlueQuark.ASoundChannel`2">
            <summary>
            Channel for sound output.
            </summary>
            <typeparam name="U">ULink type.</typeparam>
            <typeparam name="M">Metric type.</typeparam>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.IsBusy">
            <summary>
            Returns True if a any sound is currently played from any speaker.  
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Status">
            <summary>
            Status of the Speaker.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Pitch">
            <summary>
            The pitch of the audio source.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Time">
            <summary>
            Playback position in seconds.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Mute">
            <summary>
            Tells if the audiosource is muted or not.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Repeat">
            <summary>
            Specifies if the channel must repeat the current audio source.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Volume">
            <summary>
            Volume of this channel. Range between 0 and 1.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Play(BlueQuark.SoundSample)">
            <summary>
            Plays the given sound.
            </summary>
            <param name="iSound">The already loaded sound to play.</param>
            <seealso cref="T:BlueQuark.SoundSample"/>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Play(UnityEngine.AudioClip)">
            <summary>
            Plays the specified sound.
            </summary>
            <param name="iClip">The audioclip to play. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Pause">
            <summary>
            Pauses the audio clip.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Resume">
            <summary>
            If paused, resumes the active audio clip.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Stop">
            <summary>
            Stops playing the current audio clip.
            </summary>
        </member>
        <member name="T:BlueQuark.EffectChannel">
            <summary>
            Sound channel for UI or miscellaneous sounds.
            </summary>
        </member>
        <member name="T:BlueQuark.VocalChannel">
            <summary>
            Sound channel for vocal purposes.
            </summary>
        </member>
        <member name="T:BlueQuark.SoundSample">
            <summary>
            Kind of sound that Buddy can natively handle for voice acting.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.NONE">
            <summary>
            No sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.CURIOUS_1">
            <summary>
            Curious sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.CURIOUS_2">
            <summary>
            Curious sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.FOCUS_1">
            <summary>
            Focus sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.FOCUS_2">
            <summary>
            Focus sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_1">
            <summary>
            Laugh sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_2">
            <summary>
            Laugh sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_3">
            <summary>
            Laugh sound 3.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_4">
            <summary>
            Laugh sound 4.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_5">
            <summary>
            Laugh sound 5.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SIGH">
            <summary>
            Sigh sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_1">
            <summary>
            Surprised sound 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_2">
            <summary>
            Surprised sound 2.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_3">
            <summary>
            Surprised sound 3.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_4">
            <summary>
            Surprised sound 4.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_5">
            <summary>
            Surprised sound 5.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_6">
            <summary>
            Surprised sound 6.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.YAWN">
            <summary>
            Yawn sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_CURIOUS">
            <summary>
            Random curious sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_LAUGH">
            <summary>
            Random laugh sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_SURPRISED">
            <summary>
            Random surprised sound.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_1">
            <summary>
            Deep beep.
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_2">
            <summary>
            High beep.
            </summary>
        </member>
        <member name="T:BlueQuark.ChannelStatus">
            <summary>
            Status of channel.
            </summary>
        </member>
        <member name="F:BlueQuark.ChannelStatus.PLAYING">
            <summary>
            A sound is currently playing.
            </summary>
        </member>
        <member name="F:BlueQuark.ChannelStatus.PAUSED">
            <summary>
            A sound is currently paused.
            </summary>
        </member>
        <member name="F:BlueQuark.ChannelStatus.STOPPED">
            <summary>
            No sound is playing.
            </summary>
        </member>
        <member name="T:BlueQuark.BehaviourInterpreter">
            <summary>
            Interpretes and run Behaviour Algorithms which contains sequential or parallel instructions to play robot behaviours.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInterpreter.IsBusy">
            <summary>
            Returns true if an algorithm is running.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[])">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[])">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction})">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable,System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariable">Named variable to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Run(BlueQuark.BehaviourAlgorithm,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action{BlueQuark.ABehaviourInstruction},System.Action)">
            <summary>
            Runs the specified behaviour algorithm.
            </summary>
            <param name="iAlgorithm">The algorithm to run. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnExecuteInstruction">Callback called on each instruction execution.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourCommitment,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment,System.Boolean)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(BlueQuark.Mood,BlueQuark.BehaviourMovementPattern,BlueQuark.BehaviourCommitment,System.Boolean,System.Action)">
            <summary>
            Runs a random behaviour algorithm (included in the OS) corresponding to the given search parameters.
            </summary>
            <param name="iMood">General mood of the behaviour.</param>
            <param name="iBehaviourMovementPattern">Movement scope of the behaviour.</param>
            <param name="iBehaviourCommitment">Engagement status of the robot.</param>
            <param name="iConsidereInternalMood">Does the algorithm considere the local.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm.</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.Stop">
            <summary>
            Stops the running algorithm and empty the algorithm queue.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunSub(System.String,BlueQuark.InputBehaviourAlgorithmVariable[],System.Boolean,System.Action)">
            <summary>
            Runs the behaviour algorithm contained at the specified filepath.
            </summary>
            <param name="iFilePath">File contening the algorithm. Can be stored in Raw/ or full path. Cannot be null.</param>
            <param name="iInputVariables">Set of named variables to set before algorithm execution.</param>
            <param name="iConsidereInternalMood">If true, movement instructions will take care of the internal mood.</param>
            <param name="iOnEndRun">Callback called at the end of the algorithm</param>
            <returns>True if the algorithm is correctly loaded, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.BehaviourInterpreter.RunRandom(System.String)">
            TMP ==> TO REMOVE
        </member>
        <member name="T:BlueQuark.BehaviourCommitment">
            <summary>
            Represents the robot human interaction engagement.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.UNKNOWN">
            <summary>
            Unknown state of engagement.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.ENGAGED">
            <summary>
            The robot is considered as fully engaged with a human.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourCommitment.NOT_ENGAGED">
            <summary>
            The robot is considered as not engaged.
            </summary>
        </member>
        <member name="T:BlueQuark.BehaviourMovementPattern">
            <summary>
            Represents a kind of motion.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.HEAD">
            <summary>
            Head motion only.
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.BODY_ROTATION">
            <summary>
            Robot body rotation (Theta only).
            </summary>
        </member>
        <member name="F:BlueQuark.BehaviourMovementPattern.BODY_DISPLACEMENT">
            <summary>
            Full Motion (X, Y, theta, head).
            </summary>
        </member>
        <member name="T:BlueQuark.ABehaviourStructure">
            <summary>
            Base class for Behaviour Instruction and Algorithm. A structure is executed by the BehaviourInterpreter.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourStructure.IsBusy">
            <summary>
            Returns true if the current structure is currently executed.
            </summary>
        </member>
        <member name="M:BlueQuark.ABehaviourStructure.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Visitor design pattern method. Use that to pass through the structure with the ISimpleBehaviourStructureVisitor.
            </summary>
            <param name="iVisitor">The visitor to visit.</param>
            <seealso cref="T:BlueQuark.ISimpleBehaviourStructureVisitor"/>
        </member>
        <member name="M:BlueQuark.ABehaviourStructure.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            </summary>
            <param name="iFunc">The routine to start.</param>
            <returns>The started coroutine.</returns>
        </member>
        <member name="T:BlueQuark.ABehaviourAlgorithmVariable">
            <summary>
            Represents a named variable declared during a Behaviour algorithm. 
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourAlgorithmVariable.Name">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourAlgorithmVariable.Value">
            <summary>
            The value of the variable.
            </summary>
        </member>
        <member name="T:BlueQuark.AConditionBehaviourInstruction`1">
            <summary>
            Base class for condition behaviour instruction.
            </summary>
            <typeparam name="T">Type of the value to compare</typeparam>
            <seealso cref="T:BlueQuark.IfConditionBehaviourInstruction`1"/>
            <seealso cref="T:BlueQuark.ElseConditionBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.AConditionBehaviourInstruction`1.ConstComparedValue">
            <summary>
            A const value to compare if ComparedVariable and SecondComparedVariable do not 
            correspond to each over or if any of these value is not set.
            </summary>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction`1.ComparedVariable"/>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction`1.SecondComparedVariable"/>
        </member>
        <member name="P:BlueQuark.AConditionBehaviourInstruction`1.ComparedVariable">
            <summary>
            First variable to compare.
            </summary>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction`1.SecondComparedVariable"/>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction`1.ConstComparedValue"/>
        </member>
        <member name="P:BlueQuark.AConditionBehaviourInstruction`1.SecondComparedVariable">
            <summary>
            Second variable to compare.
            </summary>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction`1.ComparedVariable"/>
            <seealso cref="P:BlueQuark.AConditionBehaviourInstruction`1.ConstComparedValue"/>
        </member>
        <member name="M:BlueQuark.AConditionBehaviourInstruction`1.#ctor">
            <summary>
            Creates a base condition (behaviour) instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.LookAtBehaviourInstruction">
            <summary>
            Represents a Look At behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.LookAtBehaviourInstruction.Position">
            <summary>
            Repersents the position to look at.
            </summary>
        </member>
        <member name="P:BlueQuark.LookAtBehaviourInstruction.Smooth">
            <summary>
            Represents the smooth;
            </summary>
        </member>
        <member name="M:BlueQuark.LookAtBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.LookAtBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts a visitor.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ElseConditionBehaviourInstruction">
            <summary>
            The 'else' (behaviour) instruction
            </summary>
            <seealso cref="T:BlueQuark.AControlBehaviourInstruction"/>
            <seealso cref="T:BlueQuark.IfConditionBehaviourInstruction`1"/>
        </member>
        <member name="M:BlueQuark.ElseConditionBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.IfConditionBehaviourInstruction`1">
            <summary>
            The 'if' (behaviour) instruction.
            </summary>
            <typeparam name="T">The type of the value to compare.</typeparam>
            <seealso cref="T:BlueQuark.AConditionBehaviourInstruction`1"/>
            <seealso cref="T:BlueQuark.AControlBehaviourInstruction"/>
            <seealso cref="T:BlueQuark.ElseConditionBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.IfConditionBehaviourInstruction`1.Else">
            <summary>
            The else condition behaviour instruction. 
            </summary>
        </member>
        <member name="M:BlueQuark.IfConditionBehaviourInstruction`1.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ForLoopBehaviourInstruction">
            <summary>
            The for loop (behaviour) instruction
            </summary>
        </member>
        <member name="P:BlueQuark.ForLoopBehaviourInstruction.Iterations">
            <summary>
            Represents the iteration of the for loop.
            </summary>
        </member>
        <member name="M:BlueQuark.ForLoopBehaviourInstruction.#ctor">
            <summary>
            Create a base for loop object.
            </summary>
        </member>
        <member name="M:BlueQuark.ForLoopBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor"></param>
        </member>
        <member name="T:BlueQuark.InfinitLoopBehaviourInstruction">
            <summary>
            The 'infinite loop' (behaviour) instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.InfinitLoopBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.IDurableBehaviourInstruction">
            <summary>
            Represents a durable behaviour instruction interface.
            </summary>
        </member>
        <member name="P:BlueQuark.IDurableBehaviourInstruction.Duration">
            <summary>
            Represents the duration.
            </summary>
        </member>
        <member name="T:BlueQuark.MoveHeadBehaviourInstruction">
            <summary>
            Represents a move head behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.Position">
            <summary>
            Represents the position.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.CustomMove">
            <summary>
            True if the movement is custom.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.YesAngle">
            <summary>
            Represents the yes (axe) angle.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.NoAngle">
            <summary>
            Represents the no (axe) angle.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.YesSpeed">
            <summary>
            Represents the yes (axe) speed.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveHeadBehaviourInstruction.NoSpeed">
            <summary>
            Represents the no (axe) speed.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveHeadBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveHeadBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.MoveBodyBehaviourInstruction">
            <summary>
            Represents a move body behaviour instruction.
            </summary>
            <seealso cref="T:BlueQuark.AProcedureBehaviourInstruction"/>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.Angle">
            <summary>
            Represents the angle of the movement.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.Speed">
            <summary>
            Represents the speed of the movement.
            </summary>
        </member>
        <member name="P:BlueQuark.MoveBodyBehaviourInstruction.Distance">
            <summary>
            Represents the distanec of the movement.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveBodyBehaviourInstruction.#ctor">
            <summary>
            Creates a new object.
            </summary>
        </member>
        <member name="M:BlueQuark.MoveBodyBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accept a visitor.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.DisplayImageBehaviourInstruction">
            <summary>
            Displayable image (behaviour) instruction.
            </summary>
        </member>
        <member name="P:BlueQuark.DisplayImageBehaviourInstruction.Duration">
            <summary>
            Duration of displaying the image.
            </summary>
        </member>
        <member name="P:BlueQuark.DisplayImageBehaviourInstruction.FileName">
            <summary>
            Filename of the image to display. Used as Resources.GetSprite(FileName).
            </summary>
        </member>
        <member name="M:BlueQuark.DisplayImageBehaviourInstruction.#ctor">
            <summary>
            Creates a base display image (behaviour) instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.DisplayImageBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.ATransferBehaviourInstruction">
             <summary>
            
             </summary>
        </member>
        <member name="T:BlueQuark.GoToBehaviourInstruction">
            <summary>
            The 'Go To' (behaviour) instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.GoToBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.BreakBehaviourInstruction">
            <summary> 
            The 'break' (behaviour) instruction
            </summary>
        </member>
        <member name="M:BlueQuark.BreakBehaviourInstruction.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Accepts the visitor design pattern method.
            </summary>
            <param name="iVisitor">The visitor to accept.</param>
        </member>
        <member name="T:BlueQuark.BehaviourInstructionArgument`1">
            <summary>
            Represents a named variable for a specific instruction. 
            </summary>
            <typeparam name="T">Type of the data of the variable</typeparam>
        </member>
        <member name="P:BlueQuark.BehaviourInstructionArgument`1.Name">
            <summary>
            Name of the variable.
            </summary>
        </member>
        <member name="P:BlueQuark.BehaviourInstructionArgument`1.Value">
            <summary>
            Value of the variable.
            </summary>
        </member>
        <member name="T:BlueQuark.ABehaviourInstruction">
            <summary>
            Base class for behaviour instruction. Behaviour instruction is the atomic element for a any behaviour algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourInstruction.Parent">
            <summary>
            The block (condition or loop) parent of the current instruction. Null if not contained in a block.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourInstruction.IsBlocking">
            <summary>
            True if the instruction is a blocking instruction. The execution process will not wait for the end of a non blocking instruction.
            </summary>
        </member>
        <member name="P:BlueQuark.ABehaviourInstruction.IsRequired">
            <summary>
            If a required instruction failed, all the algorithm stops.
            </summary>
        </member>
        <member name="M:BlueQuark.ABehaviourInstruction.#ctor">
            <summary>
            Creates a base instruction object.
            </summary>
        </member>
        <member name="T:BlueQuark.AControlBehaviourInstruction">
            <summary>
            Base class for block instruction (condition or loop).
            </summary>
        </member>
        <member name="P:BlueQuark.AControlBehaviourInstruction.SubInstructions">
            <summary>
            Instructions contained in the block.
            </summary>
        </member>
        <member name="M:BlueQuark.AControlBehaviourInstruction.#ctor">
            <summary>
            Creates a new block instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.ALoopBehaviourInstruction">
            <summary>
            Base class for loop behaviour instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.InputBehaviourAlgorithmVariable">
            <summary>
            Represents an input named variable given to a Behaviour algorithm.
            </summary>
            <seealso cref="T:BlueQuark.ABehaviourAlgorithmVariable"/>
        </member>
        <member name="T:BlueQuark.AProcedureBehaviourInstruction">
            <summary>
            Base class for method call instruction.
            </summary>
        </member>
        <member name="P:BlueQuark.AProcedureBehaviourInstruction.Delay">
            <summary>
            The delay to wait before the instruction.
            </summary>
        </member>
        <member name="M:BlueQuark.AProcedureBehaviourInstruction.#ctor">
            <summary>
            Create a base procedure behaviour instruction.
            </summary>
        </member>
        <member name="T:BlueQuark.BehaviourAlgorithm">
            <summary>
            Represents a set of (behaviour) intructions. Can be run asynchroneously by the BehaviourInterpreter.
            </summary>
            <seealso cref="T:BlueQuark.BehaviourInterpreter"/>>
        </member>
        <member name="P:BlueQuark.BehaviourAlgorithm.Instructions">
            <summary>
            Instructions of the algorithms. Some instructions can contains some sub instructions.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourAlgorithm.#ctor">
            <summary>
            Creates a new behaviour algorithm. Can be serialize for further usages.
            </summary>
        </member>
        <member name="M:BlueQuark.BehaviourAlgorithm.Accept(BlueQuark.ISimpleBehaviourStructureVisitor)">
            <summary>
            Visitor design pattern method. Use that to pass through the structure with the ISimpleBehaviourStructureVisitor.
            </summary>
            <param name="iVisitor">The visitor to visit.</param>
            <seealso cref="T:BlueQuark.ISimpleBehaviourStructureVisitor"/>>
        </member>
        <member name="T:BlueQuark.Behaviour">
            <summary>
            Module that contains all the interaction features (Mood, Face, Behaviour player).
            </summary>
        </member>
        <member name="F:BlueQuark.Behaviour.MIN_MOOD_DURATION">
            <summary>
            Minimal mood duration before any change.
            </summary>
        </member>
        <member name="F:BlueQuark.Behaviour.DEFAULT_MOOD">
            <summary>
            Default robot's mood.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.IsBusy">
            <summary>
            Tells whether a behaviour is playing or the mood is changing.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Face">
            <summary>
            Face of the robot (Eyes and mouth).
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Interpreter">
            <summary>
            Behaviour algorithm player.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Mood">
            <summary>
            The current robot's mood (face + LED color). The mood stays until end of duration AND new mood request.
            </summary>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Boolean)">
            <summary>
            Sets the robot's mood (face + LED color). The mood stays until end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the module is already busy.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Single,System.Boolean)">
            <summary>
            Sets the robot's mood (face + LED color). The mood stays until end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iDuration">Duration in seconds of the mood before swap to the next queued mood. Stay if no next mood.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the module is already busy.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Action{BlueQuark.Mood},System.Boolean)">
            <summary>
            Sets the robot's mood. The mood stays until end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iOnEndSwap">Callback called when the action is done.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the module is already busy.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.SetMood(BlueQuark.Mood,System.Single,System.Action{BlueQuark.Mood},System.Boolean)">
            <summary>
            Sets the robot's mood. The mood stays until end of duration AND new mood request.
            </summary>
            <param name="iMood">The mood to set.</param>
            <param name="iDuration">Duration in seconds of the mood before swap to the next queued mood. Stay if no next mood.</param>
            <param name="iOnEndSwap">Callback called when the action is done.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the module is already busy.</param>
        </member>
        <member name="M:BlueQuark.Behaviour.ResetMood">
            <summary>
            Sets the default mood.
            </summary>
            <seealso cref="F:BlueQuark.Behaviour.DEFAULT_MOOD"/>
        </member>
        <member name="M:BlueQuark.Behaviour.Stop">
            <summary>
            Stops all currently running behaviours.
            </summary>
        </member>
        <member name="T:BlueQuark.Face">
            <summary>
            Face of the robot. You can use this component to make Buddy smiling or crying, depending of your needs.
            Some events are also available like blinking, swallowing, yawning...
            If you use the Text to speech component, the robot face will automaticaly "talk".
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_X_GAZE_POSITION">
            <summary>
            Max value for x (horizontal) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_X_GAZE_POSITION">
            <summary>
            Min value for x (horizontal) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_X_GAZE_POSITION">
            <summary>
            Default x (horizontal) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_Y_GAZE_POSITION">
            <summary>
            Max value for y (vertical) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_Y_GAZE_POSITION">
            <summary>
            Min value for y (vertical) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_Y_GAZE_POSITION">
            <summary>
            Default y (vertical) gaze position.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_FACE_DURATION">
            <summary>
            Minimal face duration before any change.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_FACIAL_EXPRESSION">
            <summary>
            Default facial expression.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_AROUSAL">
            <summary>
            Max value for face arousal.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_AROUSAL">
            <summary>
            Min value for face arousal.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_AROUSAL">
            <summary>
            Default face arousal value.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MAX_PLEASURE">
            <summary>
            Max value for face pleasure.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.MIN_PLEASURE">
            <summary>
            Min value for face pleasure.
            </summary>
        </member>
        <member name="F:BlueQuark.Face.DEFAULT_PLEASURE">
            <summary>
            Default face pleasure value.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.IsBusy">
            <summary>
            Returns true if buddy is busy
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchMouth">
            <summary>
            Set of callback called when mouth is clicked by the user.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchLeftEye">
            <summary>
            Set of callback called when left eye is clicked by the user.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchRightEye">
            <summary>
            Set of callback called when right eye is clicked by the user.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchSkin">
            <summary>
            Set of callback called when the skin is touched (ie : except mouth and eyes).
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouch">
            <summary>
            Set of callback called when the face is touched anywhere.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Texture">
            <summary>
            Texture of Buddy's face.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.GazeX">
            <summary>
            The current gaze X position of the face. From -1 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.GazeY">
            <summary>
            The current gaze Y position of the face. From -1 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.SetFacialExpression(BlueQuark.FacialExpression,System.Boolean)">
            <summary>
            Asks the face to switch to the specified mood.
            </summary>
            <param name="iFacialExpression">The name of the mood to switch to.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the component is already busy.</param>
        </member>
        <member name="M:BlueQuark.Face.SetFacialExpression(BlueQuark.FacialExpression,System.Action{BlueQuark.FacialExpression},System.Boolean)">
            <summary>
            Asks the face to switch to the specified mood.
            </summary>
            <param name="iFacialExpression">The name of the mood to switch to.</param>
            <param name="iOnEndSwap">Callback called at the end of the swap.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the component is already busy.</param>
        </member>
        <member name="M:BlueQuark.Face.ResetFacialExpression">
            <summary>
            Resets the facial expression.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent,System.Boolean)">
            <summary>
            Buddy will make a mouth event. Last until MouthEvent.NONE or speak.
            </summary>
            <param name="iFacialEvent">The mouth event.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the component is already busy.</param>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent,System.Action{BlueQuark.FacialEvent},System.Boolean)">
            <summary>
            Buddy will make a mouth event.
            </summary>
            <param name="iFacialEvent">The mouth event.</param>
            <param name="iOnStartEvent">Callback called at the beginning of the event.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the component is already busy.</param>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent,System.Action{BlueQuark.FacialEvent},System.Action{BlueQuark.FacialEvent},System.Boolean)">
            <summary>
            Buddy will make a mouth event.
            </summary>
            <param name="iFacialEvent">The mouth event.</param>
            <param name="iOnStartEvent">Callback called at the beginning of the event.</param>
            <param name="iOnEndEvent">Callback called at the end of the event.</param>
            <param name="iEnqueue">A NO queued request WON'T be executed if the component is already busy.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(System.Single,System.Single)">
            <summary>
            Look at the specified location. Interrupt any other LookAtSmoothly process.
            </summary>
            <param name="iX">X coordinate, from -1 to 1.</param>
            <param name="iY">Y coordinate, from -1 to 1.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(System.Single,System.Single,System.Action{System.Single,System.Single})">
            <summary>
            Look at the specified location. Interrupt any other LookAtSmoothly process.
            </summary>
            <param name="iX">X coordinate, from -1 to 1.</param>
            <param name="iY">Y coordinate, from -1 to 1.</param>
            <param name="iOnEndLookAt">Callback called at the end of the gaze changement.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(BlueQuark.GazePosition)">
            <summary>
            Facility to LookAt(X, Y) method. Interrupt any other LookAtSmoothly process.
            </summary>
            <param name="iLookAt">The location to look at.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAtSmoothly(BlueQuark.GazePosition,System.Action{System.Single,System.Single})">
            <summary>
            Facility to LookAt(X, Y) method. Interrupt any other LookAtSmoothly process.
            </summary>
            <param name="iLookAt">The location to look at.</param>
            <param name="iOnEndLookAt">Callback called at the end of the gaze changement.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAt(System.Single,System.Single)">
            <summary>
            Look at the specified location (bottom left => 0, 0).
            </summary>
            <param name="iX">X coordinate, from -1 to 1.</param>
            <param name="iY">Y coordinate, from -1 to 1.</param>
        </member>
        <member name="M:BlueQuark.Face.LookAt(BlueQuark.GazePosition)">
            <summary>
            Facility to LookAt(X, Y) method.
            </summary>
            <param name="iLookAt">The location to look at.</param>
        </member>
        <member name="M:BlueQuark.Face.ResetLookAt">
            <summary>
            Resets the face gaze to the default position.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Arousal">
            <summary>
            Arousal of the face. From -1 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Pleasure">
            <summary>
            Pleasure of the face. From -1 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.Face.SetArousalSmoothly(System.Single)">
            <summary>
            Sets the face arousal. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iArousal">The value to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetArousalSmoothly(System.Single,System.Action{System.Single})">
            <summary>
            Sets the face arousal. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iArousal">The value to set.</param>
            <param name="iOnEndSwap">Callbak called on the end of the swap.</param>
        </member>
        <member name="M:BlueQuark.Face.SetPleasureSmoothly(System.Single)">
            <summary>
            Sets the face pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetPleasureSmoothly(System.Single,System.Action{System.Single})">
            <summary>
            Sets the face pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
            <param name="iOnEndSwap">Callback called on the end of the swap.</param>
        </member>
        <member name="M:BlueQuark.Face.SetInternalMoodSmoothly(System.Single,System.Single)">
            <summary>
            Sets both Arousal and Pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
            <param name="iArousal">The value to set.</param>
        </member>
        <member name="M:BlueQuark.Face.SetInternalMoodSmoothly(System.Single,System.Single,System.Action{System.Single,System.Single})">
            <summary>
            Sets both Arousal and Pleasure. From -1 to 1. Interrupt any other SetPleasure/Arousal smoothly process.
            </summary>
            <param name="iPleasure">The value to set.</param>
            <param name="iArousal">The value to set.</param>
            <param name="iOnEndSwap">Callback called on the end of the swap.</param>
        </member>
        <member name="T:BlueQuark.FacialPart">
            <summary>
            Represents a part of the buddy face.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.SKIN">
            <summary>
            Skin.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.MOUTH">
            <summary>
            Mouth.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.RIGHT_EYE">
            <summary>
            Right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialPart.LEFT_EYE">
            <summary>
            Left eye.
            </summary>
        </member>
        <member name="T:BlueQuark.FacialEvent">
            <summary>
            Mouth and eye events that Buddy face can desplay.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SMILE">
            <summary>
            Makes the face smile.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.YAWN">
            <summary>
            Makes the face yawn.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SURPRISED">
            <summary>
            Makes the face scream like a cute barbarian.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_RIGHT_EYE">
            <summary>
            Makes the face blinking the right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_LEFT_EYE">
            <summary>
            Makes the face blinking the left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_EYES">
            <summary>
            Makes the face blinking both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.TEASE">
            <summary>
            Puts the tong out of the mouth.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SUSPICIOUS">
            <summary>
            Makes half blink of an eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.DOUBTFUL">
            <summary>
            Makes half blink of both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.WHAT">
            <summary>
            What on fuck ?!
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.GROWLING">
            <summary>
            Like angry face expression, but different.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.WHISTLE">
            <summary>
            Makes the mouse whistle.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.CLOSE_EYES">
            <summary>
            Closes both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.OPEN_EYES">
            <summary>
            Opens both eyes.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.CLOSE_LEFT_EYE">
            <summary>
            Closes left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.OPEN_LEFT_EYE">
            <summary>
            Opens left eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.CLOSE_RIGHT_EYE">
            <summary>
            Closes right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.OPEN_RIGHT_EYE">
            <summary>
            Opens right eye.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.RELATIVE_EVENT">
            <summary>
            A relative event to some mood.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.FALL_ASLEEP">
            <summary>
            Asleep Buddy.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.AWAKE">
            <summary>
            Awakes the mighty Buddy.
            </summary>
        </member>
        <member name="T:BlueQuark.GazePosition">
            <summary>
            Facility enum for face LookAt(x, y) method.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.CENTER">
            <summary>
            Look at center.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP">
            <summary>
            Look at the top.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.LEFT">
            <summary>
            Look at the extreme left.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.RIGHT">
            <summary>
            Look at the extreme right.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM">
            <summary>
            Look at the bottom.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP_LEFT">
            <summary>
            Look at top left.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP_RIGHT">
            <summary>
            Look at top right.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM_RIGHT">
            <summary>
            Look at bottom rigth.
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM_LEFT">
            <summary>
            Look at bottom left.
            </summary>
        </member>
        <member name="T:BlueQuark.FacialExpression">
            <summary>
            Represents different expressions that Buddy can show
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.NEUTRAL">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.ANGRY">
            <summary>
            Angry.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.GRUMPY">
            <summary>
            Grumpy.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.HAPPY">
            <summary>
            Happy.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.LISTENING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SAD">
            <summary>
            Sad.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SCARED">
            <summary>
            Scared.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SICK">
            <summary>
            Sick.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SURPRISED">
            <summary>
            Surprised.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.THINKING">
            <summary>
            Thinking.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.TIRED">
            <summary>
            Tired.
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.LOVE">
            <summary>
            In love !
            </summary>
        </member>
        <member name="T:BlueQuark.Mood">
            <summary>
            Represents different expressions that Buddy can show.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.NEUTRAL">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.ANGRY">
            <summary>
            Angry.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.GRUMPY">
            <summary>
            Grumpy.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.HAPPY">
            <summary>
            Happy.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.LISTENING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.HEARING">
            <summary>
            Listening.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SAD">
            <summary>
            Sad.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SCARED">
            <summary>
            Scared.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SICK">
            <summary>
            Sick.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.SURPRISED">
            <summary>
            Surprised.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.THINKING">
            <summary>
            Thinking.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.TIRED">
            <summary>
            Tired.
            </summary>
        </member>
        <member name="F:BlueQuark.Mood.LOVE">
            <summary>
            In love !
            </summary>
        </member>
        <member name="T:BlueQuark.FDotNavigation">
            <summary>
            Dot navigation bar for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FDotNavigation.OnClick">
            <summary>
            Called when a dot is clicked. Developer is responsible to set (or not) the clicked dot as selected.
            </summary>
        </member>
        <member name="P:BlueQuark.FDotNavigation.Item(System.Int32)">
            <summary>
            Select the dot navigation dot at the given index. Starts at 0. Unselect the current selected dot.
            </summary>
            <param name="iIndex">Index of the dot to select.</param>
            <returns>Index of the dot to select.</returns>
        </member>
        <member name="P:BlueQuark.FDotNavigation.Dots">
            <summary>
            Number of dots. If set, clear all previously setted dots. Don't forget to select a dot after call this function. 
            </summary>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetLabel(System.String)">
            <summary>
            Sets the label of the component.
            </summary>
            <param name="iText">Text to display. Null to hide.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetCustomDotIcon(UnityEngine.Sprite)">
            <summary>
            Sets a custom image to the dot elements.
            </summary>
            <param name="iSprite">The sprite to set for each element.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetCustomDotColor(UnityEngine.Color)">
            <summary>
            Sets a custom color to the dot elements.
            </summary>
            <param name="iColor">The color to set for each element.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.SetCustomLabelFont(UnityEngine.Font)">
            <summary>
            Sets a custom font to the optional text.
            </summary>
            <param name="iFont">The font to set.</param>
        </member>
        <member name="M:BlueQuark.FDotNavigation.Select(System.Int32)">
            <summary>
            Select the dot navigation dot at the given index. Starts at 0. Unselect the current selected dot.
            </summary>
            <returns>Index of the dot to select.</returns>
        </member>
        <member name="T:BlueQuark.MovingParts">
            <summary>
            Robot's mobility options during tracking
            </summary>
        </member>
        <member name="F:BlueQuark.MovingParts.EYES">
            <summary>
            Eyes only
            </summary>
        </member>
        <member name="F:BlueQuark.MovingParts.EYES_HEAD">
            <summary>
            Eyes and head
            </summary>
        </member>
        <member name="F:BlueQuark.MovingParts.EYES_WHEELS">
            <summary> 
            Only eyes and wheels
            </summary>
        </member>
        <member name="F:BlueQuark.MovingParts.EYES_HEAD_WHEELS_STATIC">
            <summary>
            Eyes, head, wheels turning on place
            </summary>
        </member>
        <member name="T:BlueQuark.SensorMode">
            <summary>
            Sensors to be used for tracking. The thermal sensor is always used.
            </summary>
        </member>
        <member name="F:BlueQuark.SensorMode.THERMAL">
            <summary>
            Thermal camera.
            </summary>
        </member>
        <member name="F:BlueQuark.SensorMode.VISION">
            <summary>
            RGB camera with thermal.
            </summary>
        </member>
        <member name="F:BlueQuark.SensorMode.SKELETON">
            <summary>
            Using depth-based skeleton detection with thermal. 
            </summary>
        </member>
        <member name="T:BlueQuark.LocationStrategy">
            <summary>
            General GoTo navigation strategies.
            </summary>
        </member>
        <member name="M:BlueQuark.LocationStrategy.ToImpl(UnityEngine.Vector3)">
            <summary>
            Navigate to a relative iPosition
            </summary>
            <param name="iPosition"></param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.ToTopoImpl(BlueQuark.Room)">
            <summary>
            Topological navigation to a room
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.To(System.Single,System.Single,System.Single)">
            <summary>
            Starts a navigation to go to the specified position
            </summary>
            <param name="iX">The X relative position in meters.</param>
            <param name="iY">The Y relative position in meters.</param>
            <param name="iT">The Theta angle position.</param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.To(UnityEngine.Vector2)">
            <summary>
            Starts a navigation to go to the specified position
            </summary>
            <param name="iPosition">The position.</param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.To(OpenCVUnity.Point)">
            <summary>
            Starts a navigation to go to the specified position
            </summary>
            <param name="iPosition">The position.</param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.To(OpenCVUnity.Point3)">
            <summary>
            Starts a navigation to go to the specified position
            </summary>
            <param name="iPosition">The position.</param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.To(UnityEngine.Vector3)">
            <summary>
            Starts a navigation to go to the specified position
            </summary>
            <param name="iPosition">The position.</param>
        </member>
        <member name="M:BlueQuark.LocationStrategy.To(BlueQuark.Room)">
            <summary>
            Starts a topological navigation to a room
            </summary>
            <param name="iRoom">Room as objective.</param>
        </member>
        <member name="T:BlueQuark.PathStrategy">
            <summary>
            Navigation strategy for path planning and tracking.
            </summary>
        </member>
        <member name="M:BlueQuark.PathStrategy.GenerateBezierPath(UnityEngine.Vector2,UnityEngine.Vector3,System.Single,System.Func{System.Single,System.Single}@,System.Func{System.Single,System.Single}@,System.Single@)">
            <summary>
            Quadratic bezier curve from starting point to end point
            </summary>
            <param name="iAbsolueGoal">Coordinates of the goal</param>
            <param name="iCurrentPose">Current position and orientation</param>
            <param name="iSpeed">Current wheel speed (degrees per second)</param>
        </member>
        <member name="M:BlueQuark.PathStrategy.FollowBezierPathTo(UnityEngine.Vector2)">
            <summary>
            Follow a Bezier path to the relative goal point.
            </summary>
            <param name="iRelativeGoal">The position.</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.PathStrategy.Plan(UnityEngine.Vector2)">
            <summary>
            Plan a Beizer a path from the robot's current pose to the goal.
            </summary>
            <param name="iRelativeGoal">The position.</param>
        </member>
        <member name="M:BlueQuark.PathStrategy.Follow(System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            Follow a given path with pure pursuit.
            </summary>
            <param name="iPath">List of points' positions in the robot's coordiante system.</param>
        </member>
        <member name="T:BlueQuark.RoamStrategy">
            <summary>
            Local roaming strategy.
            </summary>
        </member>
        <member name="M:BlueQuark.RoamStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.RoamSpeed)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iRoamSpeed">Advancing speed during roam.</param>
        </member>
        <member name="M:BlueQuark.RoamStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.Mood,BlueQuark.RoamSpeed)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iMood">The mood that should be expressed through the motion.</param>
            <param name="iRoamSpeed">Advancing speed during roam.</param>
        </member>
        <member name="M:BlueQuark.RoamStrategy.WithMood(BlueQuark.Mood,BlueQuark.RoamSpeed)">
            <summary>
            Start wandering around in a certain mood.
            </summary>
            <param name="iMood">The mood that should be expressed through the motion.</param>
            <param name="iRoamSpeed">Advancing speed during roam.</param>
        </member>
        <member name="T:BlueQuark.SkeletonJointStatus">
            <summary>
            Represents the skeletons joint status of an entity.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointStatus.NOT_TRACKED">
            <summary>
            Not tracked.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointStatus.LOW_CONFIDENCE">
            <summary>
            Low confidence.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointStatus.TRACKED">
            <summary>
            Tracked.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonJointType">
            <summary>
            Represents the skeletons joint type of an entity.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.HEAD">
            <summary>
            Head.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.SHOULDER_SPINE">
            <summary>
            Shoulder spine.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_SHOULDER">
            <summary>
            Left shoudler.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_ELBOW">
            <summary>
            Left elbow.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_HAND">
            <summary>
            Left hand.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_SHOULDER">
            <summary>
            Right shoulder.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_ELBOW">
            <summary>
            Right elbow.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_HAND">
            <summary>
            Right hand.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.MID_SPINE">
            <summary>
            Mid spine.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.BASE_SPINE">
            <summary>
            Base spine.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_HIP">
            <summary>
            Left hip.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_KNEE">
            <summary>
            Left knee.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_FOOT">
            <summary>
            Left foot.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_HIP">
            <summary>
            Right hip.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_KNEE">
            <summary>
            Right knee.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_FOOT">
            <summary>
            Right foot.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.LEFT_WRIST">
            <summary>
            Left wrist.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.RIGHT_WRIST">
            <summary>
            Right wrist.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.NECK">
            <summary>
            Neck.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonJointType.UNKNOWN">
            <summary>
            Unknopwn.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonEntityStatus">
            <summary>
            Represents the skeleton entity status.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.NOT_TRACKED">
            <summary>
            Not tracked.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.LOST">
            <summary>
            Lost.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.BEGIN_TRACKED">
            <summary>
            Begin tracked.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonEntityStatus.TRACKED">
            <summary>
            Tracked.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonJoint">
            <summary>
            Represents a skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.DepthPosition">
            <summary>
            Represents the depth position of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.WorldPosition">
            <summary>
            Represents the world position of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Orientation">
            <summary>
            Represents the orientation of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Status">
            <summary>
            Represents the status of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonJoint.Type">
            <summary>
            Represeznts the type of the skeleton joint.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonEntity">
            <summary>
            Human skeleton data structure.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.CenterOfMass">
            <summary>
            World coordinate in mm.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Joints">
            <summary>
            Represents the list of the skeleton joint.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Status">
            <summary>
            Represents the skeleton entity status.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.MAX_DETECTION_DISTANCE">
            <summary>
            Represents the max detection distance.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.ID">
            <summary>
            Represents the id of the skeleton entity. 
            </summary>
        </member>
        <member name="M:BlueQuark.SkeletonEntity.Equals(System.Object)">
            <summary>
            Equal method override.
            </summary>
            <param name="Obj">The object to compare.</param>
            <returns>True if the objects are equal.</returns>
        </member>
        <member name="M:BlueQuark.SkeletonEntity.GetHashCode">
            <summary>
            Gets the hask code of the instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.GetHumanEntity">
            <summary>
            Gets the human entity.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Distance">
            <summary>
            Distance to human in meter.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonEntity.Confidence">
            <summary>
            Confidence of the detection, from 0 to 1. Depend on the number of joints and distance.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetectorParameter.SensorMode">
            <summary>
            Using skeleton or vision. Thermal is always used.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetectorParameter.YOLO">
            <summary>
            Represents the yolo parameters.
            </summary>
        </member>
        <member name="T:BlueQuark.YOLOParameter">
            <summary>
            Parameters for YOLO.
            </summary> 
        </member>
        <member name="P:BlueQuark.YOLOParameter.RegionOfInterest">
            <summary>
            Represents the region of interest.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.UseThermal">
            <summary>
            If we use the thermal mode.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.ThermalThreshold">
            <summary>
            Represents the thermal threshold.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.DetectFallenHuman">
            <summary>
            If we detect fallen humans.
            </summary>
        </member>
        <member name="P:BlueQuark.YOLOParameter.DownSample">
            <summary>
            Represents the down sample.
            </summary>
        </member>
        <member name="T:BlueQuark.Map">
            <summary>
            Map data class used by Mapper
            </summary>
        </member>
        <member name="P:BlueQuark.Map.LOCAL_FILE">
            <summary>
            C# level map data
            </summary>
        </member>
        <member name="M:BlueQuark.Map.#ctor(System.String)">
            <summary>
            Create a path
            </summary>
            <param name="iPath">Path to the file</param>
        </member>
        <member name="M:BlueQuark.Map.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="T:BlueQuark.Mapper">
            <summary>
            Mapper class.
            For a topological map, it is possible to add and remove rooms, as well as connect these rooms.
            One can learn landmarks in the room for navigation.
            </summary>
        </member>
        <member name="P:BlueQuark.Mapper.RoomCountImpl">
            <summary>
            Return the number of rooms present in the model
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.AddRoomImpl(BlueQuark.Room)">
            <summary>
            Add a new room in the topological map
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.RemoveRoomImpl(BlueQuark.Room)">
            <summary>
            Remove room from the topological map
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.LearnLocalizationImpl(OpenCVUnity.Mat,BlueQuark.Room)">
            <summary>
            Function to calculate the keypoints and features of a single image,
            And then add them to the bag of words model for localization
            </summary>
            <param name="iRGBFrame"></param>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.StartFromExistingLandmarkImpl(System.Int32)">
            <summary>
            Start a new path from existing landmark
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.ArriveAtExistingLandmarkImpl(System.Int32)">
            <summary>
            Join path at a existing landmark
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.UpdateLandmarkDistance(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Update the connection between two landmarks
            </summary>
            <param name="iStart"></param>
            <param name="iEnd"></param>
            <param name="iDist">Distance in meter</param>
            <param name="iOrientation">Orientation in degree</param>
            <returns></returns>
        </member>
        <member name="P:BlueQuark.Mapper.RoomCount">
            <summary>
            Count the number of rooms.
            </summary>
        </member>
        <member name="P:BlueQuark.Mapper.RoomList">
            <summary>
            Return the list of rooms.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.Init(BlueQuark.Map,System.Boolean)">
            <summary>
            Explicitly initialize Mapper.
            </summary>
            <param name="iMap"></param>
            <param name="iReinit"></param>
        </member>
        <member name="M:BlueQuark.Mapper.AddRoom(BlueQuark.Room)">
            <summary>
            Add a room into the map.
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.RemoveRoom(BlueQuark.Room)">
            <summary>
            Remove a room from the map.
            </summary>
            <param name="iRoom"></param>
        </member>
        <member name="M:BlueQuark.Mapper.AddRoomConnection(BlueQuark.Room,BlueQuark.Room)">
            <summary>
            Add connection between two rooms in the topological map.
            </summary>
            <param name="iRoom1"></param>
            <param name="iRoom2"></param>
        </member>
        <member name="M:BlueQuark.Mapper.RoomsConnected(BlueQuark.Room,BlueQuark.Room)">
            <summary>
            Return if room1 and room2 are connected in the topological map.
            </summary>
            <param name="iRoom1"></param>
            <param name="iRoom2"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Mapper.SetDirection">
            <summary>
            Used when learning landmarks for navigation.
            After learning a landmark, set direction leading to the next landmark.
            The orientation will be used to update the path info between two landmarks.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.StartFromExistingLandmark(System.Int32)">
            <summary>
            During learning landmarks for navigation, start a new path from existing landmark.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.ArriveAtExistingLandmark(System.Int32)">
            <summary>
            During learning landmarks for navigation, use this function to join an existing landmark, a path will corresponding length and orientation.
            will be created in the topological map.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.SaveModel">
            <summary>
            Save navigation and localization model, calculated image featuers as wells as the topological map.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.ClearModel">
            <summary>
            Clear navigation and localization model calculated image featuers as wells as the topological map.
            </summary>
        </member>
        <member name="M:BlueQuark.Mapper.LearnNavigationAsync(BlueQuark.Room,System.Int32)">
            <summary>
            Run the coroutine to learn a landmark for navigation.
            The robot will rotate on itself iNImages times to takes images.
            Images wiil be learned in both the bag of words model (localization)
            And nav model.
            </summary>
            <param name="iRoom">The room.</param>
            <param name="iNImages">Number of images to take.</param>
            <returns>The coroutine.</returns>
        </member>
        <member name="M:BlueQuark.Mapper.LearnLocalizationAsync(BlueQuark.Room,System.Int32)">
            <summary>
            Coroutine to learn images in bag of words model for localization.
            Will take nImages with equal angular distance.
            (for example, 6 images = 60 degrees)
            </summary>
            <param name="iRoom">The room.</param>
            <param name="iNumImages">The total number of images in this landmark;</param>
            <returns>The coroutine;</returns>
        </member>
        <member name="T:BlueQuark.Room">
            <summary>
            Room class for topological map.
            <see cref="!:https://stackoverflow.com/questions/2779743/can-you-add-to-an-enum-type-in-run-time"/>
            </summary>
        </member>
        <member name="P:BlueQuark.Room.Name">
            <summary>
            Room name.
            </summary>
        </member>
        <member name="P:BlueQuark.Room.Owner">
            <summary>
            For example, it is Loulou's room;
            </summary>
        </member>
        <member name="M:BlueQuark.Room.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:BlueQuark.Room.#ctor(System.String)">
            <summary>
            Create a room by label.
            </summary>
            <param name="iLabel">The label of the room.</param>
        </member>
        <member name="P:BlueQuark.Room.DefaultRooms">
            <summary>
            Get the list of rooms by default.
            </summary>
        </member>
        <member name="M:BlueQuark.Room.Equals(System.Object)">
            <summary>
            override object.Equals
            </summary>
            <param name="iObj"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Room.GetHashCode">
            <summary>
            override object.GetHashCode
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:BlueQuark.Rooms">
            <summary>
            A default collection of rooms.
            </summary>
        </member>
        <member name="F:BlueQuark.Rooms.Kitchen">
            <summary>
            Kitchen by default.
            </summary>
        </member>
        <member name="F:BlueQuark.Rooms.LivingRoom">
            <summary>
            Living room by default.
            </summary>
        </member>
        <member name="F:BlueQuark.Rooms.Bedroom">
            <summary>
            Bedroom by default.
            </summary>
        </member>
        <member name="T:BlueQuark.SkeletonDetector">
            <summary>
            Skeleton detector algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.SkeletonDetector.MAX_BODIES">
            <summary>
            Max tracked bodies.
            </summary>
        </member>
        <member name="P:BlueQuark.SkeletonDetector.OnDetect">
            <summary>
            Called when an skeleton is detected. Remove all callback to stops the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.CalendarManager">
            <summary>
            Represents the calender manager component.
            </summary>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.DiaryEventReminder)">
            <summary>
            Add an issued event to the current list.
            </summary>
            <param name="iIssuedEvent">The issued event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.PlannedEventReminder)">
            <summary>
            Add a planned event to the current list.
            </summary>
            <param name="iPlannedEvent">The planned event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Add(BlueQuark.PlannedAlarmReminder)">
            <summary>
            Add a planned alarm to the list.
            </summary>
            <param name="iPlannedAlarm">The planned alarm.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.DiaryEventReminder)">
            <summary>
            Remove a given diary event from the active list.
            </summary>
            <param name="iIssuedEvent">The issued event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.PlannedEventReminder)">
            <summary>
            Remove a Planned event from the active list.
            </summary>
            <param name="iPlannedEvent">The planned event.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.Remove(BlueQuark.PlannedAlarmReminder)">
            <summary>
            Remove a planned alarm from the active list.
            </summary>
            <param name="iPlannedAlarm">The planned alarm.</param>
        </member>
        <member name="M:BlueQuark.CalendarManager.AddNotifFromReminder(BlueQuark.AReminder,System.Action,System.Action)">
            <summary>
            Adding a notification linked to the given reminder.
            </summary>
            <param name="iReminder">The reminder.</param>
            <param name="iOnValidate">Action on the validation.</param>
            <param name="iOnRefuse">Action on the refuse.</param>
        </member>
        <member name="P:BlueQuark.CalendarManager.PlannedAlarms">
            <summary>
            List of all alarms of the system.
            </summary>
        </member>
        <member name="P:BlueQuark.CalendarManager.PlannedEvents">
            <summary>
            List of all active events in the system.
            </summary>
        </member>
        <member name="P:BlueQuark.CalendarManager.DiaryEvents">
            <summary>
            List of all active diary events.
            </summary>
        </member>
        <member name="T:BlueQuark.AReminder">
            <summary>
            Represents a base class for reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.NotifId">
            <summary>
            Represents the notification id.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.ReminderNotifContent">
            <summary>
            Represents the content of the reminder notification.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.ReminderContent">
            <summary>
            Represents the conetnt of the reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.AReminder.ReminderState">
            <summary>
            Represents the reminder state.
            </summary>
            <seealso cref="P:BlueQuark.AReminder.ReminderState"/>
        </member>
        <member name="P:BlueQuark.AReminder.Targets">
            <summary>
            Represents the users targeted by the reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.AReminder.#ctor">
            <summary>
            Create a base reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.AReminder.#ctor(System.String,System.String,BlueQuark.ReminderState,System.Collections.Generic.List{BlueQuark.UserAccount})">
            <summary>
            Create a base reminder.
            </summary>
            <param name="iReminderContent">The content of the reminder.</param>
            <param name="iReminderNotifContent">The notif content of the reminder.</param>
            <param name="iReminderState">The state of the reminder.</param>
            <param name="iTargets">The users concerned by the reminder.</param>
        </member>
        <member name="T:BlueQuark.AScheduledReminder">
            <summary>
            Represents a base scheduled reminder.
            </summary>
            <seealso cref="T:BlueQuark.AReminder"/>
        </member>
        <member name="P:BlueQuark.AScheduledReminder.ReminderTime">
            <summary>
            Date of the reminder.
            </summary>
        </member>
        <member name="P:BlueQuark.AScheduledReminder.RepetitionDays">
            <summary>
            Repetition of the reminder by week.
            </summary>
        </member>
        <member name="M:BlueQuark.AScheduledReminder.#ctor">
            <summary>
            Creates a base scheduled reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.AScheduledReminder.#ctor(System.String,System.DateTime,System.String,System.Collections.Generic.List{BlueQuark.UserAccount},System.Collections.Generic.List{System.DayOfWeek},BlueQuark.ReminderState)">
            <summary>
            Creates a base scheduled reminder. 
            </summary>
            <param name="iContent">Content of the scheduled reminder.</param>
            <param name="iReminderTime">Date of the reminder.</param>
            <param name="iReminderNotifContent">Reminder notif content.</param>
            <param name="iTargets">The users concerned by the reminder.</param>
            <param name="iRepetitionDays">Repetition of the reminder by week.</param>
            <param name="iReminderState">State of the reminder.</param>
        </member>
        <member name="T:BlueQuark.CalendarEventType">
            <summary>
            Type of diary event.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.PARTY">
            <summary>
            Party.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.APPOINTMENT">
            <summary>
            Appointment.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.HOLIDAYS">
            <summary>
            Holidays.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.HOBBY">
            <summary>
            Hobby.
            </summary>
        </member>
        <member name="F:BlueQuark.CalendarEventType.BIRTHDAY">
            <summary>
            An error occured.
            </summary>
        </member>
        <member name="T:BlueQuark.DiaryEventReminder">
            <summary>
            Represents a diary event reminder.
            </summary>
            <seealso cref="T:BlueQuark.AReminder"/>
            <seealso cref="T:BlueQuark.DiaryEventType"/>
        </member>
        <member name="P:BlueQuark.DiaryEventReminder.EventTime">
            <summary>
            The event time.
            </summary>
        </member>
        <member name="P:BlueQuark.DiaryEventReminder.Type">
            <summary>
            The event type.
            </summary>
        </member>
        <member name="M:BlueQuark.DiaryEventReminder.#ctor(System.String,System.DateTime,System.String,BlueQuark.DiaryEventType,System.Collections.Generic.List{BlueQuark.UserAccount},BlueQuark.ReminderState)">
            <summary>
            Create a new diary event reminder.
            </summary>
            <param name="iContent">The content of the reminder.</param>
            <param name="iEventTime">The time of the reminder.</param>
            <param name="iNotifContent">The notif content.</param>
            <param name="iType">The type of the reminder.</param>
            <param name="iTargets">The users targeted by the reminder.</param>
            <param name="iReminderState">The state of the reminder.</param>
        </member>
        <member name="T:BlueQuark.DiaryEventType">
            <summary>
            Type of diary event.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.INFORM">
            <summary>
            Robots needs to inform.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.MISSED_CALL">
            <summary>
            Missed Call.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.MAIL_RECIEVED">
            <summary>
            An external media was recived.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.MEDIA_RECIEVED">
            <summary>
            An external media was recived.
            </summary>
        </member>
        <member name="F:BlueQuark.DiaryEventType.SYSTEM_ERROR">
            <summary>
            An error occured.
            </summary>
        </member>
        <member name="T:BlueQuark.PlannedAlarmReminder">
            <summary>
            Represent a planned alarm reminder.
            </summary>
            <seealso cref="T:BlueQuark.AScheduledReminder"/>
        </member>
        <member name="P:BlueQuark.PlannedAlarmReminder.Music">
            <summary>
            The music used for the alarm.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedAlarmReminder.Activated">
            <summary>
            Represents if the alarm is activated.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedAlarmReminder.Volume">
            <summary>
            Volume of the alarm.
            </summary>
        </member>
        <member name="M:BlueQuark.PlannedAlarmReminder.#ctor(System.String,System.DateTime,System.String,System.String,System.Int32,System.Boolean,System.Collections.Generic.List{System.DayOfWeek},System.Collections.Generic.List{BlueQuark.UserAccount},BlueQuark.ReminderState)">
            <summary>
            Creates a new planed alarm reminder.
            </summary>
            <param name="iContent">The content of the reminder.</param>
            <param name="iReminderTime">The date of the reminder.</param>
            <param name="iReminderNotifContent">The notif content of the alarm.</param>
            <param name="iMusic">The music of the alarm.</param>
            <param name="iVolume">The volume of the alarm.</param>
            <param name="iActivated">If the alarm is activated.</param>
            <param name="iRepetitionDays">The repetition of the alarm in the week.</param>
            <param name="iTargets">The users targeted by the reminder.</param>
            <param name="iReminderState">The reminder state.</param>
        </member>
        <member name="T:BlueQuark.PlannedEventReminder">
            <summary>
            Represents a planned event reminder.
            </summary>
            <seealso cref="T:BlueQuark.AScheduledReminder"/>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.NotifyUser">
            <summary>
            True if the user will be notified.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.EventTime">
            <summary>
            The time of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.Duration">
            <summary>
            The duration of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.Type">
            <summary>
            Type of the event.
            </summary>
        </member>
        <member name="P:BlueQuark.PlannedEventReminder.RepetitionTime">
            <summary>
            The repetition of the reminder.
            </summary>
        </member>
        <member name="M:BlueQuark.PlannedEventReminder.#ctor(System.String,System.DateTime,System.Boolean,System.String,BlueQuark.CalendarEventType,System.Collections.Generic.List{BlueQuark.UserAccount},BlueQuark.RepetitionTime,System.Collections.Generic.List{System.DayOfWeek},BlueQuark.ReminderState)">
            <summary>
            Creates a planned event reminder.
            </summary>
            <param name="iContent">The content of the reminder.</param>
            <param name="iReminderTime">The date of the reminder.</param>
            <param name="iNotify">If the user will be notified.</param>
            <param name="iReminderNotifContent">The notif content of the alarm.</param>
            <param name="iType">The type of the event Calendar.</param>
            <param name="iRepetitionDays">The repetition of the alarm in the week.</param>
            <param name="iTargets">The users targeted by the reminder.</param>
            <param name="iRepetitionTime">The time of the reminder.</param>
            <param name="iReminderState">The reminder state.</param>
        </member>
        <member name="T:BlueQuark.ReminderState">
            <summary>
            Status of the reminder.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.NEW">
            <summary>
            Reminder newly added.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.ACTIVE">
            <summary>
            Reminder newly added.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.DELIVERED">
            <summary>
            Reminder was delivered to someone.
            </summary>
        </member>
        <member name="F:BlueQuark.ReminderState.VALIDATED">
            <summary>
            The reminder's notification was validated.
            </summary>
        </member>
        <member name="T:BlueQuark.RepetitionTime">
            <summary>
            Type of diary event.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.ONCE">
            <summary>
            The event happens only once.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.DAYLY">
            <summary>
            The event happens dayly.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.WEEKLY">
            <summary>
            The event happens weekly.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.EVERY_TWO_WEEKS">
            <summary>
            The event happens every two weeks.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.MONTHLY">
            <summary>
            The event happens every month.
            </summary>
        </member>
        <member name="F:BlueQuark.RepetitionTime.ANNUAL">
            <summary>
            The event happens every year.
            </summary>
        </member>
        <member name="T:BlueQuark.Language">
            <summary>
            Represent a language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.ISO6391Code">
            <summary>
            Represents a norm code language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.ISO6392Code">
            <summary>
            Represents a norm code language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.ISO6393Code">
            <summary>
            Represents a norm code language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.LocalName">
            <summary>
            Represents the local name of the language.
            </summary>
        </member>
        <member name="P:BlueQuark.Language.EnglishName">
            <summary>
            Represents the english name of the language.
            </summary>
        </member>
        <member name="T:BlueQuark.ISO6393Code">
            <summary>
            Language three-letter codes, the same as 639-2/T for languages, but with distinct codes for each variety of an ISO 639 macrolanguage.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.ENG">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.FRA">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.ITA">
            <summary>
            Italian language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.DEU">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.JPN">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.NLD">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6393Code.KOR">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.ISO6392Code">
            <summary>
            Language three-letter codes, mostly the same as 639-2/T, but with some codes derived from English names rather than native names of languages.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.ENG">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.FRA">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.ITA">
            <summary>
            Italian language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.GER">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.JPN">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.NLD">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6392Code.KOR">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.Photograph">
            <summary>
            This class represents a photo taken during a running app. Can be saved as PNG on the HDD.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.TimeStamp">
            <summary>
            The date time when the photo has been created.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Image">
            <summary>
            Content of the photograph.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Location">
            <summary>
            Path to the parent directory.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Name">
            <summary>
            Name of the photo.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Extension">
            <summary>
            Extension of the file.
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.FullPath">
            <summary>
            Full path of the photograph.
            </summary>
        </member>
        <member name="M:BlueQuark.Photograph.Update(UnityEngine.Sprite)">
            <summary>
            Update the stored image. Must be saved for permanent effect.
            </summary>
            <param name="iNewImage">The new image to set.</param>
            <returns>True if operation is successful.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Update(UnityEngine.Texture2D)">
            <summary>
            Update the stored image. Must be saved for permanent effect.
            </summary>
            <param name="iNewImage">The new image to set.</param>
            <returns>True if operation is successful.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Update(OpenCVUnity.Mat)">
            <summary>
            Update the stored image. Must be saved for permanent effect.
            </summary>
            <param name="iNewImage">The new image to set.</param>
            <returns>True if operation is successful.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Save">
            <summary>
            Save the image on HDD. The Photo will be readable only for the running App.
            </summary>
            <returns>The fullpath to the saved photograph.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Delete">
            <summary>
            Delete the local version of the photo
            </summary>
            <returns>True if the deletion was successful, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.CreateFromFile(System.String)">
            <summary>
            Creates a photograph object from the given full path.
            </summary>
            <param name="iFullpath">Full path (with file and extension) to the image file.</param>
            <returns>The loaded photograph from the file. Null if error or not found.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.CreateSpritelessFromFile(System.String)">
            <summary>
            Creates a spriteless (no sprite will be load into memory) photograph object from the given full path.
            </summary>
            <returns>The metadata object without loaded sprite. Null if error or not found.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.CreateFromBytes(System.Byte[])">
            <summary>
            Creates a photograph object from the given full path.
            </summary>
            <param name="iData">Full path (with file and extension) to the image file.</param>
            <returns>The loaded photograph from the file. Null if error or nor found.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.SaveBytes(System.Byte[])">
            <summary>
            Save a byte array as a photograph. The location will be choosen regarding the running app and the current user.
            </summary>
            <param name="iData">Byte array of the sprite.</param>
            <returns>The fullpath to the saved photograph.</returns>
        </member>
        <member name="M:BlueQuark.Photograph.SaveBytes(System.Byte[],System.String)">
            <summary>
            Save a byte array as a photograph. The location will be choosen regarding the running app and the current user.
            </summary>
            <param name="iData">Byte array of the sprite.</param>
            <param name="iFilename">Filename of the sprite to save.</param>
            <returns>The fullpath to the saved photograph.</returns>
        </member>
        <member name="T:BlueQuark.LanguageManager">
            <summary>
            Language handler for the system.
            </summary>
            <seealso cref="T:BlueQuark.Language"/>
        </member>
        <member name="T:BlueQuark.ACameraFrame">
            <summary>
            The Generic Image Camera Output Container.
            It contains a Texture2D and/or a Mat.
            Each Camera possesses only one CameraFrame;
            </summary>
            <summary>
            The Generic Image Camera Output Container.
            It contains a Texture2D and/or a Mat.
            Each Camera possesses only one CameraFrame;
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.TextureImpl">
            <summary>
            Current frame's Texture (can return null)
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.MatImpl">
            <summary>
            Current frame's CVMat (can return null)
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Texture">
            <summary>
            Current frame's Texture
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Mat">
            <summary>
            Current frame's CVMat
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.ID">
            <summary>
            ID of the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Width">
            <summary>
            Width of the current frame. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.Height">
            <summary>
            Height of the current frame. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.UpdatesTexture">
            <summary>
            Tells if CameraFrame updates its Texture.
            </summary>
        </member>
        <member name="P:BlueQuark.ACameraFrame.UpdatesMat">
            <summary>
            Tells if CameraFrame updates its Mat.
            </summary>
        </member>
        <member name="T:BlueQuark.DepthCameraFrame">
            <summary>
            The DepthCamera specialized frame
            </summary>
            <summary>
            The DepthCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.HDCameraFrame">
            <summary>
            The HDCamera specialized frame
            </summary>
            <summary>
            The HDCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.InfraredCameraFrame">
            <summary>
            The InfraredCamera specialized frame
            </summary>
            <summary>
            The InfraredCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.RGBCameraFrame">
            <summary>
            The RGBCamera specialized frame
            </summary>
            <summary>
            The RGBCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalCameraFrame">
            <summary>
            The ThermalCamera specialized frame
            </summary>
            <summary>
            The ThermalCamera specialized frame
            </summary>
        </member>
        <member name="T:BlueQuark.SerializableDictionary`2">
            <summary>
            Serializable Dictionary
            </summary>
            <typeparam name="TKey">Key</typeparam>
            <typeparam name="TValue">Value</typeparam>
        </member>
        <member name="T:BlueQuark.Remote.StopWheelsCmd">
            <summary>
            When executed : Stops wheels motors.
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.StopWheelsCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.StopWheelsCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Remote.WebRTCListener">
            <summary>
            This part listens on the Crossbar server to know if there is any incoming call
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.WebRTCListener.RemoteID">
            <summary>
            Used to know the Remote ID for RTC communication
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.WebRTCListener.Ringing">
            <summary>
            Used to know if there is a call ongoing
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.WebRTCListener.RemoteType">
            <summary>
            The type of the remote.
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.WebRTCListener.MessageFromChat">
            <summary>
            Use this to know if answer from STT comes from a Chat question
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.PublishConnectionRequest(System.String)">
            <summary>
            Use this to make a call towards another Buddy
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.OnConnectionRequest(System.String)">
            <summary>
            Called by Android plugin when message is received from the PubSub of Crossbar
            </summary>
            <param name="iMessage"></param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.OnAndroidLog(System.String)">
            <summary>
            Called by Android plugin for Debug purposes
            </summary>
            <param name="iLogText"></param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.SendNotification(System.String,System.String)">
            <summary>
            Send notification as Crossbar published event
            </summary>
            <param name="iTitle">Title of the notification</param>
            <param name="iMessage">Body message of the notification</param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.ProcessAnswer(System.String)">
            <summary>
            Use this to send back the answer to the user.
            </summary>
            <param name="iAnwser"></param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.OnMessageReceived(System.String)">
            <summary>
            Used by Android plugin when chat message is received through WebRTC and send it back to user
            </summary>
            <param name="iChatMessage">Chat message received through WebRTC</param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.PublishNotification(System.String)">
            <summary>
            Format of the notification is the following : BuddyID / Title @ Message
            </summary>
            <param name="iMessage">Notification message to send</param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.StartListener(System.String,System.String)">
            <summary>
            Initialize the Java Android Object that handles PubSub messages from Crossbar
            </summary>
            <param name="iUri">Crossbar uri</param>
            <param name="iRealm">Name of the realm</param>
        </member>
        <member name="M:BlueQuark.Remote.WebRTCListener.SendStatus">
            <summary>
            Wait until STT has finished listening and is free to use
            </summary>
            <param name="iChatMessage">The Chat message received to process</param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Remote.ARemoteCommand">
            <summary>
            Represents an embedded command sended remotely and executed on the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.ARemoteCommand.Timestamp">
            <summary>
            Timestamp of the command execution
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.ARemoteCommand.Parameters">
            <summary>
            Parameters of the command
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.ARemoteCommand.IsExecuted">
            <summary>
            Check if the command has been executed
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.#ctor">
            <summary>
            Base constructor for deserialization
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.Execute">
            <summary>
            Execute the command behaviour defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.UpdateParams(System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.UpdateParams(System.Single[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.UpdateParams(System.String[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.Serialize">
            <summary>
            Create a custom byte array representing the command.
            </summary>
            <returns>The command serialization</returns>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.Deserialize(System.String,System.Char,System.String)">
            <summary>
            Create a command from a string containing successive bytes, separate by ","
            </summary>
            <param name="iBytes">The byte string</param>
            <param name="iSeparator">Separator character between each byte</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.Deserialize(System.Byte[],System.String)">
            <summary>
            Create a command from a byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:BlueQuark.Remote.ARemoteCommand.ToString">
            <summary>
            String basic serialization of the command
            </summary>
            <returns>Command string value for debug</returns>
        </member>
        <member name="T:BlueQuark.Remote.SetNoHingePositionCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.SetNoHingePositionCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.SetNoHingePositionCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BlueQuark.Remote.SetNoHingePositionCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Remote.SetYesHingePositionCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.SetYesHingePositionCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.SetYesHingePositionCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BlueQuark.Remote.SetYesHingePositionCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Remote.SetWheelsVelocitiesCmd">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.SetWheelsVelocitiesCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.SetWheelsVelocitiesCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters by second) of an object position with in a certain time range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see></param>
            <param name="iAngularVelocity">Rate (in degrees by second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see></param>
        </member>
        <member name="M:BlueQuark.Remote.SetWheelsVelocitiesCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Remote.RemoteCommandParameters">
            <summary>
            Represents parameters for command. Contains it own serialization implementation
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.RemoteCommandParameters.Integers">
            <summary>
            Integer storage.
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.RemoteCommandParameters.Singles">
            <summary>
            Float storage.
            </summary>
        </member>
        <member name="P:BlueQuark.Remote.RemoteCommandParameters.Strings">
            <summary>
            Unicode string storage.
            </summary>
        </member>
        <member name="M:BlueQuark.Remote.RemoteCommandParameters.Serialize">
            <summary>
            Serialization to byte array of the current param
            </summary>
            <returns>Parameter byte array equivalent</returns>
        </member>
        <member name="M:BlueQuark.Remote.RemoteCommandParameters.Deserialize(System.Byte[],System.Int32@)">
            <summary>
            Create a new CommandParam object from the input byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="ioIndex">The index at the end of the parameter area</param>
            <returns>The new CommandParam</returns>
        </member>
        <member name="M:BlueQuark.Remote.RemoteCommandParameters.ToString">
            <summary>
            String basic serialization of the commandparam
            </summary>
            <returns>CommandParam string value for debug</returns>
        </member>
        <member name="T:BlueQuark.Cognitive">
            <summary>
            Module that represents the cognitive of buddy.
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.IsBusy">
            <summary>
            If cognitive is busy.
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.InternalState">
            <summary>
            Returns the internal state.
            </summary>
            <seealso cref="P:BlueQuark.Cognitive.InternalState"/>
        </member>
        <member name="T:BlueQuark.InternalState">
            <summary>
            Internal state component of the robot. Give you all the mind state of buddy.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.ComputeBias">
            <summary>
            Compute the uncumulative emotional stimuli
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.Variable2Mood(System.Int32,System.Int32)">
            <summary>
            To visualize the internal state rapartition, it's recommended to have a look at the documentation on the NAS.
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
        </member>
        <member name="P:BlueQuark.InternalState.Mood">
            <summary>
            The current state of mind of Buddy.
            </summary>
        </member>
        <member name="P:BlueQuark.InternalState.Pleasure">
            <summary>
            The positivity value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.InternalState.Arousal">
            <summary>
            The energy value of the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.ExplainMood">
            <summary>
            Buddy will explain why it's in its current state, relatively to its past interactions.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.AddCumulative(BlueQuark.EmotionalEvent)">
            <summary>
            Add a cumulative event to Buddy's actual list.
            </summary>
            <param name="iEmotionalEvent">The emotional event.</param>
        </member>
        <member name="T:BlueQuark.EmotionalEvent">
            <summary>
            Class that represent an emotional event.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Type">
            <summary>
            This is used to get the category of the event..
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.EventDescriber">
            <summary>
            This is used to describe the event and compare if events are similar.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.ExplanationKey">
            <summary>
            This is used to explain Buddy's mood.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Positivity">
            <summary>
            The positivity value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Energy">
            <summary>
            The energy value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.MoodDirection">
            <summary>
            Tells where this event is going to, which mood should result.
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Time">
            <summary>
            Time when the event was registered.
            </summary>
        </member>
        <member name="M:BlueQuark.EmotionalEvent.#ctor(System.Int32,System.Int32,System.String,System.String,BlueQuark.EmotionalEventType,BlueQuark.InternalMood)">
            <summary>
            
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
            <param name="iExplanationKey"></param>
            <param name="iEventDescriber"></param>
            <param name="iType"></param>
            <param name="iMoodDirection"></param>
        </member>
        <member name="M:BlueQuark.EmotionalEvent.#ctor(System.Int32,System.Int32,System.String,System.String,BlueQuark.EmotionalEventType,BlueQuark.InternalMood,System.Int32)">
            <summary>
            
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
            <param name="iExplanationKey"></param>
            <param name="iEventDescriber"></param>
            <param name="iType"></param>
            <param name="iMoodDirection"></param>
            <param name="iTime"></param>
        </member>
        <member name="T:BlueQuark.EmotionalEventType">
            <summary>
            Represents the different emotional type.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.INTERACTION">
            <summary>
            Interaction.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.EXTERNAL_EVENT">
            <summary>
            External Event.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.UNFULFILLED_DESIRE">
            <summary>
            Unfulfilled desire.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.FULFILLED_DESIRE">
            <summary>
            Fulfilled desire.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.CALENDAR">
            <summary>
            Calendar.
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEventType.APP">
            <summary>
            App.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.NEUTRAL">
            <summary>
            Neutral.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.EXCITED">
            <summary>
            Excited.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.ANGRY">
            <summary>
            Angry.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.SAD">
            <summary>
            Sad.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.HAPPY">
            <summary>
            Happy.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.GRUMPY">
            <summary>
            Grumphy.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.BITTER">
            <summary>
            Bitter.
            </summary>
        </member>
        <member name="F:BlueQuark.InternalMood.RELAXED">
            <summary>
            Relaxed.
            </summary>
        </member>
        <member name="T:BlueQuark.FLabeledButton">
            <summary>
            Labeled button widget for the Footer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FLabeledButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.FLabeledButton.SetLabel(System.String)">
            <summary>
            Sets the label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.FLabeledHorizontalSlider">
            <summary>
            Slider bar for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FLabeledHorizontalSlider.OnSlide">
            <summary>
            Called when the value changed.
            </summary>
        </member>
        <member name="P:BlueQuark.FLabeledHorizontalSlider.SlidingValue">
            <summary>
            The current sliding value.
            </summary>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetButtonBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets background icon of the button.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetButtonBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background color of the button.
            </summary>
            <param name="iColor">The color of the button background.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetSliderBackground(UnityEngine.Sprite)">
            <summary>
            Sets the background of the slider.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetSliderColor(UnityEngine.Color)">
            <summary>
            Sets the slider's color.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetFillBackground(UnityEngine.Sprite)">
            <summary>
            Sets th fill gauge background image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FLabeledHorizontalSlider.SetFillColor(UnityEngine.Color)">
            <summary>
            Sets the fill gauge color.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="T:BlueQuark.GraphPlotToast">
            <summary>
            Represents a graph plot UI element.
            </summary>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}},System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}},System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.GraphPlotToast.With(System.Func{System.Single[]},System.Func{System.Collections.Generic.List{System.Single[]}},System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnUpdateAbscissa">Function called to update graph X coordinate points.</param>
            <param name="iOnUpdateOrdinates">Function called to update graph Y coordinate points.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="T:BlueQuark.VideoStreamToast">
            <summary>
            Represents a full screen video stream UI element.
            </summary>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VideoStreamToast.With(UnityEngine.Texture2D,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iTexture">The texture stream to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="T:BlueQuark.TSliderToggle">
            <summary>
            Toggable slider sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="P:BlueQuark.TSliderToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="T:BlueQuark.TLabeledToggle">
            <summary>
            Toggle sealed widget for Explorer GUI component with a left label.
            </summary>
        </member>
        <member name="P:BlueQuark.TLabeledToggle.OnToggle">
            <summary>
            Called when the toggling value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TLabeledToggle.ToggleValue">
            <summary>
            The current selected toggling value.
            </summary>
        </member>
        <member name="M:BlueQuark.TLabeledToggle.SetLabel(System.String)">
            <summary>
            Sets the left label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.BluetoothDevice">
            <summary>
            
            </summary>
            <summary>
            Represents a bluetooth device.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.IsConnected">
            <summary>
            True if the device is connected.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.IsPaired">
            <summary>
            True if the device is paired.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.Name">
            <summary>
            Represents the name of the bluetooth device.
            </summary>
        </member>
        <member name="P:BlueQuark.BluetoothDevice.Address">
            <summary>
            Represent the mac address of the device.
            </summary>
        </member>
        <member name="T:BlueQuark.BluetoothActionInfo">
            <summary>
            Represents the possible bluetooth action.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.PAIRING_SUCCESS">
            <summary>
            Pairing success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.PAIRING_FAILED">
            <summary>
            Pairing failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.UNPAIRING_SUCCESS">
            <summary>
            Unpairing success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.UNPAIRING_FAILED">
            <summary>
            Unpairing failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.CONNECTION_SUCCESS">
            <summary>
            Connection success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.CONNECTION_FAILED">
            <summary>
            Connection failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.DISCONNECTION_SUCCESS">
            <summary>
            Disconnection success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.DISCONNECTION_FAILED">
            <summary>
            Disconnection failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.RECEIVING_SUCCESS">
            <summary>
            Receiving success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.RECEIVING_FAILED">
            <summary>
            Receiving failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.SEND_SUCCESS">
            <summary>
            Send success.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.SEND_FAILED">
            <summary>
            Send failed.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.DEVICE_NOT_PAIRED">
            <summary>
            Device not paired.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.DEVICE_NOT_CONNECTED">
            <summary>
            Device not connected.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.DEVICE_NOT_FOUND">
            <summary>
            Device not found.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.SCANNING_STARTED">
            <summary>
            Scanning started.
            </summary>
        </member>
        <member name="F:BlueQuark.BluetoothActionInfo.SCANNING_FINISHED">
            <summary>
            Scanning finished.
            </summary>
        </member>
        <member name="T:BlueQuark.Screen">
            <summary>
            Screen component of the robot. Handle miscellaneous data and locking system.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.IsBusy">
            <summary>
            True if the locking toast is displayed.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Height">
            <summary>
            Gets the height in the screen in pixel.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Width">
            <summary>
            Gets the width of the screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.DPI">
            <summary>
            Gets the dots per inch of the screen. It is a measure of spatial printing or video or image scanner dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm).
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.FrameRate">
            <summary>
            Gets the number of frame per second.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.TargetFrameRate">
            <summary>
            Gets the target frame rate of the engine.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.VSyncCount">
            <summary>
            Gets the vertical synchronization count according to Unity system.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.AntiAliasing">
            <summary>
            Anti aliasing according to Unity system.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Brightness">
            <summary>
            The brightness of the screen. From 0 to 1. 1 is fully luminous.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Locked">
            <summary>
            Lock/unlock the screen. Can be temporary unlock by user with the global password. Lock system is enable until programmaticaly unlocking.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Duplicated">
            <summary>
            Enable/Disable robot screen display on HDMI output.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.LockTimeout">
            <summary>
            Time out during an unlocking attempt.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.RelockTimeout">
            <summary>
            Time out after an unlocking success.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnClickToUnlock">
            <summary>
            Called when the screen is locked and a user ask for unlocking.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnCancelUnlock">
            <summary>
            Called when the screen is locked and a user cancel an unlocking attempt.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnSuccessUnlock">
            <summary>
            Called when the screen is locked and a user successfully unlock the screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnFailUnlock">
            <summary>
            Called when the screen is locked and a user didn't succeed to unlock the screen after an attempt.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnTimeoutUnlock">
            <summary>
            Called when the screen is locked and the LockTimeout occurs.
            </summary>
            <seealso cref="P:BlueQuark.Screen.LockTimeout"/>
        </member>
        <member name="P:BlueQuark.Screen.OnTouch">
            <summary>
            Called when a user interact with the screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.OnSwipe">
            <summary>
            Called when a user swipe occured.
            </summary>
        </member>
        <member name="M:BlueQuark.Screen.DisplayLockingToast">
            <summary>
            Display the locking toast on the screen. Can happened only if the scren is locked.
            </summary>
        </member>
        <member name="T:BlueQuark.SwipeDirection">
            <summary>
            User swipe direction on the robot screen.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.UP">
            <summary>
            The movement is bottom->up.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.DOWN">
            <summary>
            The movement is top->down.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.RIGHT">
            <summary>
            The movement is left->right.
            </summary>
        </member>
        <member name="F:BlueQuark.SwipeDirection.LEFT">
            <summary>
            The movement is right->left.
            </summary>
        </member>
        <member name="T:BlueQuark.SlideSet">
            <summary>
            Represents a 
            </summary>
        </member>
        <member name="P:BlueQuark.SlideSet.Count">
            <summary>
            Number of slide in the current slide set.
            </summary>
        </member>
        <member name="P:BlueQuark.SlideSet.CurrentIndex">
            <summary>
            Index of the current displayed slide.
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.SetDefaultSlide``1">
            <summary>
            Set the default slide. Displayed when no slide is present.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <returns>The toast as default toast to configure.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.AddFirstDisplayedSlide``1">
            <summary>
            Set the first slide to be displayed.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <returns>The toast as the first displayed toast to configure.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.AddSlide``1">
            <summary>
            Add a sliding toast to the slide set. Slide are append from left to right. Up to 1000 toasts in a slide. 
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <returns>The added toast to configure.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.RemoveSlide``1(``0,System.Boolean)">
            <summary>
            Remove a sliding toast from the curent slide set.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <param name="iSlide">The slide to remove.</param>
            <param name="iGoNextIfCurrent">If the removed slide was the current slide, set iGoNextIfCurrent to true to go to the next slide, false for the previous one.</param>
            <returns>True if the remove was successful, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.RemoveSlide(System.Int32,System.Boolean)">
            <summary>
            Remove a sliding toast from the curent slide set.
            </summary>
            <typeparam name="T">Type of the toast.</typeparam>
            <param name="iIdx">Index of the slide to remove.</param>
            <param name="iGoNextIfCurrent">If the removed slide was the current slide, set iGoNextIfCurrent to true to go to the next slide, false for the previous one.</param>
            <returns>True if the remove was successful, false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoTo(System.Int32,System.Action)">
            <summary>
            Go to the wished toast. Make a swap transition if the wished toast is near to the current toast.
            </summary>
            <param name="iSlideIdx">The target toast index, must be between 0 and 4.</param>
            <param name="iOnEndAnim">Callback called at the end of the animation.</param>
            <returns>True if the target toast is in bound.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoTo(BlueQuark.Internal.ASlideToast,System.Action)">
            <summary>
            Go to the wished toast. Make a swap transition if the wished toast is near to the current toast.
            </summary>
            <param name="iSlide">The target toast.</param>
            <param name="iOnEndAnim">Callback called at the end of the animation.</param>
            <returns>True if the target toast is in bound.</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoNext(System.Action)">
            <summary>
            Swap to the next toast.
            </summary>
            <returns>True if the swap was well (there is at least one next toast).</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoPrevious(System.Action)">
            <summary>
            Swap to the previous toast.
            </summary>
            <returns>True if the swap was well (there is at least one previous toast).</returns>
        </member>
        <member name="T:BlueQuark.CalendarToast">
            <summary>
            Represents a calendar. TODO : WIP
            </summary>
        </member>
        <member name="T:BlueQuark.CountdownToast">
            <summary>
            Represents a countdown clock that can be managed.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.IsDone">
            <summary>
            Returns true if the countdown is done.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Second">
            <summary>
            Remaining seconds in the current minute.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Minute">
            <summary>
            Remaining minutes in the current hour.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Hour">
            <summary>
            Remaining hours.
            </summary>
        </member>
        <member name="P:BlueQuark.CountdownToast.Playing">
            <summary>
            Is the countdown is playing ?
            </summary>
        </member>
        <member name="M:BlueQuark.CountdownToast.Pulse(System.Boolean)">
            <summary>
            Sets a pulsation beyond the countdown.
            </summary>
            <param name="iVal">True to active the pulsation, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.DateTime,UnityEngine.Color)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iTime">Remaining time.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,UnityEngine.Color)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,UnityEngine.Color)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast})">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CountdownToast.With(System.Int32,System.Int32,System.Int32,UnityEngine.Color,System.Action{BlueQuark.CountdownToast},System.Action{BlueQuark.CountdownToast},System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSecond">Remaining seconds in the current minute.</param>
            <param name="iMinute">Remaining minutes in the current hour.</param>
            <param name="iHour">Remaining hours.</param>
            <param name="iBackgroundColor">Color of the backgrounb.</param>
            <param name="iOnClick">Callback called when the countdown is clicked.</param>
            <param name="iOnTic">Callack called on each second tic.</param>
            <param name="iOnSideClick">Callback called when a user click outside the countdown occured.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="T:BlueQuark.CustomToast">
            <summary>
            Represents a custom element that can be displayed with the Toaster or Dialoger.
            </summary>
        </member>
        <member name="M:BlueQuark.CustomToast.With(UnityEngine.GameObject)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iCustomGameObject">The gameobject to display at the center of the layout.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CustomToast.With(UnityEngine.GameObject,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iCustomGameObject">The gameobject to display at the center of the layout.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.CustomToast.With(UnityEngine.GameObject,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iCustomGameObject">The gameobject to display at the center of the layout.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="T:BlueQuark.PictureToast">
            <summary>
            Represents a full screen picture UI element.
            </summary>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.PictureToast.With(System.String,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iFilePath">The path to the sprite to display. Cannot be null.</param>
            <param name="iOnClick">Called when the image is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="T:BlueQuark.IconToast">
            <summary>
            Represents a toast composed by an icon.
            </summary>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,System.Boolean,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iDisplayDisk">Doest the disk must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Boolean,System.Boolean,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iDisplayDisk">Doest the disk must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.IconToast.With(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Color,System.Boolean,System.Boolean,System.Action,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iSprite">The image to display. Cannot be null.</param>
            <param name="iIconColor">Color of the image.</param>
            <param name="iBackgroundColor">Color of the background.</param>
            <param name="iDisplayCircle">Does the surrounding circle must be displayed ?</param>
            <param name="iDisplayDisk">Doest the disk must be displayed ?</param>
            <param name="iOnClick">Callback called when the icon toast is clicked.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="T:BlueQuark.VerticalListToast">
            <summary>
            Represents a list of vertical elements.
            </summary>
        </member>
        <member name="M:BlueQuark.VerticalListToast.With(System.Action{BlueQuark.VerticalListToast})">
            <summary>
            Sets toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Callback called when the toast is display. Use the given argument to add vertical elements.</param>
            <returns>The toast GUID.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.CreateBox">
            <summary>
            Creates and adds a widget inside the vertical list.
            </summary>
            <returns>The wished widget.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Remove(BlueQuark.TVerticalListBox)">
            <summary>
            Removes from the list the specified widget.
            </summary>
            <param name="iBox">The widget to remove.</param>
            <returns>True if the remove was successful.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Select(BlueQuark.TVerticalListBox)">
            <summary>
            Sets the target widget as selected.
            </summary>
            <param name="iBox">The box to select.</param>
        </member>
        <member name="M:BlueQuark.VerticalListToast.AddCustomBox(UnityEngine.GameObject)">
            <summary>
            Adds a custom item to the list.
            </summary>
            <param name="iCustomGameObject">The custom item to add.</param>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Remove(UnityEngine.GameObject)">
            <summary>
            Removes the specified custom item.
            </summary>
            <param name="iCustomGameObject">The item to remove.</param>
            <returns>True if the remove was successful.</returns>
        </member>
        <member name="M:BlueQuark.VerticalListToast.Select(UnityEngine.GameObject)">
            <summary>
            Sets the target game object as selected.
            </summary>
            <param name="iCustomGameObject">The gameobject to select.</param>
        </member>
        <member name="T:BlueQuark.TNumPad">
            <summary>
            Represents a large numpad (cannot be cumulate with other capsule widgets) inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TNumPad.OnChangeValue">
            <summary>
            Called when the input value has changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TNumPad.PINLength">
            <summary>
            Authorized PIN length.
            </summary>
        </member>
        <member name="M:BlueQuark.TNumPad.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TNumPad.Clear">
            <summary>
            Clears the current setted input text.
            </summary>
        </member>
        <member name="T:BlueQuark.TRate">
            <summary>
            Represents a rate system for capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TRate.OnRate">
            <summary>
            called when the rate value has changed. From 0 to 5.
            </summary>
        </member>
        <member name="P:BlueQuark.TRate.RateValue">
            <summary>
            Currently selected rate value. From 0 to 5.
            </summary>
        </member>
        <member name="T:BlueQuark.TAlarmSetting">
            <summary>
            Represents a set of sub widgets to setup a clock.
            </summary>
        </member>
        <member name="P:BlueQuark.TAlarmSetting.OnToggle">
            <summary>
            Called when a day has bin toggle. Each day is encoded in one bit. A bit to 1 mean the day is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.TAlarmSetting.ToggleValues">
            <summary>
            The current set of toggled values.
            </summary>
        </member>
        <member name="M:BlueQuark.TAlarmSetting.SetClockLabel(System.String,System.String)">
            <summary>
            Sets the clock label.
            </summary>
            <param name="iClock">The clock time to display. Cannot be null or empty.</param>
            <param name="iInfo">Optional sub info.</param>
        </member>
        <member name="M:BlueQuark.TAlarmSetting.SetLabel(System.String)">
            <summary>
            Sets the main label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TToggleTable">
            <summary>
            Represents a multi column table of toggles to add inside a capsule toast.
            </summary>
        </member>
        <member name="M:BlueQuark.TToggleTable.CreateToggleInLeftColumn">
            <summary>
            Creates and adds a toggle inside the left column of the table.
            </summary>
            <returns>The created toggle.</returns>
        </member>
        <member name="M:BlueQuark.TToggleTable.CreateToggleInRightColumn">
            <summary>
            Creates and adds a toggle inside the right column of the table.
            </summary>
            <returns>The created toggle.</returns>
        </member>
        <member name="M:BlueQuark.TToggleTable.RemoveToggle(BlueQuark.TToggle)">
            <summary>
            Removes a toggle from the table.
            </summary>
            <param name="iToggle">The toggle to remove.</param>
            <returns>True if the remove was effective.</returns>
        </member>
        <member name="T:BlueQuark.THorizontalListBox">
            <summary>
            Box for horizontal list of elements.
            </summary>
        </member>
        <member name="T:BlueQuark.TCarousel">
            <summary>
            TODO: WIP. Represents a vertical carousel to set number or data inside a vertical display of capsule layout.
            </summary>
        </member>
        <member name="T:BlueQuark.TLeftSideButton">
            <summary>
            Left button subwidget for VerticalListBox widget.
            </summary>
        </member>
        <member name="P:BlueQuark.TLeftSideButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.Display">
            <summary>
            Display the button.
            </summary>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.Hide">
            <summary>
            Hide the button.
            </summary>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetLabel(System.String)">
            <summary>
            Sets the label of the button. Hides icon.
            </summary>
            <param name="iText">The text to display. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button icon. Hides label.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets The icon color if icon mode.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="M:BlueQuark.TLeftSideButton.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Changes the background color of the button.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="T:BlueQuark.TRightSideButton">
            <summary>
            Right button subwidget for VerticalListBox widget.
            </summary>
        </member>
        <member name="P:BlueQuark.TRightSideButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetLabel(System.String)">
            <summary>
            Sets the label of the button. Hides icon.
            </summary>
            <param name="iText">The text to display. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button icon. Hides label.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets The icon color if icon mode.
            </summary>
            <param name="iColor">The color to apply.</param>
        </member>
        <member name="M:BlueQuark.TRightSideButton.SetStroke(System.Boolean)">
            <summary>
            Sets as true to display a line to separate many button.
            </summary>
            <param name="iVal">True to display stroke, false otherwise.</param>
        </member>
        <member name="T:BlueQuark.TVerticalListBox">
            <summary>
            Box for vertical list of elements. Can be customized by adding right side button. 
            </summary>
            <seealso cref="T:BlueQuark.VerticalListToast"/>
        </member>
        <member name="P:BlueQuark.TVerticalListBox.OnClick">
            <summary>
            Called when the main part of the box is clicked.
            </summary>
        </member>
        <member name="P:BlueQuark.TVerticalListBox.LeftButton">
            <summary>
            The left button of the box.
            </summary>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.SetLabel(System.String)">
            <summary>
            Sets the label of the box.
            </summary>
            <param name="iText">The text to display. Cannot be null or empty.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.SetLabel(System.String,System.String)">
            <summary>
            Sets a multiline label for the box.
            </summary>
            <param name="iUpperText">The upper text to display. If null or empty, a SetLabel will be applied.</param>
            <param name="iLowerText">The lower text to display. If null or empty, a SetLabel will be applied.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.SetCenteredLabel(System.Boolean)">
            <summary>
            Sets the text as centered within the box.
            </summary>
            <param name="iVal">Set as true to center text, false to set to left alignment.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.CreateRightButton">
            <summary>
            Creates an adds a right side button.
            </summary>
            <returns>The just created button to parametrize.</returns>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.RemoveRightButton(BlueQuark.TRightSideButton)">
            <summary>
            Removes a button.
            </summary>
            <param name="iButton">The button to remove.</param>
        </member>
        <member name="M:BlueQuark.TVerticalListBox.Select(System.Boolean)">
            <summary>
            Sets the box as (un)selected.
            </summary>
            <param name="iVal">True for selection, false otherwise.</param>
        </member>
        <member name="T:BlueQuark.DisplacementStrategy">
            <summary>
            Navigation strategies for basic robot movement.
            </summary>
        </member>
        <member name="F:BlueQuark.DisplacementStrategy.MAX_DISTANCE">
            <summary>
            Max distance that can be done in one move instruction. Value in meters.
            </summary>
        </member>
        <member name="F:BlueQuark.DisplacementStrategy.MAX_ROTATION_ANGLE">
            <summary>
            Max angle that can be rotate in one rotation instruction. Value in degrees.
            </summary>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Boolean)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iAvoidingObstacles">If avoid obstacles.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Action)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iAngularVelocity">Target angular speed in degree by seconds. Maximum 250deg/s.</param>
            <param name="iAvoidingObstacles">If avoid obstacles.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Move(System.Single,System.Single,System.Single,System.Action)">
            <summary>
            Moves forward or backward to the given distance.
            </summary>
            <param name="iDistance">Target distance in meters.</param>
            <param name="iLinearVelocity">Target linear speed in meters by seconds. Maximum speed 1m/s.</param>
            <param name="iAngularVelocity">Target angular speed in degree by seconds. Maximum 250deg/s.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.MoveWhile(System.Predicate{UnityEngine.Vector3})">
            <summary>
            Moves forward or backward until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true while the user condition is not fulfilled. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.MoveWhile(System.Predicate{UnityEngine.Vector3},System.Single)">
            <summary>
            Moves forward or backward until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true while the user condition is not fulfilled. Cannot be null.</param>
            <param name="iLinearVelocity">Target speed in meters by seconds. Maximum speed 1m/s.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single)">
            <summary>
            Turns the robot body by a certain degree.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees. + turn left, - turn right.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single,System.Single)">
            <summary>
            Turns relativity the robot body. 
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees by second.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.Rotate(System.Single,System.Single,System.Action)">
            <summary>
            Turns relativity the robot body.
            Positive angles to turn counterclockwise, negative to turn clockwise.
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees by second.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single)">
            <summary>
            Turns the robot body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single,System.Single)">
            <summary>
            Turns the robot body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees by second.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateTo(System.Single,System.Single,System.Action{UnityEngine.Vector3})">
            <summary>
            Turns the robot body to the given angle (absolute).
            </summary>
            <param name="iAngle">Target angle in degrees.</param>
            <param name="iAngularVelocity">Target speed in degrees by second.</param>
            <param name="iOnEndMove">Callback called at the end of the course.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateWhile(System.Predicate{UnityEngine.Vector3})">
            <summary>
            Makes the robot rotate until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true until the user condition is not fulfilled. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.DisplacementStrategy.RotateWhile(System.Predicate{UnityEngine.Vector3},System.Single)">
            <summary>
            Makes the robot rotate until the condition is false.
            </summary>
            <param name="iCondition">The movement condition. Must returns true until the user condition is not fulfilled. Cannot be null</param>
            <param name="iAngularVelocity">Target speed in degrees by seconds.</param>
        </member>
        <member name="T:BlueQuark.ExplorationStrategy">
            <summary>
            Exploration strategy.
            </summary>
        </member>
        <member name="M:BlueQuark.ExplorationStrategy.While(System.Predicate{UnityEngine.Vector3})">
            <summary>
            The robot will explore as much as it can the environment while the specified condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.HumanDetector">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Human detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetector.RGBCameraMode">
            <summary>
            RGB Camera mode used by human detector.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanDetector.OnDetect">
            <summary>
            Called when a face is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDetectorRework">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Detect moving points in frame.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetectorRework.OnDetect">
            <summary>
            Callback array fired on detection.
            </summary>
        </member>
        <member name="T:BlueQuark.FaceRecognizer">
            <summary>
            Facial recognition component.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.Recognize(OpenCVUnity.Mat,OpenCVUnity.Mat,BlueQuark.FaceEntity)">
            <summary>
            Asks for a facial recognition.
            </summary>
            <param name="iDepthMat">Gray depth matrix where the face is present. Must be sync with the iRGBMat.</param>
            <param name="iRGBMat">RGB matrix where the face is present. Must be sync with the iDepthMat.</param>
            <param name="iFace">Face entity parameters.</param>
            <returns>Label of the recognize people.</returns>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.AddFace(OpenCVUnity.Mat,OpenCVUnity.Mat,BlueQuark.FaceEntity,System.String)">
            <summary>
            Adds a new labeled face. Should be conclued by a Train() call.
            </summary>
            <param name="iDepthMat">Gray depth matrix where the face is present. Must be sync with the iRGBMat.</param>
            <param name="iRGBMat">RGB matrix where the face is present. Must be sync with the iDepthMat.</param>
            <param name="iFace">Face entity parameters.</param>
            <param name="iName">Label to add.</param>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.Train">
            <summary>
            Creates a new model based on current added faces.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceRecognizer.ForgetFace(System.String)">
            <summary>
            Remove the wished label.
            </summary>
            <param name="iName">The label to forget.</param>
        </member>
        <member name="T:BlueQuark.WavingEntity">
            <summary>
            Represent a waving entity.
            </summary>
        </member>
        <member name="P:BlueQuark.WavingEntity.BoundingBox">
            <summary>
            Gets the bouding box of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.WavingEntity.CoordFrameRef">
            <summary>
            Gets the coordonates of the entity in the frame.
            </summary>
        </member>
        <member name="P:BlueQuark.WavingEntity.CoordWorldRef">
            <summary>
            Gets the coordonates of the entity in the world.
            </summary>
        </member>
        <member name="M:BlueQuark.WavingEntity.#ctor(OpenCVUnity.Rect,UnityEngine.Vector3)">
            <summary>
            Creates a new waving entity.
            </summary>
            <param name="iBoundingBox">The bouding box of the entity.</param>
            <param name="iCoord">The frame coordonates of the entity.</param>
        </member>
        <member name="M:BlueQuark.WavingEntity.ConvertCoord">
            <summary>
            Converts the coordonates from the frame to the world.
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDetectorParameter">
            <summary>
            Represents the parameters of a motion detector.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetectorParameter.RegionOfInterest">
            <summary>
            Represents the region of interest.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetectorParameter.SensibilityThreshold">
            <summary>
            Represent the sensibility threshold. 2 by default.
            </summary>
        </member>
        <member name="T:BlueQuark.RoomDetector">
            <summary>
            Class containing functions of topological localization and navigation.
            Using images from a single RGB-Camera. 
            A bag of words model is used for localization, while navigation is based on image matching.
            OpenCV is used for keypoint detection and descriptor calculation.
            </summary>
        </member>
        <member name="M:BlueQuark.RoomDetector.RunLocalizationImpl(System.Action{BlueQuark.Room})">
            <summary>
            Run localization coroutine. 
            When finished, will call iSetOutput to return room result
            </summary>
            <param name="iOnEndLocalization"> For example, (x) => {lReuslt = x;} </param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.GetPathLength(System.Int32,System.Int32)">
            <summary>
            Get the path length at a step
            </summary>
            <param name="iPath"></param>
            <param name="iStep"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.DistanceBetweenLandmarks(System.Int32,System.Int32)">
            <summary>
            Get the distance measured by odometry between two landmarks.
            </summary>
            <param name="iLdmk1"></param>
            <param name="iLdmk2"></param>
            <returns>Distance in meter</returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.FindPath(System.Int32,System.Int32)">
            <summary>
            Find path between start landmark and end landmark.
            Dijkstra's algorithm is used to find the shortest-length path.
            The path index is returned.
            </summary>
            <param name="iStart">Index of start landmark</param>
            <param name="iEnd">Index of end landmark</param>
            <returns>Found path index</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.RoomDetector.FacingWall(OpenCVUnity.Mat)" -->
        <member name="M:BlueQuark.RoomDetector.JITInitialize(BlueQuark.Map,System.Boolean)">
            <summary>
            Initialize model by deserialization two config files
            </summary>
        </member>
        <member name="M:BlueQuark.RoomDetector.LocalizeAsync(System.Action{BlueQuark.Room})">
            <summary>
            Localize in which room is the robot
            </summary>
            <param name="iSetRoom">Action to get localization result after finished</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.RecognizeRoom(OpenCVUnity.Mat,System.Boolean@)">
            <summary>
            When finished, returns room name or Unidentified.
            If more images are required, oFinished is false.
            </summary>
            <param name="iRGBFrame"></param>
            <param name="oFinished"></param> 
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.SetMap(BlueQuark.Map)">
            <summary>
            Set a specific map to use for mapper.
            Else the default map shall be used.
            </summary>
            <param name="iMap">A map file.</param>
        </member>
        <member name="M:BlueQuark.RoomDetector.RunLocalization(System.Action{BlueQuark.Room})">
            <summary>
            Run localization coroutine. 
            When finished, will call iSetOutput to return room result.
            </summary>
            <param name="iOnEndLocalization"> For example, (x) => {lReuslt = x;} </param>
        </member>
        <member name="M:BlueQuark.RoomDetector.Correct(BlueQuark.Room)">
            <summary>
            When the localization result is incorrect, use this function to give the right answer to retrain model.
            </summary>
            <param name="iCorrectRoom">The correct room.</param>
        </member>
        <member name="T:BlueQuark.ShadeColor">
            <summary>
            Represent a shade color.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.BLACK">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.WHITE">
            <summary>
            White.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.BLUE">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.CYAN">
            <summary>
            Cyan.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.GREY">
            <summary>
            Grey.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.GREEN">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.MAGENTA">
            <summary>
            Magenta.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.RED">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.YELLOW">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.ORANGE">
            <summary>
            Orange.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.BROWN">
            <summary>
            Brown.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.PINK">
            <summary>
            Pink.
            </summary>
        </member>
        <member name="F:BlueQuark.ShadeColor.PURPLE">
            <summary>
            Purple.
            </summary>
        </member>
        <member name="T:BlueQuark.WavingDetector">
            <summary>
            Hand waving detector algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.WavingDetector.OnDetect">
            <summary>
            Called when an hand waving is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.PoseOrientation">
            <summary>
            Orientation of the face
            </summary>
        </member>
        <member name="F:BlueQuark.PoseOrientation.UNDEFINED">
            <summary>
            Undefined.
            </summary>
        </member>
        <member name="F:BlueQuark.PoseOrientation.FACIAL">
            <summary>
            Facial.
            </summary>
        </member>
        <member name="F:BlueQuark.PoseOrientation.ROTATED30">
            <summary>
            Rotated 30.
            </summary>
        </member>
        <member name="F:BlueQuark.PoseOrientation.ROTATED330">
            <summary>
            Rotated 330.
            </summary>
        </member>
        <member name="F:BlueQuark.PoseOrientation.LEFTPROFILE">
            <summary>
            Left profile.
            </summary>
        </member>
        <member name="F:BlueQuark.PoseOrientation.RIGHTPROFILE">
            <summary>
            Right profile.
            </summary>
        </member>
        <member name="T:BlueQuark.FaceEntity">
            <summary>
            Represents a detected face.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.BoundingBox">
            <summary>
            The bouding box where the face is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.Center">
            <summary>
            Points where the face is detected.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.Speed">
            <summary>
            Speed of the detected face.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceEntity.Pose">
            <summary>
            Pose orientation of the face.
            </summary>
            <seealso cref="T:BlueQuark.PoseOrientation"/>
        </member>
        <member name="T:BlueQuark.AprilTagEntity">
            <summary>
            April tag detected via AprilTagDetector.
            </summary>
            <seealso cref="T:BlueQuark.AprilTagDetector"/>
        </member>
        <member name="P:BlueQuark.AprilTagEntity.ID">
            <summary>
            Value of the tag.
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagEntity.Corners">
            <summary>
            Set of points corresponding to tag corner.
            </summary>
        </member>
        <member name="T:BlueQuark.FaceDetector">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Face detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.FaceDetector.OnDetect">
            <summary>
            Called when a face is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.FaceDetector.GetEyesInMat(BlueQuark.FaceEntity,OpenCVUnity.Mat)">
            <summary>
            Returns eye from the face.
            </summary>
            <param name="iFace">The face entity to track in the frame.</param>
            <param name="iFrame">The frame where the face belong.</param>
            <returns>Bounding rec containing estimate position of eyes.</returns>
        </member>
        <member name="M:BlueQuark.FaceDetector.RecognizeEmotion(BlueQuark.FaceEntity,OpenCVUnity.Mat)">
            <summary>
            Returns the estimated emotion of the input face.
            </summary>
            <param name="iFace">The face entity.</param>
            <param name="iFrame">The frame where the face belong.</param>
            <returns>The estimated emotion.</returns>
        </member>
        <member name="M:BlueQuark.FaceDetector.RecognizeEmotionStr(BlueQuark.FaceEntity,OpenCVUnity.Mat)">
            <summary>
            Returns the estimated emotion of the input face.
            </summary>
            <param name="iFace">The face entity.</param>
            <param name="iFrame">The frame where the face belong.</param>
            <returns>The estimated emotion.</returns>
        </member>
        <member name="T:BlueQuark.AprilTagDetector">
            <summary>
            April tags detection. Based on : <see href="https://april.eecs.umich.edu/software/apriltag/">Article.</see>
            </summary>
        </member>
        <member name="P:BlueQuark.AprilTagDetector.OnDetect">
            <summary>
            Called when any april tags face the camera of the robot. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.AppCategory">
            <summary>
            Represents the different app categories.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.COMPANION">
            <summary>
            Companion category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.EDUTAINMENT">
            <summary>
            Edutainment category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.GAME">
            <summary>
            Game category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.MULTIMEDIA">
            <summary>
            Multimedia category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.UTILITY">
            <summary>
            Utility category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.SECURITY">
            <summary>
            Security category.
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.OTHER">
            <summary>
            Other category.
            </summary>
        </member>
        <member name="T:BlueQuark.AppVersionReleaseStatus">
            <summary>
            Represents a version of the app.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.DEVELOP">
            <summary>
            In development.
            </summary>
        </member>
        <member name="F:BlueQuark.AppVersionReleaseStatus.RELEASE">
            <summary>
            Release.
            </summary>
        </member>
        <member name="T:BlueQuark.Dialoger">
            <summary>
            Dialoger are like Toaster but works on a different layer (over the Toaster)
            </summary>
            <seealso cref="T:BlueQuark.Toaster"/>>
        </member>
        <member name="P:BlueQuark.Dialoger.IsBusy">
            <summary>
            Returns true if the Dialoger is currently displaying something.
            </summary>
        </member>
        <member name="P:BlueQuark.Dialoger.DisplayedDialogID">
            <summary>
            Gets the UID of the current displayed dialog.
            </summary>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast).</typeparam>
            <returns>The dialog info to argument with the method With(args).</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1(System.String)">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast).</typeparam>
            <returns>The dialog info to argument with the method With(args).</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1(System.String,System.String)">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast).</typeparam>
            <returns>The dialog info to argument with the method With(args).</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Hide">
            <summary>
            Hide the displayed dialog.
            </summary>
        </member>
        <member name="T:BlueQuark.AppsSection">
            <summary>
            Apps Explorer section. Browse, download and manage builtin and user apps.
            </summary>
        </member>
        <member name="T:BlueQuark.CurrentUserSection">
            <summary>
            Current user panel to manage user info.
            </summary>
        </member>
        <member name="T:BlueQuark.FilesSection">
            <summary>
            File Explorer section. Browse, and manage local and USB files.
            </summary>
        </member>
        <member name="T:BlueQuark.ParametersSection">
            <summary>
            Parameters Explorer section. Browse, and manage robot, GUI and app parameters.
            </summary>
        </member>
        <member name="T:BlueQuark.SecuritySection">
            <summary>
            Security Explorer section.
            </summary>
        </member>
        <member name="T:BlueQuark.UsersSection">
            <summary>
            Users Explorer section. Browse and manage local and remote profiles
            </summary>
        </member>
        <member name="T:BlueQuark.DeviceType">
            <summary>
            Represents the different device types.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.ANDROID_SMARTPHONE">
            <summary>
            Smartphone with android environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.ANDROID_TABLET">
            <summary>
            Tablet with android environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.WINDOWS_SMARTPHONE">
            <summary>
            Smartphone with windows environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.WINDOWS_TABLET">
            <summary>
            Table with windows environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.WINDOWS_COMPUTER">
            <summary>
            Computer with windows environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.OSX_COMPUTER">
            <summary>
            Computer with OSX environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.LINUX_COMPUTER">
            <summary>
            Computer with linux environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.IPHONE">
            <summary>
            Iphone device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.IPOD">
            <summary>
            Ipod device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.IPAD">
            <summary>
            Ipad device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.ANDROID_SMARTWATCH">
            <summary>
            Watch with android environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.APPLE_SMARTWATCH">
            <summary>
            Watch with OSX environment.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.PHOTO_DEVICE">
            <summary>
            Photo device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.MUSIC_DEVICE">
            <summary>
            Music device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.CAMERA">
            <summary>
            Camera device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.TV">
            <summary>
            Television device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.LIGHT_SYSTEM">
            <summary>
            Light system device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.COOK_SYSTEM">
            <summary>
            Cook system device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.DOOR_SYSTEM">
            <summary>
            Door system device.
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.SOUND_SYSTEM">
            <summary>
            Sound system device.
            </summary>
        </member>
        <member name="T:BlueQuark.ConnectionType">
            <summary>
            Represents all the different connection types.
            </summary>
        </member>
        <member name="F:BlueQuark.ConnectionType.WIFI">
            <summary>
            Wifi connection.
            </summary>
        </member>
        <member name="F:BlueQuark.ConnectionType.BLUETOOTH">
            <summary>
            Bluetooth connection.
            </summary>
        </member>
        <member name="F:BlueQuark.ConnectionType.WIRE">
            <summary>
            Wired connection.
            </summary>
        </member>
        <member name="T:BlueQuark.ConnectedDevice">
            <summary>
            This class represent a device connected to Buddy.
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.ID">
            <summary>
            ID of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.Connection">
            <summary>
            The way the device is connected to Buddy.
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.Type">
            <summary>
            The device type.
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.SignalStrength">
            <summary>
            The strength of the signal.
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.Name">
            <summary>
            The name of the device.
            </summary>
        </member>
        <member name="T:BlueQuark.ISO6391Code">
            <summary>
            Language two-letter codes, one per language for ISO 639 macrolanguage.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.EN">
            <summary>
            English language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.FR">
            <summary>
            French language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.IT">
            <summary>
            Italian language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.DE">
            <summary>
            German language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.JA">
            <summary>
            Japanese language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.NL">
            <summary>
            Dutch language.
            </summary>
        </member>
        <member name="F:BlueQuark.ISO6391Code.KO">
            <summary>
            Korean language.
            </summary>
        </member>
        <member name="T:BlueQuark.WiFiNetwork">
            <summary>
            Represents a local WiFi network available for a connexion.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.Name">
            <summary>
            Name of the network.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.SignalStrength">
            <summary>
            Signal of the network.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.MACAddress">
            <summary>
            Mac address of the network
            </summary>
        </member>
        <member name="P:BlueQuark.WiFiNetwork.Connected">
            <summary>
            True if it is connected
            </summary>
        </member>
        <member name="T:BlueQuark.GCVDetectionType">
            <summary>
            Kind of detection request for Google Cloud Vision API.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.TYPE_UNSPECIFIED">
            <summary>
            Misc.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.FACE_DETECTION">
            <summary>
            Face information.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LANDMARK_DETECTION">
            <summary>
            Landmark (Eiffel tower, Golden Bridge, left eye, right hand...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LOGO_DETECTION">
            <summary>
            Logo detection (Coca cola ...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LABEL_DETECTION">
            <summary>
            Labelization (desk, floor, robot, window, hand ...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.TEXT_DETECTION">
            <summary>
            Optical Character Recognition.
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.SAFE_SEARCH_DETECTION">
            <summary>
            Does this content is safe for children ? (blood, violence, explicit scene ...).
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.IMAGE_PROPERTIES">
            <summary>
            Image properties (main color).
            </summary>
        </member>
        <member name="T:BlueQuark.QRCodePoints">
            <summary>
            Represents the points of a QRCode.
            </summary>
        </member>
        <member name="F:BlueQuark.QRCodePoints.THIRTEEN_POINTS">
            <summary>
            Thirteen point QR code.
            </summary>
        </member>
        <member name="F:BlueQuark.QRCodePoints.THREE_POINTS">
            <summary>
            Three point QR code.
            </summary>
        </member>
        <member name="T:BlueQuark.Brightness">
            <summary>
            Represents a brightness power.
            </summary>
        </member>
        <member name="F:BlueQuark.Brightness.MEDIUM">
            <summary>
            Medium.
            </summary>
        </member>
        <member name="F:BlueQuark.Brightness.LOW">
            <summary>
            Low.
            </summary>
        </member>
        <member name="F:BlueQuark.Brightness.HIGH">
            <summary>
            High.
            </summary>
        </member>
        <member name="T:BlueQuark.TFInceptionModelType">
            <summary>
            Represents a TF Inecption model type.
            </summary>
        </member>
        <member name="F:BlueQuark.TFInceptionModelType.V1">
            <summary>
            V1.
            </summary>
        </member>
        <member name="F:BlueQuark.TFInceptionModelType.V3">
            <summary>
            V2.
            </summary>
        </member>
        <member name="T:BlueQuark.TFModelType">
            <summary>
            Repersents a TF model type.
            </summary>
        </member>
        <member name="F:BlueQuark.TFModelType.MNIST">
            <summary>
            Read an image and outputs the number that's read.
            </summary>
        </member>
        <member name="F:BlueQuark.TFModelType.INCEPTION">
            <summary>
            Inception-based model for Image Classification.
            Deep Convolutional Network method.
            </summary>
        </member>
        <member name="T:BlueQuark.Actuators">
            <summary>
            Module containing all robot actuators.  
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Accessories">
            <summary>
            Accessories gave control to lateral actuators.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Head">
            <summary>
            Head gave control to Yes and No head hinges.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.LEDs">
            <summary>
            LEDs allow to change light color/intensity and flash light.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Speakers">
            <summary>
            Speakers allow to properly manage sound output.
            </summary>
        </member>
        <member name="P:BlueQuark.Actuators.Wheels">
            <summary>
            Wheels control module.
            </summary>
        </member>
        <member name="T:BlueQuark.LEDs">
            <summary>
            Light-Emitting Diode component of the robot. Corresponding to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
            <summary>
            Light-Emitting Diode component of the robot. Corresponding to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.HeartColor">
            <summary>
            The color of the heart.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.LeftShoulderColor">
            <summary>
            The color of the left shoulder.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.RightShoulderColor">
            <summary>
            The color of the right shoulder.
            </summary>
        </member>
        <member name="P:BlueQuark.LEDs.Flash">
            <summary>
            Power On/Off the frontal flash light of the robot.
            </summary>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyLights(BlueQuark.LEDColor)">
            <summary>
            Sets all lights (shoulders + heart) to the wished color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyLights(UnityEngine.Color)">
            <summary>
            Sets all lights (shoulders + heart) to the wished color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHSVBodyLights(System.Int16,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set all light (shoulders + heart) to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHSVLeftShoulderLight(System.Int16,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set left shoulder light to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHSVRightShoulderLight(System.Int16,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set right shoulder light to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersLights(BlueQuark.LEDColor)">
            <summary>
            Set both shoulders light to the wished HSV color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHSVShouldersLights(System.Int16,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set right shoulder light to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartLight(BlueQuark.LEDColor)">
            <summary>
            Set left shoulder light to the wished HSV color.
            </summary>
            <param name="iColor">The light to apply.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHSVHeartLight(System.Int16,System.Byte,System.Byte,System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set heart light to the wished HSV color.
            </summary>
            <param name="iHue">Hue. Range from 0 to 360.</param>
            <param name="iSaturation">Saturation. Range from 0 to 100.</param>
            <param name="iValue">Value. Range from 0 to 100.</param>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPulse(System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set all lights (shoulders + heart) to the wished Pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetHeartPulse(System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set Heart light to the wished Pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetShouldersPulse(System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set Shoulders lights to the wished Pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetLeftShoulderPulse(System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set Left Shoulder light to the wished Pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetRightShoulderPulse(System.Byte,System.Int16,System.Int16,System.Byte,System.Byte)">
            <summary>
            Set Right Shoulder light to the wished Pulse.
            </summary>
            <param name="iOnDuration">Duration when the led is on. Value in milliseconds.</param>
            <param name="iOffDuration">Duration when the led is off. Value in milliseconds.</param>
            <param name="iLowLevel">This is the minimum light in %. Relative to maximum light.</param>
            <param name="iUpSlope">Speed to on phase.</param>
            <param name="iDownSlope">Speed to off phase.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPulse(System.Int16)">
            <summary>
            Set all lights (shoulders + heart) to the wished blink with given duration.
            </summary>
            <param name="iDuration">Duration between on and off. Value in milliseconds.</param>
        </member>
        <member name="M:BlueQuark.LEDs.SetBodyPattern(BlueQuark.LEDPulsePattern)">
            <summary>
            Set all lights (shoulders + heart) to the wished blink with given duration.
            </summary>
            <param name="iPattern">Pattern to display on LED.</param>
        </member>
        <member name="T:BlueQuark.Speakers">
            <summary>
            Speaker component of the robot. Allow you to handle multiple Speakers.
            </summary>
            <summary>
            Speaker component of the robot. Allow you to handle multiple Speakers.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.IsBusy">
            <summary>
            Returns true if any channel is currently playing something.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Vocal">
            <summary>
            Sound channel for vocal purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Media">
            <summary>
            Sound channel for music purposes.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Effects">
            <summary>
            Sound channel for UI or miscellaneous sounds.
            </summary>
        </member>
        <member name="P:BlueQuark.Speakers.Volume">
            <summary>
            Global volume system. From 0 to 1. 1 is full volume.
            </summary>
        </member>
        <member name="T:BlueQuark.Wheels">
            <summary>
            Wheels (right and left) of the robot.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.ENTRAX">
            <summary>
            Distance between each wheels in meters.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.RADIUS">
            <summary>
            Radius of one wheels in meters.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.MAX_LIN_VELOCITY">
            <summary>
            Max allowed linear velocity for wheels asserv. Meters by seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.MAX_ANG_VELOCITY">
            <summary>
            Max allowed angular velocity for wheels asserv. Degrees by seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_LIN_VELOCITY">
            <summary>
            Default linear velocity for wheels asserv. Meters by seconds.
            </summary>
        </member>
        <member name="F:BlueQuark.Wheels.DEFAULT_ANG_VELOCITY">
            <summary>
            Default angular velocity for wheels asserv. Degrees by seconds.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.IsBusy">
            <summary>
            Returns true if wheels are currently asserved.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Odometry">
            <summary>
            X,Y,TH computed position of the robot since last boot. Values in meters and degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Error">
            <summary>
            Wheels Error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Angle">
            <summary>
            Theta angle of the tobot. Shortcut to Odometry.z. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Speed">
            <summary>
            Mean speed of the wheels. Value in meters by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LinearVelocity">
            <summary>
            Current applied linear velocity. Value in meters by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.AngularVelocity">
            <summary>
            Current applied angular velocity. Value in degrees by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LeftRotationalSpeed">
            <summary>
            Current left wheel speed. Value in meters by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.RightRotationalSpeed">
            <summary>
            Current right wheel speed. Value in meters by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.TravelledDistance">
            <summary>
            Travelled distance from first robot boot. Value in meters by second.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LeftCurrent">
            <summary>
            Current applied current on the left wheel. Value in ampère.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.RightCurrent">
            <summary>
            Current applied current on the right wheel. Value in ampère.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.LeftVoltage">
            <summary>
            Current applied voltage on the left wheel. Value in volt.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.RightVoltage">
            <summary>
            Current applied voltage on the right wheel. Value in volt.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.PositionError">
            <summary>
            Position error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.VoltageAndCurrentError">
            <summary>
            Voltage and current error code. 0 if no error.
            </summary>
        </member>
        <member name="P:BlueQuark.Wheels.Locked">
            <summary>
            Sets the wheels as locked. Locked wheels cannot move until unlocking.
            </summary>
        </member>
        <member name="M:BlueQuark.Wheels.SetVelocities(System.Single,System.Single)">
            <summary>
            Sets robot linear (meters / s) and angular (deg / s) velocities.
            </summary>
            <param name="iLinearVelocity">Rate of change (in meters by second) of an object position with in a certaintime range<see href="https://en.wikipedia.org/wiki/Angular_velocity">Article</see>.</param>
            <param name="iAngularVelocity">Rate (in degrees by second) at which it rotates around a chosen center point: that is, the time rate of change of its angular displacement relative to the origin<see href="https://physics.tutorvista.com/motion/linear-velocity.html">Article</see>.</param>
            <seealso cref="F:BlueQuark.Wheels.MAX_LIN_VELOCITY"/>
            <seealso cref="F:BlueQuark.Wheels.MAX_ANG_VELOCITY"/>
        </member>
        <member name="M:BlueQuark.Wheels.Stop">
            <summary>
            Stops wheels.
            </summary>
        </member>
        <member name="M:BlueQuark.Wheels.SetPIDs(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Set the proportional–integral–derivative controller. It is a control loop feedback mechanism.
            </summary>
            <param name="iKpLin">Term P is proportional to the current value of the SP − PV error e(t).</param>
            <param name="iKiLin">Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.</param>
            <param name="iKdLin">erm D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.</param>
            <param name="iKpAng">Term P is proportional to the current value of the SP − PV error e(t).</param>
            <param name="iKiAng">Term I accounts for past values of the SP − PV error and integrates them over time to produce the I ter.</param>
            <param name="iKdAng">erm D is a best estimate of the future trend of the SP − PV error, based on its current rate of change.</param>
        </member>
        <member name="T:BlueQuark.AAppData">
            <summary>
            Your app data class must inherit from this class. Your app data will be store here.
            The data object will be serialized when the application is quited and unserialized the first time GetInstance()
            will be called. Don't ever change the name of your {APP_NAME}Data class.
            </summary>
        </member>
        <member name="F:BlueQuark.AAppData.sInstance">
            <summary>
            Instance of your data (singleton).
            </summary>
        </member>
        <member name="M:BlueQuark.AAppData.GetInstance``1">
            <summary>
            Retrieve your last save version of your data.
            </summary> 
            <typeparam name="T">Type of your data class.</typeparam>
            <returns>Your data object.</returns>
        </member>
        <member name="T:BlueQuark.AAppActivity">
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Behaviour">
            <summary>
            Gather all interaction features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Navigation">
            <summary>
            Gather all navigation features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.WebService">
            <summary>
            Gather all web services (Facebook, Twitter, Spotify, meteo, Wolfram alpha) features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Perception">
            <summary>
            Gather all perception (mainly vision) features.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Sensors">
            <summary>
            Gather all sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Actuators">
            <summary>
            Gather all motors, LED and speakers.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Resources">
            <summary>
            Resource loader to retrieve Unity object. Check both Resources/ and downloaded Assetbundles. Allow you to retrieve the full path from the name of the raw file.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.GUI">
            <summary>
            Gather all UI handler (toaster, notifier, header).
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.IO">
            <summary>
            Gather WiFi, Bluetooth.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Vocal">
            <summary>
            Gather WiFi, Bluetooth.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Animator">
            <summary>
            Your optional Animator. You must init it by using {APP_NAME}Activity.Init(animator) static method.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Objects">
            <summary>
            Stored objects from {APP_NAME}Activity.Init(animator, obj1, obj2...) static method.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnLoading(System.Object[])">
            <summary>
            Called when the app loading occur. You can proceed here your high pre-computes or data loading.
            </summary>
            <param name="iArgs">Optional args.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnAwake">
            <summary>
            Called when the app is fully loaded and after all Awake() calls in the loaded App.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnStart">
            <summary>
            Called after all Start() calls in the loaded App.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnQuit">
            <summary>
            Called when the application is currently unloading. It will be your last call.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.Init(UnityEngine.Animator,System.Object[])">
            <summary>
            This static method allow you to set basic param to your Activity. It must be done at the beginning of your app.
            </summary>
            <param name="iAnimator">.</param>
            <param name="iParams">.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.QuitApp">
            <summary>
            Quit the running app.
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.AskForQuitApp(System.Boolean)">
            <summary>
            If set as true, ask confirmation for app quit.
            </summary>
            <param name="iVal">.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.LoadScene(System.Int32)">
            <summary>
            Load the scene {AppID}-{SceneIndex}
            </summary>
            <param name="iSceneIndex">Index of the scene (0, 1, 2...), where 0 is the main scene.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.Trigger(System.String)">
            <summary>
            Trigger the named trigger in the presetted animator.
            </summary>
            <param name="iTriggerName">Trigger name.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.ResetTrigger(System.String)">
            <summary>
            Reset the named trigger in the presetted animator.
            </summary>
            <param name="iTriggerName">.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetBool(System.String,System.Boolean)">
            <summary>
            Set the bool value of the named boolean in the presetted animator.
            </summary>
            <param name="iBoolName">The bool name to set.</param>
            <param name="iVal">Value of the boolean.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetBool(System.String)">
            <summary>
            Retrieve the value of the named boolean in the presetted animator.
            </summary>
            <param name="iBoolName">Boolean name.</param>
            <returns>The value of the named boolean.</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetInteger(System.String,System.Int32)">
            <summary>
            Set the bool value of the named integer in the presetted animator.
            </summary>
            <param name="iIntName">The integer name to set.</param>
            <param name="iVal">Value of the integer.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetInteger(System.String)">
            <summary>
            Retrieve the value of the named integer in the presetted animator.
            </summary>
            <param name="iIntName">Integer name.</param>
            <returns>The value of the named integer.</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetFloat(System.String,System.Single)">
            <summary>
            Set the bool value of the named float in the presetted animator.
            </summary>
            <param name="iFloatName">The float name to set.</param>
            <param name="iVal">Value of the float.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetFloat(System.String)">
            <summary>
            Retrieve the value of the named foat in the presetted animator.
            </summary>
            <param name="iFloatName">Foat name.</param>
            <returns>The value of the named foat.</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Begin a coroutine.
            </summary>
            <param name="iFunc">Your coroutine to start.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stop the coroutine.
            </summary>
            <param name="iFunc">Your coroutine to stop.</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopAllCoroutines">
            <summary>
            Stop all started coroutines.
            </summary>
        </member>
        <member name="T:BlueQuark.AppInfo">
            <summary>
            Meta data of an application. External dev should never explicitly use this class.
            It's an internal class for app managing.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ID">
            <summary>
            Unique application identifier.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ShortName">
            <summary>
            The string that will be used as directory / class name.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.CommercialName">
            <summary>
            The string that will be displayed in the menu / loading.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.MainScene">
            <summary>
            Application main scene (entrypoint). Error if NULL.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Authors">
            <summary>
            The app authors.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Version">
            <summary>
            Current installed app version.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.VersionStatus">
            <summary>
            Current installed app version type.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.VersionName">
            <summary>
            Current installed app version name.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Category">
            <summary>
            The app category.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Permissions">
            <summary>
            The app permissions.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ActivityClassName">
            <summary>
            Application Activity fullname.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Data">
            <summary>
            Application data. Automaticaly serialized after unload app, and deserialized after app loading.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Activity">
            <summary>
            Application Activity entrypoint for callback.
            </summary>
        </member>
        <member name="M:BlueQuark.AppInfo.#ctor">
            <summary>
            AppInfo are build by deserialization inside the AppManager.
            </summary>
        </member>
        <member name="T:BlueQuark.AppManager">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.IsBusy">
            <summary>
            Returns true if the manager is currently loading or running an app.
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.CurrentApp">
            <summary>
            The current running application.
            </summary>
        </member>
        <member name="P:BlueQuark.AppManager.InstalledApps">
            <summary>
            All installed and playable applications on the robot
            </summary>
        </member>
        <member name="M:BlueQuark.AppManager.GetAppCategory(System.String)">
            <summary>
            Gets the category from an installed application.
            </summary>
            <param name="iIdentifier">The app's scene, id, shortname, commercialname.</param>
            <returns>The application category.</returns>
        </member>
        <member name="M:BlueQuark.AppManager.StartApp(BlueQuark.AppInfo,System.Object[])">
            <summary>
            Starts the specified application.
            </summary>
            <param name="iApp">The app to start up.</param>
            <param name="iAppParameters">The app's parameters. Will be given to the AppActivity at start.</param>
        </member>
        <member name="M:BlueQuark.AppManager.StartApp(System.String,System.Object[])">
            <summary>
            Starts the specified application.
            </summary>
            <param name="iIdentifier">The app's scene, id, shortname, commercialname.</param>
            <param name="iAppParameters">The app's parameters. Will be given to the AppActivity at start.</param>
            <returns>The application category.</returns>
        </member>
        <member name="M:BlueQuark.AppManager.Stop">
            <summary>
            Stops the current running app. No effect if no running app.
            </summary>
        </member>
        <member name="T:BlueQuark.Buddy">
            <summary>
            Core of the Buddy Operating System.
            Gave access to robot control and tools like UI, sensors, actuators, resources and miscellaneous managers.
            A Unique instance of Buddy is created in the whole program.
            </summary>
            <remarks>
            Access to Buddy's modules by using Buddy.[MODULE_NAME] in a static way.
            </remarks>
        </member>
        <member name="P:BlueQuark.Buddy.Actuators">
            <summary>
            The module containing sub components responsible of moving and controlling the robot system.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Sensors">
            <summary>
            The module containing whole robot sensors. Sensors are used for detection and perception systems.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.IO">
            <summary>
            The module containing all IO hardware components like Bluetooth, WiFi or GPIO.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Resources">
            <summary>
            The module in charge of handling all application assets (scene, sprites, raw files, sounds ...).
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Cognitive">
            <summary>
            The module containing all cognitive aspect of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Behaviour">
            <summary>
            The module containing all behaviour component such as Mood or the Behaviour player.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.WebServices">
            <summary>
            The module containing all miscenalleous web service components.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Navigation">
            <summary>
            The navigation module in charge of running one navigation strategy. 
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Perception">
            <summary>
            The module containing all sensor's base or image processing algorithms.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Vocal">
            <summary>
            The module for vocal management (say, hot word and listen).
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.GUI">
            <summary>
            The module containing all GUI built-in tools such like notification or contextual widgets.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Platform">
            <summary>
            The module handling all meta or external data and handlers like apps, language or users. 
            </summary>
        </member>
        <member name="T:BlueQuark.Platform">
            <summary>
            Module containing all meta data of the operating system.
            </summary>
        </member>
        <member name="F:BlueQuark.Platform.SDK_NAME">
            <summary>
            Name of the Software development kit API and runtime Operating system.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Application">
            <summary>
            App management.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Calendar">
            <summary>
            Memo/Reminding storage and management.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Users">
            <summary>
            User management.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.Language">
            <summary>
            Current language applied in the system.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.StartTime">
            <summary>
            Time stamp since the OS boot.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.RobotUID">
            <summary>
            The unique identifier for the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Platform.RobotSoftwareVersion">
            <summary>
            The current software versionning of the robot.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.SendMessageToCore(System.String)">
            <summary>
            Send a messaga to Core.
            </summary>
            <param name="iMessage"></param>
        </member>
        <member name="M:BlueQuark.Platform.ActiveUpdates(System.Boolean)">
            <summary>
            Enable/Disable system update (Core+BYFW).
            </summary>
            <param name="iActive"></param>
        </member>
        <member name="M:BlueQuark.Platform.Restart">
            <summary>
            Restarts the core application.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.ReinstallCore">
            <summary>
            Starts the Android process to reinstall the core APK.
            </summary>
        </member>
        <member name="M:BlueQuark.Platform.Stop">
            <summary>
            Stops the core application.
            </summary>
        </member>
        <member name="T:BlueQuark.Bluetooth">
            <summary>
            Wireless technology to connect with other close devices. WIP
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.Enabled">
            <summary>
            Gets if the bluetooth module is enabled.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.PairedDevices">
            <summary>
            Gets the paired devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.VisibleDevices">
            <summary>
            Gets the visible devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.ConnectedDevices">
            <summary>
            Gets the connected devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnFoundDevice">
            <summary>
            Callback array fired on a new device detected.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnPairingRequest">
            <summary>
            Callback array fired on a new paired device.
            </summary>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnReceivingData">
            <summary>
            Callback array fired on receiving data.
            </summary>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="P:BlueQuark.Bluetooth.OnScanStatusUpdate">
            <summary>
            Callback array fired on scan status update.
            </summary>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.Enable(System.Boolean,System.Double)">
            <summary>
            Enables bluetooth.
            </summary>
            <param name="iIsDiscoverable">Sets if buddy will be discoverable by others devices.</param>
            <param name="iDiscoverableTimeOut">Sets the timeout during buddy will be discoverable.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.Disable">
            <summary>
            Disables bluetooth.
            </summary>
        </member>
        <member name="M:BlueQuark.Bluetooth.PairWith(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Pair buddy to a given device.
            </summary>
            <param name="iDevice">The device to pair.</param>
            <param name="iOnEndPairing">Action on the end of pairing.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.PairWith(BlueQuark.BluetoothDevice)">
            <summary>
            Pair buddy to a given device.
            </summary>
            <param name="iDevice">The device to pair.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.UnpairFrom(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Unpair buddy from a device. 
            </summary>
            <param name="iDevice">The device to unpair.</param>
            <param name="iOnEndUnpairing">Action on the end of unpair.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.UnpairFrom(BlueQuark.BluetoothDevice)">
            <summary>
            Unpair buddy from a device.
            </summary>
            <param name="iDevice">The device to unpair.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.AcceptPairing(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Accepts a pairing request.
            </summary>
            <param name="iDevice">The device which request the pairing with buddy.</param>
            <param name="iOnEndPairing">Action on the end of accepting request.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.ConnectTo(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Connects to a device.
            </summary>
            <param name="iDevice">The device to connect.</param>
            <param name="iOnEndConnect">Action on the end of connection try.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.ConnectTo(BlueQuark.BluetoothDevice)">
            <summary>
            Connects to a device.
            </summary>
            <param name="iDevice">The device to connect.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.DisconnectFrom(BlueQuark.BluetoothDevice,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Disconnects from a device.
            </summary>
            <param name="iDevice">The device to disconnect.</param>
            <param name="iOnEndDisconnect">Action on the end of disconnection.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.DisconnectFrom(BlueQuark.BluetoothDevice)">
            <summary>
            Disconnects from a device.
            </summary>
            <param name="iDevice">The device to disconnect.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.WaitConnection(System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Enables the incoming connections. 
            </summary>
            <param name="iOnAcceptedConnection">Action on a accepted connection.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.StopWaitConnection">
            <summary>
            Disables the incoming connections.
            </summary>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.Byte[],System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Sends datas to a connected device.
            </summary>
            <param name="iDevice">The device to send the datas.</param>
            <param name="iData">The datas to send.</param>
            <param name="iOnEndSend">Action on the end of sending.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.Byte[])">
            <summary>
            Sends datas to a connected device.
            </summary>
            <param name="iDevice">The device to send the datas.</param>
            <param name="iData">The datas to send.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.String,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Sends file to a connected device.
            </summary>
            <param name="iDevice">The device to send the file.</param>
            <param name="iFilePath">The path of the file.</param>
            <param name="iOnEndSend">Action on the end of sending.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,System.String)">
            <summary>
            Sends file to a connected device.
            </summary>
            <param name="iDevice">The device to send the file.</param>
            <param name="iFilePath">The path of the file.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,UnityEngine.Sprite,System.Action{BlueQuark.BluetoothDevice,BlueQuark.BluetoothActionInfo})">
            <summary>
            Sends pic of a sprite to a connected device.
            </summary>
            <param name="iDevice">The device to send the pic.</param>
            <param name="iSprite">The sprite containing the pic.</param>
            <param name="iOnEndSend">Action on the end of sending.</param>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="M:BlueQuark.Bluetooth.SendTo(BlueQuark.BluetoothDevice,UnityEngine.Sprite)">
            <summary>
            Sends pic of a sprite to a connected device.
            </summary>
            <param name="iDevice">The device to send the pic.</param>
            <param name="iSprite">The sprite containing the pic.</param>
        </member>
        <member name="M:BlueQuark.Bluetooth.StartScan">
            <summary>
            Starts the scan of environent devices.
            </summary>
            <seealso cref="T:BlueQuark.BluetoothActionInfo"/>
        </member>
        <member name="T:BlueQuark.IO">
            <summary>
            IO module containing all IO interfaces (Bluetooth, WiFi...) 
            </summary>
        </member>
        <member name="P:BlueQuark.IO.USB">
            <summary>
            USB drive management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.WiFi">
            <summary>
            Local wireless networking system management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.Bluetooth">
            <summary>
            Wireless technology to connect with other close devices.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.GPIO">
            <summary>
            Global Purpose Input Output management.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.HardwareCommunication">
            <summary>
            Communication component with the Hemise board.
            </summary>
        </member>
        <member name="P:BlueQuark.IO.HDMI">
            <summary>
            HDMI output management.
            </summary>
        </member>
        <member name="T:BlueQuark.USB">
            <summary>
            Hard storage component of the robot
            </summary>
            <summary>
            USB drive management.
            </summary>
        </member>
        <member name="T:BlueQuark.WiFi">
            <summary>
            Local wireless networking system management.
            </summary>
            <summary>
            Allows you to access to tablet parameters and settings (WiFi, Bluetooth, accelerometers...).
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.IsBusy">
            <summary>
            True if the wifi is currently busy (Connection, disconnection, retrieving...).
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.Enabled">
            <summary>
            Enable/Disable the WiFi module.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.OnLocalNetworksUpdated">
            <summary>
            A callback array fired each time the local networks are updated.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.OnCurrentLocalNetworkUpdated">
            <summary>
            A Callback array fired when the local connexion change.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.ConfiguredNetworks">
            <summary>
            List of all favorite networks.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.LocalNetworks">
            <summary>
            Gets all detected local networks.
            </summary>
        </member>
        <member name="P:BlueQuark.WiFi.CurrentWiFiNetwork">
            <summary>
            Gets the current connected network.
            </summary>
        </member>
        <member name="M:BlueQuark.WiFi.ConnectTo(System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Try to connect to the specified network.
            </summary>
            <param name="iNetwork">The network name. Case sensitive.</param>
            <param name="iPassword">Password of the network.</param>
            <param name="iOnConnectCallback">Callback called when the connection is established or failed.</param>
        </member>
        <member name="M:BlueQuark.WiFi.ConnectTo(BlueQuark.WiFiNetwork,System.String,System.Action{System.Boolean})">
            <summary>
            Try to connect to the specified network.
            </summary>
            <param name="iNetwork">The network to connect.</param>
            <param name="iPassword">Password of the network.</param>
            <param name="iOnConnectCallback">Callback called when the connection is established or failed.</param>
        </member>
        <member name="M:BlueQuark.WiFi.ConnectToConfigured(BlueQuark.WiFiNetwork,System.Action{System.Boolean})">
            <summary>
            Try to connect to a favorite network.
            </summary>
            <param name="iNetwork">The known network.</param>
            <param name="iOnConnectCallback">Callback called when the connection is established or failed.</param>
        </member>
        <member name="M:BlueQuark.WiFi.RemoveFavoriteNetwork(BlueQuark.WiFiNetwork)">
            <summary>
            Remove a favorite network.
            </summary>
            <param name="iNetwtork">The network to remove.s</param>
            <returns>Return true if success</returns>
        </member>
        <member name="M:BlueQuark.WiFi.Disconnect">
            <summary>
            Disconnect from the current network.
            </summary>
        </member>
        <member name="T:BlueQuark.RoamSpeed">
            <summary>
            Speed for roaming
            </summary>
        </member>
        <member name="M:BlueQuark.RoamSubStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.RoamSpeed)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.RoamSubStrategy.While(System.Predicate{UnityEngine.Vector3},BlueQuark.Mood,BlueQuark.RoamSpeed)">
            <summary>
            The robot will roam locally while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null</param>
            <param name="iMood">The mood that should be expressed through the motion.</param>
        </member>
        <member name="M:BlueQuark.RoamSubStrategy.WithMood(BlueQuark.Mood,BlueQuark.RoamSpeed)">
            <summary>
            Start wandering around in a certain mood.
            </summary>
            <param name="iMood">The mood that should be expressed through the motion.</param>
        </member>
        <member name="T:BlueQuark.HumanSearchStrategy">
            <summary>
            Searching human strategy in the known environment.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Predicate{UnityEngine.Vector3})">
            <summary>
            Starts a human search inside the known environment while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Predicate{UnityEngine.Vector3},System.Action{BlueQuark.HumanEntity})">
            <summary>
            Starts a human search inside the known environment while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
            <param name="iOnFound">Action to do when human is found.</param>
        </member>
        <member name="M:BlueQuark.HumanSearchStrategy.While(System.Single,System.Action,System.Action{BlueQuark.HumanEntity})">
            <summary>
            Starts a human search inside the known environment while the condition is true.
            </summary>
            <param name="iTimeout">Search only for a certain time.</param>
            <param name="iOnEnd">Action when searching ends.</param>
            <param name="iOnFound">Action to do when human is found.</param>
        </member>
        <member name="T:BlueQuark.ObjectSearchStrategy">
            <summary>
            Searching object strategy in the known environment.
            </summary>
        </member>
        <member name="M:BlueQuark.ObjectSearchStrategy.While(System.Predicate{UnityEngine.Vector3})">
            <summary>
            Starts an object search inside the known environment while the condition is true.
            </summary>
            <param name="iCondition">The while condition. Cannot be null.</param>
        </member>
        <member name="T:BlueQuark.HumanTrackStrategy">
            <summary>
            Following strategy to track and follow a targeted human.
            Can be static (on place) or dynamic (follow user).
            </summary>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.StaticControler(UnityEngine.Vector2,BlueQuark.MovingParts)">
            <summary>
            Controler of static human tracking.
            </summary>
            <param name="iTargetRelative">Target's relative position in the robot's FOV. Positive for the robot's right and upward.</param>
            <param name="iMovingParts"></param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.DynamicControler(UnityEngine.Vector2,System.Single)">
            <summary>
            Dynamic human following, keeping the distance around 1.5 meters
            </summary>
            <param name="iTargetRelative"></param>
            <param name="iDistance"></param>
        </member>
        <member name="P:BlueQuark.HumanTrackStrategy.SensorMode">
            <summary>
            Which sensor mode (VISION-yolo dnn or SKELETON-depth camera) is used in the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.StaticTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},BlueQuark.MovingParts,BlueQuark.SensorMode,System.Int32)">
            <summary>
            Starts a static human tracking with different options for moving parts. 
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
            <param name="iMovingParts">Which parts of the robot will move.</param>
            <param name="iSensorMode">Using vision(RGB) or depth camera.</param>
            <param name="iFrameNum">Parameter for SensorMode.VISION. Do one detection every iFrameNum frames.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.DynamicTracking(System.Predicate{BlueQuark.HumanEntity},System.Action{BlueQuark.HumanEntity},BlueQuark.SensorMode)">
            <summary>
            Start a dynamic human tracking. The robot will follow the user.
            </summary>
            <param name="iWhileCondition">Continue tracking human while this condition is true.</param>
            <param name="iOnDetect">What to do with the currently tracking human.</param>
            <param name="iSensorMode">Using vision(RGB) or depth camera.</param>
        </member>
        <member name="M:BlueQuark.HumanTrackStrategy.Facing">
            <summary>
            Starts a tracking strategy from the human facing the robot.
            </summary>
        </member>
        <member name="T:BlueQuark.ObjectTrackStrategy">
            <summary>
            Following strategy to track and follow a target object.
            </summary>
        </member>
        <member name="M:BlueQuark.ObjectTrackStrategy.Targeting(OpenCVUnity.Rect)">
            <summary>
            Starts a tracking strategy based on the object in the rect. Rect base on the current RGBCamera frame.
            </summary>
            <param name="iRectInFrame">The rect in the current RGBCamera frame.</param>
        </member>
        <member name="T:BlueQuark.Navigation">
            <summary>
            Module managing navigation strategies. Able to run one main navigation strategy at a time.
            </summary>
        </member>
        <member name="P:BlueQuark.Navigation.IsBusy">
            <summary>
            Returns true if a navigation strategy is currently running.
            </summary>
        </member>
        <member name="M:BlueQuark.Navigation.Run``1">
            <summary>
            Runs a navigation strategy. This strategy can be parametrize in this way : Run().With(args).
            Start a strategy will stop any running strategy.
            </summary>
            <typeparam name="S">The strategy type.</typeparam>
            <returns>The strategy to parametrize.</returns>
        </member>
        <member name="M:BlueQuark.Navigation.Stop">
            <summary>
            Stops the running navigation strategy and the wheels. No effect if no running navigation strategy.
            </summary>
        </member>
        <member name="T:BlueQuark.GoogleCloudVision">
            <summary>
            To use this feature, you must set iKey with your own Google vision API key.
            Available at https://console.cloud.google.com/projectselector/apis/credentials
            </summary>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,OpenCVUnity.Mat,BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detect the wanted feature in the input image.
            </summary>
            <param name="iKey">Key to authorize request.</param>
            <param name="iImage">The image to retrieve info.</param>
            <param name="iFeatureType">The kind of feature.</param>
            <param name="iCallback">Callback with the output Annotate response.</param>
            <param name="iMaxResult">Max wish results.</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,UnityEngine.Texture2D,BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detect the wanted feature in the input image.
            </summary>
            <param name="iKey">Key to authorize request.</param>
            <param name="iImage">The image to retrieve info.</param>
            <param name="iFeatureType">The kind of feature.</param>
            <param name="iCallback">Callback with the output Annotate response.</param>
            <param name="iMaxResult">Max wish results.</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,System.Byte[],BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detect the wanted feature in the input image.
            </summary>
            <param name="iKey">Key to authorize request.</param>
            <param name="iImage">The image to retrieve info.</param>
            <param name="iFeatureType">The kind of feature.</param>
            <param name="iCallback">Callback with the output Annotate response.</param>
            <param name="iMaxResult">Max wish results.</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:BlueQuark.KidnappingDetector">
            <summary>
            Detector algorithm for kidnapping, ie : the robot has been rised from the floor.
            </summary>
        </member>
        <member name="P:BlueQuark.KidnappingDetector.OnDetect">
            <summary>
            Called when the robot is detected as kidnapped. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDetector">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Detect moving points in frame. Do not use this during moving.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDetector.OnDetect">
            <summary>
            Called when a motion is detected in front of the robot. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="T:BlueQuark.NoiseDetector">
            <summary>
            Represents the noise detector component.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.OnDetect">
            <summary>
            Callback array fired on detection.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.MicrophoneIdx">
            <summary>
            Represent the index of the microphone.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.MicrophoneData">
            <summary>
            Represents the data of the microphone.
            </summary>
        </member>
        <member name="P:BlueQuark.NoiseDetector.RecordClip">
            <summary>
            Represents the recorded clip of the microphone. 
            </summary>
        </member>
        <member name="T:BlueQuark.ObstacleDetector">
            <summary>
            Obstacle detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.ObstacleDetector.OnDetect">
            <summary>
            Called when an obstacle is detected. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.ObstacleDetector.Detect">
            <summary>
            Starts the detection.
            </summary>
            <returns>The obstacles detected.</returns>
        </member>
        <member name="T:BlueQuark.Perception">
            <summary>
            This module contains all the base perception features (Face tracking, Detectors...).
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ShadeProcessing">
            <summary>
            Color tool.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ThermalDetector">
            <summary>
            Thermal tool.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.QRCodeDetector">
            <summary>
            QRCode tool for read and write.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.MotionDetector">
            <summary>
            Feature to detect and track movement.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.MotionDetectorRework">
            <summary>
            Feature to detect and track movement.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ObstacleDetector">
            <summary>
            Feature to detect arround obstacles.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.NoiseDetector">
            <summary>
            Feature to detect loud sound pike.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.KidnappingDetector">
            <summary>
            Use this feature to callback if Buddy is kidnapped.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.AprilTagDetector">
            <summary>
            Feature to detect AprilTags.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.FaceDetector">
            <summary>
            Feature to detect Faces.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.WavingDetector">
            <summary>
            Feature to detect short range Waving.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.GoogleCloudVision">
            <summary>
            Access to the google cloud vision feature.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.RoomDetector">
            <summary>
            Localization tool.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.Mapper">
            <summary>
            A topological map of rooms and waypoints.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.TensorFlow">
            <summary>
            Feature to make prediction on available models.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.FaceRecognizer">
            <summary>
            Feature to detect short range Waving.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.HumanDetector">
            <summary>
            Human full body detection feature.
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.SkeletonDetector">
            <summary>
            Body detection with skeleton data structure.
            </summary>
        </member>
        <member name="T:BlueQuark.QRCodeDetector">
            <summary>
            QR code detection algorithm.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeDetector.OnDetect">
            <summary>
            Called when a QR code is detected in front of the robot. Remove all callback to stop the algorithm.
            </summary>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Detect(OpenCVUnity.Mat,BlueQuark.QRCodePoints)">
            <summary>
            Detect all QR code in given frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iMode">The QRcode strategy to apply.</param>
            <returns>Set of detected QR codes.</returns>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Detect(UnityEngine.Texture2D,BlueQuark.QRCodePoints)">
            <summary>
            Detect all QR code in given frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iMode">The QRcode strategy to apply.</param>
            <returns>Set of detected QR codes.</returns>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Write(System.String,OpenCVUnity.Size)">
            <summary>
            Write the input content as a QR code.
            </summary>
            <param name="iContent">Content to write.</param>
            <param name="iSize">Size of the QR code.</param>
            <returns>The texture of the QR code.</returns>
        </member>
        <member name="M:BlueQuark.QRCodeDetector.Write(System.String,System.Int32,System.Int32)">
            <summary>
            Write the input content as a QR code.
            </summary>
            <param name="iContent">Content to write.</param>
            <param name="iWidth">Width of the QR code.</param>
            <param name="iHeight">Height of the QR code.</param>
            <returns>The texture of the QR code.</returns>
        </member>
        <member name="T:BlueQuark.ShadeProcessing">
            <summary>
            Color processing component.
            </summary>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetBrightness(OpenCVUnity.Mat)">
            <summary>
            Gets the brightnss of the input frame.
            </summary>
            <param name="iFrame">The fame to check.</param>
            <returns>Estimated brightness of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.Mask(OpenCVUnity.Mat,UnityEngine.Color32[])">
            <summary>
            Apply a color mask on the input frame. All input color will be removed from the frame.
            </summary>
            <param name="iFrame">The frame to mask on.</param>
            <param name="iColors">The color to remove from frame.</param>
            <returns>The frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.Reduce(OpenCVUnity.Mat,System.Int32)">
            <summary>
            Creates a color reduction on the input frame.
            </summary>
            <param name="iFrame">The frame to reduce.</param>
            <param name="iNbColor">Max number of color to handle in the frame.</param>
            <returns>The reduced frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetColor(OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Returns the main color of the frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="ioReducedFrame">The reduced frame.</param>
            <returns>The main color of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetColors(OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Returns the three main colors of the frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="ioReducedFrame">The reduced frame.</param>
            <returns>The three main colors of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.GetColors(OpenCVUnity.Mat,System.Int32,OpenCVUnity.Mat)">
            <summary>
            Returns the iNbColor main colors of the frame.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iNbColor">Number of color to detect.</param>
            <param name="ioReducedFrame">The reduced frame.</param>
            <returns>The main colors of the frame.</returns>
        </member>
        <member name="M:BlueQuark.ShadeProcessing.FindColor(OpenCVUnity.Mat,UnityEngine.Color32)">
            <summary>
            Retrieve all position where a specified color is found.
            </summary>
            <param name="iFrame">The frame to check.</param>
            <param name="iColor">The color to find.</param>
            <returns>All position of the given color.</returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.ConvertToGrayscale(OpenCVUnity.Mat,System.Int32,System.Int32)">
            <summary>
            Converts a Mat into grayscale float array with desired output width and height
            </summary>
            <param name="iFrame">Frame that will be processed</param>
            <param name="iOutputWidth">Desired output width</param>
            <param name="iOutputHeight">Desired output height</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferMNISTLabel">
            <summary>
            Guess which number is shown in the image
            </summary>
            <returns>
            The string of the number guessed as first element, then the confidence level of classification
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferMNISTLabel(OpenCVUnity.Mat)">
            <summary>
            Guess which number is shown in the image
            </summary>
            <param name="iFrame">Frame that will be processed, as on OpenCV Mat</param>
            <returns>
            The string of the number guessed as first element, then the confidence level of classification
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferInceptionLabel">
            <summary>
            Guess what is seen in the image, associating a label with a probability associated
            </summary>
            <returns>
            An array of each detected element in the frame of the camera
            Each value in the array is formatted as follows : "label [confidence]"
            e.g. : "electric fan [0.865495]"
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferInceptionLabel(OpenCVUnity.Mat)">
            <summary>
            Guess what is seen in the image, associating a label with a probability associated
            </summary>
            <param name="iFrame">Frame that will be processed, as on OpenCV Mat</param>
            <returns>
            An array of each detected element in the frame of the camera
            Each value in the array is formatted as follows : "label [confidence]"
            e.g. : "electric fan [0.865495]"
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InitClassifier(BlueQuark.TFModelType)">
            <summary>
            Start the desired classifier model.
            </summary>
            <remarks>
            Only one model can be active at a time.
            </remarks>
            <param name="iModel">The model that will be initialized.</param>
        </member>
        <member name="M:BlueQuark.TensorFlow.InitClassifier(BlueQuark.TFModelType,System.String,System.String)">
            <summary>
            Start the desired classifier model.
            </summary>
            <remarks>
            Only one model can be active at a time.
            </remarks>
            <param name="iModel">The model that will be initialized.</param>
            <param name="iModelFile">The model file wanted for the chosen classifier.</param>
            <param name="iLabelsFile">The corresponding labels for the classifier's output.</param>
        </member>
        <member name="M:BlueQuark.TensorFlow.Predict">
            <summary>
            Gets current camera frame and feeds it into current active model.
            </summary>
            <remarks>
            Camera must be on for this method to work.
            </remarks>
        </member>
        <member name="M:BlueQuark.TensorFlow.Predict(OpenCVUnity.Mat)">
            <summary>
            Gets current camera frame and feeds it into current active model.
            </summary>
            <param name="iFrame">Frame that's going to be analyzed as an OpenCV Mat.</param>
        </member>
        <member name="T:BlueQuark.ThermalDetector">
            <summary>
            Represents a thermal detection class.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalDetector.OnDetect">
            <summary>
            Callback param array fired on a detection.
            </summary>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetHottestTemp">
            <summary>
            Returns the hottest temperature.
            </summary>
            <returns>The hottest temperature.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetHottestPoints">
            <summary>
            Returns the list of hottest points.
            </summary>
            <returns>The list of hottest points.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetAverageTemp">
            <summary>
            Returns the average temperature.
            </summary>
            <returns>The average temperatuer.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.GetPointsHotterThan(System.Single)">
            <summary>
            Return a list of points hotter than a given temperature.
            </summary>
            <param name="iThresholdTemp">The temperature limit.</param>
            <returns>The list of points.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.IsHotterThan(System.Single)">
            <summary>
            Compare the given temperature with the temperature of the instance.
            </summary>
            <param name="iThresholdTemp"></param>
            <returns>True if the instance is hotter than the given temperature.</returns>
        </member>
        <member name="M:BlueQuark.ThermalDetector.CheckHumanPresence(System.Single)">
            <summary>
            Tell if human present by comparing average temperatures over regions .
            </summary>
            <param name="iThresholdDiff">When difference of average temperature of hottest and coldest regions is greater than this value, return true.</param>
            <returns>Yes if human present</returns>
        </member>
        <member name="F:BlueQuark.BodyPart.FACE">
            <summary>
            Face.
            </summary>
        </member>
        <member name="F:BlueQuark.BodyPart.UPPER_BODY">
            <summary>
            Upper body.
            </summary>
        </member>
        <member name="F:BlueQuark.BodyPart.LOWER_BODY">
            <summary>
            Lower body.
            </summary>
        </member>
        <member name="F:BlueQuark.BodyPart.FULL_BODY">
            <summary>
            Full body.
            </summary>
        </member>
        <member name="T:BlueQuark.HumanEntity">
            <summary>
            Human entity detected.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.SensorMode">
            <summary>
            Human detected by VISION or by SKELETON.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.BoundingBox">
            <summary>
            Available when in SensorMode.VISION.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Center">
            <summary>
            Available when in SensorMode.VISION.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Distance">
            <summary>
            Distance to human in meters. Available in SensorMode.SKELETON.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Confidence">
            <summary>
            Confidence of this entity. From 0 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.HumanEntity.Skeleton">
            <summary>
            Associated skeleton. Available in SensorMode.SKELETON.
            </summary>
        </member>
        <member name="T:BlueQuark.HorizontalMotion">
            <summary>
            Represents a horizontal motion;
            </summary>
        </member>
        <member name="F:BlueQuark.HorizontalMotion.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.HorizontalMotion.LEFT_TO_RIGHT">
            <summary>
            Left to right.
            </summary>
        </member>
        <member name="F:BlueQuark.HorizontalMotion.RIGHT_TO_LEFT">
            <summary>
            Right to left.
            </summary>
        </member>
        <member name="T:BlueQuark.VerticalMotion">
            <summary>
            Represents a vertical motion;
            </summary>
        </member>
        <member name="F:BlueQuark.VerticalMotion.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:BlueQuark.VerticalMotion.TOP_DOWN">
            <summary>
            Top down.
            </summary>
        </member>
        <member name="F:BlueQuark.VerticalMotion.BOTTOM_UP">
            <summary>
            Bottom up;
            </summary>
        </member>
        <member name="T:BlueQuark.MotionDirection">
            <summary>
            Represent a motion direction.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDirection.Vertical">
            <summary>
            Vertical motion.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionDirection.Horizontal">
            <summary>
            Horizontal motion.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionDirection.ToString">
            <summary>
            To string method.
            </summary>
            <returns>The string representation of the struct.</returns>
        </member>
        <member name="T:BlueQuark.MotionEntity">
            <summary>
            Represents a motion entity.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.Direction">
            <summary>
            Direction of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.Speed">
            <summary>
            Speed of the entity.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionEntity.ToString">
            <summary>
            To string method.
            </summary>
            <returns>The string represenstation of the class.</returns>
        </member>
        <member name="P:BlueQuark.MotionEntity.RectInFrame">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.MotionEntity.Confidence">
            <summary>
            Confidenec of the motion entity;
            </summary>
        </member>
        <member name="T:BlueQuark.MotionEntityExtension">
            <summary>
            Represents an extention of motion entity.
            </summary>
        </member>
        <member name="M:BlueQuark.MotionEntityExtension.ToDirection(BlueQuark.MotionEntity[])">
            <summary>
            Gets a motion direction.
            </summary>
            <param name="iMotions">The motion entity to get the motion direction.</param>
            <returns>The motion direction.</returns>
        </member>
        <member name="T:BlueQuark.ObjectEntity">
            <summary>
            Represents an object entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.RectInFrame">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.Label">
            <summary>
            Label, if applicable, of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.MatInFrame">
            <summary>
            Sub mat containing the detected entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ObjectEntity.Confidence">
            <summary>
            Confidence of this entity. From 0 to 1.
            </summary>
        </member>
        <member name="T:BlueQuark.Obstacle">
            <summary>
            Represents an obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.Obstacle.Angle">
            <summary>
            Represents the angle of the obstacle.
            </summary>
        </member>
        <member name="P:BlueQuark.Obstacle.Distance">
            <summary>
            Represents the distance of the obstacle.
            </summary>
        </member>
        <member name="T:BlueQuark.QRCodeEntity">
            <summary>
            Represents a QRCode entity.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.Points">
            <summary>
            The points localisation of the QRCode.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.MatInFrame">
            <summary>
            Sub mat containing the detected entity.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.Label">
            <summary>
            Label, if applicable, of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.QRCodeEntity.Confidence">
            <summary>
            Confidence of this entity. From 0 to 1.
            </summary>
        </member>
        <member name="T:BlueQuark.ShadeEntity">
            <summary>
            Represents a shade entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.Color">
            <summary>
            The color of the shade.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.NearestColor">
            <summary>
            The nearest color of the shade.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.MatInFrame">
            <summary>
            Sub mat containing the detected entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.Confidence">
            <summary>
            The confidenec of the entity.
            </summary>
        </member>
        <member name="P:BlueQuark.ShadeEntity.RectInFrame">
            <summary>
            Current position in the current frame.
            </summary>
        </member>
        <member name="T:BlueQuark.UserManager">
            <summary>
            Represents the user manager class component.
            </summary>
        </member>
        <member name="M:BlueQuark.UserManager.GetCurrentUser">
            <summary>
            The current logged user.
            </summary>
            <returns>A UserAccount copy of the current logged user.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetUsers">
            <summary>
            Buddy's user list. It's a copy, so any modification won't be keeped.
            </summary>
            <returns>Copy of Buddy's users.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.IsCorrectRobotPassword(System.String)">
            <summary>
            Checks if the passed string is equals to the robot global password.
            </summary>
            <param name="iPassword">The password to check.</param>
            <returns>True if input is equals to robot password.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.SetRobotPassword(System.String)">
            <summary>
            Sets the robot password.
            </summary>
            <param name="iPassword">The password to set. Must be a 4 digits string.</param>
            <returns>True if the password was correctly setted.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetUserPhotographs(System.Boolean)">
            <summary>
            Gets all current user photographes saved by the running app.
            </summary>
            <param name="iLoadSprite">Tells if the picture sprite must be loaded. False to get a "spriteless" photograph.</param>
            <returns>Photographes taken by the running app concerning the current user.</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetPhotographs(System.Boolean)">
            <summary>
            Gets all photographes saved by the running app.
            </summary>
            <param name="iLoadSprite">Tells if the picture sprite must be loaded. False to get a "spriteless" photograph.</param>
            <returns>Photographes taken by the running app.</returns>
        </member>
        <member name="T:BlueQuark.Gender">
            <summary>
            Gender type.
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.UNKNOWN">
            <summary>
            Unspecified gender.
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.MALE">
            <summary>
            Male gender
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.FEMALE">
            <summary>
            Female gender
            </summary>
        </member>
        <member name="T:BlueQuark.SessionType">
            <summary>
            Session type of the user.
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.USER">
            <summary>
            User session type.
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.ADMIN">
            <summary>
            Administrator session type.
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.GUEST">
            <summary>
            Guest session type.
            </summary>
        </member>
        <member name="T:BlueQuark.UserAccount">
            <summary>
            User info, not used.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.ID">
            <summary>
            ID of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Email">
            <summary>
            Email of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.FirstName">
            <summary>
            Firstname of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.LastName">
            <summary>
            Lastname of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Gender">
            <summary>
            Gender of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.BirthDate">
            <summary>
            Birthdate of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Password">
            <summary>
            Password of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Session">
            <summary>
            Session type of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Permissions">
            <summary>
            List of permisssions of the account.
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Preferences">
            <summary>
            User preferences link to this account.
            </summary>
        </member>
        <member name="M:BlueQuark.UserAccount.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="T:BlueQuark.UserPref">
            <summary>
            This class represents user preferences.
            </summary>
        </member>
        <member name="T:BlueQuark.Resources">
            <summary>
            The module in charge of handling all application assets (sprites, raw files path, sounds ...).
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.Item(System.String)">
            <summary>
            Retrieves the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word.</param>
            <returns>The word in the current language, default value if not found.</returns>
        </member>
        <member name="P:BlueQuark.Resources.AppRawDataPath">
            <summary>
            Full path to the current Raw/ app directory.
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.AppSpritesPath">
            <summary>
            Full path to the current Sprites/ app directory.
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.AppSoundsPath">
            <summary>
            Full path to the current Sounds/ app directory.
            </summary>
        </member>
        <member name="M:BlueQuark.Resources.ContainsKey(System.String,BlueQuark.Context)">
            <summary>
            Checks if a specified key-value pair is contained in the dictionary.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word to check.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>True if the key is stored inside the dictionary.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetString(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished word.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>The word in the current language, empty if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetRandomString(System.String,BlueQuark.Context)">
            <summary>
            Retrieves a random word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length).
            </summary>
            <param name="iKey">The key word corresponding to the wished random word.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>The word in the current language, empty if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetPhoneticStrings(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the corresponding list to the input iKey. Useful for multiple response handling with the SpeechToText
            </summary>
            <param name="iKey">The key corresponding to the wished list.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>List of strings that must sound similar.</returns>
        </member>
        <member name="M:BlueQuark.Resources.ContainsPhonetic(System.String,System.String,BlueQuark.Context)">
            <summary>
            Proceed to a GetPhoneticsStrings(iKey, iContext = APP) and checks if one element on the closephonetic array is contained in iRef
            </summary>
            <param name="iRef">The sentence to compare to each word into the list.</param>
            <param name="iKey">The key corresponding to the wished list.</param>
            <param name="iContext">The context corresponding to the dictionary to use.</param>
            <returns>True if the one element of the closephonetic array in contained in iRef sentence (not null and not empty), false otherwise.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetRawFullPath(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the full path from the name of the raw file / directory
            </summary>
            <param name="iFilename">Name of the file / directory.</param>
            <param name="iContext">The context corresponding to the path to find.</param>
            <returns>Fullpath to the file (including the iFilename).</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetSpritesFullPath(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the full path from the name of the sprite file / directory
            </summary>
            <param name="iFilename">Name of the file / directory.</param>
            <param name="iContext">The context corresponding to the path to find.</param>
            <returns>Fullpath to the file (including the iFilename).</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetSoundsFullPath(System.String,BlueQuark.Context)">
            <summary>
            Retrieves the full path from the name of the sound file / directory
            </summary>
            <param name="iFilename">Name of the file / directory.</param>
            <param name="iContext">The context corresponding to the path to find.</param>
            <returns>Fullpath to the file (including the iFilename).</returns>
        </member>
        <member name="M:BlueQuark.Resources.Get``1(System.String,BlueQuark.Context)">
            <summary>
            Load the resource from Resource/ or from downloaded bundles.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iFilename">Name (without path/extension) of the resource.</param>
            <param name="iContext">The context corresponding to the resource to load.</param>
            <returns>The loaded resource. Null if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetJIT``1(System.String)">
            <summary>
            Load the resource from Resource/ or from downloaded bundles. Does not store the retrieved resource.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iFullPath">Full absolute path of the resource.</param>
            <returns>The loaded resource. Null if not found.</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetStreamingAssetFullPath(System.String)">
            <summary>
            Gets the absolute path of the file contained in the native StreamingAssets folder of the base APK.
            </summary>
            <param name="iFilename">The name of the file</param>
            <returns>The absolute path of the file</returns>
        </member>
        <member name="T:BlueQuark.Context">
            <summary>
            Represents the context of the app.
            </summary>
        </member>
        <member name="F:BlueQuark.Context.OS">
            <summary>
            Context OS.
            </summary>
        </member>
        <member name="F:BlueQuark.Context.APP">
            <summary>
            Context APP.
            </summary>
        </member>
        <member name="T:BlueQuark.Battery">
            <summary>
            Battery component of the robot. Its autonomy is about 6-8 hours.
            Its voltage never should be under 9.5 volts
            </summary>
            <summary>
            Battery component of the robot. Its autonomy is about 6-8 hours.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.Voltage">
            <summary>
            Current voltage of the battery. Value in volt.
            </summary>
        </member>
        <member name="P:BlueQuark.Battery.ChargingState">
            <summary>
            Charging state code of the battery.
            </summary>
        </member>
        <member name="T:BlueQuark.CliffSensor">
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            The final robot will have 4 of those sensors.
            </summary>
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.OnVoid">
            <summary>
            Called when a cliff is detected by this cliff sensor. Called once by detection.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.OnFull">
            <summary>
            Called when a full floor is detected after a cliff. Called once by detection.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.Value">
            <summary>
            Current value of the sensor. Value in millimeters.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensor.Error">
            <summary>
            Error code. 0 is no Error.
            </summary>
        </member>
        <member name="T:BlueQuark.CliffSensors">
            <summary>
            Set of 7 cliff sensor components.
            </summary>
            <summary>
            Set of 7 cliff sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontFreeWheel">
            <summary>
            The front free wheel cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontLeftWheel">
            <summary>
            The front left cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontRightWheel">
            <summary>
            The front right cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackLeftWheel">
            <summary>
            The back left cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackRightWheel">
            <summary>
            The back right cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackLeftFreeWheel">
            <summary>
            The Back left free wheel cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackRightFreeWheel">
            <summary>
            The back right free wheel cliff sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.InfraredCamera">
            <summary>
            The robot infrared camera component. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See InfraredCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.IsBusy">
            <summary>
            Returns true if the camera is opened or is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.InfraredCamera.Open(BlueQuark.InfraredCameraMode)">
            <summary>
            Open the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.InfraredCamera.Close">
            <summary>
            Close the device. May take a certain time.
            </summary>
        </member>
        <member name="T:BlueQuark.RGBCamera">
            <summary>
            The robot Red-Green-Blue camera. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.IsBusy">
            <summary>
            Returns true if the camera is opened or is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.RGBCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.RGBCamera.Open(BlueQuark.RGBCameraMode)">
            <summary>
            Open the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.RGBCamera.Close">
            <summary>
            Close the device. May take a certain time.
            </summary>
        </member>
        <member name="M:BlueQuark.RGBCamera.TakePhotograph(System.Action{BlueQuark.Photograph},System.Boolean,System.Boolean,BlueQuark.FlashLightMode)">
            <summary>
            Asynchrone take photo feature with an high definiton.
            </summary>
            <param name="iOnEndTakePhoto">The callback with the taken photo. The photo is null if the operation was not successful</param>
            <param name="iMakeSound">Set as false to make a silent photo. Default to true</param>
            <param name="iFlashMode">Set the flash mode. Will be supported on the next version</param>
        </member>
        <member name="T:BlueQuark.RGBCameraMode">
            <summary>
            Resolution (width, height) of the RGB camera in pixels.
            </summary>
        </member>
        <member name="T:BlueQuark.DepthCamera">
            <summary>
            Depth camera device component of the robot. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See DepthCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.IsBusy">
            <summary>
            Returns true if the camera is opened or is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.IsOpen">
            <summary>
            Returns true if the device is opened. 
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.DepthCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.DepthCamera.Open(BlueQuark.DepthCameraMode)">
            <summary>
            Open the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.DepthCamera.Close">
            <summary>
            Close the device. May take a certain time.
            </summary>
        </member>
        <member name="T:BlueQuark.IMU">
            <summary>
            Inertial mesure unit component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Accelerometer">
            <summary>
            Accelerometer values.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Gyroscope">
            <summary>
            Gyroscopic values.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Temperature">
            <summary>
            Temperature inside the robot body.
            </summary>
        </member>
        <member name="P:BlueQuark.IMU.Error">
            <summary>
            The error code. 0 is no error.
            </summary>
        </member>
        <member name="T:BlueQuark.InfraredSensor">
            <summary>
            Infra red sensor component of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
            <summary>
            Infra red sensor component of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.InfraredSensor.Value">
            <summary>
            Current value of the sensor. Value in millimeters.
            </summary>
        </member>
        <member name="T:BlueQuark.Microphones">
            <summary>
            Set of 4 microphones at the top of the robot's head.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.AmbiantSound">
            <summary>
            Ambiant sound level.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.SoundLocalization">
            <summary>
            Sound localization. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.Microphones.Error">
            <summary>
            Error code. 0 is not error.
            </summary>
        </member>
        <member name="M:BlueQuark.Microphones.ToString">
            <summary>
            Serializes in string the current microphones state.
            </summary>
            <returns>The current microphones state</returns>
        </member>
        <member name="T:BlueQuark.TimeOfFlightSensor">
            <summary>
            Time of flight sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Value">
            <summary>
            Current value of the sensor. Value in millimeters.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.VerticalFOV">
            <summary>
            The vertical field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensor.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="T:BlueQuark.TimeOfFlightSensors">
            <summary>
            Set of 6 Rangefinder sensors component.
            </summary>
            <summary>
            Set of 6 Time of flight sensors component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Front">
            <summary>
            Bottom-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Back">
            <summary>
            Bottom-back TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Left">
            <summary>
            Bottom-left-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Right">
            <summary>
            Bottom-right-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Chin">
            <summary>
            Head-chin-front TOF sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TimeOfFlightSensors.Forehead">
            <summary>
            Head-forehead-front TOF sensor component.
            </summary>
        </member>
        <member name="T:BlueQuark.HDCamera">
            <summary>
            The robot Red-Green-Blue camera. You can easily open it with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCameraMode enumeration for more precision about resolution.
            </summary>
            <summary>
            The robot High Definition Red-Green-Blue camera. Can be easily opened with the Open() method.
            It automatically be Close() when quitting an application.
            See HDCameraMode enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.OnOpen">
            <summary>
            Called when the camera is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.OnClose">
            <summary>
            Called when the camera is closed.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.IsBusy">
            <summary>
            Returns true if the camera is opened or is processing any change.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Width">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.IsOpen">
            <summary>
            Returns true if the device is opened.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.HDCamera.Mode">
            <summary>
            Current mode of the device. 
            Set has no effect if the camera is not opened. Set during open will close and reopen the camera.
            </summary>
        </member>
        <member name="M:BlueQuark.HDCamera.Open(BlueQuark.HDCameraMode)">
            <summary>
            Open the device. May take a certain time.
            </summary>
            <param name="iMode">Mode to apply for the opening</param>
        </member>
        <member name="M:BlueQuark.HDCamera.Close">
            <summary>
            Close the device. May take a certain time.
            </summary>
        </member>
        <member name="M:BlueQuark.HDCamera.TakePhotograph(System.Action{BlueQuark.Photograph},System.Boolean,System.Boolean,BlueQuark.FlashLightMode)">
            <summary>
            Asynchrone take photo feature with an high definiton.
            </summary>
            <param name="iOnEndTakePhoto">The callback with the taken photo. The photo is null if the operation was not successful</param>
            <param name="iMakeSound">Set as false to make a silent photo. Default to true</param>
            <param name="iFlashMode">Set the flash mode. Will be supported on the next version</param>
        </member>
        <member name="T:BlueQuark.HDCameraMode">
            <summary>
            Resolution (width, height) of the HD RGB camera in pixels.
            </summary>
        </member>
        <member name="T:BlueQuark.Sensors">
            <summary>
            Module containing all robot sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.Battery">
            <summary>
            Battery component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.CliffSensors">
            <summary>
            Set of 7 cliff sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.DepthCamera">
            <summary>
            Depth camera component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.HDCamera">
            <summary>
            High definition RGB camera of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.IMU">
            <summary>
            Inertial Mesure Unit component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.InfraredCamera">
            <summary>
            Infrared camera of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.InfraredSensor">
            <summary>
            Back infrared sensor component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.Microphones">
            <summary>
            Microphones of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.TimeOfFlightSensors">
            <summary>
            Set of 6 infrared sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.RGBCamera">
            <summary>
            RGB camera component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.ThermalCamera">
            <summary>
            Thermal camera component of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.TouchSensors">
            <summary>
            Set of 6 close touch sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.UltrasonicSensors">
            <summary>
            Set of 2 ultra sonic sensors.
            </summary>
        </member>
        <member name="P:BlueQuark.Sensors.AstraCamera">
            <summary>
            Astra camera component. It contains Depth + RGB + Infrared camera components.
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalCamera">
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.OnNewFrame">
            <summary>
            Called when a new well formed frame is captured. 
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Frame">
            <summary>
            Current frame of the device.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Width">
            <summary>
            Width of the capture input. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Height">
            <summary>
            Height of the capture output. Value in pixels.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.AmbiantTemperature">
            <summary>
            Ambiant temperature. Value in degrees Celsius.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.ThermalCamera.VerticalFOV">
            <summary>
            The vertical field of view of the sensor . Value in degrees.
            </summary>
        </member>
        <member name="T:BlueQuark.TouchSensor">
            <summary>
            Touch sensor component of the robot. Useful to detect if a user is currently grasping or touching the robot on the head or dangerous zones.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.Value">
            <summary>
            Current value of the sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.OnTouch">
            <summary>
            Called when the sensor detect a touch.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensor.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="T:BlueQuark.TouchSensors">
            <summary>
            Set of 6 binary touch sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.RightShoulder">
            <summary>
            Right shoulder touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.LeftShoulder">
            <summary>
            Left shoulder touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.Heart">
            <summary>
            Heart touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.LeftHead">
            <summary>
            Top-head left touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.RightHead">
            <summary>
            Top-head right touch sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.TouchSensors.BackHead">
            <summary>
            Back-head touch sensor component.
            </summary>
        </member>
        <member name="T:BlueQuark.UltrasonicSensor">
            <summary>
            Ultrasonic component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an IR sensor.
            </summary>
            <summary>
            Ultrasonic component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an TOF sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.Value">
            <summary>
            Current value of the sensor. Value in millimeters.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.Orientation">
            <summary>
            Angle of the device. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.HorizontalFOV">
            <summary>
            The horizontal field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.VerticalFOV">
            <summary>
            The vertical field of view of the sensor. Value in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensor.Error">
            <summary>
            Error code. 0 is no error.
            </summary>
        </member>
        <member name="T:BlueQuark.UltrasonicSensors">
            <summary>
            Set of 3 ultra sound sensor components
            </summary>
            <summary>
            Set of 2 ultra sonic sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensors.Left">
            <summary>
            Bottom-front-left ultrasounic sensor component.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensors.Right">
            <summary>
            Bottom-front-right ultrasounic sensor component.
            </summary>
        </member>
        <member name="T:BlueQuark.Explorer">
            <summary>
            This class represents the sidebar menu of Buddy
            </summary>
            <summary>
            Component that handle the left sidebar menu of UI.
            </summary>
        </member>
        <member name="P:BlueQuark.Explorer.IsBusy">
            <summary>
            Returns true if the Explorer is displayed.
            </summary>
        </member>
        <member name="M:BlueQuark.Explorer.Open``1">
            <summary>
            Open the wished session.
            </summary>
            <typeparam name="S">Type of the Session to open.</typeparam>
            <seealso cref="T:BlueQuark.AppsSection"/>>
            <seealso cref="T:BlueQuark.CurrentUserSection"/>>
            <seealso cref="T:BlueQuark.FilesSection"/>>
            <seealso cref="T:BlueQuark.ParametersSection"/>>
            <seealso cref="T:BlueQuark.SecuritySection"/>>
            <seealso cref="T:BlueQuark.UsersSection"/>>
        </member>
        <member name="M:BlueQuark.Explorer.Close">
            <summary>
            Close the Explorer.
            </summary>
        </member>
        <member name="T:BlueQuark.Footer">
            <summary>
            The footer is a UI component handle bottom screen display. You can add custom widget or add builtin FWidgets.
            </summary>
        </member>
        <member name="M:BlueQuark.Footer.Hide">
            <summary>
            Remove all added widgets and hide the Footer.
            </summary>
        </member>
        <member name="M:BlueQuark.Footer.AddOnLeft(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer left side.
            </summary>
            <param name="iCustomGameObject">Gameobject to add.</param>
        </member>
        <member name="M:BlueQuark.Footer.AddOnMiddle(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer middle side.
            </summary>
            <param name="iCustomGameObject">Gameobject to add.</param>
        </member>
        <member name="M:BlueQuark.Footer.AddOnRight(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer right side.
            </summary>
            <param name="iCustomGameObject">Gameobject to add.</param>
        </member>
        <member name="M:BlueQuark.Footer.Remove(UnityEngine.GameObject)">
            <summary>
            Remove an added gameobject.
            </summary>
            <param name="iGameObject">Gameobject to remove.</param>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnLeft``1">
            <summary>
            Create and add on the Footer left side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnMiddle``1">
            <summary>
            Create and add on the Footer middle side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnRight``1">
            <summary>
            Create and add on the Footer right side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="M:BlueQuark.Footer.Remove``1(``0)">
            <summary>
            Remove a footer widget.
            </summary>
            <typeparam name="FW">Type of the widget.</typeparam>
            <param name="iFooterWidget">Widget to remove.</param>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnAccount``1">
            <summary>
            Create and add on the Footer left side a pre Footer built widget.
            </summary>
            <typeparam name="FW">Type of the footer widget to build.</typeparam>
            <returns>The fully built widget.</returns>
        </member>
        <member name="T:BlueQuark.FButton">
            <summary>
            Button widget for the Footer UI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.FButton.SetStroke(System.Boolean)">
            <summary>
            Display (or not) a stroke around the icon.
            </summary>
            <param name="iVal">Set as true to display the stroke, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetStrokeColor(UnityEngine.Color)">
            <summary>
            Sets the color of the stroke.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon of the component.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets the color of the component.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets the background icon of the component.
            </summary>
            <param name="iSprite">The sprite to set. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FButton.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background icon color.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="T:BlueQuark.FIcon">
            <summary>
            Icon for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FIcon.OnClick">
            <summary>
            Called when the icon is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.FIcon.SetStroke(System.Boolean)">
            <summary>
            Display (or not) a stroke around the icon.
            </summary>
            <param name="iVal">Set as true to display the stroke, false otherwise.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetStrokeColor(UnityEngine.Color)">
            <summary>
            Sets the color of the stroke.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetIcon(UnityEngine.Texture2D)">
            <summary>
            Sets the icon of the component.
            </summary>
            <param name="iTexture2D">The texture to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the icon of the component.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetIconColor(UnityEngine.Color)">
            <summary>
            Sets the color of the component.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets the background icon of the component.
            </summary>
            <param name="iSprite">The sprite to set. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FIcon.SetBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background icon color.
            </summary>
            <param name="iColor">The color to set.</param>
        </member>
        <member name="T:BlueQuark.FDropup">
            <summary>
            Drop up widget for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FDropup.OnSelect">
            <summary>
            Called when a dropup item is selected.
            </summary>
        </member>
        <member name="P:BlueQuark.FDropup.SelectedOption">
            <summary>
            Index of the currently selected item.
            </summary>
        </member>
        <member name="M:BlueQuark.FDropup.Add(UnityEngine.Sprite,System.Object)">
            <summary>
            Add a new item to the dropup.
            </summary>
            <param name="iImage">The sprite to display. Cannot be null.</param>
            <param name="iParameter">Optional parameter to store.</param>
        </member>
        <member name="M:BlueQuark.FDropup.Add(BlueQuark.FDropupInfo)">
            <summary>
            Add a new item to the dropup.
            </summary>
            <param name="iInfo">The info to add.</param>
        </member>
        <member name="T:BlueQuark.FDropupInfo">
            <summary>
            Dropup data for Footer GUI component
            </summary>
        </member>
        <member name="P:BlueQuark.FDropupInfo.Image">
            <summary>
            The sprite to display.
            </summary>
        </member>
        <member name="P:BlueQuark.FDropupInfo.Parameter">
            <summary>
            Optional parameter to store.
            </summary>
        </member>
        <member name="T:BlueQuark.FVerticalSlider">
            <summary>
            Slider bar for Footer GUI component.
            </summary>
        </member>
        <member name="P:BlueQuark.FVerticalSlider.OnSlide">
            <summary>
            Called when the value changed.
            </summary>
        </member>
        <member name="P:BlueQuark.FVerticalSlider.SlidingValue">
            <summary>
            The current sliding value.
            </summary>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button icon.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonIconColor(UnityEngine.Color)">
            <summary>
            Sets the color of the button icon.
            </summary>
            <param name="iColor">The color of the button icon</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonBackgroundIcon(UnityEngine.Sprite)">
            <summary>
            Sets background icon of the button.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetButtonBackgroundColor(UnityEngine.Color)">
            <summary>
            Sets the background color of the button.
            </summary>
            <param name="iColor">The color of the button background</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetSliderBackground(UnityEngine.Sprite)">
            <summary>
            Sets the background of the slider.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetSliderColor(UnityEngine.Color)">
            <summary>
            Sets the slider's color.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetFillBackground(UnityEngine.Sprite)">
            <summary>
            Sets th fill gauge background image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="M:BlueQuark.FVerticalSlider.SetFillColor(UnityEngine.Color)">
            <summary>
            Sets the fill gauge color.
            </summary>
            <param name="iColor">The color to set</param>
        </member>
        <member name="T:BlueQuark.Header">
            <summary>
            Utility toolbar on the top of the robot screen
            </summary>
            <summary>
            The footer is a UI component handle top screen display.
            </summary>
        </member>
        <member name="P:BlueQuark.Header.OnClickParameters">
            <summary>
            Callback called when the user click on the top right parameter button of an app.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.DisplayParametersButton(System.Boolean)">
            <summary>
            Activate/Deactivate the top right parameter app button. Active by default at app start.
            </summary>
            <param name="iVal">Activate or deactivate the object.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplaySpinningWheel(System.Boolean)">
            <summary>
            Activate/Deactivate the top right spinningwheel.
            </summary>
            <param name="iVal">Activate or deactivate the spinning wheel.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayBoldTitle(System.String)">
            <summary>
            Activate and display a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iText">Text to display, must not be null or empty.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayLightTitle(System.String)">
            <summary>
            Activate and display a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iText">Text to display, must not be null or empty.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayComplexTitle(System.String,System.String)">
            <summary>
            Activate and display a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iTopText">First part of the text (top-left). Can be null or empty but at least one argument must be consistent.</param>
            <param name="iBottomText">Third part of the text (bottom-left). Can be null or empty but at least one argument must be consistent.</param>
        </member>
        <member name="M:BlueQuark.Header.HideTitle">
            <summary>
            Hide any displayed title.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetCustomAppIcon(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set a custom top-left app icon.
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null.</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keep the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomNotificationsButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Font)">
            <summary>
            Set a custom top-right notification icon.
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null..</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keep the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
            <param name="iNbNotificationFont">Font of the unread notifcation number.</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomParametersButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set a custom top-right parameter icon
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null.</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keep the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomCloseButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set a custom top-right close icon
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null.</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255).</param>
            <param name="iBackground">Background icon. Keep the previous icon if null.</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255).</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomLightTitle(UnityEngine.Font)">
            <summary>
            Set a custom top-center light title.
            </summary>
            <param name="iFont">The text font.</param>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultAppIcon">
            <summary>
            Restore top-left app icon default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultNotificationsButton">
            <summary>
            Restore top-right notifications default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultParametersButton">
            <summary>
            Restore top-right notifications button default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultLightTitle">
            <summary>
            Restore top-center light title default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultCloseButton">
            <summary>
            Restore top-right close button default display parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.Header.DisplayAppIcon(System.Boolean)">
            <summary>
            Activate/Deactivate the top left app icon. Active by default at app start.
            </summary>
            <param name="iVal">Activate or deactivate the object.</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayAppLayout(BlueQuark.AppInfo)">
            <summary>
            Activate the header in app layout mode. Display close/parameter/appicon/.
            </summary>
            <param name="iApp">The app to setup.</param>
        </member>
        <member name="M:BlueQuark.Header.Hide">
            <summary>
            Hide all items. Except notification.
            </summary>
        </member>
        <member name="T:BlueQuark.AlertNotification">
            <summary>
            Represents a validation notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.AlertNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameters for alert notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnDelay">Callback function if the user click on delay.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="M:BlueQuark.AlertNotification.With(System.String,System.Action,System.Action,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameters for alert notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iIcon">Left side sprite icon.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnDelay">Callback function if the user click on delay.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="T:BlueQuark.ConfirmationNotification">
            <summary>
            Represents a confirmation notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.ConfirmationNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameter for a confirmation notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnRepeat">Delegate on repeat.</param>
            <param name="iTimer">Display time.</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="M:BlueQuark.ConfirmationNotification.With(System.String,System.Action,System.Action,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameter for a confirmation notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnCancel">Delegate on cancel.</param>
            <param name="iIcon">Left side icon.</param>
            <param name="iTimer">Display time.</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="T:BlueQuark.MessageNotification">
            <summary>
            Represents a message callback notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.MessageNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameters for a received message notifcation.
            </summary>
            <param name="iText">The text to display.</param>
            <param name="iOnValidate">Delegate on validate.</param>
            <param name="iOnReply">Callback method if user click on response.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="T:BlueQuark.SimpleNotification">
            <summary>
            Represents a basic notification on the Top of the robot screen.
            </summary>
        </member>
        <member name="M:BlueQuark.SimpleNotification.With(System.String,System.Single)">
            <summary>
            Specify parameters for simple notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="M:BlueQuark.SimpleNotification.With(System.String,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameters for simple notification.
            </summary>
            <param name="iText">Text to display.</param>
            <param name="iIcon">Left side sprite icon.</param>
            <param name="iTimer">Display time.</param>
        </member>
        <member name="T:BlueQuark.Notifier">
            <summary>
            Display manager for notification on the top of the robot screen.
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.IsBusy">
            <summary>
            Returns true if the notifier is processing/displaying something.
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.DisplayedNotificationID">
            <summary>
            Returns the ID of current displayed notification.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Display``1">
            <summary>
            Display the typed notification. After this call, use immediatly the With method to specify notification arguments.
            </summary>
            <typeparam name="N">Type of the notification. Meteo, timer, confirmation ...</typeparam>
            <returns>The not that will be displayed.</returns>
        </member>
        <member name="M:BlueQuark.Notifier.DisplayUnread">
            <summary>
            Display all unread notifications.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.DisplayUnread(System.Int32)">
            <summary>
            Display an unread notification given a particular ID. If the notification isn't found, nothing is displayed.
            </summary>
            <param name="iID">ID of the notification.</param>
        </member>
        <member name="M:BlueQuark.Notifier.RemoveUnread(System.Int32)">
            <summary>
            Remove an unread notification from its id.
            </summary>
            <param name="iID">ID of the notification.</param>
        </member>
        <member name="M:BlueQuark.Notifier.HideOrRemove(System.Int32)">
            <summary>
            Remove from unread an unread notification or hide it if currently displayed.
            </summary>
            <param name="iID">ID of the notification.</param>
        </member>
        <member name="M:BlueQuark.Notifier.Hide">
            <summary>
            Hide the current displayed notification(s).
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Select(BlueQuark.Internal.NBox)">
            <summary>
            Set the specified notification as selected and unselect any other notification.
            </summary>
            <param name="iNotification">Notification to select</param>
        </member>
        <member name="M:BlueQuark.Notifier.CloseCurrentNotification">
            <summary>
            Close the current selected notification.
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.CloseAndRemoveCurrentNotification">
            <summary>
            Close and remove the current selected notification.
            </summary>
        </member>
        <member name="T:BlueQuark.Toaster">
            <summary>
            The Toaster component is the main tool to display GUI elements at the center of the screen in a unified way.
            These GUI elements are gather inside Toast.
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.IsBusy">
            <summary>
            Returns True if the Toaster is displaying.
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.DisplayedToastID">
            <summary>
            Returns the ID of current displayed toast.
            </summary>
        </member>
        <member name="M:BlueQuark.Toaster.Display``1">
            <summary>
            Queue the wished toast parameter. It will displayed as soon as possible after any previous queued toasts or slides. 
            Built in toast can be set by using the method With(args) like this : Display().With(toast_args).
            Toasts are displayed until Toaster.Hide() is called.
            </summary>
            <typeparam name="T">Type of toast.</typeparam>
            <returns>The toast info to argument with the method With(args).</returns>
            <seealso cref="M:BlueQuark.Toaster.Hide"/>>
        </member>
        <member name="M:BlueQuark.Toaster.DisplaySlide">
            <summary>
            Queue a slide set of toast. It will be displayed as soon as possible after any previous queued toasts or slides.
            Slides are displayed until Toaster.Hide() is called.
            </summary>
            <returns>Returns the SlideSet dislpayed</returns>*
            <seealso cref="T:BlueQuark.SlideSet"/>
        </member>
        <member name="M:BlueQuark.Toaster.Hide">
            <summary>
            Hide the displayed toast.
            </summary>
        </member>
        <member name="T:BlueQuark.ParameterToast">
            <summary>
            Represents a toast composed by an horizontal capsule with many paramters.
            </summary>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast})">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.String,System.Action,System.String)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.String,System.Action,System.String,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,System.String,System.Action,System.String,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,System.String,System.Action,System.String)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,System.String,System.Action,System.String,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,System.String,System.Action,System.String,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftLabel">Left label text to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightLabel">Right label text to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.With(System.Action{BlueQuark.ParameterToast},UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,UnityEngine.Sprite,System.Action,System.Action,System.Action)">
            <summary>
            Set toast parameters.
            </summary>
            <param name="iOnBuildWidgets">Use this callback to create capsule widget with CreateWidget() method. Callback called when the toast is displayed.</param>
            <param name="iTopIcon">Top icon to display.</param>
            <param name="iOnClickLeft">Callback called when left button is clicked.</param>
            <param name="iLeftIcon">Left icon to display.</param>
            <param name="iOnClickRight">Callback called when right button is clicked.</param>
            <param name="iRightIcon">Right icon to display.</param>
            <param name="iOnDisplay">Callback called when the toast is displayed.</param>
            <param name="iOnHide">Callback called when the toast is hidden.</param>
            <param name="iOnSideClick">Callback called when the user click on the side during toast display.</param>
            <returns>GUID of the toast.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.CreateWidget``1">
            <summary>
            Creates and adds the wished capsule widget to the capsule (top -> down)
            </summary>
            <typeparam name="T">Type of the capsule widget</typeparam>
            <returns>The wished widget.</returns>
        </member>
        <member name="M:BlueQuark.ParameterToast.RemoveWidget``1(``0)">
            <summary>
            Remove the specified widget from the running capsule
            </summary>
            <typeparam name="T">Type of the capsule widget</typeparam>
            <param name="iWidget">The widget to remove.</param>
            <returns>True if the widget has been correctly removed.</returns>
        </member>
        <member name="T:BlueQuark.TButton">
            <summary>
            Represents a button to add inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TButton.OnClick">
            <summary>
            Called when the button is clicked.
            </summary>
        </member>
        <member name="M:BlueQuark.TButton.SetActive(System.Boolean)">
            <summary>
            Enable/Disable the button for interaction.
            </summary>
        </member>
        <member name="M:BlueQuark.TButton.SetLabel(System.String)">
            <summary>
            Sets the button labels.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TButton.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets the button image.
            </summary>
            <param name="iSprite">The sprite to display. Cannot be null.</param>
        </member>
        <member name="P:BlueQuark.TPasswordField.OnChangeValue">
            <summary>
            Called when the value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TPasswordField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.TPasswordField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TPasswordField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TSlider">
            <summary>
            Represents a gauge system for capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.OnSlide">
            <summary>
            Called when the sliding value is changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TSlider.SlidingValue">
            <summary>
            The current selected sliding value.
            </summary>
        </member>
        <member name="T:BlueQuark.TTextBox">
            <summary>
            Same as TTextField toaster widget but for larger text. For capsule layout only.
            </summary>
            <seealso cref="T:BlueQuark.TTextField"/>>
        </member>
        <member name="P:BlueQuark.TTextBox.OnChangeValue">
            <summary>
            Called when the text value has changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TTextBox.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.TTextBox.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TTextBox.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TTextField">
            <summary>
            Represents a text field to add inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TTextField.OnChangeValue">
            <summary>
            Called when the text value has changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TTextField.OnEndEdit">
            <summary>
            Called when the user clicked out from the textfield.
            </summary>
        </member>
        <member name="M:BlueQuark.TTextField.SetPlaceHolder(System.String)">
            <summary>
            Sets the default text displayed when no user text is set.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="M:BlueQuark.TTextField.SetIcon(UnityEngine.Sprite)">
            <summary>
            Sets text field image.
            </summary>
            <param name="iSprite">The sprite to display. Null to hide.</param>
        </member>
        <member name="M:BlueQuark.TTextField.SetText(System.String)">
            <summary>
            Sets the default input text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TText">
            <summary>
            Represents a simple text to display inside a capsule layout.
            </summary>
        </member>
        <member name="M:BlueQuark.TText.SetLabel(System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.TToggle">
            <summary>
            Represents a simple radio button to add inside a capsule layout.
            </summary>
        </member>
        <member name="P:BlueQuark.TToggle.OnToggle">
            <summary>
            Called when the value of the toggle was changed.
            </summary>
        </member>
        <member name="P:BlueQuark.TToggle.ToggleValue">
            <summary>
            Current value of the toggle.
            </summary>
        </member>
        <member name="M:BlueQuark.TToggle.SetLabel(System.String)">
            <summary>
            Sets the toggle label.
            </summary>
            <param name="iText">The text to display.</param>
        </member>
        <member name="T:BlueQuark.GUI">
            <summary>
            Graphical User Interface module. Contains all UI and display components.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Screen">
            <summary>
            General purpose screen handling. Layer 1000.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Dialoger">
            <summary>
            Popup managing, display dialog box. Layer 500.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Notifier">
            <summary>
            Top screen notification manager. Layer 400.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Explorer">
            <summary>
            Left side menu. Layer 300.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Header">
            <summary>
            Top screen buttons. Layer 210.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Footer">
            <summary>
            Bottom screen buttons. Layer 210.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Toaster">
            <summary>
            Middle screen buttons and layouts. Layer 200.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Loader">
            <summary>
            Loader GUI class handle loading screen when an app must be loaded.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.FakeSpeecher">
            <summary>
            The FakeSpeecher is the input text bar to type a fake input speech text. Can be displayed/hide with Enter key.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Waver">
            <summary>
            Lateral face waves handler.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackParamArray`1">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="T:BlueQuark.HSVColor">
            <summary>
            Structure containing HSV values for a color.
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.H">
            <summary>
            The "Hue" value (between 0 and 1).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.S">
            <summary>
            The "Saturation" value (between 0 and 1).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.V">
            <summary>
            The "Brightness" value (between 0 and 1).
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray.Add(System.Action)">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray.Remove(System.Action)">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray.FireEvent">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray`1">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray`1.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.Add(System.Action{`0})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.AddP(System.Predicate{`0})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.Remove(System.Action{`0})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.RemoveP(System.Predicate{`0})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`1.FireEvent(`0)">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray`2">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray`2.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.Add(System.Action{`0,`1})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.Remove(System.Action{`0,`1})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`2.FireEvent(`0,`1)">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.CallbackArray`3">
            <summary>
            Linear data structure to store and execute action (ie : callbacks) on demand.
            </summary>
        </member>
        <member name="P:BlueQuark.CallbackArray`3.Count">
            <summary>
            Number of currently stored callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.Add(System.Action{`0,`1,`2})">
            <summary>
            Adds a callback to the list.
            </summary>
            <param name="iCallback">Callback to add. Cannot be null</param>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.Remove(System.Action{`0,`1,`2})">
            <summary>
            Removes the specified callback.
            </summary>
            <param name="iToRemoveCallback">The callback to remove</param>
            <returns>True if the remove was effective</returns>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.Clear">
            <summary>
            Remove all callbacks.
            </summary>
        </member>
        <member name="M:BlueQuark.CallbackArray`3.FireEvent(`0,`1,`2)">
            <summary>
            Trigger all callbacks.
            </summary>
        </member>
        <member name="T:BlueQuark.JSONNodeType">
            <summary>
            Represents a json node type.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.Array">
            <summary>
            Array.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.Object">
            <summary>
            Object.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.Number">
            <summary>
            Number.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.NullValue">
            <summary>
            Null value.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.Boolean">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:BlueQuark.JSONNodeType.None">
            <summary>
            /None.
            </summary>
        </member>
        <member name="T:BlueQuark.JSONNode">
            <summary>
            Represents a base json node class.
            </summary>
        </member>
        <member name="T:BlueQuark.LogInfo">
            <summary>
            Represents a kind of log error/event
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.BAD_ARGUMENT">
            <summary>
            The input argument is bad.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.BAD_FORMAT">
            <summary>
            The input argument has a bad format. Specific for parsing purposes.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.NULL_VALUE">
            <summary>
            The value is null. Use BAD_ARGMENT for input arguments.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.OUT_OF_BOUND">
            <summary>
            An out of bound problem arised.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ENABLED">
            <summary>
            The process is enabled.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DISABLED">
            <summary>
            The process is disabled.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.BUSY">
            <summary>
            The process cannot perform something immediatly because it is busy.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.TIME_OUT">
            <summary>
            A time out problem arised.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RUNNING">
            <summary>
            Attempt to start an heavy process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.COMPILING">
            <summary>
            Attempt to start a compilation process
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.COMPUTING">
            <summary>
            Attempt to start an heavy computing process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.STOPPING">
            <summary>
            Stopping an heavy process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UPLOADING">
            <summary>
            Uploading a file to the WWW.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DOWNLOADING">
            <summary>
            Uploading a file from the WWW.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.SENDING">
            <summary>
            Sending a data through any communication mechanism.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.LOADING">
            <summary>
            Loading a resource.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UNLOADING">
            <summary>
            Unloading a resource.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RETRIEVING">
            <summary>
            Retrieving a process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.RELEASING">
            <summary>
            Releasing a process.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.UNAUTHORIZED">
            <summary>
            Unauthorized to do this.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ALREADY_EXISTS">
            <summary>
            This element already exsist.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.ACCESSING">
            <summary>
            Attempt to access a resource.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.NOT_FOUND">
            <summary>
            The resource was not found in that place.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.READING">
            <summary>
            Attempt to read something from solid drive.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.WRITING">
            <summary>
            Attempt to write something in solid drive.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DELETING">
            <summary>
            Attempt to delete something from solid drive.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.SYNCHRONIZING">
            <summary>
            Attempt to synchronize.
            </summary>
        </member>
        <member name="F:BlueQuark.LogInfo.DESYNCHRONIZED">
            <summary>
            A desynchonization between many process has been detected.
            </summary>
        </member>
        <member name="T:BlueQuark.LogStatus">
            <summary>
            Represents the status of the log situation
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.INFO">
            <summary>
            The log is just a basic info.
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.START">
            <summary>
            The log signals that a specific process is starting.
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.SUCCESS">
            <summary>
            The log signals that a started process has succeed.
            </summary>
        </member>
        <member name="F:BlueQuark.LogStatus.FAILURE">
            <summary>
            The log signals that a process cannot be done due to some error.
            </summary>
        </member>
        <member name="T:BlueQuark.ExtLogModule">
            <summary>
            Represents an external module from the OS.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.OPENCVUNITY">
            <summary>
            Inside the OpenCVUnity library.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.BLUEQUARK_EDITOR">
            <summary>
            Inside the BlueQuark Editor libraries.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.APP">
            <summary>
            Inside a running application.
            </summary>
        </member>
        <member name="F:BlueQuark.ExtLogModule.APP_EDITOR">
            <summary>
            Inside an app editor process.
            </summary>
        </member>
        <member name="T:BlueQuark.Utils">
            <summary>
            Common tools, serialization, mathematic functions and conversions.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_SCALAR_32">
            <summary>
            Buddy color (cyan like in 32 bits color).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_SCALAR">
            <summary>
            Buddy color (cyan like in floating point values).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_32">
            <summary>
            Buddy color (cyan like in 32 bits color).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR">
            <summary>
            Buddy color (cyan like in floating point values).
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_COLOR_32">
            <summary>
            Gray color used in UI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_COLOR">
            <summary>
            Gray color used in UI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.SECOND_IN_MILLISECOND">
            <summary>
            1000.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.MINUTE_IN_MILLISECOND">
            <summary>
            60 * 1000.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.MINUTE_IN_SECOND">
            <summary>
            60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.HOUR_IN_SECOND">
            <summary>
            60 * 60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.DAY_IN_SECOND">
            <summary>
            24 * 60 * 60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.WEEK_IN_SECOND">
            <summary>
            7 * 24 * 60 * 60.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.PI">
            <summary>
            PI.
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.PI_D">
            <summary>
            PI.
            </summary>
        </member>
        <member name="M:BlueQuark.Utils.GetNearestColor(UnityEngine.Color32)">
            <summary>
            Gets the nearest color.
            </summary>
            <param name="iColor">The color.</param>
            <returns>The shade color.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetNearestColor(BlueQuark.ShadeColor)">
            <summary>
            Gets the nearest color.
            </summary>
            <param name="iColor">The shade color.</param>
            <returns>The nearest color.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Color32ToColor(UnityEngine.Color32)">
            <summary>
            Converts 32color to color.
            </summary>
            <param name="iColor">the color32</param>
            <returns>The color.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringToBytes(System.String)">
            <summary>
            Converts a string to bytes.
            </summary>
            <param name="iStr">The string to convert.</param>
            <returns>The byte result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.BytesToString(System.Byte[])">
            <summary>
            Convert a byte array to a string.
            </summary>
            <param name="iBytes">The bytes array to convert.</param>
            <returns>The string result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RGBToHSV(UnityEngine.Color)">
            <summary>
            Converts a color to HSVColor.
            </summary>
            <param name="iColor">The color to convert.</param>
            <returns>The HSVColor.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Makes a sub array from a data list.
            </summary>
            <typeparam name="T">The type of the subarray.</typeparam>
            <param name="iData">The datas of each elements.</param>
            <param name="iIndex">The index start of the data list.</param>
            <param name="iLength">The lenght value of the data list.</param>
            <returns>The sub array.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringArrayToJavaObj(System.String[])">
            <summary>
            Converts a string array to a java object.
            </summary>
            <param name="iArray">The list of string.</param>
            <returns>The java object.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RemapDepthToRGB(OpenCVUnity.Mat,OpenCVUnity.Mat,System.Int16,System.Int16)">
            <summary>
            Remaps depth to rgb.
            </summary>
            <param name="iDepthFrame">The depth frame.</param>
            <param name="iRGBFrame">The rgb frame.</param>
            <param name="iMinRange">The minimal range.</param>
            <param name="iMaxRange">The maximal range.</param>
            <returns>The remaped depth to rgb.</returns>
        </member>
        <member name="M:BlueQuark.Utils.LoadTexture(System.Byte[])">
            <summary>
            Loads a byte array to a Texture2D.
            </summary>
            <param name="iData">The data of a picture.</param>
            <returns>The texture2D.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CreateSprite(System.Byte[],System.Single,UnityEngine.SpriteMeshType)">
            <summary>
            Creates a sprite from a byte array.
            </summary>
            <param name="iData">The byte array of the pic.</param>
            <param name="iPixelsPerUnit">The pixel per unit of the pic.</param>
            <param name="iSpriteType">The sprite type.</param>
            <returns>The sprite.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ScaleTexture2DFromMat(OpenCVUnity.Mat,UnityEngine.Texture2D)">
            <summary>
            Creates / scales the input texture accordingly from the input mat.
            </summary>
            <param name="iMat">Input matrix, only the size will be considered.</param>
            <param name="iTexture">The created/resized texture.</param>
            <returns>The created/resized texture.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Save(System.String,OpenCVUnity.Mat[],System.Single)">
            <summary>
            Saves the video in the Data folder.
            </summary>
            <param name="iPath">name of the video file to save to.</param>
            <param name="iListMat">list of mat that will be stored in the video file.</param>
            <param name="iFps">framerate of the video file.</param>
        </member>
        <member name="M:BlueQuark.Utils.Save(System.String,UnityEngine.AudioClip)">
            <summary>
            Saves the audio clip into a wav file in the data directory.
            </summary>
            <param name="iPath">Full path name which will be used to save tha audio file.</param>
            <param name="iClip">audioclip that will be saved.</param>
            <returns>true if file saved.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TrimSilence(UnityEngine.AudioClip,System.Single)">
            <summary>
            Trims the beginning and end of an audioclip that can be considered as a silence.
            </summary>
            <param name="iClip">the audioclip to be trimmed.</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence.</param>
            <returns>the audioclip trimmed.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TrimSilence(System.Collections.Generic.List{System.Single},System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trims the beginning and end of an audioclip that can be considered as a silence.
            </summary>
            <param name="iSamples">samples of an audioclip.</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence.</param>
            <param name="iSpeakers">number of Speakers per frame.</param>
            <param name="iFrequency">sample frequency of clip.</param>
            <param name="iStreamed">true if clip is streamed.</param>
            <returns>the audioclip trimmed.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Combine(UnityEngine.AudioClip[])">
            <summary>
            Combines several audioclip into one.
            </summary>
            <param name="iClips">the array of audioclips.</param>
            <returns>the audioclip obtained from the comination of several audioclips.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeCSV(System.String,System.Object[])">
            <summary>
            Serializes objects inside the specified file.
            </summary>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeCSV(System.String,System.Char)">
            <summary>
            Loads the list of item from the specified csv file.
            </summary>
            <param name="iPath">File to load from.</param>
            <param name="iSeparator">Separator token, ';' by default.</param>
            <returns>The list of item. One string array per line.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeXML``1(``0,System.String)">
            <summary>
            Serializes an object.
            </summary>
            <typeparam name="T">Type of the object to serialize.</typeparam>
            <param name="iSerializableObject">Object to serialize.</param>
            <param name="iPath">Path to the file.</param>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeXML``1(System.String)">
            <summary>
            Deserializes an xml file into an object.
            </summary>
            <typeparam name="T">Type of the objet to deserialize.</typeparam>
            <param name="iPath">Path to the file.</param>
            <returns>The created object from the XML. Null if unexisting/bad file or bad filename.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uncompress(System.String,System.String)">
            <summary>
            Unzips the specified file to the specified location.
            </summary>
            <param name="iZipFilePath">Zip file location.</param>
            <param name="iLocation">Location to unzip.</param>
        </member>
        <member name="M:BlueQuark.Utils.Compress(System.String,System.String[])">
            <summary>
            Creates a zip file with the specified files.
            </summary>
            <param name="iZipFileName">Zip file location.</param>
            <param name="iFilesAndFolder">File or folder path to add into the zip.</param>
        </member>
        <member name="M:BlueQuark.Utils.UpperFirst(System.String)">
            <summary>
            Makes the first character to upper case.
            </summary>
            <param name="iString">The input string to upper first.</param>
            <returns>The string with an upper first character.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String[])">
            <summary>
            Tells if iSpeech contains one of iListSpeech element.
            </summary>
            <param name="iSpeech">The speech.</param>
            <param name="iListSpeech">The list of speech.</param>
            <returns>True if the given speech is in the speech list.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Tells if given speech list contains one of iListSpeech element.
            </summary>
            <param name="iSpeech">The speech.</param>
            <param name="iListSpeech">The list of speech.</param>
            <returns>True if the given speech is in the speech list.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ContainsOneOf(System.String,System.String)">
            <summary>
            Tells if iSpeech contains one of Phonetics from the dico value given by the key iKeySpeech.
            </summary>
            <param name="iSpeech">The speech.</param>
            <param name="iKeySpeech">The keyspeech.</param>
            <returns>True if the speech contains one of phonetics from the keyspeech.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetRealStartRule(System.String)">
            <summary>
            Changes format of the StartRule (startrule#yes -> yes).
            </summary>
            <param name="iStartRuleVocon">Old format.</param>
            <returns>New format.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetRule(BlueQuark.SpeechInput)">
            <summary>
            Changes format of the StartRule (startrule#yes -> yes).
            </summary>
            <param name="iSpeechInput">Old format.</param>
            <returns>New format.</returns>
        </member>
        <member name="M:BlueQuark.Utils.NL2Operator(System.String)">
            <summary>
            This function replaces Natural Language by operator symbol in a sentence.
            </summary>
            <param name="iSpeech">The speech.</param>
            <returns>The formated string.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringToEnum``1(System.String)">
            <summary>
            This function convert a string into an enum element.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <param name="iSpeech">The string.</param>
            <returns>The enum element.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringToDate(System.String)">
            <summary>
            Converts the string date into DateTime.
            Currently works for French and English.
            Returns default datetime if format not respected.
            </summary>
            <param name="iDate">The date.</param>
            <returns>The DateTime.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Month2Int(System.String)">
            <summary>
            Converts a month given as a string to an int.
            Currently works with French and English.
            </summary>
            <param name="iMonth">The month.</param>
            <returns>The month value. Returns 1 by default.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CollectionToString``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Converts an T element array to a string. Elements are separate with a coma (without space).
            </summary>
            <typeparam name="T">Type of element inside the array.</typeparam>
            <param name="iArray">The array.</param>
            <param name="iSeparator">Between element separator in the final string. Space by default.</param>
            <returns>the string value of the array.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetFolderPath(System.String)">
            <summary>
            Gets The absolute path of the input folder.
            </summary>
            <param name="iFolderToFind">The folder.</param>
            <returns>The absolute path of the folder from Application.dataPath.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory with its subdir.
            </summary>
            <param name="iFolderName">Path to the directory.</param>
        </member>
        <member name="M:BlueQuark.Utils.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies a directory content to another location.
            </summary>
            <param name="iSourceDirName">Path to the source directory.</param>
            <param name="iDestDirName">Path to the destination directory.</param>
            <param name="iCopySubDirs">True if it must copy sub directories.</param>
        </member>
        <member name="M:BlueQuark.Utils.StructureToByteArray``1(``0,System.Int32)">
            <summary>
            Converts a structure into bytes array with marshaling.
            </summary>
            <typeparam name="T">Type of the structure;</typeparam>
            <param name="iStructure">The structure to convert.</param>
            <param name="iLength">The size of the structure. Must be specified for a complex structure.</param>
            <returns>The data representation of the structure.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value.</param>
            <param name="iX2">Second value.</param>
            <param name="iAlpha">Must be between 0 and 1.</param>
            <returns>The interpolate value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value.</param>
            <param name="iX2">Second value.</param>
            <param name="iAlpha">Must be between 0 and 1.</param>
            <returns>The interpolate value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Gaussian(System.Single,System.Single,System.Single)">
            <summary>
            Computes the gaussian probability based on iMean with a iStd standart deviation.
            </summary>
            <param name="iMean">Mean of the gaussian.</param>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The gaussian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Gaussian(System.Double,System.Double,System.Double)">
            <summary>
            Computes the gaussian probability based on iMean with a iStd standart deviation.
            </summary>
            <param name="iMean">Mean of the gaussian.</param>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The gaussian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SimpleGaussian(System.Single,System.Single)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0 with a standart deviation of 1.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The simplified gausian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SimpleGaussian(System.Double,System.Double)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0 with a standart deviation of 1.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The simplified gausian probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uniform(System.Single,System.Single,System.Single)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value.</param>
            <param name="iB">Upper value.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The uniform probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uniform(System.Double,System.Double,System.Double)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value.</param>
            <param name="iB">Upper value.</param>
            <param name="iValue">Value to compute.</param>
            <returns>The uniform probability of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Hysteresis(System.Single,System.Single)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis.</param>
            <param name="iValue">Input value to be computed.</param>
            <returns>The delay value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Hysteresis(System.Double,System.Double)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis.</param>
            <param name="iValue">Input value to be computed.</param>
            <returns>The delay value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sigmoide(System.Single,System.Single,System.Single)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation.</param>
            <param name="iCenter">The centered value of the function.</param>
            <param name="iValue">The input value.</param>
            <returns>The Sigmoid value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sigmoide(System.Double,System.Double,System.Double)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation.</param>
            <param name="iCenter">The centered value of the function.</param>
            <param name="iValue">The input value.</param>
            <returns>The Sigmoid value of iValue.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2.
            </summary>
            <param name="iV1">From vector.</param>
            <param name="iV2">To vector.</param>
            <returns>The signed angle in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position.</param>
            <param name="iP1">Second position, where the acute angle will be computed.</param>
            <param name="iP2">Third position.</param>
            <returns>The acute angle at the point iP1 in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions.</param>
            <returns>The acute angle at the point iPositions[1] in degrees.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes an lower and upper Threshold on the iValue.
            </summary>
            <param name="iInf">The lower thresold.</param>
            <param name="iSup">The upper thresold.</param>
            <param name="iValue">The value to be Thresholded.</param>
            <returns>The thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Int32,System.Int32)">
            <summary>
            Makes an lower Threshold on the iValue.
            </summary>
            <param name="iInf">The lower thresold.</param>
            <param name="iValue">The value to be Thresholded.</param>
            <returns>The Thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Single,System.Single,System.Single)">
            <summary>
            Makes an lower and upper Threshold on the iValue.
            </summary>
            <param name="iInf">The lower thresold.</param>
            <param name="iSup">The upper thresold.</param>
            <param name="iValue">The value to be Thresholded.</param>
            <returns>The trhesholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Single,System.Single)">
            <summary>
            Makes an lower Threshold on the iValue.
            </summary>
            <param name="iInf">The lower thresold.</param>
            <param name="iValue">The value to be Thresholded.</param>
            <returns>The Thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Single)">
            <summary>
            Computes the Rectified Linear Unit (ReLU) of iValue.
            </summary>
            <remarks>
            Quite similar to ln(1 + exp(x)) but faster to compute.
            </remarks>
            <param name="iValue">The value.</param>
            <returns>The Thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Double,System.Double,System.Double)">
            <summary>
            Makes an lower and upper Threshold on the iValue.
            </summary>
            <param name="iInf">The lower thresold.</param>
            <param name="iSup">The upper thresold.</param>
            <param name="iValue">The value to be Thresholded.</param>
            <returns>The thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Double,System.Double)">
            <summary>
            Makes an lower Threshold on the iValue.
            </summary>
            <param name="iInf">The lower thresold.</param>
            <param name="iValue">The value to be Thresholded.</param>
            <returns>The Thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Double)">
            <summary>
            Computes the Rectified Linear Unit (ReLU) of iValue.
            </summary>
            <remarks>
            Quite similar to ln(1 + exp(x)) but faster to compute.
            </remarks>
            <param name="iValue">The value.</param>
            <returns>The Thresholded value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps between min and max.
            </summary>
            <typeparam name="T">The type of param.</typeparam>
            <param name="val">The value.</param>
            <param name="min">The min value.</param>
            <param name="max">The max value.</param>
            <returns>The camp result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.AngleDeg(UnityEngine.Vector3)">
            <summary>
            Angle in degree.
            </summary>
            <param name="iVec">The vector.</param>
            <returns>The angle of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.AngleDeg(UnityEngine.Vector2)">
            <summary>
            Angle in degree.
            </summary>
            <param name="iV">The vector.</param>
            <returns>The angle of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Position(UnityEngine.Vector3)">
            <summary>
            Angle in degree.
            </summary>
            <param name="iVec">The vector.</param>
            <returns>The angle of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Norm(UnityEngine.Vector2)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="iVec">The vector to normalize.</param>
            <returns>The float of the normalized vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Average(System.Collections.Generic.List{OpenCVUnity.Point})">
            <summary>
            Makes an average of a point list.
            </summary>
            <param name="iPoints">The list of points.</param>
            <returns>The average point;</returns>
        </member>
        <member name="M:BlueQuark.Utils.AngleRad(UnityEngine.Vector3)">
            <summary>
            Angle in radian.
            </summary>
            <param name="iVec">The vector.</param>
            <returns>The radian of the vector.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(UnityEngine.Vector3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(UnityEngine.Vector2[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(OpenCVUnity.Point[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(OpenCVUnity.Point3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle.</param>
            <returns>The radius of the circle.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Single[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Double[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Single,System.Single)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate.</param>
            <param name="iY">Y value of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Double,System.Double)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate.</param>
            <param name="iY">Y value of the coordinate.</param>
            <returns>Polar coordinate (Rau, Theta).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Single[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Double[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Single,System.Single)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate.</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Double,System.Double)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate.</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate.</param>
            <returns>Cartesian coordinate (x, y).</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Int16)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Int32)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Single)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Double)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value.</param>
            <returns>The degree value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DegreesToRad(System.Single)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DegreesToRad(System.Double)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value.</param>
            <returns>The radian value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Texture2DToMat(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Converts the input Unity texture 2D into a OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture to convert.</param>
            <param name="iType">The type of the output mat.</param>
            <returns>The Mat of the texture 2D.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetMatFromFile(System.String,System.Int32)">
            <summary>
            Gets a Mat from a specific file (absolute path).
            Works with JPG and PNG.
            </summary>
            <param name="iFilename">The name of the file to convert.</param>
            <param name="iType">The type of the output Mat.</param>
            <returns>Mat of the file.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetTextureFromFile(System.String)">
            <summary>
            Gets a Texture 2D from a specific file (absolute path).
            Works with JPG and PNG
            </summary>
            <param name="iFilename">The name of the file to convert.</param>
            <returns>Texture 2D of the file.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SaveTextureToFile(UnityEngine.Texture2D,System.String)">
            <summary>
            Saves a texture to a file.
            </summary>
            <param name="iTexture">The texture2D to save.</param>
            <param name="iPath">The path where to save.</param>
        </member>
        <member name="M:BlueQuark.Utils.SaveSpriteToFile(UnityEngine.Sprite,System.String)">
            <summary>
            Saves a sprite to a file.
            </summary>
            <param name="iSprite">The sprite to save;</param>
            <param name="iPath">The path where to save.</param>
        </member>
        <member name="M:BlueQuark.Utils.SaveMatToFile(OpenCVUnity.Mat,System.String)">
            <summary>
            Saves a mat to a file.
            </summary>
            <param name="iMat">The mat to save.</param>
            <param name="iPath">The path where to save.</param>
        </member>
        <member name="M:BlueQuark.Utils.MatToColor32(OpenCVUnity.Mat,System.Byte[],UnityEngine.Color32[])">
            <summary>
            Gets an array of Color32 from a OpenCVUnity Mat.
            </summary>
            <param name="iMat">The original mat.</param>
            <param name="iBuff">The data buffer of the mat.</param>
            <param name="iData32">The output color32 array.</param>
        </member>
        <member name="M:BlueQuark.Utils.MatToTexture2D(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert.</param>
            <returns>The texture 2D of the mat.</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToColor32(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an array of Color32.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert.</param>
            <returns>The Color32 array of the mat.</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToTexture2D(OpenCVUnity.Mat,UnityEngine.Texture2D,UnityEngine.Color32[])">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            </summary>
            <param name="iMat">The mat to convert.</param>
            <param name="iTexture2D">The output texture2D.</param>
            <param name="iBufferColors">The colors32 array of the texture.</param>
        </member>
        <member name="M:BlueQuark.Utils.Texture2DToMat(UnityEngine.Texture2D,OpenCVUnity.Mat)">
            <summary>
            Converts an Unity Texture2D into an OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture 2D to convert.</param>
            <param name="iMat">The output OpenCVUnity Mat.</param>
        </member>
        <member name="M:BlueQuark.Utils.WebCamTextureToMat(UnityEngine.WebCamTexture,OpenCVUnity.Mat,UnityEngine.Color32[])">
            <summary>
            Converts an Unity WebcamTexture into an OpenCVUnity Mat.
            </summary>
            <param name="iWebCamTexture">The webcamtexture to convert.</param>
            <param name="iMat">The output OpenCVUnity Mat.</param>
            <param name="iBufferColors">The color32 array of the input texture2D.</param>
        </member>
        <member name="M:BlueQuark.Utils.RotateMat(OpenCVUnity.Mat,OpenCVUnity.Mat,System.Double,OpenCVUnity.Scalar)">
            <summary>
            Makes a rotation of iSrc to iDst of a iAngle.
            </summary>
            <param name="iSrc">Input mat.</param>
            <param name="iDst">Output mat.</param>
            <param name="iAngle">Angle in degrees.</param>
            <param name="iBackgroundColor">Background color.</param>
        </member>
        <member name="M:BlueQuark.Utils.SanityCheck(OpenCVUnity.Mat)">
            <summary>
            Checks inside the first Speaker of each pixel of a matrix for unwanted value (infinity and NaN).
            </summary>
            <param name="iMat">The matrix to check in.</param>
            <returns>False if there is a bad value.</returns>
        </member>
        <member name="M:BlueQuark.Utils.DrawCustomRect(OpenCVUnity.Mat,OpenCVUnity.Rect,System.String,OpenCVUnity.Scalar)">
            <summary>
            Draws a fancy rect in the specified image.
            </summary>
            <param name="iImage">The image to draw in.</param>
            <param name="iRect">The rect (points) to draw.</param>
            <param name="iText">A no-mandatory text to draw above the rect.</param>
            <param name="iColor">Color of the rect and text.</param>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Rect)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iRect">The rect.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
        </member>
        <member name="M:BlueQuark.Utils.Center(UnityEngine.Vector2,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
            <returns>The centroid.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Point,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point.</param>
            <param name="iSecondPt">Second point.</param>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector2,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector3,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point.</param>
            <param name="iPointB">The second point.</param>
            <returns>The euclian distance between the first and the second point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TriangleArea(System.Single,System.Single,System.Single)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length.</param>
            <param name="iB">Second side length.</param>
            <param name="iC">Third side length.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:BlueQuark.Utils.TriangleArea(System.Double,System.Double,System.Double)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length.</param>
            <param name="iB">Second side length.</param>
            <param name="iC">Third side length.</param>
            <returns>The area.</returns>
        </member>
        <member name="M:BlueQuark.Utils.CounterClockWise(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Checks for counter clockwise style from points.
            </summary>
            <param name="iA">First point.</param>
            <param name="iB">Second point.</param>
            <param name="iC">Third point.</param>
        </member>
        <member name="M:BlueQuark.Utils.CounterClockWise(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks for counter clockwise style from points.
            </summary>
            <param name="iA">First point.</param>
            <param name="iB">Second point.</param>
            <param name="iC">Third point.</param>
        </member>
        <member name="M:BlueQuark.Utils.IsIntersect(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>True if there is an intersection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsIntersect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>True if there is an intersection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Intersection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the intersection point between two lines.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>The intersection point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Intersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the intersection point between two lines.
            </summary>
            <param name="iA">Point of the first line.</param>
            <param name="iB">Point of the first line.</param>
            <param name="iC">Point of the second line.</param>
            <param name="iD">Point of the second line.</param>
            <returns>The intersection point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Projection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB.
            </summary>
            <param name="iPoint">The point.</param>
            <param name="iA">Point of the line.</param>
            <param name="iB">Point of the line.</param>
            <returns>The projection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Projection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB.
            </summary>
            <param name="iPoint">The point.</param>
            <param name="iA">Point of the line.</param>
            <param name="iB">Point of the line.</param>
            <returns>The projection.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Double,System.Double,System.Double)" -->
        <member name="M:BlueQuark.Utils.GetLocalIPAddress">
            <summary>
            Retrieves the local IP address.
            </summary>
            <returns>The local IP address.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetMACAddress">
            <summary>
            Retrieves the MAC address.
            </summary>
            <returns>The MAC address.</returns>
        </member>
        <member name="M:BlueQuark.Utils.OSFilePath(System.String)">
            <summary>
            Gets the OS file path version of a file.
            </summary>
            <param name="iFileName">The file name.</param>
            <returns>The file name with the OS path prefix on it.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ParametersToWWWFormURLEncoded(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a IDictionary to a string format.
            </summary>
            <param name="iParameters">The IDictionary to convert;</param>
            <returns>The converted IDictionnary.</returns>
        </member>
        <member name="M:BlueQuark.Utils.MD5(System.String)">
            <summary>
            Converts a input to MD5 Format.
            </summary>
            <param name="iInput">The input to convert.</param>
            <returns>The MD5 result.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetCookies(System.String)">
            <summary>
            Gets cookies of a URL.
            </summary>
            <param name="iURL">The url.</param>
            <returns>The cookie collection.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Post(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Net.CookieCollection)">
            <summary>
            Sends a post request to a URL.
            </summary>
            <param name="iURL">The URL.</param>
            <param name="iParameters">The post parameters.</param>
            <param name="iCookies">The cookies collection.</param>
            <returns>The answer.</returns>
        </member>
        <member name="M:BlueQuark.Utils.XPathSearch(System.String,System.String)">
            <summary>
            Makes a research on a input.
            </summary>
            <param name="iInput">The input to read.</param>
            <param name="iExpression">The expression to find in the input.</param>
            <returns>The expression found.</returns>
        </member>
        <member name="M:BlueQuark.Utils.StringAtIndex(System.String[],System.Int32)">
            <summary>
            Gets the string element at a given index.
            </summary>
            <param name="iStrings">The string list.</param>
            <param name="iIndex">The index.</param>
            <returns>The element of the string list at the given index.</returns>
        </member>
        <member name="M:BlueQuark.Utils.ElementAtIndex``1(``0[],System.Int32)">
            <summary>
            Gets an element at the given index.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="iElements">The element list.</param>
            <param name="iIndex">The index.</param>
            <returns>The element of the element list at the given index.</returns>
        </member>
        <member name="M:BlueQuark.Utils.EnumToKey(System.Enum)">
            <summary>
            Converts an enum element to string.
            </summary>
            <param name="iElement">The enum element.</param>
            <returns>The name of the enum element in a string.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Int32[])">
            <summary>
            Clears an int array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Single[])">
            <summary>
            Clears a float array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Double[])">
            <summary>
            Clears a double array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Clear(System.Byte[])">
            <summary>
            Clears a byte array.
            </summary>
            <param name="iArray">The array cleared.</param>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Int32[])">
            <summary>
            Gets the sum of an int array;
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Single[])">
            <summary>
            Gets the sum of a float array.
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Double[])">
            <summary>
            Gets the sum of a double array.
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sum(System.Byte[])">
            <summary>
            Get the sum of a byte array.
            </summary>
            <param name="iArray">The array.</param>
            <returns>The sum.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Int32[])">
            <summary>
            
            </summary>
            <param name="iArray"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Byte[])">
            <summary>
            Makes an average of a given byte array.
            </summary>
            <param name="iArray">The array/</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Double[])">
            <summary>
            Makes an average of a given double array.
            </summary>
            <param name="iArray">The array</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.Mean(System.Single[])">
            <summary>
            Makes an average of a given float array;
            </summary>
            <param name="iArray">The array.</param>
            <returns>The mean.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetEndPoint(UnityEngine.Vector3,System.Single)">
            <summary>
            Given a starting point and a distance, gets the theoretical end point.
            </summary>
            <param name="iStart">Starting point.</param>
            <param name="iDist">Distance in meter.</param>
            <returns>The theoretical end point.</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetCommand(UnityEngine.Vector3,UnityEngine.Vector3,System.Single@,System.Single@)">
            <summary>
            Gets a command to go from start to end point.
            </summary>
            <param name="iStart">The start vector.</param>
            <param name="iEnd">The end vector.</param>
            <param name="iDist">Distance in meter.</param>
            <param name="iAngle">Angle in degree.</param>
        </member>
        <member name="M:BlueQuark.Utils.FormatAngle(System.Single)">
            <summary>
            Makes angle between -180 and 180 degrees.
            </summary>
            <param name="iAngle">The angle to format.</param>
            <returns>The formated angle.</returns>
        </member>
        <member name="T:BlueQuark.SpeechInputParameters">
            <summary>
            Parameters for a listening recognition.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.Grammars">
            <summary>
            Grammars for offline recognition.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.RecognitionThreshold">
            <summary>
            If revelant (offline), the grammar recognition confidence.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.RecognitionMode">
            <summary>
            The speech input recognition mode.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputParameters.Credentials">
            <summary>
            Credentials used to activate API.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechInputParameters.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechGrammar">
            <summary>
            Speech grammar for speech to text recognition request.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.COMMON_1">
            <summary>
            Common 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.NUMBERS_1">
            <summary>
            Numbers 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.QUESTIONS_1">
            <summary>
            Question 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.COMMANDS_1">
            <summary>
            Commands 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.CITIES_1">
            <summary>
            Cities 1.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechGrammar.WEATHER_1">
            <summary>
            Weather 1.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechOutputParameters">
            <summary>
            Parameters for a text to speech process.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutputParameters.Speed">
            <summary>
            Speed of the speech. From 0 to 1.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutputParameters.Pitch">
            <summary>
            The pich of the speech. From 0 to 1.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechOutputParameters.#ctor">
            <summary>
            Creates a new output parameters set.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechOutput">
            <summary>
            Text to speech request.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutput.Utterance">
            <summary>
            If null, request will considerer last speech.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechOutput.Parameters">
            <summary>
            The requested parameters for the speech output.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechOutput.#ctor(System.String)">
            <summary>
            Creates a new speech output (TTS).
            </summary>
            <param name="iUtterance">The text to say.</param>
        </member>
        <member name="M:BlueQuark.SpeechOutput.#ctor(System.String,BlueQuark.SpeechOutputParameters)">
            <summary>
            Creates a new speech output (TTS).
            </summary>
            <param name="iUtterance">The text to say.</param>
            <param name="iParameters">Speech parameters.</param>
        </member>
        <member name="M:BlueQuark.SpeechOutput.ToString">
            <summary>
            Overrides the ToString method.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:BlueQuark.SpeechRecognitionStatus">
            <summary>
            Event type for speech recognition
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.BEGINNING_OF_SPEECH">
            <summary>
            User started to speak.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.MAYBE_SPEECH">
            <summary>
            Could be the beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.NO_SPEECH">
            <summary>
            The previously sent MAYBE_SPEECH event did not lead.
            To and actual beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.TIMEOUT">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.TRAILING_SILENCE">
            <summary>
            A trailing silence was detected.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.BAD_SIGNAL_NOISE_RATIO">
            <summary>
            The signal to noise ratio is too low.
            This event is generated if at the end of an utterance.
            The signal/noise ratio remains below 12dB.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.OVERLOAD">
            <summary>
            The speech level is too loud.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.TOO_QUIET">
            <summary>
            The speech level is too weak.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.NO_SIGNAL">
            <summary>
            No or very low input signal.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.POOR_MIC">
            <summary>
            This could mean that the microphone or the audio hardware is of poor quality. 
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.NO_LEADING_SILENCE">
            <summary>
            The recording apparantly does not start with leading silence.
            Possibly the speaker started speaking too soon, but because this detection is only energy based.
            Other noise events at the start of the utterance may also trigger this condition.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionStatus.ERROR_ON_START">
            <summary>
            Error on start.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechRecognitionMode">
             <summary>
             Speech recognition mode.
             </summary>
             <example>
             <code>
            Use the grammar based Vocal API like this : 
            Buddy.Vocal.Listen("my_grammar" /* from my_grammar_[fr/en].bin. The function will take the current language automatically */,
                  (iSpeechInputResult) => { /* Callback methods */
                     Debug.Log(iSpeechInputResult.Utterance); /* Display the speech input result */
                  },
                  SpeechRecognitionMode.GRAMMAR_ONLY /* Recognition mode, can be ignored (GRAMMAR_ONLY is default) or set at Buddy.Vocal.DefaultInputParameters */
            );
             </code>
             </example>
             <example>
             <code>
            Use the free speech Vocal API like this : 
            Buddy.Vocal.Listen((iSpeechInputResult) => { /* Callback methods */
                     Debug.Log(iSpeechInputResult.Utterance); /* Display the speech input result */
                  },
                  SpeechRecognitionMode.FREESPEECH_ONLY /* Recognition mode, can be set at Buddy.Vocal.DefaultInputParameters */
            );
             </code>
             </example>
             <example>
             <code>
            Use the hybrid Vocal API like this : 
            Buddy.Vocal.Listen("my_grammar" /* from my_grammar_[fr/en].bin. The function will take the current language automatically */,
                  (iSpeechInputResult) => { /* Callback methods */
                     Debug.Log(iSpeechInputResult.Utterance); /* Display the speech input result */
                  },
                  SpeechRecognitionMode.GRAMMAR_THEN_FREESPEECH /* Recognition mode, can be set at Buddy.Vocal.DefaultInputParameters */
            );
             </code>
             </example>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionMode.GRAMMAR_ONLY">
            <summary>
            Based on VoCon (Nuance) API. If no grammar is specified, default grammar will be used for the recognition. A grammar must be writen for each language.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionMode.FREESPEECH_ONLY">
            <summary>
            Based on Google Speech API. It is a nofree API reserved for exclusive BFR partners. It is not grammar based, so call a Listen method in that mode with grammar, the grammar won't be considered.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionMode.GRAMMAR_THEN_FREESPEECH">
            <summary>
            Based on VoCon grammar system. If no result, a Google Speech API request will be sended.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechInputStatus">
            <summary>
            Input speech event from user listened by the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputStatus.Type">
            <summary>
            Type of event.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInputStatus.IsError">
            <summary>
            True if this event is an error.
            </summary>
        </member>
        <member name="T:BlueQuark.SpeechInput">
            <summary>
            Input speech from user listened by the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.IsInterrupted">
            <summary>
            True if the listening process was interrupted.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Utterance">
            <summary>
            Input text.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Rule">
            <summary>
            If revelant (offline mode), the corresponding grammar.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Confidence">
            <summary>
            The confidence of the input speech recognition.
            </summary>
        </member>
        <member name="P:BlueQuark.SpeechInput.Parameters">
            <summary>
            The requested parameters for that speech input.
            </summary>
        </member>
        <member name="M:BlueQuark.SpeechInput.ToString">
            <summary>
            Overrides the ToString method.
            </summary>
            <returns>The string format of the object.</returns>
        </member>
        <member name="T:BlueQuark.Vocal">
            <summary>
            The module for vocal management (say, hot word and listen). This is a FIFO process.
            The listening process can works with GoogleSpeech API for the free speech and VoCon for the grammar based system. Those mode are specified with the SpeechRecognitionMode.
            </summary>
            <seealso cref="T:BlueQuark.SpeechRecognitionMode"/>>
        </member>
        <member name="P:BlueQuark.Vocal.DefaultOutputParameters">
            <summary>
            Any non null default parameter will be considered before any Speak (TTS) request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.DefaultInputParameters">
            <summary>
            Any non null default parameter will be considered before any Listen (STT) request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.EnableTrigger">
            <summary>
            Enable/Disable the OKAY BUDDY vocal trigger. If enabled the OnTrigger callback will be called after detection.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.ListenOnTrigger">
            <summary>
            Enable/Disable the auto listening mode after the vocal trigger. Listening response can be retrieve via the OnEndListening callback.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastHeardInput">
            <summary>
            The last heard (STT) input.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastSaidOutput">
            <summary>
            The last said (TTS) output.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastListeningStatus">
            <summary>
            The last listening event.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsSpeaking">
            <summary>
            True if the vocal module is currently speaking anything.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsListening">
            <summary>
            True if the vocal module is currently listening anything.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnTrigger">
            <summary>
            Called after any trigger detection. EnableTrigger must be set to true.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnEndSpeaking">
            <summary>
            Called after any end of TTS request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnEndListening">
            <summary>
            Called after any end of STT request.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnListeningStatus">
            <summary>
            Called when any occurence of event/error during the listening process.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.Channel">
            <summary>
            The dedicated sound channel for vocal process. Equivalent to Buddy.Actuators.Speakers.Vocal.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsBusy">
            <summary>
            Does the vocal module is processing something ?.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.CompileGrammar(System.String)">
            <summary>
            Compile a VoCon grammar file. It can be then used for vocal recognition (listen) process.
            </summary>
            <param name="iGrammar">Filename of the grammar.</param>
            <returns>True if the grammar is correctly compiled</returns>
        </member>
        <member name="M:BlueQuark.Vocal.CompileGrammars(System.String[])">
            <summary>
            Compile VoCon grammar files. It can be then used for vocal recognition (listen) process.
            </summary>
            <param name="iGrammars">Filename of the grammar.</param>
            <returns>True if the grammar is correctly compiled</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(BlueQuark.SpeechOutput,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOutput">The output speech to proceed.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOutput">The output speech to proceed.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary> 
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>       
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iUtterance">The text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request.
            </summary>
            <param name="iOutput">The output speech to proceed. Cannot be null.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value of the corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. Then perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell.</param>
            <param name="iContext">The context where to retrieve the string.</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgain(System.Boolean)">
            <summary>
            Asks to repeat the last said sentence.
            </summary>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgain(System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks to repeat the last said sentence.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String[],System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammar">the VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request.
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">the VoCon grammar to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request.</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iMode">The speech to text recognition mode.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechInputStatus},BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech.</param>
            <param name="iOnListeningStatus">Callback called at any error / event during the input speech.</param>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(BlueQuark.SpeechInputParameters,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests.
            </summary>
            <param name="iParameters">The speech to text recognition mode/grammars/confidence. Cannot be null.</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy.</param>
            <returns>True if the request is considered.</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Stop">
            <summary>
            Stops any speaking or listening process.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopAndClear">
            <summary>
            Stops any speaking or listening process and clear the queue of waiting requests.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopSpeaking">
            <summary>
            Stops the running speaking process (text to speech). Do nothing if not speaking.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopListening">
            <summary>
            Stops the running listening process (speech to text). Do nothing if not listening.
            </summary>
        </member>
        <member name="T:BlueQuark.EMailCrawler">
            <summary>
            Wrapper that fetch mail box.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailCrawler.IsBusy">
            <summary>
            Is busy if the class is already fetching a box email.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(System.String,System.String,System.String,BlueQuark.EMailCrawlerFilter,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetch a email box with his address, password, imap and mask.
            </summary>
            <param name="iFromAddress">Mail address of the mail to fetch.</param>
            <param name="iFromPassword">Password of the mail address to fetch.</param>
            <param name="iIMAP">Imap server of the mail address to fetch.</param>
            <param name="iMask">Mask represent the fetch option.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(System.String,System.String,System.String,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetch a email box with his address, password, imap.
            </summary>
            <param name="iFromAddress">Mail address of the mail to fetch.</param>
            <param name="iFromPassword">Password of the mail address to fetch.</param>
            <param name="iIMAP">Imap server of the mail address to fetch.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="M:BlueQuark.EMailCrawler.Fetch(BlueQuark.EMailFetchParameters,System.Action{BlueQuark.EMail[]})">
            <summary>
            Fetch a email box with a EMailFetchParameters which must contain at least adderss, password, and imap server.
            </summary>
            <param name="iParameters">Represent the parameters of the fetch.</param>
            <param name="iOnEndFetch">Callback which is called on the end of the fetch.</param>
        </member>
        <member name="T:BlueQuark.EMailAttachement">
            <summary>
            Class which represent an email attachment.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailAttachement.Name">
            <summary>
            Name of the attachment.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailAttachement.Size">
            <summary>
            Size of the attachment in byte.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailAttachement.Content">
            <summary>
            Content of the attachment in byte.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailAttachement.#ctor(System.String,System.Int32,System.Byte[])">
            <summary>
            Default constructor.
            </summary>
            <param name="iName">The name of attachment.</param>
            <param name="iSize">The size of attachment.</param>
            <param name="iContent">The content of attachment.</param>
        </member>
        <member name="T:BlueQuark.EMailFetchParameters">
            <summary>
            Class who represent the parameters of the fetch.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailFetchParameters.DEFAULT_PORT">
            <summary>
            Default port which will use for the imap server.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.EMailMask">
            <summary>
            Mail crawler mask. You can use it if you want only read, unread mail, or only mail with attachment.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.Address">
            <summary>
            Mail address to fetch.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.Password">
            <summary>
            Password of the Mail address to fetch.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.IMAP">
            <summary>
            Imap serveur of the email.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailFetchParameters.Port">
            <summary>
            Port of the imap server. See also DEFAULT_PORT.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailFetchParameters.#ctor(BlueQuark.EMailCrawlerFilter)">
            <summary>
            Various constructor.
            </summary>
            <param name="iMask">Mask represent the fetch option.</param>
        </member>
        <member name="M:BlueQuark.EMailFetchParameters.#ctor(System.String,System.String,System.String,System.Int32,BlueQuark.EMailCrawlerFilter)">
            <summary>
            Various constructor.
            </summary>
            <param name="iAddress">Mail address of the mail to fetch.</param>
            <param name="iPassword">Password of the mail address to fetch.</param>
            <param name="iIMAP">Imap server of the mail address to fetch.</param>
            <param name="iPort">Port of the imap server.</param>
            <param name="iMask">Mask represent the fetch option.</param>
        </member>
        <member name="T:BlueQuark.EMailCrawlerFilter">
            <summary>
            Enum which contain the different filter for a fetch.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailCrawlerFilter.UNREAD">
            <summary>
            Unread mask represent mail which are not read.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailCrawlerFilter.READ">
            <summary>
            Read mask represent mail which are read.
            </summary>
        </member>
        <member name="F:BlueQuark.EMailCrawlerFilter.ONLY_WITH_ATTACHMENT">
            <summary>
            Only with attachment will fetch read, unread or both, but only those with attachments.
            </summary>
        </member>
        <member name="T:BlueQuark.SMTP">
            <summary>
            Enum of the different smtp that can be used to send mail.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.GMAIL">
            <summary>
            Gmail SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.YAHOO">
            <summary>
            Yahoo SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.HOTMAIL">
            <summary>
            Hotmail SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.BFR">
            <summary>
            BFR SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.ORANGE">
            <summary>
            Orange SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.FREE">
            <summary>
            Free SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.OUTLOOK">
            <summary>
            Outlook SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.SFR">
            <summary>
            SFR SMTP.
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.WANADOO">
            <summary>
            Wanadoo SMTP.
            </summary>
        </member>
        <member name="T:BlueQuark.EMailSender">
            <summary>
            Wrapper that connects to an smtp server to send a mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMailSender.IsBusy">
            <summary>
            Returns true if a message is sending.
            </summary>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,BlueQuark.SMTP,BlueQuark.EMail,System.Action{System.Boolean})">
            <summary>
            Creates an smtp client with the user's address and sends the mail. This method will do nothing if a previous mail has not been sent yet.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMail">Mail that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,System.String,BlueQuark.EMail,System.Action{System.Boolean})">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMail">Mail that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,System.String,BlueQuark.EMail[],System.Action{System.Boolean})">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMails">Mails that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,BlueQuark.SMTP,BlueQuark.EMail[],System.Action{System.Boolean})">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent.
            </summary>
            <param name="iFromAddress">Mail adress of the user.</param>
            <param name="iFromPassword">Password of the mail adress.</param>
            <param name="iSMTP">SMTP server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp.</param>
            <param name="iEMails">Mails that will be send.</param>
            <param name="iOnEndSending">Callback called at the end of the sending.</param>
        </member>
        <member name="T:BlueQuark.Twitter">
            <summary>
            Twitter component to post message on Twitter network.
            </summary>
        </member>
        <member name="P:BlueQuark.Twitter.IsBusy">
            <summary>
            Returns true if a message is sending.
            </summary>
        </member>
        <member name="M:BlueQuark.Twitter.Tweet(System.String,UnityEngine.Texture2D,System.Action{System.Boolean})">
            <summary>
            Send a tweet.
            </summary>
            <param name="iMsg">Message of the tweet. 144 characters max.</param>
            <param name="iImg">Image to send.</param>
            <param name="iOnEndSending">Callback called on end of message sending.</param>
        </member>
        <member name="M:BlueQuark.Twitter.Tweet(System.String,System.Action{System.Boolean})">
            <summary>
            Send a tweet.
            </summary>
            <param name="iMsg">Message of the tweet. 144 characters max.</param>
            <param name="iOnEndSending">Callback called on end of message sending.</param>
        </member>
        <member name="T:BlueQuark.Weather">
            <summary>
            Weather API of the wished location
            </summary>
            <summary>
            Weather API of the wished location.
            </summary>
        </member>
        <member name="P:BlueQuark.Weather.IsBusy">
            <summary>
            Returns true if a request is currently processed.
            </summary>
        </member>
        <member name="M:BlueQuark.Weather.At(System.String,System.Action{BlueQuark.WeatherInfo[],BlueQuark.WeatherError},System.Int32)">
            <summary>
            Search for the weather of the current day. Can provide information up to the next week.
            </summary>
            <param name="iLocation">Asked location.</param>
            <param name="iOnEndRequest">Callback with Weather info.</param>
            <param name="iNumberOfInfos">Number of information to be retrieved. Use a value of around 60 to get weather for a week after.</param>
        </member>
        <member name="M:BlueQuark.Weather.HourlyAt(System.String,System.Action{BlueQuark.WeatherInfo[],BlueQuark.WeatherError},System.Int32,System.Boolean)">
            <summary>
            Weather forecast at 8am, 12pm, 4pm and 8pm.
            </summary>
            <param name="iLocation">Target location.</param>
            <param name="iOnEndRequest">Callback with weather information.</param>
            <param name="iNumberOfInfos">Number of informations to be retrieved.</param>
            <param name="iHourlyFilter">Should hourly filters be applied or not ? If true, only 8am, 12pm, 4pm and 8pm are returned.</param>
        </member>
        <member name="T:BlueQuark.WeatherLoc">
            <summary>
            Represents the weather location.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.City">
            <summary>
            City location.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.State">
            <summary>
            State location.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.Country">
            <summary>
            Country loaction.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherLoc.APICode">
            <summary>
            API Code.
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherInfo">
            <summary>
            This class represents the weather at a specific hour.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Location">
            <summary>
            Location of the weather info.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Hour">
            <summary>
            Hour of the day.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Day">
            <summary>
            Day of the month.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Date">
            <summary>
            Day with format YYYY-MM-DD.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Type">
            <summary>
            Weather type (Sunny, overcast, cloudy ...).
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.MinTemperature">
            <summary>
            The maximum expected temperature in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.MaxTemperature">
            <summary>
            The minimum expected temperature in degrees.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.AverageWindSpeed">
            <summary>
            The speed of the wind in km/h.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.GustWindSpeed">
            <summary>
            The speed of the gust of wind in km/h.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.DegreeWind">
            <summary>
            The direction of the wind in degree.
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Rain">
            <summary>
            The QPF (Quantitative Preciptation Forecast).
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherError">
            <summary>
            Error that may happen during a Weather request.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.NONE">
            <summary>
            No error.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.UNKNOWN_LOCATION">
            <summary>
            Unable to find latitude and longitude of provided location.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.MANY_LOCATIONS">
            <summary>
            At least 2 cities exist with the same name.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.GEOLOCALIZATION_FAILED">
            <summary>
            Localization of device failed.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.GEOLOCALIZATION_DISABLED">
            <summary>
            No location was provided and localization was disabled.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.REQUEST_FAILED">
            <summary>
            Weather request timed-out or returned an error.
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherType">
            <summary>
            Different weather type.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.UNKNOWN">
            <summary>
            Not sure about the weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SUNNY">
            <summary>
            Sunny weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CLEAR">
            <summary>
            Clear weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.OVERCAST">
            <summary>
            Overcast weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CLOUDY">
            <summary>
            Cloudy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.PARTLY_CLOUDY">
            <summary>
            Partly Cloudy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.RAIN">
            <summary>
            Rainy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_OF_RAIN">
            <summary>
            Chance of rain.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SNOW">
            <summary>
            Snowy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_FLURRIES">
            <summary>
            Chance of flurries.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_SLEET">
            <summary>
            Chance of sleet.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_SNOW">
            <summary>
            Chance of snow.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CHANCE_STORMS">
            <summary>
            Chance of storms.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.FLURRIES">
            <summary>
            Chance of flurries.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.FOG">
            <summary>
            Foggy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.HAZY">
            <summary>
            Hazy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.MOSTLY_CLOUDY">
            <summary>
            Mostly cloudy weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.MOSTLY_SUNNY">
            <summary>
            Mostly sunny weather.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.PARTLY_SUNNY">
            <summary>
            Some sun.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SLEET">
            <summary>
            Sleet.
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.THUNDERSTORMS">
            <summary>
            Thunderstorms.
            </summary>
        </member>
        <member name="T:BlueQuark.WebServices">
            <summary>
            Module that contains all web API (Email, Twitter, Facebook...).
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.EMailSender">
            <summary>
            Tool to send emails.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.EMailCrawler">
            <summary>
            Tool to fetch emails.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Weather">
            <summary>
            Weather API of the wished location.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Wikipedia">
            <summary>
            Wikipedia data base API.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.RobotEmail">
            <summary>
            Email address of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.RobotEmailPassword">
            <summary>
            Email password of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Twitter">
            <summary>
            Twitter API access to send tweet with or without picture attached.
            </summary>
        </member>
        <member name="T:BlueQuark.Wikipedia">
            <summary>
            Wikipedia data base API access
            </summary>
            <summary>
            Wikipedia data base API access;
            </summary>
        </member>
        <member name="P:BlueQuark.Wikipedia.IsBusy">
            <summary>
            Returns true if a request is processing.
            </summary>
        </member>
        <member name="M:BlueQuark.Wikipedia.SearchFor(System.String,System.Action{System.String})">
            <summary>
            Process a search abou the corresponding word.
            </summary>
            <param name="iWord">The word to define.</param>
            <param name="iOnEndOfSearch">Callback with the retrieve response.</param>
        </member>
        <member name="T:BlueQuark.EMail">
            <summary>
            Class which contains the message, the subject and the list of attachements that will be sent by using MailSender.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.FilePaths">
            <summary>
            List of file path attached to the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Addresses">
            <summary>
            List of adresses to send the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Attachments">
            <summary>
            Attachments list of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Subject">
            <summary>
            Subject of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Date">
            <summary>
            Date of the mail.
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Body">
            <summary>
            Body of the mail.
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[],System.String[])">
            <summary>
            create a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
            <param name="iToAddresses">Email target addresses.</param>
            <param name="iFilePaths">Attachments path.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[],BlueQuark.EMailAttachement[])">
            <summary>
            create a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
            <param name="iToAddresses">Email target addresses.</param>
            <param name="iAttachments">Attachments path.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[])">
            <summary>
            create a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
            <param name="iToAddresses">.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String)">
            <summary>
            create a mail with provided parameters.
            </summary>
            <param name="iSubject">Subject of the mail.</param>
            <param name="iBody">Body of the mail.</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor">
            <summary>
            Create a mail with default parameters.
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.AddTexture2D(UnityEngine.Texture2D,System.String)">
            <summary>
            Save a texture 2d as a png in the folder then add it to the mail.
            </summary>
            <param name="iTexture">Texture to add to save and add to the mail.</param>
            <param name="iFilePath">File path.</param>
        </member>
        <member name="M:BlueQuark.EMail.AddFile(System.String)">
            <summary>
            Add file in the streaming asset folder.
            </summary>
            <param name="iFilePath">File path.</param>
        </member>
        <member name="M:BlueQuark.EMail.AddTo(System.String)">
            <summary>
            Add a receiver af the mail.
            </summary>
            <param name="iAddress">Adress to send to.</param>
        </member>
        <member name="M:BlueQuark.EMail.ClearTo">
            <summary>
            Clear the list of adress to send to.
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.ClearFileAttachement">
            <summary>
            Clear the list of file attached to the mail.
            </summary>
        </member>
    </members>
</doc>
