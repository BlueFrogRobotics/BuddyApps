<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OS</name>
    </assembly>
    <members>
        <member name="T:BlueQuark.Internal.AComponent">
            <summary>
            Most abstract class of the BlueQuark system. A component is a logical class that subcribe to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.EnableLoop">
            <summary>
            Subscribe the component to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the subscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.DisableLoop">
            <summary>
            Unsubscribe the component from the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the unsubscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AComponent.IsInvokedFromMSCoreLib(System.Reflection.Assembly)">
            <summary>
            Check if the input assembly is mscorlib
            </summary>
            <param name="iCtorCallAssembly">The assembly to check</param>
            <returns>True if the assembly is mscorlib.dll</returns>
        </member>
        <member name="T:BlueQuark.Internal.ABindedComponent">
            <summary>
            A binded component can subscribe to the EventBus system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.EventBus"/>
        </member>
        <member name="F:BlueQuark.Internal.ABindedComponent.mEventbus">
            <summary>
            The event bus system. Allow to subscribe and unsubscribe from events. Also used to fire events.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ABindedComponent.mHandlerRegistrations">
            <summary>
            All event registrations.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABindedComponent.RegisterHandler(System.String)">
            <summary>
            Register an handler (subscribtion id)
            </summary>
            <param name="iHandlerID">The subscribtion id</param>
        </member>
        <member name="T:BlueQuark.Internal.IAvailable">
            <summary>
            A IAvailable component can be considered as busy.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IAvailable.IsBusy">
            <summary>
            Returns true if the component is currently busy
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IStoppable">
            <summary>
            This component can be stopped
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.IStoppable.Stop">
            <summary>
            Stop the running process
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AMetricSuite">
            <summary>
            A metric suite class is used by each ABasePresenter class to test itself.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.RunUnitTests``2(BlueQuark.Internal.ABasePresenter{``0,``1})">
            <summary>
            Run the test suite of the component.
            </summary>
            <returns>IEnumerator for yield instruction</returns>
        </member>
        <member name="M:BlueQuark.Internal.AMetricSuite.RunMetric``2(BlueQuark.Internal.ABasePresenter{``0,``1})">
            <summary>
            Run the metric suite of the component class.
            </summary>
            <returns>IEnumerator for yield instruction</returns>
        </member>
        <member name="T:BlueQuark.Internal.ABasePresenter`2">
            <summary>
            A Base presenter class is a Presenter class with a dedicated metric test suite. It also can use the Require/Release system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AULink"/>
            <seealso cref="T:BlueQuark.Internal.AMetricSuite"/>
            <typeparam name="U">Type of the Presenter's ULink</typeparam>
            <typeparam name="M">Type of the metric suite</typeparam>
        </member>
        <member name="P:BlueQuark.Internal.ABasePresenter`2.IsRequired">
            <summary>
            Gets the required state of the current component (this). True if at least one external component is using this.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.Require(System.Object)">
            <summary>
            Set a flag that the current component (this) will be used by a the calling component. 
            A unique type in app can require a component. Multiple components in OS can require a component.
            MUST be call from Impl side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.Release">
            <summary>
            Remove the 'require' flag that the current component (this) is used by a the calling component. 
            MUST be call from Impl side.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.ForceRelease">
            <summary>
            Free all 'require' flags
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ABasePresenter`2.TaskOwners">
            <summary>
            Gets all components that are currently using this component
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.RunTests">
            <summary>
            Run the test suite of the component.
            </summary>
            <returns>IEnumerator for yield instruction</returns>
        </member>
        <member name="M:BlueQuark.Internal.ABasePresenter`2.RunMetric">
            <summary>
            Run the metric suite of the component class.
            </summary>
            <returns>IEnumerator for yield instruction</returns>
        </member>
        <member name="T:BlueQuark.Internal.APresenter`1">
            <summary>
            A presenter class is linked to a Unity MonoBehaviour (called ULink). ULink are not directly accessible and must be manage for the presenter.
            </summary>
            <seealso cref="T:BlueQuark.Internal.AULink"/>
            <typeparam name="U">Type of the Presenter's ULink</typeparam>
        </member>
        <member name="F:BlueQuark.Internal.APresenter`1.mULink">
            <summary>
            Unity link (MonoBehaviour) of the Presenter object. Use it for platform dependant purposes and/or display and/or Unity callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponentInChildren``1">
            <summary>
            Returns the Unity component of Type type in the GameObject or any of its children using depth first search.
            An Unity component is returned only if it is found on an active GameObject.
            </summary>
            <typeparam name="T">The type of the Unity component to retrieve</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponentInParent``1">
            <summary>
            Returns the component of Type type in the GameObject or any of its parents.
            Recurses upwards until it finds a valid component.Returns null if no component found. Only components on active GameObjects are returned.
            </summary>
            <typeparam name="T">The type of the Unity component to retrieve</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponent``1">
            <summary>
            Returns the Unity component of Type type if the game object has one attached, null if it doesn't.
            </summary>
            <typeparam name="T">The type of Unity component to retrieve.</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.GetComponents``1">
            <summary>
            Returns Unity components of Type type if the game object has one attached, null if it doesn't.
            </summary>
            <typeparam name="T">The type of Unity component to retrieve.</typeparam>
            <returns>A Unity component of the matching type, if found.</returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.AddComponent``1">
            <summary>
            Adds a Unity component class corresponding to the requested type to the game object.
            </summary>
            <typeparam name="T">The type of the Unity component to add</typeparam>
            <returns>The added Unity component</returns>
        </member>
        <member name="P:BlueQuark.Internal.APresenter`1.Parent">
            <summary>
            Parent transform of the presenter.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Starts a coroutine.
            The execution of a coroutine can be paused at any point using the yield statement.The yield return value specifies when the coroutine is resumed.
            </summary>
            <param name="iEnumerator">The method to start. Must return an IEnumerator</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stops the arg coroutine.
            </summary>
            <param name="iEnumerator"></param>
        </member>
        <member name="M:BlueQuark.Internal.APresenter`1.StopAllCoroutines">
            <summary>
            Stop all started coroutines in this presenter.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AIndexableULink">
            <summary>
            ULink that are enumerable like multiple sensors or motors. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AIndexableULink.Index">
            <summary>
            Index of the component. The Presenter must be a regular behaviour
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AHeadHinge`2">
            <summary>
            Hinge component of the robot neck. 
            </summary>
            <summary>
            Hinge component of the robot neck. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BML.IsRunning">
            <summary>
            Tells if the BML is running.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BML.NbSteps">
            <summary>
            Total number of steps in the behavior.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BML.ActiveStep">
            <summary>
            If the behavior is running, tells at which step it's currently at.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BML.Name">
            <summary>
            Name of the BML (its filename).
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BML.Category">
            <summary>
            Category of the behavior.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.BML.Parameters">
            <summary>
            The parameters related to the execution of this behavior.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.BML.mBlocksID">
            <summary>
            Dictionary that contains the ID of every block.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AUIFactory`2">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.EFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.DevConnection.GetPrivateCredInfo">
            <summary>
            TODO: TO REWORK ! ! ! ! ! 
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AVisionAlgorithm`2">
            <summary>
            Base class for computer vision algorithms.
            </summary>
            <summary>
            Base class for computer vision algorithms.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mRGBHeight">
            <summary>
            Height of the last retrieved RGB frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mRGBWidth">
            <summary>
            With of the last retrieved RGB frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mDepthHeight">
            <summary>
            Height of the last retrieved Depth frame
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AVisionAlgorithm`2.mDepthWidth">
            <summary>
            With of the last retrieved Depth frame
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AVisionAlgorithm`2.OnNewFrame(OpenCVUnity.Mat,OpenCVUnity.Mat,OpenCVUnity.Mat)">
            <summary>
            Called at each valuable frame.
            Write your computer vision algorithm inside this method.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GCVLikelihood">
            <summary>
            Rate likelihood
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.UNKNOWN">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.VERY_UNLIKELY">
            <summary>
            Very low rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.UNLIKELY">
            <summary>
            Low rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.POSSIBLE">
            <summary>
            Medium rate 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.LIKELY">
            <summary>
            Correct rate
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLikelihood.VERY_LIKELY">
            <summary>
            Very credible
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GCVLandmarkType">
            <summary>
            Kind of landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.UNKNOWN_LANDMARK">
            <summary>
            Unknown landmark
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE">
            <summary>
            Left eye
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE">
            <summary>
            Right eye
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_OF_LEFT_EYEBROW">
            <summary>
            Left of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_OF_LEFT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_OF_RIGHT_EYEBROW">
            <summary>
            Left of right eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_OF_RIGHT_EYEBROW">
            <summary>
            Right of left eyebrow
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MIDPOINT_BETWEEN_EYES">
            <summary>
            Space between eyes
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_TIP">
            <summary>
            Nose tip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.UPPER_LIP">
            <summary>
            Upper lip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LOWER_LIP">
            <summary>
            Lower lip
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_LEFT">
            <summary>
            Mouse left side
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_RIGHT">
            <summary>
            Mouse right side
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.MOUTH_CENTER">
            <summary>
            Center of the mouse
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_RIGHT">
            <summary>
            Bottom right side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_LEFT">
            <summary>
            Bottom left side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.NOSE_BOTTOM_CENTER">
            <summary>
            Bottom center side of the nose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_TOP_BOUNDARY">
            <summary>
            Left eye top boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_RIGHT_CORNER">
            <summary>
            Left eye right corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Left eye bottom boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_LEFT_CORNER">
            <summary>
            Left eye left corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_TOP_BOUNDARY">
            <summary>
            Right eye top boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_RIGHT_CORNER">
            <summary>
            RIght eye right corner
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_BOTTOM_BOUNDARY">
            <summary>
            Right eye bottom boundary
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_LEFT_CORNER">
            <summary>
            Right eye left corner 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Left eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYEBROW_UPPER_MIDPOINT">
            <summary>
            Right eyebrown upper midpoint
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EAR_TRAGION">
            <summary>
            Left ear tragion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EAR_TRAGION">
            <summary>
            Right eear tragion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.LEFT_EYE_PUPIL">
            <summary>
            Left eye pupil
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.RIGHT_EYE_PUPIL">
            <summary>
            Right eye pupil
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.FOREHEAD_GLABELLA">
            <summary>
            Glabella
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_GNATHION">
            <summary>
            Chin gnathion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_LEFT_GONION">
            <summary>
            Chin left gonion
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.GCVLandmarkType.CHIN_RIGHT_GONION">
            <summary>
            Chin right gonion
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IRegularComponent">
            <summary>
            The opposite of the IUniqueComponent. Can be many and disposed easily. Used for UI purposes mainly or multiple sensor
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.IUniqueComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.IUniqueComponent">
            <summary>
            A unique component can be instanciate via Injector only once time and cannot be disposed.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.IRegularComponent"/>
        </member>
        <member name="T:BlueQuark.Internal.UnitTestAttribute">
            <summary>
            Attribute that allow the metric suite to retrieve test method
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AULink">
            <summary>
            Unity Link is the BlueQuark interface between logical classes (Presenter) 
            and Unity for display, Editor interaction, plugin or callback purposes.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mEventBus">
            <summary>
            The event bus system. Allow to subscribe and unsubscribe from events. Also used to fire events.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.AULink.mPresenter">
            <summary>
            Presenter logical class of the current Unity Link. Use it to forward Unity callbacks
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AULink.AddComponent``1">
            <summary>
            Adds a Unity component class corresponding to the requested type to the game object.
            </summary>
            <typeparam name="T">The type of the Unity component to add</typeparam>
            <returns>The added Unity component</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.EnableLoop">
            <summary>
            Subscribe the ULink to the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the subscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.DisableLoop">
            <summary>
            Unsubscribe the ULink from the looper system.
            </summary>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <returns>True if the unsubscribtion has been recorded</returns>
        </member>
        <member name="M:BlueQuark.Internal.AULink.ForwardUnityCallback(System.Object)">
            <summary>
            Calls a method in the presenter part with the same name of the calling method with the suffix "Impl". Use that method to forward an Unity event in the ULink to the Presenter side.
            </summary>
            <param name="iArg">Optional arg that will be forward to the Presenter method</param>
        </member>
        <member name="T:BlueQuark.Internal.Sandbox">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AppUpdater">
            <summary>
            This class retrieves online apps and updates local apps
            </summary>
            <summary>
            This class retrieves online apps and updates local apps
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AppUpdater.CompareVersions(System.String,System.String)">
            <summary>
            Returns 1 if First greater than Second.
            Returns 0 if equals.
            Returns -1 if First lower than Second
            </summary>
            <param name="iFirstVersion">First version string</param>
            <param name="iSecondVersion">Second version string</param>
            <returns>Compared value</returns>
        </member>
        <member name="T:BlueQuark.Internal.Main">
            <summary>
            Entry point of the BlueQuark operating system. Initialization order : Looper > EventBus > Injector > Main
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
            <seealso cref="T:BlueQuark.Internal.Looper"/>
            <seealso cref="T:BlueQuark.Internal.EventBus"/>
            <seealso cref="T:BlueQuark.Buddy"/>
        </member>
        <member name="T:BlueQuark.Internal.TimeStamp">
            <summary>
            Represents the executed command timestamp
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.BroadcastListener">
            <summary>
            This is to create a Broadcast client to let
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.BroadcastListener.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Own method to configure what to do when receiving a Broadcast
            </summary>
            <param name="iFromAddress">The address that send the broadcast</param>
            <param name="iData">Data contained in the broadcast</param>
        </member>
        <member name="T:BlueQuark.Internal.LaunchTelepresence">
            <summary>
            Behaviour for starting RemoteControlApp
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LocalListener">
            <summary>
            This class handles the Local Broadcast Listener and messages with the Smartphone app to launch local remote control
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NetworkBroadcastResult">
            <summary>
            Structure for broadcast messages
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.NetworkBroadcastResult.serverAddress">
            <summary>
            The address of the server that sent the broadcast
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.NetworkBroadcastResult.broadcastData">
            <summary>
            Content of the broadcast
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NetDiscovery">
            <summary>
            Unity Networking NetworkDiscovery added in this dll for namespace separation in dll reasons
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NetDiscovery.StartAsClient">
            <summary>
            Starts the service as client and listens for broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Internal.NetDiscovery.StartAsServer">
            <summary>
            Starts the service as server and emits a broadcast
            </summary>
            <returns>True if started succesfully, false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Internal.NetDiscovery.StopBroadcast">
            <summary>
            Stops the broadcast service
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.NetDiscovery.OnReceivedBroadcast(System.String,System.String)">
            <summary>
            Callback called when a broadcast is received
            </summary>
            <param name="iFromAddress">Address that sent the broadcast</param>
            <param name="iData">Body data of the broadcast</param>
        </member>
        <member name="T:BlueQuark.Internal.HardwareCom">
            <summary>
            Arduino component of the robot
            </summary>
            <summary>
            Hardware communication with the Hemise board
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LocalizationGraph">
            <summary>
            Graph representing the topological map
            A graph can be build from a serialized file with DeSerialize(str).
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LocalizationNode">
            <summary>
            Node for topological mapping.
            Each node represents a place in a global graph. 
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalizationNode.ID">
            <summary>
            ID of the node
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalizationNode.Coordinates">
            <summary>
            Position of the node
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalizationNode.AdjacentNodes">
            <summary>
            Adjacent nodes
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalizationNode.Observations">
            <summary>
            Observations of the node
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalizationNode.Weight">
            <summary>
            Weight of the node ==> Weight of the observation
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LocalizationNode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LocalizationNode.ToString">
            <summary>
            Serialization tool
            </summary>
            <returns>The corresponding string</returns>
        </member>
        <member name="T:BlueQuark.Internal.MinTriLocalizationStrategy">
            <summary>
            Best localization strategy by searching for the minimal area triangle
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.MinTriLocalizationStrategy.Execute(BlueQuark.SharpLocation[])">
            <summary>
            Best localization strategy by searching for the minimal area triangle
            </summary>
            <param name="iConjecturalLocalizations">Best find position of the robot</param>
            <returns>Hypothetical position of the robot</returns>
        </member>
        <member name="T:BlueQuark.Internal.Observation">
            <summary>
            Observations of the robot at a given orientation
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Observation.Orientation">
            <summary>
            Orientation of the observation
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Observation.Weight">
            <summary>
            Weight (rate) of the observation
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Observation.Descriptors">
            <summary>
            Descriptor of the observation
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.Observation.Landmarks">
            <summary>
            Landmarks of the observation
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Observation.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.Observation.ToString">
            <summary>
            Serialization tool
            </summary>
            <returns>The corresponding string</returns>
        </member>
        <member name="T:BlueQuark.Internal.UserManagerMetric">
            <summary>
            This class represents user preferences
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LocalRobotPref">
            <summary>
            Represents the robot preferences
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LocalRobotPref.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableAppAutoUpdate">
            <summary>
            Does the robot have to auto check for apps updates
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableDLBuiltinApps">
            <summary>
            Does the robot have to download builtin apps
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.EnableSystemAutoUpdate">
            <summary>
            Does the robot have to auto check for system updates
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.AutoLockScreen">
            <summary>
            Does the robot authorize the auto lock screen
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LockScreenTimer">
            <summary>
            The time in seconds user have to type pin
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.Pwd">
            <summary>
            Password of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastLoggedAccount">
            <summary>
            Last account which was logged on the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastOdometryPosition">
            <summary>
            Last odometry position of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LocalRobotPref.LastComputedPosition">
            <summary>
            Last computed position of the robot
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.LanguageThesaurus">
            <summary>
            Language dictionary storage. Contains key-value entries for one language
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.LanguageThesaurus.Entries">
            <summary>
            All key-value entries of the thesaurus
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LanguageThesaurus.#ctor">
            <summary>
            Represents all the dictionary entries
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.LanguageThesaurus.ContainsKey(System.String)">
            <summary>
            Check existing key in existing entries
            </summary>
            <param name="iKey">Key to check</param>
            <returns>True if the key already exists in Entries</returns>
        </member>
        <member name="F:BlueQuark.Internal.EntryType.BASE">
            <summary>
            Unique value for UI display purpose
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.EntryType.CLOSE_PHONETIC">
            <summary>
            Dictionary entry for STT purpose mainly
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.EntryType.RANDOM">
            <summary>
            Dictionary entry for TTS purpose mainly
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.DictionaryEntry">
            <summary>
            Key-value dictionary base entry
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.Key">
            <summary>
            Key of the value
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.BaseValue">
            <summary>
            Display value
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.ClosePhoneticValues">
            <summary>
            Listen list for STT input processing
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.DictionaryEntry.RandomValues">
            <summary>
            Say list containing value that will be choosen randomly 
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IPlugabble">
            <summary>
            Pluggable component can be connected or unconnected
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.IPlugabble.IsConnected">
            <summary>
            Return true if the component is plugged to the correct hardware port
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IThrowable">
            <summary>
            A throwable component should returns if an error occured, and what type of error
            </summary>
            <seealso cref="T:BlueQuark.Internal.Injector"/>
        </member>
        <member name="P:BlueQuark.Internal.IThrowable.Error">
            <summary>
            The last recorded error id
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.ARemoteCommand">
            <summary>
            Atomic behaviour from the Command pattern. You can define your own commands by inherit from ACommand.
            Parameters can be setted with the Parameters attributes.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ARemoteCommand.Parameters">
            <summary>
            Parameters of the command
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ARemoteCommand.IsExecuted">
            <summary>
            Check if the command has been executed
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.ARemoteCommand.IsExecutedImpl">
            <summary>
            Own implementation to check if the current command was executed
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.#ctor">
            <summary>
            Base constructor for deserialization
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.Execute">
            <summary>
            Execute the command behaviour defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.UpdateParams(System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.UpdateParams(System.Single[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.UpdateParams(System.String[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.UpdateParams(System.Object[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iObjects">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.Serialize">
            <summary>
            Create a custom byte array representing the command.
            </summary>
            <returns>The command serialization</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.Deserialize(System.String,System.Char,System.String)">
            <summary>
            Create a command from a string containing successive bytes, separate by ","
            </summary>
            <param name="iBytes">The byte string</param>
            <param name="iSeparator">Separator character between each byte</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.Deserialize(System.Byte[],System.String)">
            <summary>
            Create a command from a byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="iAssembly">The assembly where the command belongs</param>
            <returns>The command, created and init</returns>
        </member>
        <member name="M:BlueQuark.Internal.ARemoteCommand.ToString">
            <summary>
            String basic serialization of the command
            </summary>
            <returns>Command string value for debug</returns>
        </member>
        <member name="T:BlueQuark.Internal.ACommandExtention">
            <summary>
            Static command extention for IEnumerable of ACommand
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{BlueQuark.Internal.ARemoteCommand})">
            <summary>
            Execute all command behaviours defined in ExecuteImpl
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BlueQuark.Internal.ARemoteCommand},System.Int32[])">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iCommands">List of commands to update</param>
            <param name="iIntegers">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BlueQuark.Internal.ARemoteCommand},System.String[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iCommands">List of commands to update</param>
            <param name="iStrings">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BlueQuark.Internal.ARemoteCommand},System.Single[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iCommands">List of commands to update</param>
            <param name="iSingles">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.UpdateParams(System.Collections.Generic.IEnumerable{BlueQuark.Internal.ARemoteCommand},System.Object[])">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iCommands">List of commands to update</param>
            <param name="iObjects">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.Int32}},System.Int32)">
            <summary>
            Update params in existing command. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iActions">List of actions to execute</param>
            <param name="iInteger">Integers that will replace existing Integers in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.String}},System.String)">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iActions">List of actions to execute</param>
            <param name="iString">Strings that will replace existing Strings in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.Single}},System.Single)">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iActions">List of actions to execute</param>
            <param name="iSingle">Singles that will replace existing Singles in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="M:BlueQuark.Internal.ACommandExtention.Execute(System.Collections.Generic.IEnumerable{System.Action{System.Object}},System.Object)">
            <summary>
            Update params in all commands. Allows to avoid recreate a new command for the same purpose.
            </summary>
            <param name="iActions">List of actions to execute</param>
            <param name="iObject">Objects that will replace existing Objects in Parameters</param>
            <returns>The updated command</returns>
        </member>
        <member name="T:BlueQuark.Internal.RotateNoCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.RotateNoCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.RotateNoCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BlueQuark.Internal.RotateNoCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RotateYesCmd">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.RotateYesCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.RotateYesCmd.#ctor(System.Single,System.Single)">
            <summary>
            When executed : Set the angular position of the motor at a specific speed
            </summary>
            <param name="iAngle">Angle in degrees of the angular position</param>
            <param name="iSpeed">Speed in degrees/sec of the motor</param>
        </member>
        <member name="M:BlueQuark.Internal.RotateYesCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.SetWheelsSpeedCmd">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.SetWheelsSpeedCmd.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.SetWheelsSpeedCmd.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            When executed : Controls the speed of the wheels, stops after the timeout.
            </summary>
            <param name="iLeft">Desired left wheel speed, in degrees per seconds</param>
            <param name="iRight">Desired right wheel speed, in degrees per seconds</param>
            <param name="iTimeout">Timeout in milliseconds</param>
        </member>
        <member name="M:BlueQuark.Internal.SetWheelsSpeedCmd.ExecuteImpl">
            <summary>
            Execute the command behaviour.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.RemoteCommandParam">
            <summary>
            Represents parameters for command. Contains it own serialization implementation
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.RemoteCommandParam.Integers">
            <summary>
            Integer storage.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.RemoteCommandParam.Singles">
            <summary>
            Float storage.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.RemoteCommandParam.Strings">
            <summary>
            Unicode string storage.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.RemoteCommandParam.Objects">
            <summary>
            Miscellaneous object storage. Won't be serialized.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.RemoteCommandParam.Serialize">
            <summary>
            Serialization to byte array of the current param
            </summary>
            <returns>Parameter byte array equivalent</returns>
        </member>
        <member name="M:BlueQuark.Internal.RemoteCommandParam.Deserialize(System.Byte[],System.Int32@)">
            <summary>
            Create a new CommandParam object from the input byte array
            </summary>
            <param name="iBytes">The byte array</param>
            <param name="ioIndex">The index at the end of the parameter area</param>
            <returns>The new CommandParam</returns>
        </member>
        <member name="M:BlueQuark.Internal.RemoteCommandParam.ToString">
            <summary>
            String basic serialization of the commandparam
            </summary>
            <returns>CommandParam string value for debug</returns>
        </member>
        <member name="T:BlueQuark.Internal.FFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.NFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.TFactory">
            <summary>
            Pool manager for widget (UI) gameobject
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ATLayoutWidget`2.mToastInfo">
            <summary>
            The toast info container, contains info that must be displayed
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.ATLayoutWidget`2.mWidgets">
            <summary>
            Displayed widgets. Must be cleared on layout dispose
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.IIndexedObject">
            <summary>
            Interface for item indexation.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.GoogleSpeech">
            <summary>
            Speech to text layer that allows you to translate an input signal to a basic System.String.
            Only works on Android builds.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VocalTrigger">
            <summary>
            Trigger used for begin the voice recognition phase.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.VoConSpeech">
            <summary>
            Trigger used for begin the voice recognition phase.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConEvent},System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String,System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammar">The path to the grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String,System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConEvent},System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammar">The path to the grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String[],System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammars">The path to the grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.VoConSpeech.Listen(System.String[],System.Action{BlueQuark.Internal.VoConResult},System.Action{BlueQuark.Internal.VoConEvent},System.Int32)">
            <summary>
            Start the Vocon recognition engine.
            </summary>
            <param name="iGrammars">The path to the grammar that will be used.</param>
            <param name="iConfidenceThreshold">Under this threshold, other results won't be given (values between 1 and 9999).</param>
        </member>
        <member name="M:BlueQuark.Internal.EmbeddedVoConSpeechULink.OnEndReco(System.String)">
            <summary>
            Callback when recognition is finished.
            This is the callback called from the android plugin. Its name shouldn't be changed.
            </summary>
            <param name="iResult">Result of the recognition.</param>
        </member>
        <member name="M:BlueQuark.Internal.EmbeddedVoConSpeechULink.OnError(System.String)">
            <summary>
            Error thrown during the recognition process.
            This is the callback called from the android plugin. Its name shouldn't be changed.
            </summary>
            <param name="iError">Error thrown during recognition.</param>
        </member>
        <member name="M:BlueQuark.Internal.EmbeddedVoConSpeechULink.OnAudioEvent(System.String)">
            <summary>
            Audio event detected by the Vocon recognition.
            This is the callback called from the android plugin. Its name shouldn't be changed.
            </summary>
            <param name="iEvent">Audio event detected by Vocon.</param>
        </member>
        <member name="T:BlueQuark.Internal.VoConEvent">
            <summary>
            All the possible audio events that can be detected by Vocon.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.BEGINNING_OF_SPEECH">
            <summary>
            User started to speak.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.MAYBE_SPEECH">
            <summary>
            Could be the beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.NO_SPEECH">
            <summary>
            The previously sent MAYBE_SPEECH event did not lead
            to and actual beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.TIMEOUT">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.TRAILING_SILENCE">
            <summary>
            A trailing silence was detected.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.BAD_SIGNAL_NOISE_RATIO">
            <summary>
            The signal to noise ratio is too low.
            This event is generated if at the end of an utterance
            the signal/noise ratio remains below 12dB.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.OVERLOAD">
            <summary>
            The speech level is too loud.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.TOO_QUIET">
            <summary>
            The speech level is too weak.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.NO_SIGNAL">
            <summary>
            No or very low input signal.
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.POOR_MIC">
            <summary>
            This could mean that the microphone or the audio hardware is of poor quality. 
            </summary>
        </member>
        <member name="F:BlueQuark.Internal.VoConEvent.NO_LEADING_SILENCE">
            <summary>
            The recording apparantly does not start with leading silence.
            Possibly the speaker started speaking too soon,
            but because this detection is only energy based,
            other noise events at the start of the utterance may also trigger this condition.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.Confidence">
            <summary>
            The confidence level of the result. Values are between 1 (low confidence) and 9999 (high confidence).
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.Utterance">
            <summary>
            The text of the result from the recognition process.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.VoConResult.StartRule">
            <summary>
            The name of the 'start rule' which produced the result. The format is 'grammarName#startRuleName'.
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.AndroidSpeech">
            <summary>
            Speech to text layer that allows you to translate an input signal to a basic System.String.
            Only works on Android builds.
            </summary>
            <summary>
            Once the voice recognition is activated, use this class to get the last heard sentence.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnBeginning">
            <summary>
            Called when a recognition started
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnPartial">
            <summary>
            Called when the recognizer has recognized a word, but the complete recognition is not finished
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnBestRecognition">
            <summary>
            Called after a voice recognition with the best recognized sentence
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnError">
            <summary>
            Called after any error
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnErrorEnum">
            <summary>
            Called after any error
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnVolumeChange">
            <summary>
            Called after a volume modification
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.OnEnd">
            <summary>
            Called at the end of the recogntion
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.LastAnswer">
            <summary>
            Get the best answer heard by the Speech To Text
            </summary>
            <returns>String of the text recognized</returns>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.LastRecoText">
            <summary>
            Get the answers list heard by the Speech To Text
            </summary>
            <returns>String of the text recognized. All the suggestions of what seemed to be heard are listed</returns>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.LastRecoConfidence">
            <summary>
            Get the confidence of the best answer recognized by the Speech To Text 
            </summary>
            <returns>float from 0.0f to 1.0f specifying the amount of confidence in the suggested answer</returns>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.HasFinished">
            <summary>
            Is the listening finished?
            </summary>
            <returns>Is the listening finished?</returns>
        </member>
        <member name="P:BlueQuark.Internal.AndroidSpeech.LastError">
            <summary>
            Retrieve the last error sent by the Speech To Text
            </summary>
            <returns>Returns the error in string</returns>
        </member>
        <member name="M:BlueQuark.Internal.AndroidSpeech.Request">
            <summary>
            Launch the request call for the Speech To Text. Has to be done whenever you want the recognition to begin.
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.AndroidSpeech.Stop">
            <summary>
            Stops listening and destroys the speechrecognizer (relaunch request to instantiate)
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.STTStringCallback">
            <summary>
            Use this delegate in STT. Called after a voice recognition
            </summary>
            <param name="iMsg">The input voice as a string</param>
        </member>
        <member name="T:BlueQuark.Internal.STTCallback">
            <summary>
            Use this delegate in STT. Called after any interaction this the STT
            </summary>
        </member>
        <member name="T:BlueQuark.Internal.STTVolumeCallback">
            <summary>
            Use this delegate in STT. Called after a volume modification
            </summary>
            <param name="iVolume"></param>
        </member>
        <member name="T:BlueQuark.Internal.STTErrorCallback">
            <summary>
            Use this delegate in STT. Called after any error during the STT process
            </summary>
            <param name="iError"></param>
        </member>
        <member name="T:BlueQuark.Internal.TextToSpeech">
            <summary>
            Text to speech allows you to make Buddy talks an input System.String.
            The Windows version uses SAPI, the Android version uses Google API.
            So, available methods have not the same behaviour on difference devices.
            </summary>
            <summary>
            Text to speech allows you to make Buddy talks an input System.String.
            The Windows version uses SAPI, the Android version uses Google API.
            So, available methods have not the same behaviour on difference devices.
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.IsBusy">
            <summary>
            Checks if the TTS is currently speaking
            </summary>
            <returns>True if a sentence is spoken</returns>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Pitch">
            <summary>
            Sets the pitch
            </summary>
        </member>
        <member name="P:BlueQuark.Internal.TextToSpeech.Speed">
            <summary>
            Sets the speech rate
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.Stop">
            <summary>
            Stop the current speech
            </summary>
        </member>
        <member name="M:BlueQuark.Internal.TextToSpeech.Say(System.String,System.Action)">
            <summary>
            Makes the robot speak the input string. Can also be added to the queue
            </summary>
            <param name="iUtterance"></param>
        </member>
        <member name="T:BlueQuark.TaskOwner">
            <summary>
            Represents any OS component or App behaviour that is using an OS component
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Type">
            <summary>
            Type of the user component (the owner)
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Parameter">
            <summary>
            Optional parameter of the called method 
            </summary>
        </member>
        <member name="P:BlueQuark.TaskOwner.Name">
            <summary>
            Simplified name of the user component (the owner)
            </summary>
        </member>
        <member name="T:BlueQuark.NoHeadHinge">
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe)
            </summary>
            <summary>
            Represents the no axe hinge of the robot (Yaw Euler axe)
            </summary>
        </member>
        <member name="T:BlueQuark.YesHeadHinge">
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe)
            </summary>
            <summary>
            Represents the yes axe hinge of the robot (Roll Euler axe)
            </summary>
        </member>
        <member name="T:BlueQuark.LEDColor">
            <summary>
            Color enumeration corresponding to the mood of the robot.
            Can be easily combine with de Face.SetMood(FaceMood) component.
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.RED_ANGRY">
            <summary>
            Will set the LED in red
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PURPLE_GRUMPY">
            <summary>
            Will set the LED in soft purple
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.ORANGE_HAPPY">
            <summary>
            Will set the LED in orange
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BLUE_LISTENING">
            <summary>
            Will set the LED in hard blue
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BLUE_NEUTRAL">
            <summary>
            Will set the LED in soft blue
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PINK_SAD">
            <summary>
            Will set the LED in hard purple
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.BROWN_SCARED">
            <summary>
            Will set the LED in hard orange
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.YELLOW_SICK">
            <summary>
            Will set the LED in soft green
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.YELLOW_SURPRISED">
            <summary>
            Will set the LED in hard yellow
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREEN_THINKING">
            <summary>
            Will set the LED in green
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.GREY_TIRED">
            <summary>
            Will set the LED in grey
            </summary>
        </member>
        <member name="F:BlueQuark.LEDColor.PINK_LOVE">
            <summary>
            Will set the LED in pink
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.IsBusy">
            <summary>
            Returns True if a any sound is currently played from any speaker.  
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Status">
            <summary>
            Status of the Speaker.
            </summary>
        </member>
        <member name="P:BlueQuark.ASoundChannel`2.Mute">
            <summary>
            Tells if the audiosource is muted or not.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Pause">
            <summary>
            Pauses the audio clip.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Resume">
            <summary>
            If paused, resumes the active audio clip.
            </summary>
        </member>
        <member name="M:BlueQuark.ASoundChannel`2.Stop">
            <summary>
            Stops playing the current audio clip.
            </summary>
        </member>
        <member name="T:BlueQuark.SoundSample">
            <summary>
            Kind of sound that Buddy can natively handle for voice acting
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.NONE">
            <summary>
            No sound
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.CURIOUS_1">
            <summary>
            Curious sound 1
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.CURIOUS_2">
            <summary>
            Curious sound 2
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.FOCUS_1">
            <summary>
            Focus sound 1
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.FOCUS_2">
            <summary>
            Focus sound 2
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_1">
            <summary>
            Laugh sound 1
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_2">
            <summary>
            Laugh sound 2
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_3">
            <summary>
            Laugh sound 3
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_4">
            <summary>
            Laugh sound 4
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.LAUGH_5">
            <summary>
            Laugh sound 5
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SIGH">
            <summary>
            Sigh sound
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_1">
            <summary>
            Surprised sound 1
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_2">
            <summary>
            Surprised sound 2
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_3">
            <summary>
            Surprised sound 3
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_4">
            <summary>
            Surprised sound 4
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_5">
            <summary>
            Surprised sound 5
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.SURPRISED_6">
            <summary>
            Surprised sound 6
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.YAWN">
            <summary>
            Yawn sound
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_CURIOUS">
            <summary>
            Random curious sound
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_LAUGH">
            <summary>
            Random laugh sound
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.RANDOM_SURPRISED">
            <summary>
            Random surprised sound
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_1">
            <summary>
            Deep beep
            </summary>
        </member>
        <member name="F:BlueQuark.SoundSample.BEEP_2">
            <summary>
            High beep
            </summary>
        </member>
        <member name="T:BlueQuark.Behaviour">
            <summary>
            Class that contains all the interaction features (Mood, Face, ...)
            </summary>
            <summary>
            Class that contains all the interaction features (Mood, Face, BML manager ...)
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.IsBusy">
            <summary>
            Tells whether all behaviours are done playing.
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Mood">
            <summary>
            Mood of the robot
            </summary>
        </member>
        <member name="P:BlueQuark.Behaviour.Face">
            <summary>
            Face of the robot (Eyes and mouth)
            </summary>
        </member>
        <member name="M:BlueQuark.Behaviour.Play(System.String,System.Collections.Generic.Dictionary{System.String,System.String},BlueQuark.BMLComposition)">
            <summary>
            Launches a Behaviour. Will check first in App's BML, then OS's BML.
            </summary>
            <param name="iName">The name of the behaviour described by the BML's name.</param>
            <param name="iParams">Parameters for the execution of the behaviour. The keys should be the parameter's names and the value the target value of the attribute.</param>
            <param name="iComposition">Composition type of the behaviour.</param>
            <returns>False if the BML was not found.</returns>
        </member>
        <member name="M:BlueQuark.Behaviour.PlayRandom(BlueQuark.FacialExpression,System.Collections.Generic.Dictionary{System.String,System.String},BlueQuark.BMLComposition,BlueQuark.BMLContext)">
            <summary>
            Launches a random behaviour that belongs to a certain category.
            </summary>
            <param name="iType">The MoodType to look for.</param>
            <param name="iParams">Parameters for the execution of the behaviour. The keys should be the parameter's names and the value the target value of the attribute.</param>
            <param name="iComposition">Composition type of the behaviour.</param>
            <param name="iContext">The context from which a random BML should be executed. Cand be from current APP, from the OS or both.</param>
            <returns>False if no behaviour was found for the category, true if one was successfuly started.</returns>
        </member>
        <member name="M:BlueQuark.Behaviour.PlayRandom(System.String,System.Collections.Generic.Dictionary{System.String,System.String},BlueQuark.BMLComposition,BlueQuark.BMLContext)">
            <summary>
            Launches a random behaviour that belongs to a certain category.
            </summary>
            <param name="iCategory">The Category type to search in.</param>
            <param name="iParams">Parameters for the execution of the behaviour. The keys should be the parameter's names and the value the target value of the attribute.</param>
            <param name="iComposition">Composition type of the behaviour.</param>
            <param name="iContext">The context from which a random BML should be executed. Cand be from current APP, from the OS or both.</param>
            <returns>False if no behaviour was found for the category, true if one was successfuly started.</returns>
        </member>
        <member name="M:BlueQuark.Behaviour.Load(System.String)">
            <summary>
            Loads a single BML from current App.
            </summary>
            <param name="iFileName">The full name of the BML to load (e.g. "bml.xml").</param>
            <returns>False if file is not found or doesn't exist.</returns>
        </member>
        <member name="M:BlueQuark.Behaviour.LoadAll(BlueQuark.Context)">
            <summary>
            Loads all BML from current App.
            </summary>
        </member>
        <member name="M:BlueQuark.Behaviour.Stop">
            <summary>
            Stops all currently running behaviours.
            </summary>
        </member>
        <member name="T:BlueQuark.Face">
            <summary>
            Class which includes the speficities of the animator for the regular face and provides every methods to control it.
            </summary>
            <summary>
            Face of the robot. You can use this component to make Buddy smiling or crying, depending on your needs.
            Some events are also available like blinking, swallowing, yawning...
            If you use the Text to speech component, the robot face will automaticaly "talk".
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnClickMouth">
            <summary>
            Set of callback called when mouth is clicked by the user
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnClickLeftEye">
            <summary>
            Set of callback called when left eye is clicked by the user
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnClickRightEye">
            <summary>
            Set of callback called when right eye is clicked by the user
            </summary>
        </member>
        <member name="P:BlueQuark.Face.OnTouchSkin">
            <summary>
            Set of callback called when the skin is touched (ie : except mouth and eyes)
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Texture">
            <summary>
            Texture of Buddy's face
            </summary>
        </member>
        <member name="P:BlueQuark.Face.Locked">
            <summary>
            Determine is Buddy face can be changed
            </summary>
        </member>
        <member name="M:BlueQuark.Face.SetFacialExpression(BlueQuark.FacialExpression)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iFacialExpression">The name of the mood to switch to</param>
        </member>
        <member name="M:BlueQuark.Face.PlayEvent(BlueQuark.FacialEvent)">
            <summary>
            Buddy will make a mouth event. Last until MouthEvent.NONE or speak
            </summary>
            <param name="iFacialEvent">The mouth event</param>
        </member>
        <member name="M:BlueQuark.Face.LookAt(System.Int32,System.Int32)">
            <summary>
            Look at the specified location (bottom left => 0, 0)
            </summary>
            <param name="iX">X coordinate, max val = Screen.width</param>
            <param name="iY">Y coordinate, max val = Screen.height</param>
        </member>
        <member name="M:BlueQuark.Face.LookAt(BlueQuark.GazePosition)">
            <summary>
            Facility to LookAt(X, Y) method
            </summary>
            <param name="iLookAt">The location to look at</param>
        </member>
        <member name="T:BlueQuark.FacialEvent">
            <summary>
            Mouth and eye events that Buddy face can handle
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SMILE">
            <summary>
            Make the face smile
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.YAWN">
            <summary>
            Make the face yawn
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.SCREAM">
            <summary>
            Make the face scream like a barbarian
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_RIGHT">
            <summary>
            Make the face blinking the right eye
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_LEFT">
            <summary>
            Make the face blinking the left eye
            </summary>
        </member>
        <member name="F:BlueQuark.FacialEvent.BLINK_DOUBLE">
            <summary>
            Make the face blinking both eyes
            </summary>
        </member>
        <member name="T:BlueQuark.GazePosition">
            <summary>
            Facility enum for face LookAt(x, y) method
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.CENTER">
            <summary>
            Look at center
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP_LEFT">
            <summary>
            Look at top left
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.TOP_RIGHT">
            <summary>
            Look at top right
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM_RIGHT">
            <summary>
            Look at bottom rigth
            </summary>
        </member>
        <member name="F:BlueQuark.GazePosition.BOTTOM_LEFT">
            <summary>
            Look at bottom left
            </summary>
        </member>
        <member name="T:BlueQuark.LabialExpression">
            <summary>
            Represents different expressions that Buddy can show
            </summary>
        </member>
        <member name="F:BlueQuark.LabialExpression.NEUTRAL">
            <summary>
            Neutral
            </summary>
        </member>
        <member name="F:BlueQuark.LabialExpression.ANGRY">
            <summary>
            Angry
            </summary>
        </member>
        <member name="F:BlueQuark.LabialExpression.HAPPY">
            <summary>
            Happy
            </summary>
        </member>
        <member name="T:BlueQuark.FacialExpression">
            <summary>
            Represents different expressions that Buddy can show
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.NEUTRAL">
            <summary>
            Neutral
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.ANGRY">
            <summary>
            Angry
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.GRUMPY">
            <summary>
            Grumpy
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.HAPPY">
            <summary>
            Happy
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.LISTENING">
            <summary>
            Listening
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SAD">
            <summary>
            Sad
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SCARED">
            <summary>
            Scared
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SICK">
            <summary>
            Sick
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.SURPRISED">
            <summary>
            Surprised
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.THINKING">
            <summary>
            Thinking
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.TIRED">
            <summary>
            Tired
            </summary>
        </member>
        <member name="F:BlueQuark.FacialExpression.LOVE">
            <summary>
            In love !
            </summary>
        </member>
        <member name="T:BlueQuark.Mood">
            <summary>
            Mood element of the robot. It is an helper component combining Face, LED and moving commands.
            </summary>
            <summary>
            Mood element of the robot. It is an helper component combining Face, LED and moving commands.
            </summary>
        </member>
        <member name="P:BlueQuark.Mood.CurrentMood">
            <summary>
            Retrieve the current buddy mood
            </summary>
        </member>
        <member name="P:BlueQuark.Mood.LastMood">
            <summary>
            Retrive the last buddy mood
            </summary>
        </member>
        <member name="M:BlueQuark.Mood.Set(BlueQuark.FacialExpression,System.Boolean)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iSound">Does the robot must make a sound with its mood ?</param>
        </member>
        <member name="M:BlueQuark.Mood.Set(BlueQuark.FacialExpression,BlueQuark.SoundSample)">
            <summary>
            Ask the face to switch to the specified mood.
            </summary>
            <param name="iMood">The name of the mood to switch to</param>
            <param name="iSound">Does the robot must make a sound with its mood ?</param>
        </member>
        <member name="P:BlueQuark.Mood.Locked">
            <summary>
            Determine is Buddy mood can be changed
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.ProceduralMemory">
            <summary>
            Access to the procedural (skills, tasks) memory of Buddy
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.EpisodicMemory">
            <summary>
            Access to the episodic (event, xp) memory of Buddy
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.InternalState">
            <summary>
            Buddy's internal state of mind.
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.GoogleCloudVision">
            <summary>
            Access to the google cloud vision feature
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.Localization">
            <summary>
            Localization tool
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.RoomDetector">
            <summary>
            Localization tool
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.TensorFlow">
            <summary>
            Feature to make prediction on available models
            </summary>
        </member>
        <member name="P:BlueQuark.Cognitive.FaceRecognizer">
            <summary>
            Feature to detect short range Waving
            </summary>
        </member>
        <member name="T:BlueQuark.EpisodicMemory">
            <summary>
            This class represents the declarative memory of Buddy
            </summary>
            <summary>
            This class represents the declarative memory of Buddy
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.ComputeBias">
            <summary>
            Compute the uncumulative emotional stimuli
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.Variable2Mood(System.Int32,System.Int32)">
            <summary>
            To visualize the internal state rapartition, it's recommended to have a look at the documentation on the NAS.
            </summary>
            <param name="iPositivity"></param>
            <param name="iEnergy"></param>
        </member>
        <member name="P:BlueQuark.InternalState.InternalStateMood">
            <summary>
            The current state of mind of Buddy.
            </summary>
        </member>
        <member name="P:BlueQuark.InternalState.Positivity">
            <summary>
            The positivity value of the current state.
            </summary>
        </member>
        <member name="P:BlueQuark.InternalState.Energy">
            <summary>
            The energy value of the current state.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.ExplainMood">
            <summary>
            Buddy will explain why it's in its current state, relatively to its past interactions.
            </summary>
        </member>
        <member name="M:BlueQuark.InternalState.AddCumulative(BlueQuark.EmotionalEvent)">
            <summary>
            Add a cumulative event to Buddy's actual list.
            </summary>
            <param name="iEmotionalEvent"></param>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Type">
            <summary>
            This is used to get the category of the event
            </summary>
        </member>
        <member name="F:BlueQuark.EmotionalEvent.EventDescriber">
            <summary>
            This is used to compare if events are similar
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.ExplanationKey">
            <summary>
            This is used to explain Buddy's mood
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.MoodDirection">
            <summary>
            Tells where this event is going to, which mood should result
            </summary>
        </member>
        <member name="P:BlueQuark.EmotionalEvent.Time">
            <summary>
            Time when the event was registered
            </summary>
        </member>
        <member name="T:BlueQuark.ProceduralMemory">
            <summary>
            This class represents the procedural memory of Buddy
            </summary>
            <summary>
            This class represents the procedural memory of Buddy
            </summary>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.AddReminder(System.String,System.Int32)">
            <summary>
            Add a new reminder to the procedural memory
            </summary>
            <param name="iContent">Content of the reminder</param>
            <param name="iSenderID">An ID representing the reminder sender</param>
            <returns>The new reminder</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.AddReminder(System.String,System.Int32,System.Int32[])">
            <summary>
            Add a new reminder to the procedural memory
            </summary>
            <param name="iContent">Content of the reminder</param>
            <param name="iSenderID">An ID representing the sender</param>
            <param name="iAddressees">An array of ID representing reminder receivers</param>
            <returns>The new reminder</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.AddReminder(System.DateTime,System.String,System.Int32)">
            <summary>
            Add a new reminder to the procedural memory
            </summary>
            <param name="iEventDate">Date on which reminder will be issued</param>
            <param name="iContent">Content of the reminder</param>
            <param name="iSenderID">An ID representing the sender</param>
            <returns>The new reminder</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.AddReminder(System.DateTime,System.String,System.Int32,System.Int32[])">
            <summary>
            Add a new reminder to the procedural memory
            </summary>
            <param name="iEventDate">Date on which reminder will be issued</param>
            <param name="iContent">Content of the reminder</param>
            <param name="iSenderID">An ID representing the sender</param>
            <param name="iAddressees">An array of ID representing reminder receivers</param>
            <returns>The new reminder</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.AddReminder(System.DateTime,BlueQuark.RemindPrecision,System.String,System.Int32)">
            <summary>
            Add a new reminder to the procedural memory
            </summary>
            <param name="iEventDate">Date on which reminder will be issued</param>
            <param name="iPrecision"></param>
            <param name="iContent">Content of the reminder</param>
            <param name="iSenderID">An ID representing the sender</param>
            <returns>The new reminder</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.AddReminder(System.DateTime,BlueQuark.RemindPrecision,System.String,System.Int32,System.Int32[])">
            <summary>
            Add a new reminder to the procedural memory
            </summary>
            <param name="iEventDate">Date on which reminder will be issued</param>
            <param name="iPrecision">Precision of the event date</param>
            <param name="iContent">Content of the reminder</param>
            <param name="iSenderID">An ID representing the sender</param>
            <param name="iReceivers">An array of ID representing reminder receivers</param>
            <returns>The new reminder</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.ExistReminder(System.Int32)">
            <summary>
            Check if the reminder exists.
            </summary>
            <param name="iID">The reminder ID</param>
            <returns>True if the reminder exists. Else returns false</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.RemoveReminder(System.Int32)">
            <summary>
            Remove a speicific reminder from procedural memory.
            </summary>
            <param name="iID">The reminder ID</param>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.RetrieveRemindersWhere(System.Predicate{BlueQuark.Reminder})">
            <summary>
            Retrieve all the reminders where the predicate is verified
            </summary>
            <param name="iMatchPredicate">The predicate to match reminders</param>
            <returns>A list of reminders</returns>
        </member>
        <member name="M:BlueQuark.ProceduralMemory.DisplayReminder(System.Int32)">
            <summary>
            Display a specific reminder
            </summary>
            <param name="iID">The reminder ID</param>
        </member>
        <member name="T:BlueQuark.Reminder">
            <summary>
            Thic class represents a reminder
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.ID">
            <summary>
            The ID of the reminder
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.Sender">
            <summary>
            The ID of sender
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.Content">
            <summary>
            The reminder content
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.Receivers">
            <summary>
            The list of receivers ID
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.EventDate">
            <summary>
            The event date at which the remender will issued
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.CreationDate">
            <summary>
            The creation date
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.Type">
            <summary>
            The reminder type
            </summary>
        </member>
        <member name="P:BlueQuark.Reminder.Precision">
            <summary>
            The reminder precision
            </summary>
        </member>
        <member name="M:BlueQuark.Reminder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Reminder.Copy">
            <summary>
            Make a copy of the reminder
            </summary>
            <returns>A new copy of the reminder</returns>
        </member>
        <member name="T:BlueQuark.RemindPrecision">
            <summary>
            The reminder precision
            </summary>
        </member>
        <member name="F:BlueQuark.RemindPrecision.DAY">
            <summary>
            Day precision
            </summary>
        </member>
        <member name="F:BlueQuark.RemindPrecision.HOUR">
            <summary>
            Hour precision
            </summary>
        </member>
        <member name="F:BlueQuark.RemindPrecision.MINUTE">
            <summary>
            Minute precision
            </summary>
        </member>
        <member name="T:BlueQuark.RemindType">
            <summary>
            Type of reminder
            </summary>
        </member>
        <member name="F:BlueQuark.RemindType.STICKY">
            <summary>
            A persistend reminder
            </summary>
        </member>
        <member name="F:BlueQuark.RemindType.ALARM">
            <summary>
            An event reminder
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.IsBusy">
            <summary>
            True if the locking toast is displayed
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Height">
            <summary>
            Gets the height in the screen in pixel
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.Width">
            <summary>
            Gets the width of the screen 
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.DPI">
            <summary>
            Gets the dots per inch of the screen. It is a measure of spatial printing or video or image scanner dot density, in particular the number of individual dots that can be placed in a line within the span of 1 inch (2.54 cm).
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.FrameRate">
            <summary>
            Gets the number of frame per second
            </summary>
        </member>
        <member name="P:BlueQuark.Screen.TargetFrameRate">
            <summary>
            Gets the target frame rate of the engine
            </summary>
        </member>
        <member name="M:BlueQuark.SlideSet.AddSlide``1">
            <summary>
            Add a sliding toast to the slide set. Slide are append from left to right. Up to 5 toasts in a slide. 
            </summary>
            <typeparam name="T">Type of the toast</typeparam>
            <returns>The added toast to configure</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoTo(System.Int32,System.Action)">
            <summary>
            Go to the wished toast. Make a swap transition if the wished toast is near to the current toast.
            </summary>
            <param name="iSlideIdx">The target toast index, must be between 0 and 4</param>
            <returns>True if the target toast is in bound</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoTo(BlueQuark.Internal.ASlideToast,System.Action)">
            <summary>
            Go to the wished toast. Make a swap transition if the wished toast is near to the current toast.
            </summary>
            <param name="iSlide">The target toast</param>
            <returns>True if the target toast is in bound</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoNext(System.Action)">
            <summary>
            Swap to the next toast
            </summary>
            <returns>True if the swap was well (there is at least one next toast)</returns>
        </member>
        <member name="M:BlueQuark.SlideSet.GoPrevious(System.Action)">
            <summary>
            Swap to the previous toast
            </summary>
            <returns>True if the swap was well (there is at least one previous toast)</returns>
        </member>
        <member name="T:BlueQuark.MotionDetectorRework">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Detect moving points in frame
            </summary>
        </member>
        <member name="M:BlueQuark.RoomDetector.RecognizeRoom(OpenCVUnity.Mat,System.Boolean@,System.Int32)">
            <summary>
            Returns room name or unidentified when finished
            If result not credible enough, finished is false to require more images
            </summary>
            <param name="iRGBFrame"></param>
            <param name="ioFinished"></param> 
            <param name="iReal"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.RoomDetector.LearnImage(OpenCVUnity.Mat,System.Int32)">
            <summary>
            Learn one image with its label
            </summary>
            <param name="iRGBFrame"></param>
            <param name="iLabel"></param>
        </member>
        <member name="T:BlueQuark.FaceDetector">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Detect moving points in frame
            </summary>
        </member>
        <member name="T:BlueQuark.AppCategory">
            <summary>
            Represents the different app categories
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.COMPANION">
            <summary>
            Companion category
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.EDUTAINMENT">
            <summary>
            Edutainment category
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.GAME">
            <summary>
            Game category
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.MULTIMEDIA">
            <summary>
            Multimedia category
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.UTILITY">
            <summary>
            Utility category
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.SECURITY">
            <summary>
            Security category
            </summary>
        </member>
        <member name="F:BlueQuark.AppCategory.OTHER">
            <summary>
            Other category
            </summary>
        </member>
        <member name="P:BlueQuark.Dialoger.DisplayedDialogID">
            <summary>
            Gets the UID of the current displayed dialog
            </summary>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast)</typeparam>
            <returns>The dialog info to argument with the method With(args)</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1(System.String)">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast)</typeparam>
            <returns>The dialog info to argument with the method With(args)</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Display``1(System.String,System.String)">
            <summary>
            Queue the wished dialog. It will displayed as soon as possible after any previous queued dialog. 
            Dialog can be set by using the method With(args) like this : Display().With(args).
            Toasts are displayed until Dialoger.Hide() is called.
            </summary>
            <typeparam name="D">Type of dialog (same as toast)</typeparam>
            <returns>The dialog info to argument with the method With(args)</returns>
        </member>
        <member name="M:BlueQuark.Dialoger.Hide">
            <summary>
            Hide the displayed dialog box 
            </summary>
        </member>
        <member name="T:BlueQuark.DeviceType">
            <summary>
            Represents the different device types
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.ANDROID_SMARTPHONE">
            <summary>
            Smartphone with android environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.ANDROID_TABLET">
            <summary>
            Tablet with android environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.WINDOWS_SMARTPHONE">
            <summary>
            Smartphone with windows environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.WINDOWS_TABLET">
            <summary>
            Table with windows environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.WINDOWS_COMPUTER">
            <summary>
            Computer with windows environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.OSX_COMPUTER">
            <summary>
            Computer with OSX environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.LINUX_COMPUTER">
            <summary>
            Computer with linux environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.IPHONE">
            <summary>
            Iphone device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.IPOD">
            <summary>
            Ipod device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.IPAD">
            <summary>
            Ipad device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.ANDROID_SMARTWATCH">
            <summary>
            Watch with android environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.APPLE_SMARTWATCH">
            <summary>
            Watch with OSX environment
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.PHOTO_DEVICE">
            <summary>
            Photo device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.MUSIC_DEVICE">
            <summary>
            Music device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.CAMERA">
            <summary>
            Camera device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.TV">
            <summary>
            Television device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.LIGHT_SYSTEM">
            <summary>
            Light system device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.COOK_SYSTEM">
            <summary>
            Cook system device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.DOOR_SYSTEM">
            <summary>
            Door system device
            </summary>
        </member>
        <member name="F:BlueQuark.DeviceType.SOUND_SYSTEM">
            <summary>
            Sound system device
            </summary>
        </member>
        <member name="T:BlueQuark.ConnectionType">
            <summary>
            Represents all the different connection types
            </summary>
        </member>
        <member name="F:BlueQuark.ConnectionType.WIFI">
            <summary>
            Wifi connection
            </summary>
        </member>
        <member name="F:BlueQuark.ConnectionType.BLUETOOTH">
            <summary>
            Bluetooth connection
            </summary>
        </member>
        <member name="F:BlueQuark.ConnectionType.WIRE">
            <summary>
            Wired connection
            </summary>
        </member>
        <member name="T:BlueQuark.ConnectedDevice">
            <summary>
            This class represent a device connected to Buddy
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.ID">
            <summary>
            ID of the device
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.Connection">
            <summary>
            The way the device is connected to Buddy
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.Type">
            <summary>
            The device type
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.SignalStrength">
            <summary>
            The strength of the signal
            </summary>
        </member>
        <member name="P:BlueQuark.ConnectedDevice.Name">
            <summary>
            The name of the device
            </summary>
        </member>
        <member name="T:BlueQuark.Photograph">
            <summary>
            This class represents a photo taken during a running app. Can be saved as PNG on the HDD
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.TimeStamp">
            <summary>
            The date time when the photo has been taken
            </summary>
        </member>
        <member name="P:BlueQuark.Photograph.Image">
            <summary>
            The photo as sprite
            </summary>
        </member>
        <member name="M:BlueQuark.Photograph.Update(UnityEngine.Sprite)">
            <summary>
            Update the stored image. Must be saved for permanent effect
            </summary>
            <param name="iNewImage">The new image to set</param>
            <returns>True if operation is successful</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Update(UnityEngine.Texture2D)">
            <summary>
            Update the stored image. Must be saved for permanent effect
            </summary>
            <param name="iNewImage">The new image to set</param>
            <returns>True if operation is successful</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Update(OpenCVUnity.Mat)">
            <summary>
            Update the stored image. Must be saved for permanent effect
            </summary>
            <param name="iNewImage">The new image to set</param>
            <returns>True if operation is successful</returns>
        </member>
        <member name="M:BlueQuark.Photograph.Save">
            <summary>
            Save the image on HDD. The Photo will be readable only for the running App
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Photograph.Delete">
            <summary>
            Delete the local version of the photo
            </summary>
        </member>
        <member name="T:BlueQuark.Language">
            <summary>
            Language for Speech to text, text to speech and sphinx settings.
            </summary>
        </member>
        <member name="F:BlueQuark.Language.EN">
            <summary>
            English language
            </summary>
        </member>
        <member name="F:BlueQuark.Language.FR">
            <summary>
            French language
            </summary>
        </member>
        <member name="F:BlueQuark.Language.IT">
            <summary>
            Italian language
            </summary>
        </member>
        <member name="F:BlueQuark.Language.DE">
            <summary>
            German language
            </summary>
        </member>
        <member name="F:BlueQuark.Language.JP">
            <summary>
            Japanese language
            </summary>
        </member>
        <member name="F:BlueQuark.Language.NL">
            <summary>
            Dutch language
            </summary>
        </member>
        <member name="F:BlueQuark.Language.KR">
            <summary>
            Korean language
            </summary>
        </member>
        <member name="T:BlueQuark.GCVDetectionType">
            <summary>
            Kind of detection request for Google Cloud Vision API
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.TYPE_UNSPECIFIED">
            <summary>
            Misc
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.FACE_DETECTION">
            <summary>
            Face information
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LANDMARK_DETECTION">
            <summary>
            Landmark (Eiffel tower, Golden Bridge, left eye, right hand...)
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LOGO_DETECTION">
            <summary>
            Logo detection (Coca cola ...)
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.LABEL_DETECTION">
            <summary>
            Labelization (desk, floor, robot, window, hand ...)
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.TEXT_DETECTION">
            <summary>
            Optical Character Recognition
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.SAFE_SEARCH_DETECTION">
            <summary>
            Does this content is safe for children ? (blood, violence, explicit scene ...)
            </summary>
        </member>
        <member name="F:BlueQuark.GCVDetectionType.IMAGE_PROPERTIES">
            <summary>
            Image properties (main color)
            </summary>
        </member>
        <member name="F:BlueQuark.TFModelType.MNIST">
            <summary>
            Read an image and outputs the number that's read
            </summary>
        </member>
        <member name="F:BlueQuark.TFModelType.INCEPTION">
            <summary>
            Inception-based model for Image Classification
            Deep Convolutional Network method
            </summary>
        </member>
        <member name="T:BlueQuark.LEDs">
            <summary>
            Light-Emitting Diode component of the robot. Corresponding to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
            <summary>
            Light-Emitting Diode component of the robot. Corresponding to the left arm base light, 
            the right arm base light and the robot heart light.
            </summary>
        </member>
        <member name="T:BlueQuark.Speakers">
            <summary>
            Speaker component of the robot. Allow you to handle multiple Speakers.
            </summary>
            <summary>
            Speaker component of the robot. Allow you to handle multiple Speakers.
            </summary>
        </member>
        <member name="T:BlueQuark.Wheels">
            <summary>
            Wheels (right and left) of the robot.
            </summary>
            <summary>
            Wheels (right and left) of the robot.
            </summary>
        </member>
        <member name="T:BlueQuark.AAppData">
            <summary>
            Your app data class must inherit from this class. Your app data will be store here.
            The data object will be serialized when the application is quited and unserialized the first that that GetInstance()
            will be called. Do never change the name of your {APP_NAME}Data class.
            </summary>
            <summary>
            Your app data class must inherit from this class. Your app data will be store here.
            The data object will be serialized when the application is quited and unserialized the first that that GetInstance()
            will be called. Do never change the name of your {APP_NAME}Data class.
            </summary>
        </member>
        <member name="F:BlueQuark.AAppData.sInstance">
            <summary>
            Instance of your data (singleton).
            </summary>
        </member>
        <member name="M:BlueQuark.AAppData.GetInstance``1">
            <summary>
            Retrieve your last save version of your data.
            </summary> 
            <typeparam name="T">Type of your data class</typeparam>
            <returns>Your data object</returns>
        </member>
        <member name="T:BlueQuark.AAppActivity">
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
            <summary>
            Activity base class to receive app event and managed app base methods (quit, load scene...). Do never change the name of your {APP_NAME}Activity class.
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Behaviour">
            <summary>
            Gather all interaction features
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Navigation">
            <summary>
            Gather all navigation features
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.WebService">
            <summary>
            Gather all web services (Facebook, Twitter, Spotify, meteo, Wolfram alpha) features
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Perception">
            <summary>
            Gather all perception (mainly vision) features
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Sensors">
            <summary>
            Gather all sensors
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Actuators">
            <summary>
            Gather all motors, LED and speakers
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Resources">
            <summary>
            Resource loader to retrieve Unity object. Check both Resources/ and downloaded Assetbundles. Allow you to retrieve the full path from the name of the raw file
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.GUI">
            <summary>
            Gather all UI handler (toaster, notifier, header)
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.IO">
            <summary>
            Gather WiFi, Bluetooth
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Vocal">
            <summary>
            Gather WiFi, Bluetooth
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Animator">
            <summary>
            Your optional Animator. You must init it by using {APP_NAME}Activity.Init(animator) static method
            </summary>
        </member>
        <member name="P:BlueQuark.AAppActivity.Objects">
            <summary>
            Stored objects from {APP_NAME}Activity.Init(animator, obj1, obj2...) static method
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnLoading(System.String[],System.Int32[],System.Single[])">
            <summary>
            Called when the app loading occur. You can proceed here your high pre-computes or data loading
            </summary>
            <param name="iStrArgs">Optional str args</param>
            <param name="iIntArgs">Optional int args</param>
            <param name="iSingleArgs">Optional float args</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnAwake">
            <summary>
            Called when the app is fully loaded and after all Awake() calls in the loaded App
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnStart">
            <summary>
            Called after all Start() calls in the loaded App
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnAlertReminder(System.Collections.Generic.List{BlueQuark.Reminder})">
            <summary>
            Called when a reminder alert rised
            </summary>
            <param name="iIncomingEvents">The array of rised reminders</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.OnQuit">
            <summary>
            Called when the application is currently unloading. It will be your last call
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.Init(UnityEngine.Animator,System.Object[])">
            <summary>
            This static method allow you to set basic param to your Activity. It must be done at the beginning of your app.
            </summary>
            <param name="iAnimator"></param>
            <param name="iParams"></param>
        </member>
        <member name="M:BlueQuark.AAppActivity.QuitApp">
            <summary>
            Quit the running app
            </summary>
        </member>
        <member name="M:BlueQuark.AAppActivity.AskForQuitApp(System.Boolean)">
            <summary>
            If set as true, ask confirmation for app quit
            </summary>
            <param name="iVal"></param>
        </member>
        <member name="M:BlueQuark.AAppActivity.LoadScene(System.Int32)">
            <summary>
            Load the scene {AppID}-{SceneIndex}
            </summary>
            <param name="iSceneIndex">Index of the scene (0, 1, 2...), where 0 is the main scene</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.Trigger(System.String)">
            <summary>
            Trigger the named trigger in the presetted animator
            </summary>
            <param name="iTriggerName">Trigger name</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.ResetTrigger(System.String)">
            <summary>
            Reset the named trigger in the presetted animator
            </summary>
            <param name="iTriggerName"></param>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetBool(System.String,System.Boolean)">
            <summary>
            Set the bool value of the named boolean in the presetted animator
            </summary>
            <param name="iBoolName">The bool name to set</param>
            <param name="iVal">Value of the boolean</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetBool(System.String)">
            <summary>
            Retrieve the value of the named boolean in the presetted animator
            </summary>
            <param name="iBoolName">Boolean name</param>
            <returns>The value of the named boolean</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetInteger(System.String,System.Int32)">
            <summary>
            Set the bool value of the named integer in the presetted animator
            </summary>
            <param name="iIntName">The integer name to set</param>
            <param name="iVal">Value of the integer</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetInteger(System.String)">
            <summary>
            Retrieve the value of the named integer in the presetted animator
            </summary>
            <param name="iIntName">Integer name</param>
            <returns>The value of the named integer</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.SetFloat(System.String,System.Single)">
            <summary>
            Set the bool value of the named float in the presetted animator
            </summary>
            <param name="iFloatName">The float name to set</param>
            <param name="iVal">Value of the float</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.GetFloat(System.String)">
            <summary>
            Retrieve the value of the named foat in the presetted animator
            </summary>
            <param name="iFloatName">Foat name</param>
            <returns>The value of the named foat</returns>
        </member>
        <member name="M:BlueQuark.AAppActivity.StartCoroutine(System.Collections.IEnumerator)">
            <summary>
            Begin a coroutine.
            </summary>
            <param name="iFunc">Your coroutine to start</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopCoroutine(System.Collections.IEnumerator)">
            <summary>
            Stop the coroutine
            </summary>
            <param name="iFunc">Your coroutine to stop</param>
        </member>
        <member name="M:BlueQuark.AAppActivity.StopAllCoroutines">
            <summary>
            Stop all started coroutines
            </summary>
        </member>
        <member name="T:BlueQuark.AppInfo">
            <summary>
            Meta data of an application. External dev should never explicitly use this class.
            It's an internal class for app managing.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ID">
            <summary>
            Unique application identifier
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ShortName">
            <summary>
            The string that will be used as directory / class name.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.CommercialName">
            <summary>
            The string that will be displayed in the menu / loading.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.MainScene">
            <summary>
            Application main scene (entrypoint). Error if NULL.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Authors">
            <summary>
            The app authors.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Version">
            <summary>
            Current installed app version
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.VersionStatus">
            <summary>
            Current installed app version type
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.VersionName">
            <summary>
            Current installed app version name
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Category">
            <summary>
            The app category
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Permissions">
            <summary>
            The app permissions
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.ActivityClassName">
            <summary>
            Application Activity fullname.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Data">
            <summary>
            Application data. Automaticaly serialized after unload app, and deserialized after app loading.
            </summary>
        </member>
        <member name="P:BlueQuark.AppInfo.Activity">
            <summary>
            Application Activity entrypoint for callback
            </summary>
        </member>
        <member name="M:BlueQuark.AppInfo.#ctor">
            <summary>
            AppInfo are build by deserialization inside the AppManager.
            </summary>
        </member>
        <member name="T:BlueQuark.AppManager">
            <summary>
            Loads, unloads apps and store transited data
            </summary>
            <summary>
            Loads, unloads apps and store transited data
            </summary>
        </member>
        <member name="M:BlueQuark.AppManager.GetAppCategory(System.String)">
            <summary>
            Gets the category from an installed application.
            </summary>
            <param name="iIdentifier">The app's scene, id, shortname, commercialname.</param>
            <returns>The application category.</returns>
        </member>
        <member name="M:BlueQuark.AppManager.StartApp(System.String,System.String[],System.Int32[],System.Single[])">
            <summary>
            Starts the specified application.
            </summary>
            <param name="iIdentifier">The app's scene, id, shortname, commercialname.</param>
            <returns>The application category.</returns>
        </member>
        <member name="T:BlueQuark.Buddy">
            <summary>
            Core of the Buddy Operating System.
            Gave access to robot control and tools like UI, Sensors, cloud access, resources and actuators managers.
            A Unique instance of Buddy is created in the whole application.
            </summary>
            <remarks>
            Access to Buddy's modules by using Buddy.[MODULE_NAME]
            </remarks>
        </member>
        <member name="P:BlueQuark.Buddy.Actuators">
            <summary>
            The master component (module) containing sub components responsible of moving and controlling the robot system.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Sensors">
            <summary>
            The master component (module) containing whole robot sensors. Sensors are used for detection and perception systems.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.IO">
            <summary>
            The master component (module) containing all IO hardware components like Bluetooth, WiFi or GPIO.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Resources">
            <summary>
            The master component (module) in charge of handling all application assets (scene, sprites, raw files, sounds ...).
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Cognitive">
            <summary>
            The master component (module) containing all cognitive aspect of the robot.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Behaviour">
            <summary>
            The master component (module) containing all behaviour component such as Mood or the Behaviour player.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.WebServices">
            <summary>
            The master component (module) containing all miscenalleous web service components.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Navigation">
            <summary>
            The navigation component (module) in charge of running one (or none) navigation strategy. 
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Perception">
            <summary>
            The master component (module) containing all sensor's base algorithms.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Vocal">
            <summary>
            The master component (module) for vocal management (say and listen).
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.GUI">
            <summary>
            The master component (module) containing all GUI built-in tools such like notification or contextual widgets.
            </summary>
        </member>
        <member name="P:BlueQuark.Buddy.Platform">
            <summary>
            The master component (module) handling all external data like apps, language or users. 
            </summary>
        </member>
        <member name="T:BlueQuark.Bluetooth">
            <summary>
            Bluetooth component of the robot
            </summary>
            <summary>
            Bluetooth component of the robot
            </summary>
        </member>
        <member name="T:BlueQuark.USB">
            <summary>
            Hard storage component of the robot
            </summary>
            <summary>
            Hard storage component of the robot
            </summary>
        </member>
        <member name="T:BlueQuark.WiFi">
            <summary>
            Allows you to access to tablet parameters and settings (WiFi, Bluetooth, accelerometers...).
            </summary>
            <summary>
            Allows you to access to tablet parameters and settings (WiFi, Bluetooth, accelerometers...).
            </summary>
        </member>
        <member name="T:BlueQuark.Navigation">
            <summary>
            Class able to run one chosen navigation strategy
            </summary>
            <summary>
            Class able to run one chosen navigation strategy
            </summary>
        </member>
        <member name="M:BlueQuark.Navigation.Run``1">
            <summary>
            Call and enable the requested exploration strategy type. If any strategy is running, stops it.
            Exploration strategies are : find something in the environment or probing in a specific area.
            </summary>
            <typeparam name="S">An exploration strategy type</typeparam>
            <returns>The strategy to parametrize</returns>
        </member>
        <member name="M:BlueQuark.Navigation.Stop">
            <summary>
            Stops the running navigation strategy. No effect if no running navigation strategy
            </summary>
        </member>
        <member name="T:BlueQuark.GoogleCloudVision">
            <summary>
            To use this feature, you must set iKey with your own Google vision API key.
            Available at https://console.cloud.google.com/projectselector/apis/credentials
            </summary>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,OpenCVUnity.Mat,BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iKey">Key to authorize request</param>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="iCallback">Callback with the output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,UnityEngine.Texture2D,BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iKey">Key to authorize request</param>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="iCallback">Callback with the output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="M:BlueQuark.GoogleCloudVision.Detect(System.String,System.Byte[],BlueQuark.GCVDetectionType,System.Action{BlueQuark.ObjectEntity[]},System.Int32)">
            <summary>
            Detect the wanted feature in the input image
            </summary>
            <param name="iKey">Key to authorize request</param>
            <param name="iImage">The image to retrieve info</param>
            <param name="iFeatureType">The kind of feature</param>
            <param name="iCallback">Callback with the output Annotate response</param>
            <param name="iMaxResult">Max wish results</param>
            <returns>IEnumerator for yield return</returns>
        </member>
        <member name="T:BlueQuark.MotionDetector">
            <summary>
            Tracker that tracks the position of a moving object 
            </summary>
            <summary>
            Detect moving points in frame
            </summary>
        </member>
        <member name="T:BlueQuark.Perception">
            <summary>
            This class contains all the base perception features (Face tracking, Detectors...)
            </summary>
            <summary>
            This class contains all the base perception features (Face tracking, Detectors...)
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ShadeProcessing">
            <summary>
            Color tool
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ThermalDetector">
            <summary>
            Thermal tool
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.QRCodeDetector">
            <summary>
            QRCode tool for read and write
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.MotionDetector">
            <summary>
            Feature to detect and track movement
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.MotionDetectorRework">
            <summary>
            Feature to detect and track movement
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.ObstacleDetector">
            <summary>
            Feature to detect arround obstacles
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.NoiseDetector">
            <summary>
            Feature to detect loud sound pike
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.KidnappingDetector">
            <summary>
            Use this feature to callback if Buddy is kidnapped
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.AprilTagsDetector">
            <summary>
            Feature to detect AprilTags
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.FaceDetector">
            <summary>
            Feature to detect Faces
            </summary>
        </member>
        <member name="P:BlueQuark.Perception.WavingDetector">
            <summary>
            Feature to detect short range Waving
            </summary>
        </member>
        <member name="M:BlueQuark.TensorFlow.ConvertToGrayscale(OpenCVUnity.Mat,System.Int32,System.Int32)">
            <summary>
            Converts a Mat into grayscale float array with desired output width and height
            </summary>
            <param name="iFrame">Frame that will be processed</param>
            <param name="iOutputWidth">Desired output width</param>
            <param name="iOutputHeight">Desired output height</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferMNISTLabel">
            <summary>
            Guess which number is shown in the image
            </summary>
            <returns>
            The string of the number guessed as first element, then the confidence level of classification
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferMNISTLabel(OpenCVUnity.Mat)">
            <summary>
            Guess which number is shown in the image
            </summary>
            <param name="iFrame">Frame that will be processed, as on OpenCV Mat</param>
            <returns>
            The string of the number guessed as first element, then the confidence level of classification
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferInceptionLabel">
            <summary>
            Guess what is seen in the image, associating a label with a probability associated
            </summary>
            <returns>
            An array of each detected element in the frame of the camera
            Each value in the array is formatted as follows : "label [confidence]"
            e.g. : "electric fan [0.865495]"
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InferInceptionLabel(OpenCVUnity.Mat)">
            <summary>
            Guess what is seen in the image, associating a label with a probability associated
            </summary>
            <param name="iFrame">Frame that will be processed, as on OpenCV Mat</param>
            <returns>
            An array of each detected element in the frame of the camera
            Each value in the array is formatted as follows : "label [confidence]"
            e.g. : "electric fan [0.865495]"
            </returns>
        </member>
        <member name="M:BlueQuark.TensorFlow.InitClassifier(BlueQuark.TFModelType)">
            <summary>
            Start the desired classifier model.
            </summary>
            <remarks>
            Only one model can be active at a time
            </remarks>
            <param name="iModel">The model that will be initialized</param>
        </member>
        <member name="M:BlueQuark.TensorFlow.InitClassifier(BlueQuark.TFModelType,System.String,System.String)">
            <summary>
            Start the desired classifier model.
            </summary>
            <remarks>
            Only one model can be active at a time
            </remarks>
            <param name="iModel">The model that will be initialized</param>
            <param name="iModelFile">The model file wanted for the chosen classifier</param>
            <param name="iLabelsFile">The corresponding labels for the classifier's output</param>
        </member>
        <member name="M:BlueQuark.TensorFlow.Predict">
            <summary>
            Gets current camera frame and feeds it into current active model.
            </summary>
            <remarks>
            Camera must be on for this method to work
            </remarks>
        </member>
        <member name="M:BlueQuark.TensorFlow.Predict(OpenCVUnity.Mat)">
            <summary>
            Gets current camera frame and feeds it into current active model.
            </summary>
            <param name="iFrame">Frame that's going to be analyzed as an OpenCV Mat</param>
        </member>
        <member name="M:BlueQuark.UserManager.GetCurrentUser">
            <summary>
            The current logged user
            </summary>
            <returns>A UserAccount copy of the current logged user</returns>
        </member>
        <member name="M:BlueQuark.UserManager.GetUsers">
            <summary>
            Buddy's user list. It's a copy, so any modification won't be keeped
            </summary>
            <returns>Copy of Buddy's users</returns>
        </member>
        <member name="M:BlueQuark.UserManager.IsCorrectRobotPassword(System.String)">
            <summary>
            Check if the passed string is equals to the robot global password
            </summary>
            <param name="iPassword">The password to check</param>
            <returns>True if input is equals to robot password</returns>
        </member>
        <member name="M:BlueQuark.UserManager.SetRobotPassword(System.String)">
            <summary>
            Set the robot password
            </summary>
            <param name="iPassword">The password to set. Must be a 4 digits string</param>
            <returns>True if the password was correctly setted</returns>
        </member>
        <member name="T:BlueQuark.Gender">
            <summary>
            Gender of the user
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.UNKNOWN">
            <summary>
            Unspecified gender.
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.MALE">
            <summary>
            Male gender
            </summary>
        </member>
        <member name="F:BlueQuark.Gender.FEMALE">
            <summary>
            Female gender
            </summary>
        </member>
        <member name="T:BlueQuark.SessionType">
            <summary>
            Session type of the user
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.USER">
            <summary>
            User session type
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.ADMIN">
            <summary>
            Administrator session type
            </summary>
        </member>
        <member name="F:BlueQuark.SessionType.GUEST">
            <summary>
            Guest session type
            </summary>
        </member>
        <member name="T:BlueQuark.UserAccount">
            <summary>
            User info, not used
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.ID">
            <summary>
            ID of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Email">
            <summary>
            Email of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.FirstName">
            <summary>
            Firstname of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.LastName">
            <summary>
            Lastname of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Gender">
            <summary>
            Gender of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.BirthDate">
            <summary>
            Birthdate of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Password">
            <summary>
            Password of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Session">
            <summary>
            Session type of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Permissions">
            <summary>
            List of permisssions of the account
            </summary>
        </member>
        <member name="P:BlueQuark.UserAccount.Preferences">
            <summary>
            User preferences link to this account
            </summary>
        </member>
        <member name="M:BlueQuark.UserAccount.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:BlueQuark.UserPref">
            <summary>
            This class represents user preferences
            </summary>
        </member>
        <member name="T:BlueQuark.Resources">
            <summary>
            Allow you to retrieve the full path from the name of the raw file
            </summary>
            <summary>
            Allow you to retrieve the full path from the name of the raw file
            </summary>
        </member>
        <member name="P:BlueQuark.Resources.AppRawDataPath">
            <summary>
            Allow you to retrieve the full path from the name of the raw file / directory
            </summary>
        </member>
        <member name="M:BlueQuark.Resources.GetString(System.String,BlueQuark.Context)">
            <summary>
            Retrieve the corresponding word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length)
            </summary>
            <param name="iKey">The key word corresponding to the wished word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, default value if not found</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetRandomString(System.String,BlueQuark.Context)">
            <summary>
            Retrieve a random word from the input key word. Checks first in app dict if exists, if not checks in native dict.
            Lookup speed in Th(iKey.Length)
            </summary>
            <param name="iKey">The key word corresponding to the wished random word</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>The word in the current language, default value if not found</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetPhoneticStrings(System.String,BlueQuark.Context)">
            <summary>
            Retrieve the corresponding list to the input iKey. Useful for multiple response handling with the SpeechToText
            </summary>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>List of strings that must sound similar</returns>
        </member>
        <member name="M:BlueQuark.Resources.ContainsPhonetic(System.String,System.String,BlueQuark.Context)">
            <summary>
            Proceed to a GetPhoneticsStrings(iKey, iContext = APP) and checks if one element on the closephonetic array is contained in iRef
            </summary>
            <param name="iRef">The sentence to compare to each word into the list</param>
            <param name="iKey">The key corresponding to the wished list</param>
            <param name="iContext">The context corresponding to the dictionary to use</param>
            <returns>True if the one element of the closephonetic array in contained in iRef sentence (not null and not empty), false otherwise</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetRawFullPath(System.String,BlueQuark.Context)">
            <summary>
            Allow you to retrieve the full path from the name of the raw file / directory
            </summary>
            <param name="iFilename">Name of the file / directory</param>
            <param name="iContext">The context corresponding to the path to find</param>
            <returns>Fullpath to the file (including the iFilename)</returns>
        </member>
        <member name="M:BlueQuark.Resources.Get``1(System.String,BlueQuark.Context)">
            <summary>
            Load the resource from Resource/ or from downloaded bundles.
            </summary>
            <typeparam name="T">Type of the resource</typeparam>
            <param name="iFilename">Name (without path/extension) of the resource</param>
            <param name="iContext">The context corresponding to the resource to load</param>
            <returns>The loaded resource. Null if not found</returns>
        </member>
        <member name="M:BlueQuark.Resources.GetStreamingAssetFullPath(System.String)">
            <summary>
            Gets the absolute path of the file contained in the native StreamingAssets folder of the base APK.
            </summary>
            <param name="iFilename">The name of the file</param>
            <returns>The absolute path of the file</returns>
        </member>
        <member name="T:BlueQuark.Battery">
            <summary>
            Battery component of the robot. Its autonomy is about 6-8 hours.
            Its voltage never should be under 9.5 volts
            </summary>
            <summary>
            Battery component of the robot. Its autonomy is about 6-8 hours.
            Its voltage never should be under 9.5 volts
            </summary>
        </member>
        <member name="T:BlueQuark.CliffSensor">
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            The final robot will have 4 of those sensors.
            </summary>
            <summary>
            Cliff sensor component of the robot. It allows to detect cliff and holes.
            The final robot will have 4 of those sensors.
            </summary>
        </member>
        <member name="T:BlueQuark.CliffSensors">
            <summary>
            Set of 7 cliff sensor components.
            </summary>
            <summary>
            Set of 7 cliff sensor components.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontFreeWheel">
            <summary>
            The front free wheel cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontLeftWheel">
            <summary>
            The front left cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.FrontRightWheel">
            <summary>
            The front right cliff sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackLeftWheel">
            <summary>
            The back left cliff sensor
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackRightWheel">
            <summary>
            The back right cliff sensor
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackLeftFreeWheel">
            <summary>
            The Back left free wheel cliff sensor
            </summary>
        </member>
        <member name="P:BlueQuark.CliffSensors.BackRightFreeWheel">
            <summary>
            The back right free wheel cliff sensor
            </summary>
        </member>
        <member name="T:BlueQuark.RGBCameraMode">
            <summary>
            Resolution (width, height) of the RGB camera in pixels.
            Can be setted with RGBCamera.Resolution = RGBCamResolution
            </summary>
        </member>
        <member name="T:BlueQuark.DepthCamera">
            <summary>
            Depth camera component of the robot. The real depth camera will have multiple modes (varing FPS and view distance).
            The simulated depth is computed with a shader. The point cloud is created from this compute.
            </summary>
            <summary>
            Depth camera component of the robot. The real depth camera will has multiple modes (varing FPS and view distance).
            The simulated depth is computed with a shader. The point cloud is created from this compute.
            </summary>
        </member>
        <member name="T:BlueQuark.InfraredSensor">
            <summary>
            Infra red sensor component of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
            <summary>
            Infra red sensor component of the robot. Use the IR sensor for directional and precise purpose like distance estimation.
            </summary>
        </member>
        <member name="T:BlueQuark.Microphones">
            <summary>
            Micro of the robot.
            </summary>
            <summary>
            Micro of the robot.
            </summary>
        </member>
        <member name="T:BlueQuark.TimeOfFlightSensors">
            <summary>
            Set of 6 Rangefinder sensors component.
            </summary>
            <summary>
            Set of 6 Time of flight sensors component.
            </summary>
        </member>
        <member name="T:BlueQuark.HDCamera">
            <summary>
            The robot Red-Green-Blue camera. You can easily open it with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCameraMode enumeration for more precision about resolution.
            </summary>
            <summary>
            The robot Red-Green-Blue camera. You can easily open it with the Open() method.
            It automatically be Close() when quitting an application.
            See RGBCamResolution enumeration for more precision about resolution.
            </summary>
        </member>
        <member name="M:BlueQuark.HDCamera.TakePhotograph(System.Action{BlueQuark.Photograph},System.Boolean,BlueQuark.FlashLightMode)">
            <summary>
            Asynchrone take photo feature. A callback will be called after photo will be taken 
            </summary>
            <param name="iOnEndTakePhoto">The callback with the taken photo. The photo is null if the operation was not successful</param>
            <param name="iMakeSound">Set as false to make a silent photo. Default to true</param>
            <param name="iFlashMode">Set the flash mode. Will be supported on the next version</param>
        </member>
        <member name="T:BlueQuark.HDCameraMode">
            <summary>
            Resolution (width, height) of the RGB camera in pixels.
            Can be setted with RGBCam.Resolution = RGBCamResolution
            </summary>
        </member>
        <member name="T:BlueQuark.ThermalCamera">
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
            <summary>
            The thermal sensor component of Buddy. Not available in simulation.
            </summary>
        </member>
        <member name="T:BlueQuark.UltrasonicSensor">
            <summary>
            Ultrasonic component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an IR sensor.
            </summary>
            <summary>
            Ultrasonic component of the robot. Use US for obstacle detection purpose because of reflectioness. 
            It is less precise than an IR sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.UltrasonicSensors">
            <summary>
            Set of 3 ultra sound sensor components
            </summary>
            <summary>
            Set of 2 ultra sonic sensor components
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensors.Left">
            <summary>
            Access to data structure for the left ultrasound sensor.
            </summary>
        </member>
        <member name="P:BlueQuark.UltrasonicSensors.Right">
            <summary>
            Access to data structure for the right ultrasound sensor.
            </summary>
        </member>
        <member name="T:BlueQuark.Explorer">
            <summary>
            This class represents the sidebar menu of Buddy
            </summary>
            <summary>
            This class represents the sidebar menu of Buddy
            </summary>
        </member>
        <member name="M:BlueQuark.Footer.AddOnLeft(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer left side
            </summary>
            <param name="iCustomGameObject">Gameobject to add</param>
        </member>
        <member name="M:BlueQuark.Footer.AddOnRight(UnityEngine.GameObject)">
            <summary>
            Add a custom gameobject on the Footer right side
            </summary>
            <param name="iCustomGameObject">Gameobject to add</param>
        </member>
        <member name="M:BlueQuark.Footer.Remove(UnityEngine.GameObject)">
            <summary>
            Remove an added gameobject
            </summary>
            <param name="iGameObject">Gameobject to remove</param>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnLeft``1">
            <summary>
            Create and add on the Footer left side a pre Footer built widget
            </summary>
            <typeparam name="FW">Type of the footer widget to build</typeparam>
            <returns>The fully built widget</returns>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnRight``1">
            <summary>
            Create and add on the Footer right side a pre Footer built widget
            </summary>
            <typeparam name="FW">Type of the footer widget to build</typeparam>
            <returns>The fully built widget</returns>
        </member>
        <member name="M:BlueQuark.Footer.Remove``1(``0)">
            <summary>
            Remove a footer widget
            </summary>
            <typeparam name="FW">Type of the widget</typeparam>
            <param name="iFooterWidget">Widget to remove</param>
        </member>
        <member name="M:BlueQuark.Footer.CreateOnAccount``1">
            <summary>
            Create and add on the Footer left side a pre Footer built widget
            </summary>
            <typeparam name="FW">Type of the footer widget to build</typeparam>
            <returns>The fully built widget</returns>
        </member>
        <member name="T:BlueQuark.Header">
            <summary>
            Utility toolbar on the top of the robot screen
            </summary>
            <summary>
            Utility toolbar on the top of the robot screen
            </summary>
        </member>
        <member name="M:BlueQuark.Header.DisplayParametersButton(System.Boolean)">
            <summary>
            Activate/Deactivate the top right parameter app button. Active by default at app start.
            </summary>
            <param name="iVal">Activate or deactivate the object</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayBoldTitle(System.String)">
            <summary>
            Activate and display a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iText">Text to display, must not be null or empty</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayLightTitle(System.String)">
            <summary>
            Activate and display a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iText">Text to display, must not be null or empty</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayComplexTitle(System.String,System.String)">
            <summary>
            Activate and display a top text. Only one kind of title can be displayed at the same time.
            </summary>
            <param name="iTopText">First part of the text (top-left). Can be null or empty but at least one argument must be consistent</param>
            <param name="iBottomText">Third part of the text (bottom-left). Can be null or empty but at least one argument must be consistent</param>
        </member>
        <member name="M:BlueQuark.Header.HideTitle">
            <summary>
            Hide any displayed title
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetCustomAppIcon(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set a custom top-left app icon 
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255)</param>
            <param name="iBackground">Background icon. Keep the previous icon if null</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255)</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomNotificationsButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Font)">
            <summary>
            Set a custom top-right notification icon
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255)</param>
            <param name="iBackground">Background icon. Keep the previous icon if null</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255)</param>
            <param name="iNbNotificationFont">Font of the unread notifcation number</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomParametersButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set a custom top-right parameter icon
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255)</param>
            <param name="iBackground">Background icon. Keep the previous icon if null</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255)</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomCloseButton(UnityEngine.Sprite,UnityEngine.Color,UnityEngine.Sprite,UnityEngine.Color)">
            <summary>
            Set a custom top-right close icon
            </summary>
            <param name="iIcon">Main icon. Keep the previous icon if null</param>
            <param name="iIconColor">Icon color. Default value is Color32(51, 51, 51, 255)</param>
            <param name="iBackground">Background icon. Keep the previous icon if null</param>
            <param name="iBackgroundColor">Background color. Default value is Color32(255, 255, 255, 255)</param>
        </member>
        <member name="M:BlueQuark.Header.SetCustomLightTitle(UnityEngine.Font)">
            <summary>
            Set a custom top-center light title
            </summary>
            <param name="iFont">The text font</param>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultAppIcon">
            <summary>
            Restore top-left app icon default display parameters
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultNotificationsButton">
            <summary>
            Restore top-right notifications default display parameters
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultParametersButton">
            <summary>
            Restore top-right notifications button default display parameters
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultLightTitle">
            <summary>
            Restore top-center light title default display parameters
            </summary>
        </member>
        <member name="M:BlueQuark.Header.SetDefaultCloseButton">
            <summary>
            Restore top-right close button default display parameters
            </summary>
        </member>
        <member name="M:BlueQuark.Header.DisplayAppIcon(System.Boolean)">
            <summary>
            Activate/Deactivate the top left app icon. Active by default at app start.
            </summary>
            <param name="iVal">Activate or deactivate the object</param>
        </member>
        <member name="M:BlueQuark.Header.DisplaySpinningWheel(System.Boolean)">
            <summary>
            Activate/Deactivate the top-right spinning wheel
            </summary>
            <param name="iVal">Activate or deactivate the object</param>
        </member>
        <member name="M:BlueQuark.Header.DisplayAppLayout(BlueQuark.AppInfo)">
            <summary>
            Activate the header in app layout mode. Display close/parameter/appicon.
            </summary>
            <param name="iApp">The app to setup</param>
        </member>
        <member name="M:BlueQuark.Header.Hide">
            <summary>
            Hide all items. Except notification.
            </summary>
        </member>
        <member name="T:BlueQuark.AlertNotification">
            <summary>
            Display a validation notification on the Top of the robot screen
            </summary>
            <summary>
            Display a validation notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:BlueQuark.AlertNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameters for alert notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnDelay">Callback function if the user click on delay</param>
            <param name="iTimer">Display time</param>
        </member>
        <member name="M:BlueQuark.AlertNotification.With(System.String,System.Action,System.Action,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameters for alert notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnDelay">Callback function if the user click on delay</param>
            <param name="iTimer">Display time</param>
        </member>
        <member name="T:BlueQuark.ConfirmationNotification">
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
            <summary>
            Display a notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:BlueQuark.ConfirmationNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameter for a confirmation notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnRepeat">Delegate on repeat</param>
            <param name="iTimer">Display time</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="M:BlueQuark.ConfirmationNotification.With(System.String,System.Action,System.Action,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameter for a confirmation notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnCancel">Delegate on cancel</param>
            <param name="iIcon">Left side icon</param>
            <param name="iTimer">Display time</param>
            <returns>The unique id of the notification</returns>
        </member>
        <member name="T:BlueQuark.MessageNotification">
            <summary>
            Display a message callback notification on the Top of the robot screen
            </summary>
            <summary>
            Display a message callback notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:BlueQuark.MessageNotification.With(System.String,System.Action,System.Action,System.Single)">
            <summary>
            Specify parameters for a received message notifcation
            </summary>
            <param name="iText">The text to display</param>
            <param name="iOnValidate">Delegate on validate</param>
            <param name="iOnReply">Callback method if user click on response</param>
            <param name="iTimer">Display time</param>
        </member>
        <member name="T:BlueQuark.SimpleNotification">
            <summary>
            Display a basic notification on the Top of the robot screen
            </summary>
            <summary>
            Display a basic notification on the Top of the robot screen
            </summary>
        </member>
        <member name="M:BlueQuark.SimpleNotification.With(System.String,System.Single)">
            <summary>
            Specify parameters for simple notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iTimer">Display time</param>
        </member>
        <member name="M:BlueQuark.SimpleNotification.With(System.String,UnityEngine.Sprite,System.Single)">
            <summary>
            Specify parameters for simple notification
            </summary>
            <param name="iText">Text to display</param>
            <param name="iIcon">Left side sprite icon</param>
            <param name="iTimer">Display time</param>
        </member>
        <member name="T:BlueQuark.Notifier">
            <summary>
            Display a notification on the top of the robot screen
            </summary>
            <summary>
            Display a notification on the top of the robot screen
            </summary>
        </member>
        <member name="P:BlueQuark.Notifier.IsBusy">
            <summary>
            Returns true if the notifier is processing/displaying something
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Display``1">
            <summary>
            Display the typed notification. After this call, use immediatly the With method to specify notification arguments
            </summary>
            <typeparam name="N">Type of the notification. Meteo, timer confirmation ... </typeparam>
            <returns>The not that will be displayed</returns>
        </member>
        <member name="M:BlueQuark.Notifier.DisplayUnread">
            <summary>
            Display all unread notifications
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Hide">
            <summary>
            Hide the current displayed notification(s)
            </summary>
        </member>
        <member name="M:BlueQuark.Notifier.Select(BlueQuark.Internal.NBox)">
            <summary>
            Set the specified notification as selected and unselect any other notification
            </summary>
            <param name="iNotification">Notification to select</param>
        </member>
        <member name="M:BlueQuark.Notifier.CloseCurrentNotification">
            <summary>
            Close and remove the current selected notification
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.IsBusy">
            <summary>
            Returns True if the Toaster is displaying
            </summary>
        </member>
        <member name="P:BlueQuark.Toaster.DisplayedToastID">
            <summary>
            Returns the ID of current displayed toast
            </summary>
        </member>
        <member name="M:BlueQuark.Toaster.Display``1">
            <summary>
            Queue the wished toast parameter. It will displayed as soon as possible after any previous queued toasts or slides. 
            Built in toast can be set by using the method With(args) like this : Display().With(toast_args).
            Toasts are displayed until Toaster.Hide() is called.
            </summary>
            <typeparam name="T">Type of toast</typeparam>
            <returns>The toast info to argument with the method With(args)</returns>
        </member>
        <member name="M:BlueQuark.Toaster.DisplaySlide">
            <summary>
            Queue a slide of toast. It will be displayed as soon as possible after any previous queued toasts or slides.
            Slides are displayed until Toaster.Hide() is called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Toaster.Hide">
            <summary>
            Hide the displayed toast 
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Screen">
            <summary>
            General purpose screen handling. Layer 1000.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Dialoger">
            <summary>
            Popup managing, display dialog box. Layer 500.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Notifier">
            <summary>
            Top screen notification manager. Layer 400.
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Explorer">
            <summary>
            Left side menu. Layer 300
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Header">
            <summary>
            Top screen buttons. Layer 210
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Footer">
            <summary>
            Bottom screen buttons. Layer 210
            </summary>
        </member>
        <member name="P:BlueQuark.GUI.Toaster">
            <summary>
            Middle screen buttons and layouts. Layer 200
            </summary>
        </member>
        <member name="T:BlueQuark.HSVColor">
            <summary>
            Structure containing HSV values for a color.
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.H">
            <summary>
            The "Hue" value (between 0 and 1).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.S">
            <summary>
            The "Saturation" value (between 0 and 1).
            </summary>
        </member>
        <member name="P:BlueQuark.HSVColor.V">
            <summary>
            The "Brightness" value (between 0 and 1).
            </summary>
        </member>
        <member name="T:BlueQuark.AStarNode">
            <summary>
            Unit node for A* algorithm.
            </summary>
        </member>
        <member name="F:BlueQuark.AStarNode.Comparer">
            <summary>
            Comparer for node comparaison
            </summary>
        </member>
        <member name="P:BlueQuark.AStarNode.Value">
            <summary>
            Heuristic value of node
            </summary>
        </member>
        <member name="P:BlueQuark.AStarNode.PrievousNode">
            <summary>
            Previous node (Dijkstra algo)
            </summary>
        </member>
        <member name="P:BlueQuark.AStarNode.AdjacentNodes">
            <summary>
            AdjacentNodes
            </summary>
        </member>
        <member name="M:BlueQuark.AStarNode.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:BlueQuark.AStarNode.Compare(BlueQuark.AStarNode,BlueQuark.AStarNode)">
            <summary>
            Comparaison function
            </summary>
            <param name="iFirstNode"></param>
            <param name="iSecondNode"></param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Node">
            <summary>
            Unit node for graph algorithms.
            </summary>
        </member>
        <member name="F:BlueQuark.Node.Comparer">
            <summary>
            Comparer for node comparison
            </summary>
        </member>
        <member name="P:BlueQuark.Node.Index">
            <summary>
            Index of the node
            </summary>
        </member>
        <member name="P:BlueQuark.Node.MinDistance">
            <summary>
            Min known distance
            </summary>
        </member>
        <member name="P:BlueQuark.Node.PrievousNode">
            <summary>
            Previous node (Dijkstra algo)
            </summary>
        </member>
        <member name="P:BlueQuark.Node.AdjacentNodes">
            <summary>
            AdjacentNodes
            </summary>
        </member>
        <member name="M:BlueQuark.Node.#ctor">
            <summary>
            Base constructor
            </summary>
        </member>
        <member name="M:BlueQuark.Node.Compare(BlueQuark.Node,BlueQuark.Node)">
            <summary>
            Comparison function
            </summary>
            <param name="iFirstNode"></param>
            <param name="iSecondNode"></param>
            <returns></returns>
        </member>
        <member name="T:BlueQuark.Pair`2">
            <summary>
            Create a pair of element.
            </summary>
            <typeparam name="A">Type of the first element</typeparam>
            <typeparam name="B">Type of the second element</typeparam>
        </member>
        <member name="P:BlueQuark.Pair`2.First">
            <summary>
            The first element
            </summary>
        </member>
        <member name="P:BlueQuark.Pair`2.Second">
            <summary>
            The second element
            </summary>
        </member>
        <member name="M:BlueQuark.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructor of the complete pair.
            </summary>
            <param name="iFirst">The first element</param>
            <param name="iSecond">The second element</param>
        </member>
        <member name="T:BlueQuark.PriorityQueue`1">
            <summary>
            C# Implementation of the priority queue
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.#ctor">
            <summary>
            Create a new priority queue.
            </summary>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Create a new priority queue with a specific comparator.
            </summary>
            <param name="iComparer">The element comparator</param>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
            <summary>
            Create a new priority queue with a specific comparator and a max size.
            </summary>
            <param name="iComparer">The element comparator</param>
            <param name="iCapacity">The max capacity of the queue</param>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.SwitchElements(System.Int32,System.Int32)">
            <summary>
            Switch two elements.
            </summary>
            <param name="iFirstIndex">Index of the first element</param>
            <param name="iSecondIndex">Index of the second element</param>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.OnCompare(System.Int32,System.Int32)">
            <summary>
            Compare two elements.
            </summary>
            <param name="iFirstIndex">Index of the first element</param>
            <param name="iSecondIndex">Index of the second element</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.Remove(`0)">
            <summary>
            Remove an element
            </summary>
            <param name="iItem"></param>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.Push(`0)">
            <summary>
            Add a new element in the queue.
            </summary>
            <param name="iItem"></param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.Pop">
            <summary>
            Return and delete the first element of the queue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.Update(`0)">
            <summary>
            Update the queue with the specific element.
            </summary>
            <param name="iItem">The element to update</param>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.Peek">
            <summary>
            Return the first element of the queue without delete it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.PriorityQueue`1.Clear">
            <summary>
            Clear the queue.
            </summary>
        </member>
        <member name="P:BlueQuark.PriorityQueue`1.Count">
            <summary>
            Number of elements in the queue.
            </summary>
        </member>
        <member name="T:BlueQuark.Tuple`3">
            <summary>
            Tuple of three elements
            </summary>
            <typeparam name="A">Type of the first element</typeparam>
            <typeparam name="B">Type of the second element</typeparam>
            <typeparam name="C">Type of the third element</typeparam>
        </member>
        <member name="P:BlueQuark.Tuple`3.First">
            <summary>
            The first element
            </summary>
        </member>
        <member name="P:BlueQuark.Tuple`3.Second">
            <summary>
            The second element
            </summary>
        </member>
        <member name="P:BlueQuark.Tuple`3.Third">
            <summary>
            The thirst elemnt
            </summary>
        </member>
        <member name="M:BlueQuark.Tuple`3.#ctor(`0,`1,`2)">
            <summary>
            Contructor of the complete tuple
            </summary>
            <param name="iFirst">The first element</param>
            <param name="iSecond">The second element</param>
            <param name="iThird">The third element</param>
        </member>
        <member name="M:BlueQuark.Tuple`3.#ctor">
            <summary>
            Basic contructor
            </summary>
        </member>
        <member name="T:BlueQuark.Utils">
            <summary>
            Common tools, serialization, mathematic functions and conversions
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_SCALAR_32">
            <summary>
            Buddy color (cyan like in 32 bits color)
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_SCALAR">
            <summary>
            Buddy color (cyan like in floating point values)
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR_32">
            <summary>
            Buddy color (cyan like in 32 bits color)
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.BUDDY_COLOR">
            <summary>
            Buddy color (cyan like in floating point values)
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_COLOR_32">
            <summary>
            Gray color used in UI
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.GRAY_COLOR">
            <summary>
            Gray color used in UI
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.SECOND_IN_MILLISECONDS">
            <summary>
            1000
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.MINUTE_IN_MILLISECONDS">
            <summary>
            60 * 1000
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.MINUTE_IN_SECONDS">
            <summary>
            60
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.HOUR_IN_SECONDS">
            <summary>
            60 * 60
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.DAY_IN_SECONDS">
            <summary>
            24 * 60 * 60
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.WEEK_IN_SECONDS">
            <summary>
            7 * 24 * 60 * 60
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.PI">
            <summary>
            PI
            </summary>
        </member>
        <member name="F:BlueQuark.Utils.PI_D">
            <summary>
            PI
            </summary>
        </member>
        <member name="M:BlueQuark.Utils.ScaleTexture2DFromMat(OpenCVUnity.Mat,UnityEngine.Texture2D)">
            <summary>
            Create / scale the input texture accordingly from the input mat
            </summary>
            <param name="iMat">Input matrix, only the size will be considered</param>
            <param name="iTexture">The created/resized texture</param>
            <returns>The created/resized texture</returns>
        </member>
        <member name="M:BlueQuark.Utils.Save(System.String,OpenCVUnity.Mat[],System.Single)">
            <summary>
            Save the video in the Data folder
            </summary>
            <param name="iPath">name of the video file to save to</param>
            <param name="iListMat">list of mat that will be stored in the video file</param>
            <param name="iFps">framerate of the video file</param>
        </member>
        <member name="M:BlueQuark.Utils.Save(System.String,UnityEngine.AudioClip)">
            <summary>
            Save the audio clip into a wav file in the data directory
            </summary>
            <param name="iPath">Full path name which will be used to save tha audio file</param>
            <param name="iClip">audioclip that will be saved</param>
            <returns>true if file saved</returns>
        </member>
        <member name="M:BlueQuark.Utils.TrimSilence(UnityEngine.AudioClip,System.Single)">
            <summary>
            Trim the beginning and end of an audioclip that can be considered as a silence 
            </summary>
            <param name="iClip">the audioclip to be trimmed</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence</param>
            <returns>the audioclip trimmed</returns>
        </member>
        <member name="M:BlueQuark.Utils.TrimSilence(System.Collections.Generic.List{System.Single},System.Single,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trim the beginning and end of an audioclip that can be considered as a silence 
            </summary>
            <param name="iSamples">samples of an audioclip</param>
            <param name="iMin">the threshold to decide if a part can be considered as a silence</param>
            <param name="iSpeakers">number of Speakers per frame</param>
            <param name="iFrequency">sample frequency of clip</param>
            <param name="iStreamed">true if clip is streamed</param>
            <returns>the audioclip trimmed</returns>
        </member>
        <member name="M:BlueQuark.Utils.Combine(UnityEngine.AudioClip[])">
            <summary>
            Combine several audioclip into one
            </summary>
            <param name="iClips">the array of audioclips</param>
            <returns>the audioclip obtained from the comination of several audioclips</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeCSV(System.String,System.Object[])">
            <summary>
            Serialize objects inside the specified file.
            </summary>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeCSV(System.String,System.Char)">
            <summary>
            Load the list of item from the specified csv file.
            </summary>
            <param name="iPath">File to load from</param>
            <param name="iSeparator">Separator token, ';' by default</param>
            <returns>The list of item. One string array per line.</returns>
        </member>
        <member name="M:BlueQuark.Utils.SerializeXML``1(``0,System.String)">
            <summary>
            Serializes an object.
            </summary>
            <typeparam name="T">Type of the object to serialize</typeparam>
            <param name="iSerializableObject">Object to serialize</param>
            <param name="iPath">Path to the file</param>
        </member>
        <member name="M:BlueQuark.Utils.UnserializeXML``1(System.String)">
            <summary>
            Deserializes an xml file into an object list
            </summary>
            <typeparam name="T">Type of the objet to deserialize</typeparam>
            <param name="iPath">Path to the file</param>
            <returns>The created object from the XML. Null if unexisting/bad file or bad filename</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uncompress(System.String,System.String)">
            <summary>
            Unzip the specified file to the specified location
            </summary>
            <param name="iZipFilePath">Zip file location</param>
            <param name="iLocation">Location to unzip</param>
        </member>
        <member name="M:BlueQuark.Utils.Compress(System.String,System.String[])">
            <summary>
            Create a zip file with the specified files
            </summary>
            <param name="iZipFileName">Zip file location</param>
            <param name="iFilesAndFolder">File or folder path to add into the zip</param>
        </member>
        <member name="M:BlueQuark.Utils.UpperFirst(System.String)">
            <summary>
            Make the first character to upper case
            </summary>
            <param name="iString">The input string to upper first</param>
            <returns>The string with an upper first character</returns>
        </member>
        <member name="M:BlueQuark.Utils.CollectionToString``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            Converts an T element array to a string. Elements are separate with a coma (without space).
            </summary>
            <typeparam name="T">Type of element inside the array</typeparam>
            <param name="iArray">The array</param>
            <param name="iSeparator">Between element separator in the final string. Space by default</param>
            <returns>the string value of the array</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.GetFolderPath(System.String)" -->
        <member name="M:BlueQuark.Utils.DeleteDirectory(System.String)">
            <summary>
            Delete the directory with its subdir
            </summary>
            <param name="iFolderName">Path to the directory</param>
        </member>
        <member name="M:BlueQuark.Utils.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copy a directory content to another location
            </summary>
            <param name="iSourceDirName">Path to the source directory</param>
            <param name="iDestDirName">Path to the destination directory</param>
            <param name="iCopySubDirs">Must copy sub directories ?</param>
        </member>
        <member name="M:BlueQuark.Utils.StructureToByteArray``1(``0,System.Int32)">
            <summary>
            Converts a structure into bytes array with marshaling.
            </summary>
            <typeparam name="T">Type of the structure</typeparam>
            <param name="iStructure">The structure to convert</param>
            <param name="iLength">The size of the structure. Must be specified for a complex structure</param>
            <returns>The data representation of the structure</returns>
        </member>
        <member name="M:BlueQuark.Utils.FindMostFrequentElement``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds the most frequent element in a list.
            </summary>
            <typeparam name="T">Type of elements of the list</typeparam>
            <param name="iCollection">The list</param>
            <returns>A pair containing the element and its occurences ratio (occ / size)</returns>
        </member>
        <member name="M:BlueQuark.Utils.MakeUniquePairs``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a list of unique pair for an original list of element.
            </summary>
            <typeparam name="T">Type of the elements</typeparam>
            <param name="iOriginalSet">The original list of elements</param>
            <returns>A list of unique pairs</returns>
        </member>
        <member name="M:BlueQuark.Utils.MakeUniquePairsID``1(System.Collections.Generic.List{``0})">
            <summary>
            Creates a list of unique id pair for an original list of element.
            </summary>
            <typeparam name="T">Type of the elements</typeparam>
            <param name="iOriginalSet">The original list of elements</param>
            <returns>A list of unique pairs of element id</returns>
        </member>
        <member name="M:BlueQuark.Utils.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value</param>
            <param name="iX2">Second value</param>
            <param name="iAlpha">Must be between 0 and 1</param>
            <returns>The interpolate value</returns>
        </member>
        <member name="M:BlueQuark.Utils.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Makes an interpolation between two values.
            </summary>
            <param name="iX1">First value</param>
            <param name="iX2">Second value</param>
            <param name="iAlpha">Must be between 0 and 1</param>
            <returns>The interpolate value</returns>
        </member>
        <member name="M:BlueQuark.Utils.Gaussian(System.Single,System.Single,System.Single)">
            <summary>
            Computes the gaussian probability based on iMean with a iStd standart deviation.
            </summary>
            <param name="iMean">Mean of the gaussian</param>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The gaussian probability of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Gaussian(System.Double,System.Double,System.Double)">
            <summary>
            Computes the gaussian probability based on iMean with a iStd standart deviation.
            </summary>
            <param name="iMean">Mean of the gaussian</param>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The gaussian probability of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.SimpleGaussian(System.Single,System.Single)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0 with a standart deviation of 1.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The simplified gausian probability of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.SimpleGaussian(System.Double,System.Double)">
            <summary>
            Computes the continuous simplified gaussian probability based on 0 with a standart deviation of 1.
            </summary>
            <param name="iStd">Standart Derivation of the gaussian</param>
            <param name="iValue">Value to compute</param>
            <returns>The simplified gausian probability of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uniform(System.Single,System.Single,System.Single)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value</param>
            <param name="iB">Upper value</param>
            <param name="iValue">Value to compute</param>
            <returns>The uniform probability of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Uniform(System.Double,System.Double,System.Double)">
            <summary>
            Computes the continuous uniform probability between A and B values.
            </summary>
            <param name="iA">Lower value</param>
            <param name="iB">Upper value</param>
            <param name="iValue">Value to compute</param>
            <returns>The uniform probability of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Hysteresis(System.Single,System.Single)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis</param>
            <param name="iValue">Input value to be computed</param>
            <returns>The delay value of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Hysteresis(System.Double,System.Double)">
            <summary>
            Computes the hysteresis value (delay effect).
            </summary>
            <remarks>
            Hysteresis is the time-based dependence of a system's output on present and past inputs.
            The dependence arises because the history affects the value of an internal state.
            The implemented hysteresis function looks like : (c - 1)^(x - 1) / c^x 
            </remarks>
            <param name="iCoeff">Coefficient parameter of the hysteresis</param>
            <param name="iValue">Input value to be computed</param>
            <returns>The delay value of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sigmoide(System.Single,System.Single,System.Single)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation</param>
            <param name="iCenter">The centered value of the function</param>
            <param name="iValue">The input value</param>
            <returns>The Sigmoid value of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Sigmoide(System.Double,System.Double,System.Double)">
            <summary>
            Computes the sigmoid function centered on iCenter of the iValue.
            </summary>
            <remarks>
            The centered sigmoid function looks like : 1 / (1 + exp(-lambda * x - center))
            </remarks>
            <param name="iLambda">Parameter of the function. Bigger lambda make smoother activation</param>
            <param name="iCenter">The centered value of the function</param>
            <param name="iValue">The input value</param>
            <returns>The Sigmoid value of iValue</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the signed angle in degrees (ccw) between the two vectors iv1 and iv2
            </summary>
            <param name="iV1">From vector</param>
            <param name="iV2">To vector</param>
            <returns>The signed angle in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3,OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the acute angle (in degrees) from 3 positions.
            It compute the angle at P1.
            </summary>
            <param name="iP0">First position</param>
            <param name="iP1">Second position, where the acute angle will be computed</param>
            <param name="iP2">Third position</param>
            <returns>The acute angle at the point iP1 in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector3[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(OpenCVUnity.Point[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.Angle(UnityEngine.Vector2[])">
            <summary>
            Computes the acute angle (in degrees) from 3 positions or from 2 vectors.
            It compute the angle at P1.
            </summary>
            <param name="iPositions">Positions</param>
            <returns>The acute angle at the point iPositions[1] in degrees</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            Makes an lower and upper Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iSup">The upper thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Int32,System.Int32)">
            <summary>
            Makes an lower Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Single,System.Single,System.Single)">
            <summary>
            Makes an lower and upper Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iSup">The upper thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Single,System.Single)">
            <summary>
            Makes an lower Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Single)">
            <summary>
            Computes the Rectified Linear Unit (ReLU) of iValue.
            </summary>
            <remarks>
            Quite similar to ln(1 + exp(x)) but faster to compute.
            </remarks>
            <param name="iValue"></param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Double,System.Double,System.Double)">
            <summary>
            Makes an lower and upper Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iSup">The upper thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Double,System.Double)">
            <summary>
            Makes an lower Threshold on the iValue. 
            </summary>
            <param name="iInf">The lower thresold</param>
            <param name="iValue">The value to be Thresholded</param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BlueQuark.Utils.ThresholdedValue(System.Double)">
            <summary>
            Computes the Rectified Linear Unit (ReLU) of iValue.
            </summary>
            <remarks>
            Quite similar to ln(1 + exp(x)) but faster to compute.
            </remarks>
            <param name="iValue"></param>
            <returns>The Thresholded value</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(UnityEngine.Vector3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(UnityEngine.Vector2[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(OpenCVUnity.Point[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadiusFromTrajectory(OpenCVUnity.Point3[])">
            <summary>
            Computes the radius of the circumscribes circle from an array of 3 positions.
            </summary>
            <param name="iPositions">Array of three points on the circle</param>
            <returns>The radius of the circle</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Single[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Double[])">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iCoordinates">Cartesian X Y values of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Single,System.Single)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate</param>
            <param name="iY">Y value of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BlueQuark.Utils.CartesianToPolar2D(System.Double,System.Double)">
            <summary>
            Converts X and X from cartesian coordinates into polar coordinates.
            </summary>
            <param name="iX">X value of the coordinate</param>
            <param name="iY">Y value of the coordinate</param>
            <returns>Polar coordinate (Rau, Theta)</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Single[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Double[])">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iCoordinates">Rau and Theta values of the coordinate, i.e : the radius 
            and the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Single,System.Single)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BlueQuark.Utils.PolarToCartesian2D(System.Double,System.Double)">
            <summary>
            Converts Rau and Theta from polar coordinates into 2D cartesian coordinates.
            </summary>
            <param name="iRau">Rau value of the coordinate, i.e : the radius of the coordinate</param>
            <param name="iTheta">Theta value of the coordinate, i.e : the angle of the coordinate</param>
            <returns>Cartesian coordinate (x, y)</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Single)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value</param>
            <returns>The degree value</returns>
        </member>
        <member name="M:BlueQuark.Utils.RadToDegrees(System.Double)">
            <summary>
            Converts the input radian value into degrees value.
            </summary>
            <param name="iRadValue">The radian value</param>
            <returns>The degree value</returns>
        </member>
        <member name="M:BlueQuark.Utils.DegreesToRad(System.Single)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value</param>
            <returns>The radian value</returns>
        </member>
        <member name="M:BlueQuark.Utils.DegreesToRad(System.Double)">
            <summary>
            Converts the input degrees value into radian value.
            </summary>
            <param name="iDegreesValue">The degree value</param>
            <returns>The radian value</returns>
        </member>
        <member name="M:BlueQuark.Utils.Texture2DToMat(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Convert the input Unity texture 2D into a OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture to convert</param>
            <param name="iType">The type of the output mat</param>
            <returns>The Mat of the texture 2D</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetMatFromFile(System.String,System.Int32)">
            <summary>
            Gets a Mat from a specific file (absolute path).
            Works with JPG and PNG.
            </summary>
            <param name="iFilename">The name of the file to convert</param>
            <param name="iType">The type of the output Mat</param>
            <returns>Mat of the file</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetTextureFromFile(System.String)">
            <summary>
            Gets a Texture 2D from a specific file (absolute path).
            Works with JPG and PNG
            </summary>
            <param name="iFilename">The name of the file to convert</param>
            <returns>Texture 2D of the file</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToColor32(OpenCVUnity.Mat,System.Byte[],UnityEngine.Color32[])">
            <summary>
            Gets an array of Color32 from a OpenCVUnity Mat
            </summary>
            <param name="iMat">The original mat</param>
            <param name="iBuff">The data buffer of the mat</param>
            <param name="iData32">The output color32 array</param>
        </member>
        <member name="M:BlueQuark.Utils.MatToTexture2D(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert</param>
            <returns>The texture 2D of the mat</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToColor32(OpenCVUnity.Mat)">
            <summary>
            Converts an OpenCVUnity Mat into an array of Color32.
            Careful, creates a texture 2D at each call.
            </summary>
            <param name="iMat">The mat to convert</param>
            <returns>The Color32 array of the mat</returns>
        </member>
        <member name="M:BlueQuark.Utils.MatToTexture2D(OpenCVUnity.Mat,UnityEngine.Texture2D,UnityEngine.Color32[])">
            <summary>
            Converts an OpenCVUnity Mat into an Unity texture 2D.
            </summary>
            <param name="iMat">The mat to convert</param>
            <param name="iTexture2D">The output texture2D</param>
            <param name="iBufferColors">The colors32 array of the texture</param>
        </member>
        <member name="M:BlueQuark.Utils.Texture2DToMat(UnityEngine.Texture2D,OpenCVUnity.Mat)">
            <summary>
            Converts an Unity Texture2D into an OpenCVUnity Mat.
            </summary>
            <param name="iTexture2D">The texture 2D to convert</param>
            <param name="iMat">The output OpenCVUnity Mat</param>
        </member>
        <member name="M:BlueQuark.Utils.WebCamTextureToMat(UnityEngine.WebCamTexture,OpenCVUnity.Mat,UnityEngine.Color32[])">
            <summary>
            Converts an Unity WebcamTexture into an OpenCVUnity Mat.
            </summary>
            <param name="iWebCamTexture">The webcamtexture to convert</param>
            <param name="iMat">The output OpenCVUnity Mat</param>
            <param name="iBufferColors">The color32 array of the input texture2D</param>
        </member>
        <member name="M:BlueQuark.Utils.RotateMat(OpenCVUnity.Mat,OpenCVUnity.Mat,System.Double,OpenCVUnity.Scalar)">
            <summary>
            Makes a rotation of iSrc to iDst of a iAngle.
            </summary>
            <param name="iSrc">Input mat</param>
            <param name="iDst">Output mat</param>
            <param name="iAngle">Angle in degrees</param>
            <param name="iBackgroundColor">Background color</param>
        </member>
        <member name="M:BlueQuark.Utils.SanityCheck(OpenCVUnity.Mat)">
            <summary>
            Checks inside the first Speaker of each pixel of a matrix 
            for unwanted value (infinity and NaN)
            </summary>
            <param name="iMat">The matrix to check in</param>
            <returns>False if there is a bad value</returns>
        </member>
        <member name="M:BlueQuark.Utils.DrawCustomRect(OpenCVUnity.Mat,OpenCVUnity.Rect,System.String,OpenCVUnity.Scalar)">
            <summary>
            Draw a fancy rect in the specified image.
            </summary>
            <param name="iImage">The image to draw in</param>
            <param name="iRect">The rect (points) to draw</param>
            <param name="iText">A no-mandatory text to draw above the rect</param>
            <param name="iColor">Color of the rect and text</param>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Rect)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iRect">The rect</param>
            <returns>The centroid</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point</param>
            <param name="iSecondPt">Second point</param>
            <returns>The centroid</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point</param>
            <param name="iSecondPt">Second point</param>
        </member>
        <member name="M:BlueQuark.Utils.Center(UnityEngine.Vector2,OpenCVUnity.Point)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point</param>
            <param name="iSecondPt">Second point</param>
            <returns>The centroid</returns>
        </member>
        <member name="M:BlueQuark.Utils.Center(OpenCVUnity.Point,UnityEngine.Vector2)">
            <summary>
            Returns a new point corresponding to the centroid of the rect.
            </summary>
            <param name="iFirstPt">First point</param>
            <param name="iSecondPt">Second point</param>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector2,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector3,OpenCVUnity.Point)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(OpenCVUnity.Point3,OpenCVUnity.Point3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Computes the euclidian distance between two points.
            </summary>
            <param name="iPointA">The first point</param>
            <param name="iPointB">The second point</param>
            <returns>The euclian distance between the first and the second point</returns>
        </member>
        <member name="M:BlueQuark.Utils.TriangleArea(System.Single,System.Single,System.Single)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length</param>
            <param name="iB">Second side length</param>
            <param name="iC">Third side length</param>
            <returns>The area</returns>
        </member>
        <member name="M:BlueQuark.Utils.TriangleArea(System.Double,System.Double,System.Double)">
            <summary>
            Computes triangle area with Heron formula.
            </summary>
            <param name="iA">First side length</param>
            <param name="iB">Second side length</param>
            <param name="iC">Third side length</param>
            <returns>The area</returns>
        </member>
        <member name="M:BlueQuark.Utils.CounterClockWise(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Check for counter clockwise style from points
            </summary>
            <param name="iA">First point</param>
            <param name="iB">Second point</param>
            <param name="iC">Third point</param>
        </member>
        <member name="M:BlueQuark.Utils.CounterClockWise(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Check for counter clockwise style from points
            </summary>
            <param name="iA">First point</param>
            <param name="iB">Second point</param>
            <param name="iC">Third point</param>
        </member>
        <member name="M:BlueQuark.Utils.IsIntersect(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>True if there is an intersection</returns>
        </member>
        <member name="M:BlueQuark.Utils.IsIntersect(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Checks if two lines intersect.
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>True if there is an intersection</returns>
        </member>
        <member name="M:BlueQuark.Utils.Intersection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the intersection point between two lines
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>The intersection point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Intersection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the intersection point between two lines
            </summary>
            <param name="iA">Point of the first line</param>
            <param name="iB">Point of the first line</param>
            <param name="iC">Point of the second line</param>
            <param name="iD">Point of the second line</param>
            <returns>The intersection point</returns>
        </member>
        <member name="M:BlueQuark.Utils.Projection(OpenCVUnity.Point,OpenCVUnity.Point,OpenCVUnity.Point)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB
            </summary>
            <param name="iPoint">The point</param>
            <param name="iA">Point of the line</param>
            <param name="iB">Point of the line</param>
            <returns>The projection</returns>
        </member>
        <member name="M:BlueQuark.Utils.Projection(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Returns the projection of iPoint over the line defined by iA and iB
            </summary>
            <param name="iPoint">The point</param>
            <param name="iA">Point of the line</param>
            <param name="iB">Point of the line</param>
            <returns>The projection</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Single,System.Single,System.Single)" -->
        <!-- Badly formed XML comment ignored for member "M:BlueQuark.Utils.CloseTo(System.Double,System.Double,System.Double)" -->
        <member name="M:BlueQuark.Utils.GetLocalIPAddress">
            <summary>
            Retrieve the local IP address
            </summary>
            <returns>The local IP address</returns>
        </member>
        <member name="M:BlueQuark.Utils.GetMACAddress">
            <summary>
            Retrieve the MAC address
            </summary>
            <returns>The MAC address</returns>
        </member>
        <member name="M:BlueQuark.Utils.CreateSpriteFromFile(System.String)">
            <summary>
            Create a sprite from an image path
            </summary>
            <param name="iPath">Path to the image (must be ARGB32)</param>
            <returns>The new sprite</returns>
        </member>
        <member name="M:BlueQuark.Utils.ShortestPath(BlueQuark.Node,BlueQuark.Node,System.Collections.Generic.List{BlueQuark.Node})">
            <summary>
            Gets the shortest path between the sourcenode and the destination node with Dijkstra algorithm.
            It has a polynomial complexity.
            </summary>
            <param name="iSourceNode">The source node of the path</param>
            <param name="iDestinationNode">The destination node of the path</param>
            <param name="iGraph">The graph with all nodes and weight between them</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.ShortestPathAStar(BlueQuark.AStarNode,BlueQuark.AStarNode,System.Collections.Generic.List{BlueQuark.AStarNode})">
            <summary>
            Gets the shortest path between the sourcenode and the destination node with A* algorithm.
            It has a polynomial complexity.
            </summary>
            <param name="iSourceNode">The source node of the path</param>
            <param name="iDestinationNode">The destination node of the path</param>
            <param name="iGraph">The graph with all nodes and weight between them</param>
            <returns></returns>
        </member>
        <member name="M:BlueQuark.Utils.ComputePaths(BlueQuark.Node)">
            <summary>
            Computes paths from the source node.
            </summary>
            <param name="iSourceNode">The source node</param>
        </member>
        <member name="M:BlueQuark.Utils.ComputePaths(BlueQuark.AStarNode)">
            <summary>
            Computes paths from the source node.
            </summary>
            <param name="iSourceNode">The source node</param>
        </member>
        <member name="M:BlueQuark.Utils.ShortestPathTo(BlueQuark.Node,BlueQuark.Node)">
            <summary>
            Gets the shorstest path between iSource and iDestination
            </summary>
            <param name="iSourceNode">The source node</param>
            <param name="iDestinationNode">the destination node</param>
            <returns>The list including the shorstest path between iSource and iDestination</returns>
        </member>
        <member name="M:BlueQuark.Utils.ShortestPathAStarTo(BlueQuark.AStarNode,BlueQuark.AStarNode)">
            <summary>
            Gets the shorstest path between iSource and iDestination
            </summary>
            <param name="iSourceNode">The source node</param>
            <param name="iDestinationNode">the destination node</param>
            <returns>The list including the shorstest path between iSource and iDestination</returns>
        </member>
        <member name="M:BlueQuark.Utils.ResetGraph(System.Collections.Generic.List{BlueQuark.Node})">
            <summary>
            Reset the graph for compute.
            </summary>
            <param name="iGraph">The graph</param>
        </member>
        <member name="M:BlueQuark.Utils.ResetGraph(System.Collections.Generic.List{BlueQuark.AStarNode})">
            <summary>
            Reset the graph for compute.
            </summary>
            <param name="iGraph">The graph</param>
        </member>
        <member name="P:BlueQuark.SpeechOutput.Utterance">
            <summary>
            If null, request will considerer last speech
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.BEGINNING_OF_SPEECH">
            <summary>
            User started to speak.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.MAYBE_SPEECH">
            <summary>
            Could be the beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.NO_SPEECH">
            <summary>
            The previously sent MAYBE_SPEECH event did not lead
            to and actual beginning of speech.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.TIMEOUT">
            <summary>
            A timeout occured.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.TRAILING_SILENCE">
            <summary>
            A trailing silence was detected.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.BAD_SIGNAL_NOISE_RATIO">
            <summary>
            The signal to noise ratio is too low.
            This event is generated if at the end of an utterance
            the signal/noise ratio remains below 12dB.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.OVERLOAD">
            <summary>
            The speech level is too loud.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.TOO_QUIET">
            <summary>
            The speech level is too weak.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.NO_SIGNAL">
            <summary>
            No or very low input signal.
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.POOR_MIC">
            <summary>
            This could mean that the microphone or the audio hardware is of poor quality. 
            </summary>
        </member>
        <member name="F:BlueQuark.SpeechRecognitionEvent.NO_LEADING_SILENCE">
            <summary>
            The recording apparantly does not start with leading silence.
            Possibly the speaker started speaking too soon,
            but because this detection is only energy based,
            other noise events at the start of the utterance may also trigger this condition.
            </summary>
        </member>
        <member name="T:BlueQuark.AndroidSpeechError">
            <summary>
            Error that can rise during the STT process
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_NETWORK_TIMEOUT">
            <summary>
            The network has encountered a time out 
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_NETWORK">
            <summary>
            Are you correcly connected ?
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_AUDIO">
            <summary>
            Microphone error. Another microphone may be currently in use ?
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_SERVER">
            <summary>
            The server does not respond
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_CLIENT">
            <summary>
            Internal error during sending
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_SPEECH_TIMEOUT">
            <summary>
            STT heard nothing
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_NO_MATCH">
            <summary>
            Unknown phrase or your sentence doesn't make any sense
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_RECOGNIZER_BUSY">
            <summary>
            Vocal recognition is busy
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_INSUFFICIENT_PERMISSIONS">
            <summary>
            Cannot access microphone
            </summary>
        </member>
        <member name="F:BlueQuark.AndroidSpeechError.ERROR_REQUEST_AGAIN">
            <summary>
            A request is made while another is processing
            </summary>
        </member>
        <member name="T:BlueQuark.Vocal">
            <summary>
            The master component (module) for vocal management (say and listen). This is a FIFO process.
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.DefaultOutputParameters">
            <summary>
            Any non null default parameter will be considered before any Speak (TTS) request
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.DefaultInputParameters">
            <summary>
            Any non null default parameter will be considered before any Listen (STT) request
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.EnableTrigger">
            <summary>
            Enable/Disable the OKAY BUDDY vocal trigger. If enabled the OnTrigger callback will be called after detection
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.ListenOnTrigger">
            <summary>
            Enable/Disable the auto listening mode after the vocal trigger. Listening response can be retrieve via the OnEndListening callback
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastHeardInput">
            <summary>
            The last heard (STT) input
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastSaidOutput">
            <summary>
            The last said (TTS) output
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.LastListeningEvent">
            <summary>
            The last listening event
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsSpeaking">
            <summary>
            Does the vocal module is currently speaking anything ?
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsListening">
            <summary>
            Does the vocal module is currently listening anything ?
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnTrigger">
            <summary>
            Called after any trigger detection. EnableTrigger must be set to true
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnEndSpeaking">
            <summary>
            Called after any end of TTS request
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnEndListening">
            <summary>
            Called after any end of STT request
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.OnListeningEvent">
            <summary>
            Called when any occurence of event/error during the listening process
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.Channel">
            <summary>
            The dedicated sound channel for vocal process. Equivalent to Buddy.Actuators.Speakers.Vocal
            </summary>
        </member>
        <member name="P:BlueQuark.Vocal.IsBusy">
            <summary>
            Does the vocal module is processing something ?
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.CompileGrammar(System.String)">
            <summary>
            Compile a VoCon grammar file. It can be then used for vocal recognition (listen) process
            </summary>
            <param name="iGrammar">Filename of the grammar</param>
            <returns>Does the grammar is correctly compiled ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.CompileGrammars(System.String[])">
            <summary>
            Compile VoCon grammar files. It can be then used for vocal recognition (listen) process
            </summary>
            <param name="iGrammars">Filename of the grammar</param>
            <returns>Does the grammar is correctly compiled ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(BlueQuark.SpeechOutput,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Say(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request. Any queued request will be executed as soon as possible after all previous requests
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>       
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iUtterance">The text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAndListen(BlueQuark.SpeechOutput,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request then a speech to text request
            </summary>
            <param name="iOutput">The output speech to proceed</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKey(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String[],System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayKeyAndListen(System.String,BlueQuark.Context,System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks the vocal to perform a text to speech request based on the stored value corresponding key inside the app dictionary.
            Check first inside GetRandomString(key), if empty check in GetString(key) storage. The perform a speech to text request.
            </summary>
            <param name="iKey">The key (from dictionary) of the text to tell</param>
            <param name="iContext">The context where to retrieve the string</param>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgain(System.Boolean)">
            <summary>
            Asks to repeat the last said sentence
            </summary>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgain(System.Action{BlueQuark.SpeechOutput},System.Boolean)">
            <summary>
            Asks to repeat the last said sentence
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String[],System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammar">the VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.SayAgainAndListen(System.Action{BlueQuark.SpeechOutput},System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Asks to repeat the last said sentence then starts a speech to text request
            </summary>
            <param name="iOnEndSpeaking">Callback called at the complete end of the output speech</param>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">the VoCon grammar to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String,System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammar">The VoCon grammar to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Listen(System.String[],System.Action{BlueQuark.SpeechInput},System.Action{BlueQuark.SpeechEvent},BlueQuark.SpeechRecognitionMode,System.Boolean)">
            <summary>
            Ask for a speech to text request. Any queued request will be executed as soon as possible after all previous requests 
            </summary>
            <param name="iSpeechGrammars">VoCon grammars to rely on for the speech to text request</param>
            <param name="iOnEndListening">Callback called at the complete end of the input speech</param>
            <param name="iOnListeningEvent">Callback called at any error / event during the input speech</param>
            <param name="iMode">The speech to text recognition mode</param>
            <param name="iEnqueue">A NON queued request WONT be executed if the module is already busy</param>
            <returns>Does the request is considered ?</returns>
        </member>
        <member name="M:BlueQuark.Vocal.Stop">
            <summary>
            Stops any speaking or listening process.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopSpeaking">
            <summary>
            Stops the running speaking process (text to speech). Do nothing if not speaking.
            </summary>
        </member>
        <member name="M:BlueQuark.Vocal.StopListening">
            <summary>
            Stops the running listening process (speech to text). Do nothing if not listening.
            </summary>
        </member>
        <member name="T:BlueQuark.SMTP">
            <summary>
            Enum of the different smtp that can be used to send mail
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.GMAIL">
            <summary>
            Gmail SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.YAHOO">
            <summary>
            Yahoo SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.HOTMAIL">
            <summary>
            Hotmail SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.BFR">
            <summary>
            BFR SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.ORANGE">
            <summary>
            Orange SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.FREE">
            <summary>
            Free SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.OUTLOOK">
            <summary>
            Outlook SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.SFR">
            <summary>
            SFR SMTP
            </summary>
        </member>
        <member name="F:BlueQuark.SMTP.WANADOO">
            <summary>
            Wanadoo SMTP
            </summary>
        </member>
        <member name="T:BlueQuark.EMailSender">
            <summary>
            Class that connect to an smtp server to send a mail
            </summary>
            <summary>
            Class that connects to an smtp server to send a mail
            </summary>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,BlueQuark.SMTP,BlueQuark.EMail,System.Action)">
            <summary>
            Creates an smtp client with the user's address and sends the mail. This method will do nothing if a previous mail has not been sent yet
            </summary>
            <param name="iFromAddress">mail adress of the user</param>
            <param name="iFromPwd">password of the mail adress</param>
            <param name="iSMTP">smtp server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp</param>
            <param name="iEMail">mail that will be send</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,System.String,BlueQuark.EMail,System.Action)">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent
            </summary>
            <param name="iFromAddress">mail adress of the user</param>
            <param name="iFromPwd">password of the mail adress</param>
            <param name="iSMTP">smtp server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp</param>
            <param name="iEMail">mail that will be send</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,System.String,System.Collections.Generic.List{BlueQuark.EMail},System.Action)">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent
            </summary>
            <param name="iFromAddress">mail adress of the user</param>
            <param name="iFromPwd">password of the mail adress</param>
            <param name="iSMTP">smtp server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp</param>
            <param name="iEMails">mails that will be send</param>
        </member>
        <member name="M:BlueQuark.EMailSender.Send(System.String,System.String,BlueQuark.SMTP,System.Collections.Generic.List{BlueQuark.EMail},System.Action)">
            <summary>
            Create an smtp client with the user address and send the mail. This method will do nothing if a previous mail has not yet been sent
            </summary>
            <param name="iFromAddress">mail adress of the user</param>
            <param name="iFromPwd">password of the mail adress</param>
            <param name="iSMTP">smtp server of the mail adress. You can use an adress from gmail, yahoo, hotmail or from bfr smtp</param>
            <param name="iEMails">mails that will be send</param>
        </member>
        <member name="T:BlueQuark.Weather">
            <summary>
            Weather API of the wished location
            </summary>
            <summary>
            Weather API of the wished location
            </summary>
        </member>
        <member name="M:BlueQuark.Weather.At(System.String,System.Action{BlueQuark.WeatherInfo[],BlueQuark.WeatherError},System.Int32)">
            <summary>
            Search for the weather of the current day. Can provide information up to the next week.
            </summary>
            <param name="iLocation">Asked location</param>
            <param name="iCallback">Callback with Weather info</param>
            <param name="iNumberOfInfos">Number of information to be retrieved. Use a value of around 60 to get weather for a week after.</param>
        </member>
        <member name="T:BlueQuark.WeatherInfo">
            <summary>
            This class represents the weather at a specific hour
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Location">
            <summary>
            Location of the weather info
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Hour">
            <summary>
            Hour of the day
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Day">
            <summary>
            Day of the month
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Date">
            <summary>
            Day with format YYYY-MM-DD
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Type">
            <summary>
            Weather type (Sunny, overcast, cloudy ...)
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.Temperature">
            <summary>
            The temperature in degrees
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.AverageWindSpeed">
            <summary>
            The speed of the wind in km/h
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.GustWindSpeed">
            <summary>
            The speed of the gust of wind in km/h
            </summary>
        </member>
        <member name="P:BlueQuark.WeatherInfo.DegreeWind">
            <summary>
            The direction of the wind in degree
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherError">
            <summary>
            Error that may happen during a Weather request
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.NONE">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.UNKNOWN_LOCATION">
            <summary>
            Unable to find latitude and longitude of provided location
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.GEOLOCALIZATION_FAILED">
            <summary>
            Localization of device failed
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.GEOLOCALIZATION_DISABLED">
            <summary>
            No location was provided and localization was disabled
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherError.REQUEST_FAILED">
            <summary>
            Weather request timed-out or returned an error
            </summary>
        </member>
        <member name="T:BlueQuark.WeatherType">
            <summary>
            Different weather type
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.UNKNOWN">
            <summary>
            Not sure about the weather
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SUNNY">
            <summary>
            Sunny weather
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.OVERCAST">
            <summary>
            Overcast weather
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.CLOUDY">
            <summary>
            Cloudy weather
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.PARTIALLY_CLOUDY">
            <summary>
            Partial Cloudy weather
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.RAIN">
            <summary>
            Rainny weather
            </summary>
        </member>
        <member name="F:BlueQuark.WeatherType.SNOWY">
            <summary>
            Snowy weather
            </summary>
        </member>
        <member name="T:BlueQuark.WebRTCListener">
            <summary>
            This part listens on the Crossbar server to know if there is any incoming call
            </summary>
            <summary>
            This part listens on the Crossbar server to know if there is any incoming call
            </summary>
        </member>
        <member name="M:BlueQuark.WebRTCListener.PublishNotification(System.String)">
            <summary>
            Format of the notification is the following : BuddyID / Title @ Message
            </summary>
            <param name="iMessage">Notification message to send</param>
        </member>
        <member name="M:BlueQuark.WebRTCListener.StartListener(System.String,System.String)">
            <summary>
            Initialize the Java Android Object that handles PubSub messages from Crossbar
            </summary>
            <param name="iUri">Crossbar uri</param>
            <param name="iRealm">Name of the realm</param>
        </member>
        <member name="M:BlueQuark.WebRTCListener.WaitSTTFinished(System.String)">
            <summary>
            Wait until STT has finished listening and is free to use
            </summary>
            <param name="iChatMessage">The Chat message received to process</param>
            <returns></returns>
        </member>
        <member name="P:BlueQuark.WebRTCListener.RemoteID">
            <summary>
            Used to know the Remote ID for RTC communication
            </summary>
        </member>
        <member name="P:BlueQuark.WebRTCListener.MessageFromChat">
            <summary>
            Use this to know if answer from STT comes from a Chat question
            </summary>
        </member>
        <member name="M:BlueQuark.WebRTCListener.PublishConnectionRequest(System.String)">
            <summary>
            Use this to make a call towards another Buddy
            </summary>
        </member>
        <member name="M:BlueQuark.WebRTCListener.OnConnectionRequest(System.String)">
            <summary>
            Called by Android plugin when message is received from the PubSub of Crossbar
            </summary>
            <param name="iMessage"></param>
        </member>
        <member name="M:BlueQuark.WebRTCListener.OnAndroidLog(System.String)">
            <summary>
            Called by Android plugin for Debug purposes
            </summary>
            <param name="iLogText"></param>
        </member>
        <member name="M:BlueQuark.WebRTCListener.SendNotification(System.String,System.String)">
            <summary>
            Send notification as Crossbar published event
            </summary>
            <param name="iTitle">Title of the notification</param>
            <param name="iMessage">Body message of the notification</param>
        </member>
        <member name="M:BlueQuark.WebRTCListener.ProcessAnswer(System.String)">
            <summary>
            Use this to send back the answer to the user.
            </summary>
            <param name="iAnwser"></param>
        </member>
        <member name="M:BlueQuark.WebRTCListener.OnMessageReceived(System.String)">
            <summary>
            Used by Android plugin when chat message is received through WebRTC and send it back to user
            </summary>
            <param name="iChatMessage">Chat message received through WebRTC</param>
        </member>
        <member name="T:BlueQuark.WebServices">
            <summary>
            Class that contains all remote API access (Email, Twitter, Facebook...)
            </summary>
            <summary>
            Class that contains all web API (Email, Twitter, Facebook...)
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.EMailSender">
            <summary>
            Email protocol to send emails
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Weather">
            <summary>
            Weather API of the wished location
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Wikipedia">
            <summary>
            Wikipedia data base API access
            </summary>
        </member>
        <member name="P:BlueQuark.WebServices.Twitter">
            <summary>
            Twitter API access to send tweet with or without picture attached
            </summary>
        </member>
        <member name="T:BlueQuark.Wikipedia">
            <summary>
            Wikipedia data base API access
            </summary>
            <summary>
            Wikipedia data base API access
            </summary>
        </member>
        <member name="M:BlueQuark.Wikipedia.SearchFor(System.String,System.Action{System.String})">
            <summary>
            Process a search abou the corresponding word
            </summary>
            <param name="iWord">The word to define</param>
            <param name="iCallback">Callback with the retrieve response</param>
        </member>
        <member name="T:BlueQuark.EMail">
            <summary>
            Class which contains the message, the subject and the list of attachements that will be sent by using MailSender
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.FilePaths">
            <summary>
            List of file path attached to the mail
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Addresses">
            <summary>
            List of adresses to send the mail
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Subject">
            <summary>
            Subject of the mail
            </summary>
        </member>
        <member name="P:BlueQuark.EMail.Body">
            <summary>
            Body of the mail
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String,System.String[])">
            <summary>
            create a mail with provided parameters
            </summary>
            <param name="iSubject">subject of the mail</param>
            <param name="iBody">body of the mail</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor(System.String,System.String)">
            <summary>
            create a mail with provided parameters
            </summary>
            <param name="iSubject">subject of the mail</param>
            <param name="iBody">body of the mail</param>
        </member>
        <member name="M:BlueQuark.EMail.#ctor">
            <summary>
            Create a mail with default parameters
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.AddTexture2D(UnityEngine.Texture2D,System.String)">
            <summary>
            Save a texture 2d as a png in the folder then add it to the mail
            </summary>
            <param name="iTexture">texture to add to save and add to the mail</param>
            <param name="iFilePath">file path</param>
        </member>
        <member name="M:BlueQuark.EMail.AddFile(System.String)">
            <summary>
            Add file in the streaming asset folder
            </summary>
            <param name="iFilePath">file path</param>
        </member>
        <member name="M:BlueQuark.EMail.AddTo(System.String)">
            <summary>
            Add a receiver af the mail
            </summary>
            <param name="iAddress">adress to send to</param>
        </member>
        <member name="M:BlueQuark.EMail.ClearTo">
            <summary>
            Clear the list of adress to send to
            </summary>
        </member>
        <member name="M:BlueQuark.EMail.ClearFileAttachement">
            <summary>
            Clear the list of file attached to the mail
            </summary>
        </member>
    </members>
</doc>
